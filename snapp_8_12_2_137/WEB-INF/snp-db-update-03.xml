<ROOT><SQLUPDATELIST><SQLUPDATE><ADDEDBY>OliviaDeSouza</ADDEDBY><SQLVERSION>3.598</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: 
  Drop field tbLedgerRef.LedgerRuleSerial
  Add field tbLedgerRef.LedgerRuleId</REASON><TABLENAMES>tbLedgerRef</TABLENAMES></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.597</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New index on HoldDateTime added to tbExtMediaCode</REASON><TABLENAMES>tbExtMediaCode</TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Olivia</ADDEDBY><SQLVERSION>3.596</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: Add field tbLedgerRef.LedgerRuleSerial</REASON><TABLENAMES>tbLedgerRef</TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.595</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>CREATE  TABLE tbSaleChannelPriceGroup</REASON><TABLENAMES>tbSaleChannelPriceGroup</TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.594</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch:
1) add PriceGroupTagId to tbProduct
2) create index
3) create foreign key</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>LucaColombo</ADDEDBY><SQLVERSION>3.593</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch: add tbLog.ServerId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.592</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch add tbSaleToken.DocTemplateId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.591</SQLVERSION><RMTRACKLINK>SIT-15179</RMTRACKLINK><REASON>Dynamic Patch: 
drop tbProduct.IDVerificationMessage add  tbProduct.ManualVerificationMessage
patch to move from ID Verification to Manual Verification</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.590</SQLVERSION><RMTRACKLINK>SIT-15179</RMTRACKLINK><REASON>Dynamic Patch: add field tbProduct.IDVerificationMessage</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.589</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0..6] Create table tbTransactionUpsell
[7..16] Create table tbConsUpsell</REASON><TABLENAMES>tbTransactionUpsell
tbConsUpsell</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE  TABLE tbTransactionUpsell ( 
	TransactionUpsellId  uniqueidentifier      NOT NULL,
	TransactionId        uniqueidentifier      NOT NULL,
	SourceProductId      uniqueidentifier      NULL,
	TargetProductId      uniqueidentifier      NOT NULL,
	UpsellType           smallint      NOT NULL,
	Quantity             smallint      NOT NULL,
	CONSTRAINT PK_TransactionUpsell PRIMARY KEY  ( TransactionUpsellId ) 
 );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TransactionUpsell_TransactionId ON tbTransactionUpsell ( TransactionId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TransactionUpsell_SourceProductId ON tbTransactionUpsell ( SourceProductId ) WHERE SourceProductId IS NOT NULL;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TransactionUpsell_TargetProductId ON tbTransactionUpsell ( TargetProductId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionUpsell ADD CONSTRAINT FK_TransactionUpsell_Transaction FOREIGN KEY ( TransactionId ) REFERENCES tbTransaction( TransactionId ) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionUpsell ADD CONSTRAINT FK_TransactionUpsell_SourceProduct FOREIGN KEY ( SourceProductId ) REFERENCES tbProduct( ProductId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionUpsell ADD CONSTRAINT FK_TransactionUpsell_TargetProduct FOREIGN KEY ( TargetProductId ) REFERENCES tbProduct( ProductId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  TABLE tbConsUpsell ( 
	ConsUpsellId         uniqueidentifier      NOT NULL,
	FiscalDate           date                  NOT NULL,
	SourceProductId      uniqueidentifier      NULL,
	TargetProductId      uniqueidentifier      NOT NULL,
	UpsellType           smallint              NOT NULL,
	Quantity             smallint              NOT NULL,
	UserAccountId        uniqueidentifier      NULL,
	WorkstationId        uniqueidentifier      NOT NULL,
	CONSTRAINT PK_ConsUpsell PRIMARY KEY  ( ConsUpsellId ) 
 );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_ConsUpsell_SourceProductId ON tbConsUpsell ( SourceProductId, FiscalDate );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_ConsUpsell_TargetProductId ON tbConsUpsell ( TargetProductId, FiscalDate );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_ConsUpsell_UserAccountId ON tbConsUpsell ( UserAccountId ) WHERE UserAccountId IS NOT NULL;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE  INDEX UQ_ConsUpsell_FiscalDate ON tbConsUpsell ( FiscalDate, UserAccountId, WorkstationId, TargetProductId, SourceProductId, UpsellType );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_ConsUpsell_WorkstationId ON tbConsUpsell ( WorkstationId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbConsUpsell ADD CONSTRAINT FK_ConsUpsell_SourceProduct FOREIGN KEY ( SourceProductId ) REFERENCES tbProduct( ProductId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbConsUpsell ADD CONSTRAINT FK_ConsUpsell_TargetProduct FOREIGN KEY ( TargetProductId ) REFERENCES tbProduct( ProductId ) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbConsUpsell ADD CONSTRAINT FK_ConsUpsell_UserAccount FOREIGN KEY ( UserAccountId ) REFERENCES tbAccount( AccountId ) ON DELETE SET NULL;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbConsUpsell ADD CONSTRAINT FK_ConsUpsell_Workstation FOREIGN KEY ( WorkstationId ) REFERENCES tbWorkstation( WorkstationId ) ON DELETE CASCADE;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.588</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: add field tbRole.Active</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Olivia</ADDEDBY><SQLVERSION>3.587</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch: Add new field to index UQ_ProductPriceAdvance on tbProductPriceAdvance</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.586</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch: Invalidate PaymentMethod cache</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.585</SQLVERSION><RMTRACKLINK>SIT-14104</RMTRACKLINK><REASON>Dynamic patch: drop tbProductRevenueDateWeight.WeightType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>JurgenGuraj</ADDEDBY><SQLVERSION>3.584</SQLVERSION><RMTRACKLINK>SIT-14826</RMTRACKLINK><REASON>DynamicPatch: patch LedgerRuleTemplateCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.583</SQLVERSION><RMTRACKLINK>SIT-14104</RMTRACKLINK><REASON>DynamicPatch: drop table tbProductRevenueDateWeight and recreate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.582</SQLVERSION><RMTRACKLINK>SIT-14104</RMTRACKLINK><REASON>DynamicPatch: create table tbProductRevenueDateWeight</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.581</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch... add tbProductUpsell.BindPerformance</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>ugog</ADDEDBY><SQLVERSION>3.580</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dummy patch to regenerate jenkins test db</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.579</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch add index IX_ExtMediaCode_IndividualCouponId to tbExtMediaCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.578</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch add IndividualCouponIdcolumn to tbExtMediaCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>JurgenGuraj</ADDEDBY><SQLVERSION>3.577</SQLVERSION><RMTRACKLINK>13221</RMTRACKLINK><REASON>DYNAMIC PATCH: DROP tbSaleItemPromo</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.576</SQLVERSION><RMTRACKLINK>12066</RMTRACKLINK><REASON>Dynamic patch added AutoCompleteOnPayment, AutoCompleteDocTemplateId column to tbDocTemplate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.575</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch tbAccountOpenOrderLog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.574</SQLVERSION><RMTRACKLINK>SIT-14024</RMTRACKLINK><REASON>DynamicPatch:  tbMembershipPoint.ExpirationManualChange</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.573</SQLVERSION><RMTRACKLINK>12651</RMTRACKLINK><REASON>DYNAMIC PATCH: delete tbTask for task-saletoken-purge</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.572</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DYNAMIC PATCH: DROP tbLedgerConsQueue</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.571</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DYNAMIC PATCH: Add tbLedger.LedgerSequence</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.570</SQLVERSION><RMTRACKLINK>SIT-14737</RMTRACKLINK><REASON>DynamicPatch:  change tbPaymentCard.CardType column type to nvarchar(15)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.569</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch: create table tbSaleItemAccrual</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Olivia</ADDEDBY><SQLVERSION>3.568</SQLVERSION><RMTRACKLINK>SIT-14022</RMTRACKLINK><REASON>DynamicPatch: Add column TimeUnitType to tbProductPriceAdvance</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.567</SQLVERSION><RMTRACKLINK>SIT-14806</RMTRACKLINK><REASON>DynamicPatch: New index WebAuthStatus+CreateDateTime on tbWebAuth</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.566</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTask2ServerProfile</REASON><TABLENAMES>tbTask2ServerProfile</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE  TABLE tbTask2ServerProfile ( 
	TaskId               uniqueidentifier      NOT NULL,
	ServerProfileId      uniqueidentifier      NOT NULL,
	CONSTRAINT PK_Task2ServerProfile PRIMARY KEY  ( TaskId, ServerProfileId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Task2ServerProfile_ServerProfileId ON tbTask2ServerProfile ( ServerProfileId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTask2ServerProfile ADD CONSTRAINT FK_Task2ServerProfile_TaskId FOREIGN KEY ( TaskId ) REFERENCES tbTask( TaskId ) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTask2ServerProfile ADD CONSTRAINT FK_Task2ServerProfile_ServerProfileId FOREIGN KEY ( ServerProfileId ) REFERENCES tbServerProfile( ServerProfileId );

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.565</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch: Add column PayByLink to 
tbDocTemplate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.564</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch: Add column SettleTransactionArcUd to tbPortfolioSlotLog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.563</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch: Add column TransactionArcUd to tbHistoryLog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.562</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch: Add column ArchivedTickets to tbInstallmentContract</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.561</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch: add tbPaymentCredit.SettleTransactionArcId </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.560</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch: add tbAccountExposureLog.TransactionArcId </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.559</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch: add tbAccountDepositLog.TransactionArcId </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.558</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.557</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch add field tbExtensionPackage.IconName</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.556</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch: add field tbTicket.ArchivedTickets</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.555</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New column tbProduct.TaxablePrice </REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.554</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch:
- add ArchivedTickets and ArchivedMedias fields to tbTransaction</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.553</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch:
- add ArchivedTickets and ArchivedMedias fields to tbSale</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.552</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch:
-  FK_SaleItem_Ticket
- tbTicketRenew and tbTicketUpgrade archiving columns renaned</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.551</SQLVERSION><RMTRACKLINK>SIT-13328</RMTRACKLINK><REASON>Dynamic patch.
Added AccountFlag ExposureBalanceNotInitialized</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.550</SQLVERSION><RMTRACKLINK>SIT-13040</RMTRACKLINK><REASON>Dynamic patch.
Added tbPerformance.LastCapacityThreshold</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.549</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: add index IX_Media_TransactionArcId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.548</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch. rename tbMedia.TransactionArcRef into TransactionArcId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.547</SQLVERSION><RMTRACKLINK>SIT-13040</RMTRACKLINK><REASON>Dynamic Patch: 
- create table tbEventCapacityThreshold
- create table tbEventCapacityThresholdDetail
- add tbEvent.CapacityThresholdDeltaMins</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.546</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: 
- add tbTax.ExemptibleExplicit
- create table tbAccountTaxExempt2Tax</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.545</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- add   to IX_Login_LastLoginDateTime  LoginStatus (if not already exists)
-add  PreventInactiveUserBlock to tbRole</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.544</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: add tbMedia.TransactionArcRef</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.543</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch add index IX_Sale_Archived</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.542</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch.
Add field tbEvent.StopBookingWindowMinutes</REASON><TABLENAMES>tbEvent</TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.541</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch.
Add field tbEvent.RedemptionCacheDeltaHours</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.540</SQLVERSION><RMTRACKLINK>14370</RMTRACKLINK><REASON>Dynamic Patch: inavalidate promo rule cache  </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.539</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: refactor tbRepository indexes</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.538</SQLVERSION><RMTRACKLINK>SIT-14322</RMTRACKLINK><REASON>Dynamic Patch: add tbTransaction.ToBeFinalized</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.537</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: add tbEvent.WaiverDocTemplateId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>LucaColombo</ADDEDBY><SQLVERSION>3.536</SQLVERSION><RMTRACKLINK>SIT-14207</RMTRACKLINK><REASON>Dynamic Patch: 
Add tbTransactionCommission.CommissionTax

Add tbCommission.TaxProfileId and tbCommission.RoundingType and tbCommission.CalculateOnGrossPrice</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Olivia</ADDEDBY><SQLVERSION>3.535</SQLVERSION><RMTRACKLINK>SIT-14203</RMTRACKLINK><REASON>Dynamic Patch:
Change tbHistoryLog and tbOutboundQueue foreign keys CASCADE option</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.534</SQLVERSION><RMTRACKLINK>SIT-13953</RMTRACKLINK><REASON>Dynamic Patch: Add field tbTransaction.LedgerRegRule</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>LucaColombo</ADDEDBY><SQLVERSION>3.533</SQLVERSION><RMTRACKLINK>SIT-13097</RMTRACKLINK><REASON>Dynamic Patch: Add field tbRedemptionCommissionRule.TaxProfileId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>LucaColombo</ADDEDBY><SQLVERSION>3.532</SQLVERSION><RMTRACKLINK>13094</RMTRACKLINK><REASON>Dynamic Patch: alter column tbRedemptionCommissionRule.MembershipPointId to nullable 

Update tbRedemptionCommissionRule.MembershipPointId  to NULL when tbRedemptionCommissionRule.CalculationAmountType is 20</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>LucaColombo</ADDEDBY><SQLVERSION>3.531</SQLVERSION><RMTRACKLINK>13094</RMTRACKLINK><REASON>Dynamic Patch: add field tbRedemptionCommissionRule.CalculationAmountType </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.530</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: add field tbPerformanceSetDetail.Quantity</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.529</SQLVERSION><RMTRACKLINK>SIT-13985</RMTRACKLINK><REASON>Dynamic patch:
Added tbLedgerRule.AutoRevertLedgerAccountId, tbLedgerRule.AutoRevertLocationType, tbLedgerRule.AutoRevertLocationId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.528</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch: add LastLoginDateTime to tbLogin</REASON><TABLENAMES>tbLogin</TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>LucaColombo</ADDEDBY><SQLVERSION>3.527</SQLVERSION><RMTRACKLINK>SIT-13381</RMTRACKLINK><REASON>Dynamic Patch: new tbIndividualCoupon.MembershipPlanProductId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.526</SQLVERSION><RMTRACKLINK>SIT-13985</RMTRACKLINK><REASON>Dynamic Patch: new tbLedgerAccount.AlffectClearing flag</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>LucaColombo</ADDEDBY><SQLVERSION>3.525</SQLVERSION><RMTRACKLINK>SIT-14056</RMTRACKLINK><REASON>DYNAMIC PATCH: create tbMembershipPointAccrualRule2PaymentMethod

Add field tbMembershipPointAccrualRule.RestrictPaymentMethodsType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.524</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DYNAMIC PATCH: create tbLedgerRuleTemplateDate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.523</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DYNAMIC PATCH: Add field tbSaleItem.FeeType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.522</SQLVERSION><RMTRACKLINK>SIT-13044</RMTRACKLINK><REASON>Dynamic Patch: Add field tbPortfolioSlotLog.PerformanceExpireDate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Olivia</ADDEDBY><SQLVERSION>3.521</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: Add field tbLedgerRuleTemplate.CategoryId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Olivia</ADDEDBY><SQLVERSION>3.520</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: Add field tbCalendar.CategoryId </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.519</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: create index on tbPaymentData</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.518</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: Add tbProductGuest.BindPerformance</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>dbalzano</ADDEDBY><SQLVERSION>3.517</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>dynamic patch</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.516</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: drop tbProductPayPerUse</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.515</SQLVERSION><RMTRACKLINK>SIT-13044</RMTRACKLINK><REASON>Dynamic patch: add column to tbPortfolioSlotLog.PerformanceId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Luca Colombo</ADDEDBY><SQLVERSION>3.514</SQLVERSION><RMTRACKLINK>SIT-13692</RMTRACKLINK><REASON>Dynamic patch: new column TbSaleItemTax.TaxRate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.513</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: Create table tbProductMembershipPointRule</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Olivia</ADDEDBY><SQLVERSION>3.512</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.511</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: FK_RepositoryIndex_Repository CASCADE</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.510</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: add field tbRepository.DocTemplateId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.509</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch: add tbDocTemplate.CsvIncludeBOM</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.508</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch: add tbOutboundQueue.EntityRef</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.507</SQLVERSION><RMTRACKLINK>SIT-13706</RMTRACKLINK><REASON>Increase tbSaleItem.PriceQuoteToken from 100 to 256</REASON><TABLENAMES>tbSaleItem</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItem
alter column PriceQuoteToken varchar(256)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.506</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch: add PaymentAbort to tbPluginPaymentMethod</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.505</SQLVERSION><RMTRACKLINK>SIT-13302</RMTRACKLINK><REASON>New tbCommission.CommissionAmountType field</REASON><TABLENAMES>tbCommission</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCommission add CommissionAmountType smallint not NULL constraint DF_Commission_CommissionAmountType default (10)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCommission drop constraint DF_Commission_CommissionAmountType
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.504</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch: installment contract FKs</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.503</SQLVERSION><RMTRACKLINK>SIT-13653</RMTRACKLINK><REASON>Dynamic patch: New tbSaleItem.StatTax field</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.502</SQLVERSION><RMTRACKLINK>SIT-13302</RMTRACKLINK><REASON>Refactoring tbTransactionCommission
1) CommissionId &amp; FinanceGroupTagId from mandatory to nullable
2) New boolea field ExternalPricing </REASON><TABLENAMES>tbTransactionCommission</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_TransactionCommission_CommisionId on tbTransactionCommission

if exists (select 1 from sys.indexes where name = 'IX_TransactionCommission_FinanceGroupTagId' and object_id = OBJECT_ID('tbTransactionCommission')) 
begin
  drop index IX_TransactionCommission_FinanceGroupTagId on tbTransactionCommission
end

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionCommission
alter column CommissionId uniqueidentifier null

alter table tbTransactionCommission
alter column FinanceGroupTagId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_TransactionCommission_CommisionId ON tbTransactionCommission (CommissionId) WHERE CommissionId is not null

CREATE INDEX IX_TransactionCommission_FinanceGroupTagId ON tbTransactionCommission (FinanceGroupTagId) WHERE FinanceGroupTagId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionCommission
add ExternalPricing Bit NOT NULL constraint DF_TransactionCommission_ExternalPricing default (0) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionCommission drop constraint DF_TransactionCommission_ExternalPricing
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.501</SQLVERSION><RMTRACKLINK>SIT-13129</RMTRACKLINK><REASON>Dynamic Patch: invalidate reward point because not done when enhanced tbMembershipPointExchangeRate table</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.500</SQLVERSION><RMTRACKLINK>SIT-13299</RMTRACKLINK><REASON>Add field GateCategoryConfigurationType to tbProductRevenueDate</REASON><TABLENAMES>tbProductRevenueDate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbProductRevenueDate
ADD GateCategoryConfigurationType smallint NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.499</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: index IX_ConsAPI_ConsolidateType_DateTime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.498</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch: FK cascades</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Olivia</ADDEDBY><SQLVERSION>3.497</SQLVERSION><RMTRACKLINK>SIT-13159</RMTRACKLINK><REASON>Dynamic patch:
New fields  ValidDateFrom  and  ValidDateTo in tbRepository</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.496</SQLVERSION><RMTRACKLINK>SIT-13379</RMTRACKLINK><REASON>Dynamic patch:
New field PackageTicketId in tbTicket</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.495</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch:
create table tbMembershipPointAccrualRule</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.494</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Foreign Keys for archiving</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbMediaCode 
DROP CONSTRAINT FK_MediaCode_Media;

ALTER TABLE tbMediaCode
ADD CONSTRAINT FK_MediaCode_Media FOREIGN KEY (MediaId) REFERENCES tbMedia (MediaId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbExtMediaCode 
DROP CONSTRAINT FK_ExtMediaCode_Media;

ALTER TABLE tbExtMediaCode
ADD CONSTRAINT FK_ExtMediaCode_Media FOREIGN KEY (MediaId) REFERENCES tbMedia (MediaId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleItemDetailMaterial 
DROP CONSTRAINT FK_SaleItemDetailMaterial_SaleItemDetail;

ALTER TABLE tbSaleItemDetailMaterial
ADD CONSTRAINT FK_SaleItemDetailMaterial_SaleItemDetail FOREIGN KEY (SaleItemDetailId) REFERENCES tbSaleItemDetail (SaleItemDetailId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleItemDetailRevalidate 
DROP CONSTRAINT FK_SaleItemDetailRevalidate_SaleItemDetail;

ALTER TABLE tbSaleItemDetailRevalidate
ADD CONSTRAINT FK_SaleItemDetailRevalidate_SaleItemDetail FOREIGN KEY (SaleItemDetailId) REFERENCES tbSaleItemDetail (SaleItemDetailId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleItemDetailRevenue 
DROP CONSTRAINT FK_SaleItemDetailRevenue_SaleItemDetail;

ALTER TABLE tbSaleItemDetailRevenue
ADD CONSTRAINT FK_SaleItemDetailRevenue_SaleItemDetail FOREIGN KEY (SaleItemDetailId) REFERENCES tbSaleItemDetail (SaleItemDetailId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionItem
DROP CONSTRAINT FK_TransactionItem_Transaction;

ALTER TABLE tbTransactionItem
ADD CONSTRAINT FK_TransactionItem_Transaction FOREIGN KEY (TransactionId) REFERENCES tbTransaction (TransactionId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPayment
DROP CONSTRAINT FK_Payment_Transaction;

ALTER TABLE tbPayment
ADD CONSTRAINT FK_Payment_Transaction FOREIGN KEY (TransactionId) REFERENCES tbTransaction (TransactionId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbShopCart
DROP CONSTRAINT FK_ShopCart_Transaction;

ALTER TABLE tbShopCart
ADD CONSTRAINT FK_ShopCart_Transaction FOREIGN KEY (TransactionId) REFERENCES tbTransaction (TransactionId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleItem
DROP CONSTRAINT FK_SaleItem_Sale;

ALTER TABLE tbSaleItem
ADD CONSTRAINT FK_SaleItem_Sale FOREIGN KEY (SaleId) REFERENCES tbSale (SaleId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleItem2AttributeItem
DROP CONSTRAINT FK_SaleItem2AttributeItem_SaleItem;

ALTER TABLE tbSaleItem2AttributeItem
ADD CONSTRAINT FK_SaleItem2AttributeItem_SaleItem FOREIGN KEY (SaleItemId) REFERENCES tbSaleItem (SaleItemId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleItemDetail
DROP CONSTRAINT FK_SaleItemDetail_SaleItem;

ALTER TABLE tbSaleItemDetail
ADD CONSTRAINT FK_SaleItemDetail_SaleItem FOREIGN KEY (SaleItemId) REFERENCES tbSaleItem (SaleItemId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleItemTax
DROP CONSTRAINT FK_SaleItemTax_SaleItem;

ALTER TABLE tbSaleItemTax
ADD CONSTRAINT FK_SaleItemTax_SaleItem FOREIGN KEY (SaleItemId) REFERENCES tbSaleItem (SaleItemId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPaymentCredit
DROP CONSTRAINT FK_PaymentCredit_Payment;

ALTER TABLE tbPaymentCredit
ADD CONSTRAINT FK_PaymentCredit_Payment FOREIGN KEY (PaymentId) REFERENCES tbPayment (PaymentId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPaymentCurrency
DROP CONSTRAINT FK_PaymentCurrency_Payment;

ALTER TABLE tbPaymentCurrency
ADD CONSTRAINT FK_PaymentCurrency_Payment FOREIGN KEY (PaymentId) REFERENCES tbPayment (PaymentId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPaymentData
DROP CONSTRAINT FK_PaymentData_Payment;

ALTER TABLE tbPaymentData
ADD CONSTRAINT FK_PaymentData_Payment FOREIGN KEY (PaymentId) REFERENCES tbPayment (PaymentId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPaymentDoc
DROP CONSTRAINT FK_PaymentDoc_Payment;

ALTER TABLE tbPaymentDoc
ADD CONSTRAINT FK_PaymentDoc_Payment FOREIGN KEY (PaymentId) REFERENCES tbPayment (PaymentId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPaymentInstallment
DROP CONSTRAINT FK_PaymentInstallment_Payment;

ALTER TABLE tbPaymentInstallment
ADD CONSTRAINT FK_PaymentInstallment_Payment FOREIGN KEY (PaymentId) REFERENCES tbPayment (PaymentId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPaymentWallet
DROP CONSTRAINT FK_PaymentWallet_Payment;

ALTER TABLE tbPaymentWallet
ADD CONSTRAINT FK_PaymentWallet_Payment FOREIGN KEY (PaymentId) REFERENCES tbPayment (PaymentId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbWebAuth
DROP CONSTRAINT FK_WebAuth_Payment;

ALTER TABLE tbWebAuth
ADD CONSTRAINT FK_WebAuth_Payment FOREIGN KEY (PaymentId) REFERENCES tbPayment (PaymentId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSale2Account
DROP CONSTRAINT FK_Sale2Account_Sale;

ALTER TABLE tbSale2Account
ADD CONSTRAINT FK_Sale2Account_Sale FOREIGN KEY (SaleId) REFERENCES tbSale (SaleId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSale2Performance
DROP CONSTRAINT FK_Sale2Performance_SaleId;

ALTER TABLE tbSale2Performance
ADD CONSTRAINT FK_Sale2Performance_Sale FOREIGN KEY (SaleId) REFERENCES tbSale (SaleId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSale2SaleTab
DROP CONSTRAINT FK_Sale2SaleTab_SaleId;

ALTER TABLE tbSale2SaleTab
ADD CONSTRAINT FK_Sale2SaleTab_Sale FOREIGN KEY (SaleId) REFERENCES tbSale (SaleId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleApprove
DROP CONSTRAINT FK_SaleApprove_Sale;

ALTER TABLE tbSaleApprove
ADD CONSTRAINT FK_SaleApprove_SaleId FOREIGN KEY (SaleId) REFERENCES tbSale (SaleId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleFlag
DROP CONSTRAINT FK_SaleFlag_Sale;

ALTER TABLE tbSaleFlag
ADD CONSTRAINT FK_SaleFlag_Sale FOREIGN KEY (SaleId) REFERENCES tbSale (SaleId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleMembership
DROP CONSTRAINT FK_SaleMembership_Sale;

ALTER TABLE tbSaleMembership
ADD CONSTRAINT FK_SaleMembership_Sale FOREIGN KEY (SaleId) REFERENCES tbSale (SaleId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSalePromotion
DROP CONSTRAINT FK_SalePromotion_Sale;

ALTER TABLE tbSalePromotion
ADD CONSTRAINT FK_SalePromotion_Sale FOREIGN KEY (SaleId) REFERENCES tbSale (SaleId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleRefund
DROP CONSTRAINT FK_SaleRefund_Sale;

ALTER TABLE tbSaleRefund
ADD CONSTRAINT FK_SaleRefund_Sale FOREIGN KEY (SaleId) REFERENCES tbSale (SaleId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleToken
DROP CONSTRAINT FK_SaleToken_Sale;

ALTER TABLE tbSaleToken
ADD CONSTRAINT FK_SaleToken_Sale FOREIGN KEY (SaleId) REFERENCES tbSale (SaleId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransaction
DROP CONSTRAINT FK_Transaction_Sale;

ALTER TABLE tbTransaction
ADD CONSTRAINT FK_Transaction_Sale FOREIGN KEY (SaleId) REFERENCES tbSale (SaleId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbNotifyRuleOrder2Sale
DROP CONSTRAINT FK_NotifyRuleOrder2Sale_Sale;

ALTER TABLE tbNotifyRuleOrder2Sale
ADD CONSTRAINT FK_NotifyRuleOrder2Sale_Sale FOREIGN KEY (SaleId) REFERENCES tbSale (SaleId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbNotifyRuleOrder2Sale
DROP CONSTRAINT FK_NotifyRuleOrder2Sale_NotifyRule;

ALTER TABLE tbNotifyRuleOrder2Sale
ADD CONSTRAINT FK_NotifyRuleOrder2Sale_NotifyRule FOREIGN KEY (NotifyRuleId) REFERENCES tbNotifyRule (NotifyRuleId) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.493</SQLVERSION><RMTRACKLINK>13326</RMTRACKLINK><REASON>Dynamic Patch:
Add fields to tbAccessFinance: AutoAltPaymentTokenId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.492</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbTicketUpgrade for archiving</REASON><TABLENAMES>tbTicketUpgrade</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketUpgrade
ALTER COLUMN SourceTicketId uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketUpgrade
ALTER COLUMN RootTicketId uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketUpgrade
ADD
  SourceArchivedTicketId uniqueidentifier NULL,  
  SourceArchivedTicketCode varchar(50) NULL,  
  RootArchivedTicketId uniqueidentifier NULL,  
  RootArchivedTicketCode varchar(50) NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TicketUpgrade_SourceArchivedTicketId ON tbTicketUpgrade ( SourceArchivedTicketId ) WHERE SourceArchivedTicketId IS NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TicketUpgrade_RootArchivedTicketId ON tbTicketUpgrade ( RootArchivedTicketId ) WHERE RootArchivedTicketId IS NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketUpgrade DROP CONSTRAINT FK_TicketUpgrade_Ticket
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketUpgrade
ADD CONSTRAINT FK_TicketUpgrade_Ticket FOREIGN KEY (TicketId) REFERENCES tbTicket (TicketId) ON DELETE CASCADE
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.491</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbTicketRenew for archiving</REASON><TABLENAMES>tbTicketRenew</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketRenew
ALTER COLUMN SourceTicketId uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketRenew
ADD
  SourceArchivedTicketId uniqueidentifier NULL,  
  SourceArchivedTicketCode varchar(50) NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TicketRenew_SourceArchivedTicketId ON tbTicketRenew ( SourceArchivedTicketId ) WHERE SourceArchivedTicketId IS NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketRenew DROP CONSTRAINT FK_TicketRenew_Ticket
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketRenew
ADD CONSTRAINT FK_TicketRenew_Ticket FOREIGN KEY (TicketId) REFERENCES tbTicket (TicketId) ON DELETE CASCADE
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.490</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch:
Add fields to tbLog: AltEntityType and AltEntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.489</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch:
Changing tbTicket foreign key with CASCADE option</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.488</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch:
Add fields "PurgeDate" and "DocTemplateId" to tbAction</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.487</SQLVERSION><RMTRACKLINK>SIT-13129</RMTRACKLINK><REASON>Dynamic Patch:
create table tbMembershipPointExchangeRate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.486</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch:
create table tbPlugin2PaymentMethod</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Olivia</ADDEDBY><SQLVERSION>3.485</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: Add field tbPluginPaymentMethod.OnlineStatus</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.484</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch:
create table tbProductMediaConstraint</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.483</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch:
create table tbSalecapacityAccount and tbSalecapacityAccountDetail</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.482</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch:
Add tbDriver.DriverConfigFileName</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.481</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch:
Rename all JvDBTable stored procs</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.480</SQLVERSION><RMTRACKLINK>SIT-13009</RMTRACKLINK><REASON>Dynamic patch:
New field tbProduct.PortfolioPriority</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.479</SQLVERSION><RMTRACKLINK>SIT-13008</RMTRACKLINK><REASON>Dynamic Patch: 
Save default valuse for new added trigger flag in ledger rules configuration</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.478</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbJob.TaskConfig</REASON><TABLENAMES>tbJob</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbJob
ADD TaskConfig nvarchar(max) NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.477</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: CASCADE FK on outbound message tables</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.476</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Create tbSale field: Archivable, ArchivableDateTime, Archived, ArchivedDateTime
- Create index IX_Sale_ToBeArchived
- Create tbTicket field: Archivable, ArchivableDateTime
- Create index IX_Ticket_Archivable</REASON><TABLENAMES>tbSale
tbTicket</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbSale
ADD
  Archivable bit NOT NULL CONSTRAINT DF_Sale_Archivable default (0),  
  ArchivableDateTime datetime NULL,                                   
  Archived bit NOT NULL CONSTRAINT DF_Sale_Archived default (0),  
  ArchivedDateTime datetime NULL
  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Sale_ToBeArchived ON tbSale ( Archivable, Archived, ArchivableDateTime ) INCLUDE (ArchivedDateTime) WHERE (Archivable=1 AND Archived=0) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicket
ADD
  Archivable bit NOT NULL CONSTRAINT DF_Ticket_Archivable default (0),  
  ArchivableDateTime datetime NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if ((select COUNT(*) from tbTicket) &lt; 1000000) 
begin
  CREATE INDEX IX_Ticket_Archivable ON tbTicket ( Archivable, ValidDateTo ) INCLUDE (ProductId, ArchivableDateTime)
end

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.475</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: insert new rights 880, 881, 882 (workstation system setup  devices, activation key, demographic) where  needed 
Addition to DP_469 </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Olivia</ADDEDBY><SQLVERSION>3.474</SQLVERSION><RMTRACKLINK>SIT-10615</RMTRACKLINK><REASON>Dynamic Patch: Change column tbTask.NotificationEmail to nvarchar(500)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.473</SQLVERSION><RMTRACKLINK>SIT-12749</RMTRACKLINK><REASON>Dynamic Patch:
Drop index tbTicketUsage.UQ_TicketUsage_MasterTicketUsageId
Create index tbTicketUsage.IX_TicketUsage_MasterTicketUsageId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.472</SQLVERSION><RMTRACKLINK>SIT-12749</RMTRACKLINK><REASON>Dynamic Patch:
Add tbTicketUsage.MasterTicketUsageId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.471</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: Refactor tbEnttilement foreign keys</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.470</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: add tbCatalog.PricePointProductId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.469</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: insert new rights 880, 881, 882 (workstation system setup  devices, activation key, demographic) where  needed</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.468</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch:  add fields to tbPromoRule:
 - CouponExpirationRule
 - CouponExpirationRuleQuantity</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.467</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct2AttributeItem.DynamicEntitlement</REASON><TABLENAMES>tbProduct2AttributeItem</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct2AttributeItem
add DynamicEntitlement bit NOT NULL CONSTRAINT DF_Product2AttributeItem_DynamicEntitlement default (0)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Olivia De Souza</ADDEDBY><SQLVERSION>3.466</SQLVERSION><RMTRACKLINK>SIT-5067</RMTRACKLINK><REASON>Dynamic patch: create table tbServerWarVersion
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>OliviaDeSouza</ADDEDBY><SQLVERSION>3.465</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch 

-Update tbRight 
- Right 214 from boolean to Lookup LkSNRightLedgerManualEntry</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.464</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DYNAMIC PATCH

Add field to tbProduct
- ChangeVisitDateFeeProductId
- ChangeVisitDateFeeDays</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.463</SQLVERSION><RMTRACKLINK>SIT-12696</RMTRACKLINK><REASON>add fields to tbEntitlement
- LastUpdate
- Used</REASON><TABLENAMES>tbEntitlement</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbEntitlement
ADD 
  LastUpdate datetime NULL,  
  Used bit NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>UPDATE tbEntitlement
SET
  LastUpdate=GetDate(),  
  Used=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbEntitlement
ALTER COLUMN LastUpdate datetime NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbEntitlement
ALTER COLUMN Used bit NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Entitlement_StatusUsedLastUpdate ON tbEntitlement ( EntitlementStatus, Used, LastUpdate );
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.462</SQLVERSION><RMTRACKLINK>SIT-12696</RMTRACKLINK><REASON>[0..4] add field tbEntitlement.EntitlementStatus and refactor indexes
[5..7] add field tbTicketUsage.DynamicEntitlement</REASON><TABLENAMES>tbEntitlement
tbTicketUsage</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEntitlement
add EntitlementStatus smallint not null constraint DF_Entitlement_EntitlementStatus default (1)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEntitlement drop constraint DF_Entitlement_EntitlementStatus
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Entitlement_EntityIdAndStatus ON tbEntitlement ( EntityId, EntitlementStatus )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX UQ_Entitlement_EntityId on tbEntitlement
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE  INDEX UQ_Entitlement_EntityId ON tbEntitlement ( EntityId ASC, EntitlementStatus ) where EntitlementStatus in (1,2);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketUsage
ADD DynamicEntitlementId uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TicketUsage_DynamicEntitlementId ON tbTicketUsage ( DynamicEntitlementId ) WHERE DynamicEntitlementId IS NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketUsage ADD CONSTRAINT FK_TicketUsage_DynamicEntitlement FOREIGN KEY ( DynamicEntitlementId ) REFERENCES tbEntitlement( EntitlementId );

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.461</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DYNAMIC PATCH:
Add Index (holdstatus, holddatetime) to tbSeatHold</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.460</SQLVERSION><RMTRACKLINK>SIT-12308</RMTRACKLINK><REASON>DYNAMIC PATCH:
Add tbMembershipPoint.AllowTopup</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.459</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DYNAMIC PATCH:
Add tbPaymentWallet.PortfolioSlotLogId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.458</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DYNAMIC PATCH add tbDocTemplate CSV option fields</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.457</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DYNAMIC PATCH: Create table tbDocTemplate2DocTemplate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.456</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DYNAMIC PATCH: tbPaymentFolio -&gt; tbPaymentMemberhip</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.455</SQLVERSION><RMTRACKLINK>SIT-12301</RMTRACKLINK><REASON>Dynamic Patch:
Add tbTicketUsage.VoidTicketUsageId
Remove tbTransaction2TicketUsage.RefTicketUsageId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>gscotti</ADDEDBY><SQLVERSION>3.454</SQLVERSION><RMTRACKLINK>SIT-12599</RMTRACKLINK><REASON>Dynamic Patch... .. add column 
Refundable on tbSaleChannel</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.453</SQLVERSION><RMTRACKLINK>SIT-12301</RMTRACKLINK><REASON>Dynamic Patch 

New fields:
tbPortfolioSlotLog.ParentPortfolioSlotLogId,
tbPortfolioSlotLog.VoidPortfolioSlotLogId
tbPortfolioSlotLog.LogReference</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.452</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: create table tbProductPriceVariable</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>gscotti</ADDEDBY><SQLVERSION>3.451</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DYN AMIC PATCH: Insert new "AllowUpgradeToAnyProduct"  (869)  right  "true" for entities that can upgrade/downgrade products (306,307)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>gscotti</ADDEDBY><SQLVERSION>3.450</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch... .. add column 
MWLT_AllowPrint</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.449</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch... 
-RightType 850 (DeviceMnager)
-DriverType 31  (DeviceMnager)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.448</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch... add column tbSeatSector.SeatSectorStatus</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.447</SQLVERSION><RMTRACKLINK>SIT-12301</RMTRACKLINK><REASON>Dynamic Patch: create table tbLedgerRuleFilter</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.446</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields
tbPaymentFolio.FolioPLuginId
tbPaymentFolio.FolioDriverClassAlias
tbPaymentFolio.HotelName
tbPaymentFolio.HotelCode
 DYNAMIC PATCH</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.445</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbPluginPaymentMethod.TargetPaymentMethodId. DYNAMIC PATCH</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.444</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DYN AMIC PATCH: Insert new "Past product refund"  (863)  right  "true" for entities that can refund products (300)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.443</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbCatalog.CategoryId. DYNAMIC PATCH</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.442</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>removed  DoubleReadDelay column</REASON><TABLENAMES>tbAccessPoint</TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.441</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Converting tbTask foreign keys to CASCADE (dynamyc patch)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.440</SQLVERSION><RMTRACKLINK>SIT-12301</RMTRACKLINK><REASON>Dynamic Patch: add tbTicket.BindWalletRewarsToProduct</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.439</SQLVERSION><RMTRACKLINK>SIT-12301</RMTRACKLINK><REASON>Dynamic Patch: add tbPortfolioSlotBalance.TicketId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.438</SQLVERSION><RMTRACKLINK>SIT-12328</RMTRACKLINK><REASON>Dynamic Patch: add tbLedgerRef.LedgerType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.437</SQLVERSION><RMTRACKLINK>SIT-12289</RMTRACKLINK><REASON>Dynamic Patch: create table tbWebAuthData</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.436</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>change defal value constraint name </REASON><TABLENAMES>tbPluginPaymentMethod</TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.435</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: create table tbSaleFlag</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.434</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: add  default to tbPluginPaymentMethod.tbPluginPaymentMethod
tbPluginPaymentMethod.EnabledOnSale
tbPluginPaymentMethod.OpenCashDrawer</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.433</SQLVERSION><RMTRACKLINK>SIT-12143</RMTRACKLINK><REASON>Dynamic Patch: add tbProduct.PerformanceSelectionType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.432</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch: create table tbAccountOpArea</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.431</SQLVERSION><RMTRACKLINK>SIT-12162</RMTRACKLINK><REASON>Dynamic Patch: add tbCalendar.ValidDaysInThePast</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.430</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: add IX_TicketLedgerTrigger_TriggerDateTime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.429</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: invalidate products with product flag "GuestProductOnly" because it was renamed to "PreventDirectSale"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.428</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: add field tbLedgerAccount.LedgerAccountStatus</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.427</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch: drop tbFinanceGroupLinkHistory</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.426</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch: refactor index IX_Upload_StatusPriorityType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.425</SQLVERSION><RMTRACKLINK>SIT-11859</RMTRACKLINK><REASON>Dynamic patch. 
Add tbLedgerRule.TriggerAccessPointId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.424</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch. Drop tbTransactionConsQueue</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.423</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch. Drop tbTicketUsageConsQueue</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.422</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch. Refactor FK_SeatInfo_Seat</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.421</SQLVERSION><RMTRACKLINK>SIT-11958</RMTRACKLINK><REASON>DynamicPatch. Add column ProductAmortizationTriggerType to tbTicketRevenue</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.420</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DYNAMIC PATCH
Add column "Note"  to tbSiaeLookup</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Gualtiero Scotti</ADDEDBY><SQLVERSION>3.419</SQLVERSION><RMTRACKLINK>10674</RMTRACKLINK><REASON>DriverType 30 ( Image preprocessor) removed</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>--delete from tbdriver where DriverType = 30
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.418</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DYNAMIC PATCH
tbSIaeEvent add column EventoInviti</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.417</SQLVERSION><RMTRACKLINK>11920</RMTRACKLINK><REASON>add Every Account right to promotions</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.416</SQLVERSION><RMTRACKLINK>11532</RMTRACKLINK><REASON>change column FolioNumber to varchra(50)
change column RoomNumber to varchra(50)
change column GuestNameto varchra(100)</REASON><TABLENAMES>tbPaymentFolio</TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.415</SQLVERSION><RMTRACKLINK>11532</RMTRACKLINK><REASON>New table tbPaymentFolio </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.414</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch. Add column TicketLedgerTriggerSequence to tbTicketLedgerTrigger</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.413</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch. Create table tbProductUpsell</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.412</SQLVERSION><RMTRACKLINK>SIT-11845</RMTRACKLINK><REASON>New tbTicketLedgerTrigger.LedgerRegRule column  </REASON><TABLENAMES>tbTicketLedgerTrigger</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketLedgerTrigger
add 
  [LedgerRegRule] smallint NOT NULL constraint DF_TicketLedgerTrigger_LedgerRegRule default (2)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketLedgerTrigger drop constraint DF_TicketLedgerTrigger_LedgerRegRule
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.411</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch. Create table tbTransactionLedgerBalance</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.410</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch. Add field tbPromoRule.PrdType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.409</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch. Add field tbAccountTemp.WorkstationId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.408</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch. Add field tbDriver.ConfigFileName</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.407</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch: resets wallet membershippoint ValidityType"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.406</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch. Match disabled account cross platforms</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.405</SQLVERSION><RMTRACKLINK>SIT-10620</RMTRACKLINK><REASON>New tbPluginPaymentMethod.EnabledOnSale</REASON><TABLENAMES>tbPluginPaymentMethod</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPluginPaymentMethod
add 
  [EnabledOnSale] Bit NOT NULL constraint DF_PluginPaymentMethod_EnabledOnSale default (1)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPluginPaymentMethod drop constraint DF_PluginPaymentMethod_EnabledOnSale
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.404</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch: create field tbTicketUsage.ExtUsageRef</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.403</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DynamicPatch. drop column tbAccountCrossPlatform.LicenseId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.402</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.EntryQty</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add EntryQty int NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.401</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynami patch. Refactor IX_DBInfo_LastUpdate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.400</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dunamic Patch. tbAccountCrossPlatform refactor</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.399</SQLVERSION><RMTRACKLINK>SIT-10270</RMTRACKLINK><REASON>Dynamic Patch.

Add constraint FK_Ticket_PerformanceSet</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.398</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch: invalidate cache for Siae Events</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.397</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add field tbCalendar.CalendarType
- Add field tbCalendarDetail.StopSaleType
- Add field tbProduct.StopSaleCalendarId (+ index and foreign key)</REASON><TABLENAMES>tbCalendar
tbCalendarDetail
tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCalendar
add CalendarType smallint not null constraint DF_Calendar_CalendarType default (10)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCalendar drop constraint DF_Calendar_CalendarType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCalendarDetail
add StopSaleType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add StopSaleCalendarId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Product_StopSaleCalendarId ON tbProduct ( StopSaleCalendarId ) WHERE StopSaleCalendarId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbProduct ADD CONSTRAINT IX_Product_StopSaleCalendar FOREIGN KEY ( StopSaleCalendarId ) REFERENCES tbCalendar( CalendarId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Calendar_CalendarType ON tbCalendar ( CalendarType, CalendarName ) INCLUDE (Enabled, DatedCalendar)

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.396</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch.

Add constraint FK_Ticket_PerformanceSet</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>tiero</ADDEDBY><SQLVERSION>3.395</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Snapp device manager flag</REASON><TABLENAMES>tbDriver</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDriver
add
  Sdm bit not null constraint DF_Driver_Sdm default (0)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDriver
drop constraint DF_Driver_Sdm
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.394</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch.

New table tbSiaeWorkstation  
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.393</SQLVERSION><RMTRACKLINK>SIT-11572</RMTRACKLINK><REASON>Dynamic Patch.

New fields:
tbProduct.MediaEncoderPluginId
tbProduct.MediaPrintCodeAliasTypeId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.392</SQLVERSION><RMTRACKLINK>SIT-10270</RMTRACKLINK><REASON>Dynamic Patch.

New fields:
tbProduct.ProductPackageType 
tbProduct.ProductPackageReadType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.391</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch.

Create index IX_PaymentCredit_CreditStatus_CreateDateTime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.390</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch.

Refactor FK_HistoryDetail_HistoryLog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.389</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic patch. Add fields:
- tbTicket.TicketVersion
- tbMedia.MediaVersion</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.388</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch - refactor indexes:
- IX_TicketUpgrade_RootTicketId
- UQ_Right_EntityId_RightType
- IX_LoginAlias_AccountId
- IX_TicketUsage_TicketId_V3</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.387</SQLVERSION><RMTRACKLINK>SIT-10270</RMTRACKLINK><REASON>Dynamic Patch

New tbProductPackage Index</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.386</SQLVERSION><RMTRACKLINK>SIT-10270</RMTRACKLINK><REASON>Dynamic Patch

Refactor tbProductLink and tbProductLinkDetail</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.385</SQLVERSION><RMTRACKLINK>SIT-11491</RMTRACKLINK><REASON>Dynamic Patch

Refactor tbTicketLedgerTrigger index</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.384</SQLVERSION><RMTRACKLINK>SIT-11030</RMTRACKLINK><REASON>Dynamic Patch

Create table tbBoxDepositIntercompany</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.383</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch

Create indexes for ConsQueue tables</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.382</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch

Invalidate all SIAE products</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.381</SQLVERSION><RMTRACKLINK>SIT-11300</RMTRACKLINK><REASON>Dynamic Patch

Refactoring of tbTicketLedgerClearing</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.380</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch

Create table tbrateCode2SaleChannel</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.379</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch

add column tbPerformanceSetHashMD5</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.378</SQLVERSION><RMTRACKLINK>SIT-7253</RMTRACKLINK><REASON>Dynamic Patch

add column tbTicketUsage.BiometrigGroupTicketId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.377</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch

add column tbTicket.Printed</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.376</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rebuild FK_InstallmentContractTrigger_InstallmentContract for CASCADE DELETE</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbInstallmentContractTrigger 
DROP CONSTRAINT FK_InstallmentContractTrigger_InstallmentContract;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbInstallmentContractTrigger 
ADD CONSTRAINT FK_InstallmentContractTrigger_InstallmentContract FOREIGN KEY ( InstallmentContractId ) REFERENCES tbInstallmentContract( InstallmentContractId ) ON DELETE CASCADE;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.375</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dynamic Patch

add column tbLookupItem.DefaultValue</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.374</SQLVERSION><RMTRACKLINK>SIT-11362</RMTRACKLINK><REASON>Dynamic Patch

New tbProductSuspend table
New tbTicket.ProductSuspendSerial field</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.373</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create field tbEntityChange.DocData</REASON><TABLENAMES>tbEntityChange</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEntityChange
add DocData nvarchar(max)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.372</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add field tbTicket.IgnoreCrossoverTimeUntilDate</REASON><TABLENAMES>tbTicket</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add IgnoreCrossoverTimeUntilDate date null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.371</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>DROP tbProduct.UncountCalendarId
ADD tbEvent.UncountCalendarId</REASON><TABLENAMES>tbProduct
tbEvent</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Product_UncountCalendarId on tbProduct      
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbProduct
DROP CONSTRAINT FK_Product_UncountCalendar;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbProduct
drop column UncountCalendarId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
add UncountCalendarId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Event_UncountCalendarId ON tbEvent ( UncountCalendarId ) where UncountCalendarId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbEvent ADD CONSTRAINT FK_Event_UncountCalendar FOREIGN KEY ( UncountCalendarId ) REFERENCES tbCalendar( CalendarId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.370</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTicketPerformanceException</REASON><TABLENAMES>tbTicketPerformanceException</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE tbTicketPerformanceException ( 
	TicketId             uniqueidentifier NOT NULL    ,
	PerformanceId        uniqueidentifier NOT NULL    ,
	TimeFrom             time NULL    ,
	CONSTRAINT PK_TicketPerformanceException PRIMARY KEY  ( TicketId, PerformanceId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TicketPerformanceException_PerformanceId ON tbTicketPerformanceException ( PerformanceId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketPerformanceException ADD CONSTRAINT FK_TicketPerformanceException_Performance FOREIGN KEY ( PerformanceId ) REFERENCES tbPerformance( PerformanceId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.369</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.UncountCalendarId</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add UncountCalendarId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Product_UncountCalendarId ON tbProduct ( UncountCalendarId ) where UncountCalendarId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbProduct ADD CONSTRAINT FK_Product_UncountCalendar FOREIGN KEY ( UncountCalendarId ) REFERENCES tbCalendar( CalendarId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.368</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add field to tbProduct
- PerformanceFutureDays
- PerformanceFutureDaysExt
- PerformanceFutureQty
- PerformanceFutureQtyExt</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>if not exists(select * from sys.columns where Name = 'PerformanceFutureDays' and Object_ID = Object_ID('tbProduct'))
begin
  alter table tbProduct  
  add   
    PerformanceFutureDays    int null,    
    PerformanceFutureDaysExt int null,    
    PerformanceFutureQty     int null,    
    PerformanceFutureQtyExt  int null
end;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.367</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbApiLog.ErrorStackTrace</REASON><TABLENAMES>tbApiLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>if not exists(select * from sys.columns where Name = 'ErrorStackTrace' and Object_ID = Object_ID('tbApiLog'))
begin
  alter table tbApiLog  
  add ErrorStackTrace nvarchar(max) null
end;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.366</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbAccountTemp</REASON><TABLENAMES>tbAccountTemp</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF OBJECT_ID (N'tbAccountTemp', N'U') IS NULL 
BEGIN
  CREATE TABLE tbAccountTemp ( 
  AccountId            uniqueidentifier NOT NULL    ,
  AccountTempCode      varchar(10) NOT NULL    ,
  OpAreaId             uniqueidentifier NOT NULL    ,
  CreateFiscalDate     date NOT NULL    ,
  CreateDateTime       datetime NOT NULL    ,
	CONSTRAINT PK_AccountTemp PRIMARY KEY  ( AccountId ) 
  );

  CREATE  INDEX IX_AccountTemp_OpAreaId ON tbAccountTemp ( OpAreaId, CreateDateTime );
  CREATE  INDEX IX_AccountTemp_CreateDateTime ON tbAccountTemp ( CreateDateTime );
  CREATE UNIQUE INDEX UQ_AccountTemp_AccountTempCode ON tbAccountTemp ( CreateFiscalDate, OpAreaId, AccountTempCode );

  ALTER TABLE tbAccountTemp ADD CONSTRAINT FK_AccountTemp_Account FOREIGN KEY ( AccountId ) REFERENCES tbAccount( AccountId ) ON DELETE CASCADE ON UPDATE NO ACTION;
  ALTER TABLE tbAccountTemp ADD CONSTRAINT FK_AccountTemp_OpAreaAccount FOREIGN KEY ( OpAreaId ) REFERENCES tbAccount( AccountId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
END;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.365</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>CREATE INDEX IX_Media_DocTemplateId_V2</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>if not exists(select * from sys.indexes where name='IX_Media_DocTemplateId_V2' AND object_id = OBJECT_ID('tbMedia'))
begin
  if ((select Count(*) from tbMedia) &lt;1000000)  
  begin  
    CREATE INDEX IX_Media_DocTemplateId_V2 ON tbMedia (DocTemplateId, EncodeFiscalDate, PrintDateTime) where DocTemplateId is not null;    
    DROP INDEX IX_Media_DocTemplateId on tbMedia;
  end;
end;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.364</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>CREATE  INDEX IX_Sale_WaitingForPayment 
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>if not exists(select * from sys.indexes where name='IX_Sale_WaitingForPayment' AND object_id = OBJECT_ID('tbSale'))
begin
  if ((select Count(*) from tbSale) &lt;1000000)  
  begin  
    CREATE  INDEX IX_Sale_WaitingForPayment ON tbSale ( SaleStatus, SaleDateTime ) where SaleStatus=200;
  end;
end;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.363</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbAccount.RetentionDate abd related account</REASON><TABLENAMES>tbAccount
tbMetaField</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>if not exists(select * from sys.columns where Name = 'RetentionDate' and Object_ID = Object_ID('tbAccount'))
begin
  insert into tbAccountFlag (AccountId, AccountFlag)
  select 
    AccountId,
    12 --PrivacyPurgeLock     
  from  
    tbAccountFlag    
  where  
    AccountFlag=1001 --LoginSnapp
end;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if not exists(select * from sys.columns where Name = 'RetentionDate' and Object_ID = Object_ID('tbAccount'))
begin
  alter table tbAccount add RetentionDate date null;  
end;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if not exists(select * from sys.indexes where name='IX_Account_RetentionDate' AND object_id = OBJECT_ID('tbAccount'))
begin
  CREATE  INDEX IX_Account_RetentionDate ON tbAccount ( RetentionDate ) where RetentionDate is not null;
end;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if not exists(select * from sys.columns where Name = 'PurgeOption' and Object_ID = Object_ID('tbMetaField'))
begin
  alter table tbMetaField add PurgeOption smallint null;
end;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>gscotti</ADDEDBY><SQLVERSION>3.362</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>ETicket structure</REASON><TABLENAMES>tbTicketElectronic
tbTicketElectronicData</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF OBJECT_ID (N'tbTicketElectronic', N'U') IS NULL 
BEGIN
  CREATE TABLE tbTicketElectronic ( 
	TicketElectronicId                uniqueidentifier NOT NULL,
	TicketElectronicStatus            smallint NOT NULL,
	TicketId			  uniqueidentifier NOT NULL,
	PluginId			  uniqueidentifier NOT NULL,
	CreateDateTime			  datetime NOT NULL,
	ExternalTicketCode                nvarchar(255),
	CONSTRAINT PK_TicketElectronic PRIMARY KEY  ( TicketElectronicId ),
	CONSTRAINT FK_TicketElectronic_Ticket FOREIGN KEY ( TicketId ) REFERENCES tbTicket( TicketId ) ON DELETE NO ACTION ON UPDATE NO ACTION,
	CONSTRAINT FK_TicketElectronic_Plugin FOREIGN KEY ( PluginId ) REFERENCES tbPlugin( PluginId ) ON DELETE NO ACTION ON UPDATE NO ACTION
  ); 
  CREATE  INDEX IX_TicketElectronic_ExternalTicketCode ON tbTicketElectronic ( ExternalTicketCode );
  CREATE  INDEX IX_TicketElectronic_TicketId_CreateDateTime ON tbTicketElectronic ( TicketId,  CreateDateTime );
  CREATE  INDEX IX_TicketElectronic_PluginId_CreateDateTime ON tbTicketElectronic ( PluginId,  CreateDateTime );
 
END;


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF OBJECT_ID (N'tbTicketElectronicData', N'U') IS NULL 
BEGIN
  CREATE TABLE tbTicketElectronicData ( 
	TicketElectronicId                 uniqueidentifier NOT NULL,
	ParamName			   nvarchar(30) NOT NULL,
	ParamValue			   nvarchar(max) NOT NULL,
	CONSTRAINT PK_TicketElectronicData PRIMARY KEY  ( TicketElectronicId, ParamName),
	CONSTRAINT FK_TicketElectronicData_TickeElectronic FOREIGN KEY ( TicketElectronicId ) REFERENCES tbTicketElectronic( TicketElectronicId ) ON DELETE NO ACTION ON UPDATE NO ACTION
  ); 
END;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.361</SQLVERSION><RMTRACKLINK>SIT10550</RMTRACKLINK><REASON>Rename tbNotifyRuleOrder.SaleAccountType to tbNotifyRuleOrder.OrderNotificationRecipientType </REASON><TABLENAMES>tbNotifyRuleOrder</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF COL_LENGTH('tbNotifyRuleOrder', 'SaleAccountType') IS NOT NULL
begin
  EXEC sp_rename 'tbNotifyRuleOrder.SaleAccountType', 'OrderNotificationRecipientType', 'COLUMN';
end
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.360</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Enhancement &amp; Change to Events module security rights
0 event read
1 event  update
2 event create
3 event delete
4  performance
5 envelope configuration
6 envelope quantities
7 delete right type 173</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>--read
insert into tbRight (
  RightId,
  EntityType,
  EntityId,
  RightType,
  RightValue
 )
 select 
   NEWID(),
   EntityType,
   EntityId,
   799,
   'true'
from 
  tbRight 
where
  RightType = 173 and
  (SUBSTRING(RightValue, 5, 1) in ('2','3','4','5') or SUBSTRING(RightValue, 12, 1) = 'R')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>--update
insert into tbRight (
  RightId,
  EntityType,
  EntityId,
  RightType,
  RightValue
 )
 select 
   NEWID(),
   EntityType,
   EntityId,
   801,
   'true'
from 
  tbRight 
where
  RightType = 173 and
  (SUBSTRING(RightValue, 5, 1) in ('3','4','5') or SUBSTRING(RightValue, 13, 1) = 'U')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>--add
insert into tbRight (
  RightId,
  EntityType,
  EntityId,
  RightType,
  RightValue
 )
 select 
   NEWID(),
   EntityType,
   EntityId,
   803,
   'true'
from 
  tbRight 
where
  RightType = 173 and
  (SUBSTRING(RightValue, 5, 1) in ('4','5') or SUBSTRING(RightValue, 11, 1) = 'C')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>--delete
insert into tbRight (
  RightId,
  EntityType,
  EntityId,
  RightType,
  RightValue
 )
 select 
   NEWID(),
   EntityType,
   EntityId,
   805,
   'true'
from 
  tbRight 
where
  RightType = 173 and
  (SUBSTRING(RightValue, 5, 1) = '5' or SUBSTRING(RightValue, 14, 1) = 'D')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>--performances
insert into tbRight (
  RightId,
  EntityType,
  EntityId,
  RightType,
  RightValue
 )
 select 
   NEWID(),
   EntityType,
   EntityId,
   807,
   'true'
from 
  tbRight 
where
  RightType = 173 and
  (SUBSTRING(RightValue, 5, 1) in ('3','4','5') or SUBSTRING(RightValue, 13, 1) = 'U')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>--envelope configuration
insert into tbRight (
  RightId,
  EntityType,
  EntityId,
  RightType,
  RightValue
 )
 select 
   NEWID(),
   EntityType,
   EntityId,
   809,
   'true'
from 
  tbRight 
where
  RightType = 173 and
  (SUBSTRING(RightValue, 5, 1) in ('3','4','5') or SUBSTRING(RightValue, 13, 1) = 'U')

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>--envelope quantities
insert into tbRight (
  RightId,
  EntityType,
  EntityId,
  RightType,
  RightValue
 )
 select 
   NEWID(),
   EntityType,
   EntityId,
   811,
   'true'
from 
  tbRight 
where
  RightType = 173 and
  (SUBSTRING(RightValue, 5, 1) in ('3','4','5') or SUBSTRING(RightValue, 13, 1) = 'U')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbRight
where RightType=173
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.359</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Fix index UQ_InstallmentContract_InstallmentContractVersion which was including the wrong columns</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @colname varchar(max);

select 
  @colname = COL_NAME(ICL.object_id, ICL.column_id)
from
  sys.indexes IDX inner join
  sys.index_columns ICL on ICL.object_id=IDX.object_id and IDX.index_id=ICL.index_id
where
  IDX.name='UQ_InstallmentContract_InstallmentContractVersion';

if (@colname = 'InstallmentContractSequence')
begin
  drop index UQ_InstallmentContract_InstallmentContractVersion on tbInstallmentContract;

  CREATE UNIQUE INDEX UQ_InstallmentContract_InstallmentContractVersion ON tbInstallmentContract (InstallmentContractVersion) WHERE InstallmentContractVersion is not null;
end;
  
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>ugog</ADDEDBY><SQLVERSION>3.358</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor index IX_AccountFinance_ChannelManagerPluginId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_AccountFinance_ChannelManagerPluginId on tbAccountFinance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_AccountFinance_ChannelManagerPluginId ON tbAccountFinance ( ChannelManagerPluginId, ChannelManagerWorkstationId, ChannelManagerResellerCode ) where ChannelManagerPluginId is not null;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.357</SQLVERSION><RMTRACKLINK>SIT-10550</RMTRACKLINK><REASON>Add tbNotifyRuleOrder fields:
WorkstationType
LocationId 
OpAreaId 
WorkstationId

NB: Changes will be rolled into 8.9.1.X  so IFs to check if to re-apply are needed</REASON><TABLENAMES>tbNotifyRuleOrder</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF COL_LENGTH('tbNotifyRuleOrder', 'WorkstationType') IS NULL
BEGIN
  alter table tbNotifyRuleOrder
  add 
    WorkstationType smallint null,
    LocationId      uniqueidentifier null,
    OpAreaId        uniqueidentifier null,
    WorkstationId   uniqueidentifier null
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_NotifyRuleOrder_LocationId' AND object_id = OBJECT_ID('tbNotifyRuleOrder'))
BEGIN
  CREATE  INDEX IX_NotifyRuleOrder_LocationId ON tbNotifyRuleOrder ( LocationId ASC );  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_NotifyRuleOrder_OpArea' AND object_id = OBJECT_ID('tbNotifyRuleOrder'))
BEGIN
  CREATE  INDEX IX_NotifyRuleOrder_OpArea ON tbNotifyRuleOrder ( OpAreaId ASC );  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_NotifyRuleOrder_Workstation' AND object_id = OBJECT_ID('tbNotifyRuleOrder'))
BEGIN
  CREATE  INDEX IX_NotifyRuleOrder_Workstation ON tbNotifyRuleOrder ( WorkstationId ASC );  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_NotifyRuleOrder_AccountLocation') and PARENT_OBJECT_ID = OBJECT_ID(N'tbNotifyRuleOrder'))
BEGIN
  ALTER TABLE tbNotifyRuleOrder ADD CONSTRAINT FK_NotifyRuleOrder_AccountLocation FOREIGN KEY ( LocationId ) REFERENCES tbAccount( AccountId ) ON DELETE NO ACTION ON UPDATE NO ACTION;  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_NotifyRuleOrder_AccountOpArea') and PARENT_OBJECT_ID = OBJECT_ID(N'tbNotifyRuleOrder'))
BEGIN
  ALTER TABLE tbNotifyRuleOrder ADD CONSTRAINT FK_NotifyRuleOrder_AccountOpArea FOREIGN KEY ( OpAreaId ) REFERENCES tbAccount( AccountId ) ON DELETE NO ACTION ON UPDATE NO ACTION;  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_NotifyRuleOrder_Workstation') and PARENT_OBJECT_ID = OBJECT_ID(N'tbNotifyRuleOrder'))
BEGIN
  ALTER TABLE tbNotifyRuleOrder ADD CONSTRAINT FK_NotifyRuleOrder_Workstation FOREIGN KEY ( WorkstationId ) REFERENCES tbWorkstation( WorkstationId ) ON DELETE NO ACTION ON UPDATE NO ACTION;  
END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.356</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbSeatEnvelope.Extra</REASON><TABLENAMES>tbSeatEnvelope</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSeatEnvelope
add Extra bit null   constraint DF_SeatEnvelope_Extra default 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatEnvelope
drop constraint DF_SeatEnvelope_Extra;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.355</SQLVERSION><RMTRACKLINK>SIT-10550</RMTRACKLINK><REASON>New tables
[0..3] tbNotifyRuleOrder
[4..7] tbNotifyRule2Location
[8..11] tbNotifyRule2Category
[12..15] tbNotifyRule2Event
[16..17] tbNotifyRuleFlag
[18..21] tbNotifyRuleOrder2Sale

NB: Changes will be rolled into 8.9.1.X  so IFs to check if to re-apply are needed</REASON><TABLENAMES>tbNotifyRuleOrder
tbNotifyRule2Location
tbNotifyRule2Category
tbNotifyRule2Event
tbNotifyRuleFlag
tbNotifyRuleOrder2Sale</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF OBJECT_ID (N'tbNotifyRuleOrder', N'U') IS NULL 
BEGIN
  CREATE TABLE tbNotifyRuleOrder ( 
	NotifyRuleId               uniqueidentifier NOT NULL,
	DocTemplateId              uniqueidentifier NOT NULL,
	NotifyRuleOrderTriggerType smallint NOT NULL,
	SaleAccountType            smallint,
	AlternativeEmailAddress    nvarchar(100),
	TransactionType            smallint,
	DocData                    nvarchar(max),
	CONSTRAINT PK_NotifyRuleOrder PRIMARY KEY  ( NotifyRuleId ) 
  );   
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_NotifyRuleOrder_DocTemplateId' AND object_id = OBJECT_ID('tbNotifyRuleOrder'))
BEGIN
  CREATE  INDEX IX_NotifyRuleOrder_DocTemplateId ON tbNotifyRuleOrder ( DocTemplateId ASC );  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_NotifyRuleOrder_NotifyRule') and PARENT_OBJECT_ID = OBJECT_ID(N'tbNotifyRuleOrder'))
BEGIN
  ALTER TABLE tbNotifyRuleOrder ADD CONSTRAINT FK_NotifyRuleOrder_NotifyRule FOREIGN KEY ( NotifyRuleId ) REFERENCES tbNotifyRule( NotifyRuleId ) ON DELETE NO ACTION ON UPDATE NO ACTION;  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_NotifyRuleOrder_DocTemplate') and PARENT_OBJECT_ID = OBJECT_ID(N'tbNotifyRuleOrder'))
BEGIN
  ALTER TABLE tbNotifyRuleOrder ADD CONSTRAINT FK_NotifyRuleOrder_DocTemplate FOREIGN KEY ( DocTemplateId ) REFERENCES tbDocTemplate( DocTemplateId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF OBJECT_ID (N'tbNotifyRule2Location', N'U') IS NULL 
BEGIN
  CREATE TABLE tbNotifyRule2Location ( 
	NotifyRuleId         uniqueidentifier NOT NULL    ,
	LocationId           uniqueidentifier NOT NULL    ,
	CONSTRAINT PK_NotifyRule2Location PRIMARY KEY  ( NotifyRuleId, LocationId ) 
 ); 
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_NotifyRule2Location_LocationId' AND object_id = OBJECT_ID('tbNotifyRule2Location'))
BEGIN
  CREATE  INDEX IX_NotifyRule2Location_LocationId ON tbNotifyRule2Location ( LocationId );  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_NotifyRule2Location_NotifyRule') and PARENT_OBJECT_ID = OBJECT_ID(N'tbNotifyRule2Location'))
BEGIN
  ALTER TABLE tbNotifyRule2Location ADD CONSTRAINT FK_NotifyRule2Location_NotifyRule FOREIGN KEY ( NotifyRuleId ) REFERENCES tbNotifyRule( NotifyRuleId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_NotifyRule2Location_Account') and PARENT_OBJECT_ID = OBJECT_ID(N'tbNotifyRule2Location'))
BEGIN
  ALTER TABLE tbNotifyRule2Location ADD CONSTRAINT FK_NotifyRule2Location_Account FOREIGN KEY ( LocationId ) REFERENCES tbAccount( AccountId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF OBJECT_ID (N'tbNotifyRule2Category', N'U') IS NULL 
BEGIN
  CREATE TABLE tbNotifyRule2Category ( 
	NotifyRuleId         uniqueidentifier NOT NULL    ,
	CategoryId           uniqueidentifier NOT NULL    ,
	CONSTRAINT PK_NotifyRule2Category PRIMARY KEY  ( NotifyRuleId, CategoryId ) 
 ); 
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_NotifyRule2Category_CategoryId' AND object_id = OBJECT_ID('tbNotifyRule2Category'))
BEGIN
  CREATE  INDEX IX_NotifyRule2Category_CategoryId ON tbNotifyRule2Category ( CategoryId );  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_NotifyRule2Category_NotifyRule') and PARENT_OBJECT_ID = OBJECT_ID(N'tbNotifyRule2Category'))
BEGIN
  ALTER TABLE tbNotifyRule2Category ADD CONSTRAINT FK_NotifyRule2Category_NotifyRule FOREIGN KEY ( NotifyRuleId ) REFERENCES tbNotifyRule( NotifyRuleId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_NotifyRule2Category_Category') and PARENT_OBJECT_ID = OBJECT_ID(N'tbNotifyRule2Category'))
BEGIN
  ALTER TABLE tbNotifyRule2Category ADD CONSTRAINT FK_NotifyRule2Category_Category FOREIGN KEY ( CategoryId ) REFERENCES tbCategory( CategoryId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF OBJECT_ID (N'tbNotifyRule2Event', N'U') IS NULL 
BEGIN
  CREATE TABLE tbNotifyRule2Event ( 
	NotifyRuleId         uniqueidentifier NOT NULL    ,
	EventId              uniqueidentifier NOT NULL    ,
	CONSTRAINT PK_NotifyRule2Event PRIMARY KEY  ( NotifyRuleId, EventId ) 
 ); 
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_NotifyRule2Event_EventId' AND object_id = OBJECT_ID('tbNotifyRule2Event'))
BEGIN
  CREATE  INDEX IX_NotifyRule2Event_EventId ON tbNotifyRule2Event ( EventId );  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_NotifyRule2Event_NotifyRule') and PARENT_OBJECT_ID = OBJECT_ID(N'tbNotifyRule2Event'))
BEGIN
  ALTER TABLE tbNotifyRule2Event ADD CONSTRAINT FK_NotifyRule2Event_NotifyRule FOREIGN KEY ( NotifyRuleId ) REFERENCES tbNotifyRule( NotifyRuleId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_NotifyRule2Event_Event') and PARENT_OBJECT_ID = OBJECT_ID(N'tbNotifyRule2Event'))
BEGIN
  ALTER TABLE tbNotifyRule2Event ADD CONSTRAINT FK_NotifyRule2Event_Event FOREIGN KEY ( EventId ) REFERENCES tbEvent( EventId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF OBJECT_ID (N'tbNotifyRuleFlag', N'U') IS NULL 
BEGIN
  CREATE TABLE tbNotifyRuleFlag ( 
	NotifyRuleId         uniqueidentifier NOT NULL    ,
	NotifyRuleFlag       smallint NOT NULL    ,
	CONSTRAINT PK_NotifyRuleFlag PRIMARY KEY  ( NotifyRuleId, NotifyRuleFlag )
 ); 
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_NotifyRuleFlag_NotifyRule') and PARENT_OBJECT_ID = OBJECT_ID(N'tbNotifyRuleFlag'))
BEGIN
  ALTER TABLE tbNotifyRuleFlag ADD CONSTRAINT FK_NotifyRuleFlag_NotifyRule FOREIGN KEY ( NotifyRuleId ) REFERENCES tbNotifyRule( NotifyRuleId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF OBJECT_ID (N'tbNotifyRuleOrder2Sale', N'U') IS NULL 
BEGIN
  CREATE TABLE tbNotifyRuleOrder2Sale ( 
	NotifyRuleId               uniqueidentifier NOT NULL    ,
	NotifyRuleOrderTriggerType smallint NOT NULL    ,
	SaleId                     uniqueidentifier NOT NULL    ,
	NotifyDateTime             datetime NOT NULL    ,
	CONSTRAINT PK_NotifyRuleOrder2Sale PRIMARY KEY  ( NotifyRuleId, NotifyRuleOrderTriggerType, SaleId )
 ); 
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_NotifyRuleOrder2Sale_SaleId' AND object_id = OBJECT_ID('tbNotifyRuleOrder2Sale'))
BEGIN
  CREATE  INDEX IX_NotifyRuleOrder2Sale_SaleId ON tbNotifyRuleOrder2Sale ( SaleId, NotifyDateTime );  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_NotifyRuleOrder2Sale_NotifyRule') and PARENT_OBJECT_ID = OBJECT_ID(N'tbNotifyRuleOrder2Sale'))
BEGIN
  ALTER TABLE tbNotifyRuleOrder2Sale ADD CONSTRAINT FK_NotifyRuleOrder2Sale_NotifyRule FOREIGN KEY ( NotifyRuleId ) REFERENCES tbNotifyRule( NotifyRuleId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_NotifyRuleOrder2Sale_Sale') and PARENT_OBJECT_ID = OBJECT_ID(N'tbNotifyRuleOrder2Sale'))
BEGIN
  ALTER TABLE tbNotifyRuleOrder2Sale ADD CONSTRAINT FK_NotifyRuleOrder2Sale_Sale FOREIGN KEY ( SaleId ) REFERENCES tbSale( SaleId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.354</SQLVERSION><RMTRACKLINK>10250</RMTRACKLINK><REASON>create table tbTransaction2ExtSystemVoid</REASON><TABLENAMES>tbTransaction2ExtSystemVoid</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE tbTransaction2ExtSystemVoid ( 
	TransactionId        uniqueidentifier NOT NULL    ,
	TicketId             uniqueidentifier NOT NULL    ,
	ExtCode              varchar(50) NOT NULL    ,
	ExtSystemType        smallint NOT NULL    ,
	PluginId             uniqueidentifier     ,
	CONSTRAINT PK_Transaction2ExtSystemVoid PRIMARY KEY  ( TransactionId, TicketId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_Transaction2ExtSystemVoid_PluginId ON tbTransaction2ExtSystemVoid ( PluginId ) include (ExtSystemType) where PluginId is not null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Transaction2ExtSystemVoid_ExtCode ON tbTransaction2ExtSystemVoid ( ExtCode ) include (ExtSystemType);
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.353</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Force POS cache update</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbDBInfo
where ParamName='EntityChangePurge_Config'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbDBInfo (ParamName, ParamValue, LastUpdate)
select
  'EntityChangePurge_Config' as ParamName,  
  Cast((SELECT top 1 current_value FROM sys.sequences WHERE name = 'SEQ:EntityChangeId') as varchar(max)) as ParamValue,  
  GetDate() as LastUpdate
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.352</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbNotifyRule:
- ValidDateFrom
- ValidDateTo</REASON><TABLENAMES>tbNotifyRule</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbNotifyRule
add
  ValidDateFrom date null,  
  ValidDateTo date null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.351</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbEntityChange by replacing AUTOINC with SEQUENCE</REASON><TABLENAMES>tbEntityChange</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @MaxVersion bigint;

select @MaxVersion = MAX([Version]) + 1
from (
  select MAX(AccountVersion) as [Version] from tbAccount where AccountVersion is not null
  union
  select MAX(PerformanceVersion) from tbPerformance where PerformanceVersion is not null
  union
  select MAX(OrderVersion) from tbSale where OrderVersion is not null
  union
  select MAX(ActionVersion) from tbAction where ActionVersion is not null
  union
  select MAX(InstallmentContractVersion) from tbInstallmentContract where InstallmentContractVersion is not null
  union
  select MAX(EntityChangeId) from tbEntityChange
) X

declare @stmt nvarchar(max) = 'CREATE SEQUENCE [SEQ:EntityChangeId] START WITH ' + Cast(@MaxVersion as varchar(max)) + ' INCREMENT BY 1';
EXECUTE sp_executesql @stmt;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbEntityChange

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE TABLE tbEntityChange ( 
	EntityChangeId       bigint NOT NULL    ,
	EntityType           smallint NOT NULL    ,
	EntityId             uniqueidentifier NOT NULL    ,
	InsertUpdate         bit NOT NULL    ,
	EntityChangeGroup    smallint NOT NULL    ,
	CreateDate           date NOT NULL    ,
	CONSTRAINT PK_EntityChange PRIMARY KEY  ( EntityChangeId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_EntityChange_EntityType ON tbEntityChange ( EntityType ASC, EntityChangeId ASC ) include (InsertUpdate, EntityId);

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_EntityChange_EntityChangeGroup ON tbEntityChange ( EntityChangeGroup, CreateDate, EntityChangeId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_EntityChange_EntityId ON tbEntityChange ( EntityId ASC );

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.350</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Split tbConsQueue into specifi tables and drop it
0: tbTransactionConsQueue
1: tbTicketUsageConsQueue
2: tbOutboundQueueHistoryConsQueue
3: tbAsyncFinalizeConsQueue
4: tbLedgerConsQueue
5: tbExtProductTypeLogConsQueue
6: tbConsRotationQueueConsQueue
7: drop tbConsQueue 

</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbTransactionConsQueue 
(
  TransactionId,
  ServerId,
  ConsQueueStatus,
  QueueDateTime,
  StartDateTime, 
  EndDateTime    
)
select 
  CQ.EntityId,
  Min(CQ.ServerId),    
  Min(CQ.ConsQueueStatus),
  Min(CQ.QueueDateTime),  
  Min(CQ.StartDateTime),  
  Min(CQ.EndDateTime)
from
  tbConsQueue CQ inner join
  tbTransaction TRN on TRN.TransactionId=CQ.EntityId
where
  CQ.ConsQueueType in (1, 10)          
group by
  CQ.EntityId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbTicketUsageConsQueue
(
  TicketUsageId,
  ServerId,
  ConsQueueStatus,
  QueueDateTime,
  StartDateTime, 
  EndDateTime    
)
select 
  CQ.EntityId,
  Min(CQ.ServerId),    
  Min(CQ.ConsQueueStatus),
  Min(CQ.QueueDateTime),  
  Min(CQ.StartDateTime),  
  Min(CQ.EndDateTime)
from
  tbConsQueue CQ inner join
  tbTicketUsage TU on TU.TicketUsageId=CQ.EntityId
where 
  CQ.ConsQueueType = 2
group by 
  CQ.EntityId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbOutboundQueueHistoryConsQueue
(
  OutboundQueueHistoryId,
  ServerId,
  ConsQueueStatus,
  QueueDateTime,
  StartDateTime, 
  EndDateTime    
)
select 
  CQ.EntityId,
  Min(CQ.ServerId),    
  Min(CQ.ConsQueueStatus),
  Min(CQ.QueueDateTime),  
  Min(CQ.StartDateTime),  
  Min(CQ.EndDateTime)
from
  tbConsQueue CQ inner join
  tbOutboundQueueHistory OQH on OQH.OutboundQueueHistoryId=CQ.EntityId
where 
  CQ.ConsQueueType = 4
group by 
  CQ.EntityId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbAsyncFinalizeConsQueue
(
  EntityId,
  EntityType,
  ServerId,
  ConsQueueStatus,
  QueueDateTime,
  StartDateTime, 
  EndDateTime    
)
select 
  CQ.EntityId,
  Min(CQ.EntityType),
  Min(CQ.ServerId),    
  Min(CQ.ConsQueueStatus),
  Min(CQ.QueueDateTime),  
  Min(CQ.StartDateTime),  
  Min(CQ.EndDateTime)
from
  tbConsQueue CQ inner join
  tbAsyncFinalize AF on AF.EntityId=CQ.EntityId
where 
  CQ.ConsQueueType=5
group by
  CQ.EntityId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbLedgerConsQueue
(
  EntityId,
  EntityType,
  ServerId,
  ConsQueueStatus,
  QueueDateTime,
  StartDateTime, 
  EndDateTime    
)
select 
  EntityId,
  min(EntityType),
  min(ServerId),    
  min(ConsQueueStatus),
  min(QueueDateTime),  
  min(StartDateTime),  
  min(EndDateTime)
from tbConsQueue
where ConsQueueType = 6
group by EntityId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbExtProductTypeLogConsQueue
(
  ExtProductTypeLogId,
  ServerId,
  ConsQueueStatus,
  QueueDateTime,
  StartDateTime, 
  EndDateTime    
)
select 
  CQ.EntityId,
  Min(CQ.ServerId),    
  Min(CQ.ConsQueueStatus),
  Min(CQ.QueueDateTime),  
  Min(CQ.StartDateTime),  
  Min(CQ.EndDateTime)
from
  tbConsQueue CQ inner join
  tbExtProductTypeLog EPL on EPL.ExtProductTypeLogId=CQ.EntityId
where 
  CQ.ConsQueueType = 7
group by 
  CQ.EntityId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbConsRotationQueueConsQueue
(
  ConsRotationQueueId,
  ServerId,
  ConsQueueStatus,
  QueueDateTime,
  StartDateTime, 
  EndDateTime    
)
select 
  CQ.EntityId,
  Min(CQ.ServerId),    
  Min(CQ.ConsQueueStatus),
  Min(CQ.QueueDateTime),  
  Min(CQ.StartDateTime),  
  Min(CQ.EndDateTime)
from
  tbConsQueue CQ inner join
  tbConsRotationQueue CRQ on CRQ.ConsRotationQueueId=CQ.EntityId
where 
  CQ.ConsQueueType = 8
group by 
  CQ.EntityId   
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbConsQueue
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.349</SQLVERSION><RMTRACKLINK>10250</RMTRACKLINK><REASON>add column ExtSystemType</REASON><TABLENAMES>tbTicket</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add
   ExtSystemType tinyint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>gscotti</ADDEDBY><SQLVERSION>3.348</SQLVERSION><RMTRACKLINK>10781</RMTRACKLINK><REASON>Restore tblink record for promotion entities</REASON><TABLENAMES>tbTagLink</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete TL from tbTagLink as TL inner join tbPromoRule as PR on TL.EntityId = PR.ProductId where TagLinkType &lt;&gt; 20;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.347</SQLVERSION><RMTRACKLINK>SIT-10776</RMTRACKLINK><REASON></REASON><TABLENAMES>tbLedgerRule</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename 'dbo.tbLedgerRule.TriggerCardTypes', 'TriggerPaymentCodes', 'COLUMN';
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
alter column TriggerPaymentCodes varchar(max) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.346</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>CREATE  INDEX IX_AccountFlag_AccountFlag 
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_AccountFlag_AccountFlag ON tbAccountFlag ( AccountFlag );

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.345</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTask.CreateDateTime</REASON><TABLENAMES>tbTask</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTask
add CreateDateTime datetime not null constraint DF_Task_CreateDateTime default GETDATE()
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTask
drop constraint DF_Task_CreateDateTime;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.344</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to table tbTask
- ExecPosition
- ExecTotal</REASON><TABLENAMES>tbTask</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTask
add
  ExecPosition int null,  
  ExecTotal int null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>gscotti</ADDEDBY><SQLVERSION>3.343</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbBiometricExternalPurge refactoring</REASON><TABLENAMES>tbBiometricExternalPurge</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbBiometricExternalPurge;   
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE TABLE tbBiometricExternalPurge ( 
	BiometricExternalPurgeId   uniqueidentifier NOT NULL    ,
        EntityId             uniqueidentifier NOT NULL ,
	BiometricType        smallint NOT NULL    ,
	EnrollmentDateTime   datetime NOT NULL    ,
	ExternalTemplateId   varchar(100) NOT NULL  ,
        AttemptCount         smallint NOT NULL,        
        NextTryDateTime      datetime NOT NULL    ,        
        BiometricExternalPurgeStatus   smallint NOT NULL 
	CONSTRAINT PK_BiometricExternalPurge PRIMARY KEY  ( BiometricExternalPurgeId ) 
 ); 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_BiometricExternalPurge_EntityId ON tbBiometricExternalPurge ( EntityId ASC );
CREATE  INDEX IX_BiometricExternalPurge_ExternalTemplateId ON tbBiometricExternalPurge ( ExternalTemplateId ASC );
CREATE  INDEX IX_BiometricExternalPurge_Status_And_NextTry ON  tbBiometricExternalPurge ( BiometricExternalPurgeStatus, NextTryDateTime ASC );
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>gscotti</ADDEDBY><SQLVERSION>3.342</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Adding external biometric template purge table</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>     CREATE TABLE tbBiometricExternalPurge ( 
	BiometricExtrenalPurgeId   uniqueidentifier NOT NULL    ,
        EntityId             uniqueidentifier NOT NULL ,
	BiometricType        smallint NOT NULL    ,
	EnrollmentDateTime   datetime NOT NULL    ,
	ExternalTemplateId   varchar(100) NOT NULL    
	CONSTRAINT PK_BiometricExternalPurge PRIMARY KEY  ( BiometricExtrenalPurgeId ) 
 ); 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_BiometricExternalPurge_EntityId ON tbBiometricExternalPurge ( EntityId ASC );
CREATE  INDEX IX_BiometricExternalPurge_ExternalTemplateId ON tbBiometricExternalPurge ( ExternalTemplateId ASC );
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.341</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop previously created tables and create specific tables for consolidation queue:
0..3 tbTransactionConsQueue (replaces LkSNConsQueueType.Sale and LkSNConsQueueType.TransactionUserActivity) 
4..7 tbTicketUsageConsQueue (replaces LkSNConsQueueType.Access)   
8..11 tbOutboundQueueHistoryConsQueue (replaces LkSNConsQueueType.OutboundQueue )   
12..14 tbAsyncFinalizeConsQueue (replaces LkSNConsQueueType.AsyncFinalizeQueue )   
15..17 tbExtProductTypeLogConsQueue  ( replaces LkSNConsQueueType.ExtProductType)
18..20  tbConsRotationQueueConsQueue (replaces LkSNConsQueueType.Rotation)
21..22 tbLedgerConsQueue (replaces LkSNConsQueueType.Ledger)
</REASON><TABLENAMES>tbTransactionConsQueue
tbTicketUsageConsQueue
tbOutboundQueueHistoryConsQueue
tbAsyncFinalizeConsQueue
tbExtProductTypeLogConsQueue
tbConsRotationQueueConsQueue
tbLedgerConsQueue
</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT> drop table tbTransactionConsQueue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE TABLE tbTransactionConsQueue ( 
	TransactionId        uniqueidentifier NOT NULL    ,
	ServerId             smallint     ,
	ConsQueueStatus      smallint NOT NULL    ,
	QueueDateTime        datetime NOT NULL    ,
	StartDateTime        datetime     ,
	EndDateTime          datetime     ,
	CONSTRAINT PK_TransactionConsQueue PRIMARY KEY  ( TransactionId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TransactionConsQueue_ServerId ON tbTransactionConsQueue ( ServerId ASC, ConsQueueStatus ASC );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionConsQueue ADD CONSTRAINT FK_TransactionConsQueue_Transaction FOREIGN KEY ( TransactionId ) REFERENCES tbTransaction( TransactionId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbTicketUsageConsQueue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE TABLE tbTicketUsageConsQueue ( 
	TicketUsageId        uniqueidentifier NOT NULL    ,
	ServerId             smallint     ,
	ConsQueueStatus      smallint NOT NULL    ,
	QueueDateTime        datetime NOT NULL    ,
	StartDateTime        datetime     ,
	EndDateTime          datetime     ,
	CONSTRAINT PK_TicketUsageConsQueue PRIMARY KEY  ( TicketUsageId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TicketUsageConsQueue_ServerId ON tbTicketUsageConsQueue ( ServerId ASC, ConsQueueStatus ASC );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketUsageConsQueue ADD CONSTRAINT FK_TicketUsageConsQueue_TicketUsage FOREIGN KEY ( TicketUsageId ) REFERENCES tbTicketUsage( TicketUsageId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbOutboundQueueHistoryConsQueue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE TABLE tbOutboundQueueHistoryConsQueue ( 
	OutboundQueueHistoryId uniqueidentifier NOT NULL    ,
	ServerId             smallint     ,
	ConsQueueStatus      smallint NOT NULL    ,
	QueueDateTime        datetime NOT NULL    ,
	StartDateTime        datetime     ,
	EndDateTime          datetime     ,
	CONSTRAINT PK_OutboundQueueHistoryConsQueue PRIMARY KEY  ( OutboundQueueHistoryId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_OutboundQueueHistoryConsQueue_ServerId ON tbOutboundQueueHistoryConsQueue ( ServerId ASC, ConsQueueStatus ASC );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbOutboundQueueHistoryConsQueue ADD CONSTRAINT FK_OutboundQueueHistoryConsQueue_OutboundQueueHistory FOREIGN KEY ( OutboundQueueHistoryId ) REFERENCES tbOutboundQueueHistory( OutboundQueueHistoryId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE TABLE tbAsyncFinalizeConsQueue ( 
	EntityId             uniqueidentifier NOT NULL    ,
	EntityType           smallint NOT NULL    ,
	ServerId             smallint     ,
	ConsQueueStatus      smallint NOT NULL    ,
	QueueDateTime        datetime NOT NULL    ,
	StartDateTime        datetime     ,
	EndDateTime          datetime     ,
	CONSTRAINT PK_AsyncFinalizeConsQueue PRIMARY KEY  ( EntityId ) 
 );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_AsyncFinalizeConsQueue_ServerId ON tbAsyncFinalizeConsQueue ( ServerId ASC, ConsQueueStatus ASC );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAsyncFinalizeConsQueue ADD CONSTRAINT FK_AsyncFinalizeConsQueue_EntityId FOREIGN KEY ( EntityId ) REFERENCES tbAsyncFinalize( EntityId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE TABLE tbExtProductTypeLogConsQueue ( 
	ExtProductTypeLogId  uniqueidentifier NOT NULL    ,
	ServerId             smallint     ,
	ConsQueueStatus      smallint NOT NULL    ,
	QueueDateTime        datetime NOT NULL    ,
	StartDateTime        datetime     ,
	EndDateTime          datetime     ,
	CONSTRAINT PK_ExtProductTypeLogConsQueue PRIMARY KEY  ( ExtProductTypeLogId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_ExtProductTypeLogConsQueue_ServerId ON tbExtProductTypeLogConsQueue ( ServerId ASC, ConsQueueStatus ASC );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbExtProductTypeLogConsQueue ADD CONSTRAINT FK_ExtProductTypeLogConsQueue_ExtProductTypeLog FOREIGN KEY ( ExtProductTypeLogId ) REFERENCES tbExtProductTypeLog( ExtProductTypeLogId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE TABLE tbConsRotationQueueConsQueue ( 
	ConsRotationQueueId  uniqueidentifier NOT NULL    ,
	ServerId             smallint     ,
	ConsQueueStatus      smallint NOT NULL    ,
	QueueDateTime        datetime NOT NULL    ,
	StartDateTime        datetime     ,
	EndDateTime          datetime     ,
	CONSTRAINT PK_ConsRotationQueueConsQueue PRIMARY KEY  ( ConsRotationQueueId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_ConsRotationQueueConsQueue_ServerId ON tbConsRotationQueueConsQueue ( ServerId ASC, ConsQueueStatus ASC );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbConsRotationQueueConsQueue ADD CONSTRAINT FK_ConsRotationQueueConsQueue_ConsRotationQueue FOREIGN KEY ( ConsRotationQueueId ) REFERENCES tbConsRotationQueue( ConsRotationQueueId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE TABLE tbLedgerConsQueue ( 
	EntityId             uniqueidentifier NOT NULL    ,
	EntityType           smallint NOT NULL    ,
	ServerId             smallint     ,
	ConsQueueStatus      smallint NOT NULL    ,
	QueueDateTime        datetime NOT NULL    ,
	StartDateTime        datetime     ,
	EndDateTime          datetime     ,
	CONSTRAINT PK_LedgerConsQueue PRIMARY KEY  ( EntityId ) 
 );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_LedgerConsQueue_ServerId ON tbLedgerConsQueue ( ServerId ASC, ConsQueueStatus ASC );
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.340</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create specific tables for consolidation queue:
0..2 tbTransactionConsQueue (replaces LkSNConsQueueType.Sale) 
3..5 tbTicketUsageConsQueue (replaces LkSNConsQueueType.Access)   
6..8 tbOutboundQueueHistoryConsQueue (replaces LkSNConsQueueType.OutboundQueue )   </REASON><TABLENAMES>tbTransactionConsQueue,
tbTicketUsageConsQueue,
tbOutboundQueueHistoryConsQueue
</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE tbTransactionConsQueue ( 
	TransactionId        uniqueidentifier NOT NULL    ,
	ServerId             smallint     ,
	ConsQueueStatus      smallint NOT NULL    ,
	QueueDateTime        datetime NOT NULL    ,
	StartDateTime        datetime     ,
	EndDateTime          datetime     ,
	CONSTRAINT PK_TransactionConsQueue PRIMARY KEY  ( TransactionId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TransactionConsQueue_ServerId ON tbTransactionConsQueue ( ServerId, ConsQueueStatus );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionConsQueue ADD CONSTRAINT FK_TransactionConsQueue_Transaction FOREIGN KEY ( TransactionId ) REFERENCES tbTransaction( TransactionId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE TABLE tbTicketUsageConsQueue ( 
	TicketUsageId        uniqueidentifier NOT NULL    ,
	ServerId             smallint     ,
	ConsQueueStatus      smallint NOT NULL    ,
	QueueDateTime        datetime NOT NULL    ,
	StartDateTime        datetime     ,
	EndDateTime          datetime     ,
	CONSTRAINT PK_TicketUsageConsQueue PRIMARY KEY  ( TicketUsageId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TicketUsageConsQueue_ServerId ON tbTicketUsageConsQueue ( ServerId, ConsQueueStatus );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketUsageConsQueue ADD CONSTRAINT FK_TicketUsageConsQueue_TicketUsage FOREIGN KEY ( TicketUsageId ) REFERENCES tbTicketUsage( TicketUsageId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE TABLE tbOutboundQueueHistoryConsQueue ( 
	OutboundQueueHistoryId uniqueidentifier NOT NULL    ,
	ServerId             smallint     ,
	ConsQueueStatus      smallint NOT NULL    ,
	QueueDateTime        datetime NOT NULL    ,
	StartDateTime        datetime     ,
	EndDateTime          datetime     ,
	CONSTRAINT PK_OutboundQueueHistoryConsQueue PRIMARY KEY  ( OutboundQueueHistoryId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_OutboundQueueHistoryConsQueue_ServerId ON tbOutboundQueueHistoryConsQueue ( ServerId, ConsQueueStatus );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbOutboundQueueHistoryConsQueue ADD CONSTRAINT FK_OutboundQueueHistoryConsQueue_OutboundQueueHistory FOREIGN KEY ( OutboundQueueHistoryId ) REFERENCES tbOutboundQueueHistory( OutboundQueueHistoryId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.339</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create Sequence and Seed field in tables:
- tbTicket
- tbAccount
- tbTicketUsage
- tbTransaction
- tbSale
- tbMedia
- tbInstallmentContract
- tbAction
- tbPerformance</REASON><TABLENAMES>tbTicket
tbAccount
tbTicketUsage
tbTransaction
tbSale
tbMedia
tbInstallmentContract
tbAction
tbPerformance</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add 
  TicketSequence bigint constraint DF_Ticket_TicketSequence default (0),
  TicketSeed smallint constraint DF_Ticket_TicketSeed default (0);




</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_Ticket_TicketSequence ON tbTicket ( TicketSequence ) INCLUDE (TicketSeed, EncodeFiscalDate) WHERE TicketSequence is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
drop constraint DF_Ticket_TicketSequence;

alter table tbTicket
drop constraint DF_Ticket_TicketSeed;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccount
add 
  AccountVersion bigint constraint DF_Account_AccountVersion default (0),
  AccountSequence bigint constraint DF_Account_AccountSequence default (0),
  AccountSeed smallint constraint DF_Account_AccountSeed default (0);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_Account_AccountSequence ON tbAccount ( AccountSequence ) INCLUDE (AccountSeed) WHERE AccountSequence is not null;

CREATE UNIQUE INDEX UQ_Account_AccountVersion ON tbAccount ( AccountVersion ) WHERE AccountVersion is not null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccount
drop constraint DF_Account_AccountSequence;

alter table tbAccount
drop constraint DF_Account_AccountSeed;

alter table tbAccount
drop constraint DF_Account_AccountVersion;


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add 
  TicketUsageSequence bigint constraint DF_TicketUsage_TicketUsageSequence default (0),
  TicketUsageSeed smallint constraint DF_TicketUsage_TicketUsageSeed default (0);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_TicketUsage_TicketUsageSequence ON tbTicketUsage ( TicketUsageSequence ) INCLUDE (TicketUsageSeed, UsageFiscalDate) WHERE TicketUsageSequence is not null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
drop constraint DF_TicketUsage_TicketUsageSequence;

alter table tbTicketUsage
drop constraint DF_TickeUsaget_TicketUsageSeed;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
add 
  TransactionSequence bigint constraint DF_Transaction_TransactionSequence default (0),
  TransactionSeed smallint constraint DF_Transaction_TransactionSeed default (0);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_Transaction_TransactionSequence ON tbTransaction ( TransactionSequence ) INCLUDE (TransactionSeed, TransactionFiscalDate) WHERE TransactionSequence is not null;


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
drop constraint DF_Transaction_TransactionSequence;

alter table tbTransaction
drop constraint DF_Transaction_TransactionSeed;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale
add 
  OrderVersion bigint constraint DF_Sale_OrderVersion default (0),
  OrderSequence bigint constraint DF_Sale_OrderSequence default (0),
  OrderSeed smallint constraint DF_Sale_OrderSeed default (0);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_Sale_OrderSequence ON tbSale ( OrderSequence ) INCLUDE (OrderSeed) WHERE OrderSequence is not null;

CREATE UNIQUE INDEX UQ_Sale_OrderVersion ON tbSale ( OrderVersion ) INCLUDE (SaleFiscalDate) WHERE OrderVersion is not null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale
drop constraint DF_Sale_OrderSequence;

alter table tbSale
drop constraint DF_Sale_OrderSeed;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMedia
add 
  MediaSequence bigint constraint DF_Media_MediaSequence default (0),
  MediaSeed smallint constraint DF_Media_MediaSeed default (0);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_Media_MediaSequence ON tbMedia ( MediaSequence ) INCLUDE (MediaSeed, EncodeFiscalDate) WHERE MediaSequence is not null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMedia
drop constraint DF_Media_MediaSequence;

alter table tbMedia
drop constraint DF_Media_MediaSeed;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
add 
  InstallmentContractVersion bigint constraint DF_InstallmentContract_InstallmentContractVersion default (0),
  InstallmentContractSequence bigint constraint DF_InstallmentContract_InstallmentContractSequence default (0),
  InstallmentContractSeed smallint constraint DF_InstallmentContract_InstallmentContractSeed default (0);

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_InstallmentContract_InstallmentContractSequence ON tbInstallmentContract ( InstallmentContractSequence ) INCLUDE (InstallmentContractSeed) WHERE InstallmentContractSequence is not null;

CREATE UNIQUE INDEX UQ_InstallmentContract_InstallmentContractVersion ON tbInstallmentContract ( InstallmentContractVersion ) WHERE InstallmentContractVersion is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
drop constraint DF_InstallmentContract_InstallmentContractSequence;

alter table tbInstallmentContract
drop constraint DF_InstallmentContract_InstallmentContractSeed;

alter table tbInstallmentContract
drop constraint DF_InstallmentContract_InstallmentContractVersion;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAction
add 
  ActionVersion bigint constraint DF_Action_ActionVersion default (0),
  ActionSequence bigint constraint DF_Action_ActionSequence default (0),
  ActionSeed smallint constraint DF_Action_ActionSeed default (0);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_Action_ActionSequence ON tbAction ( ActionSequence ) INCLUDE (ActionSeed) WHERE ActionSequence is not null;

CREATE UNIQUE INDEX UQ_Action_ActionVersion ON tbAction ( ActionVersion ) WHERE ActionVersion is not null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAction
drop constraint DF_Action_ActionSequence;

alter table tbAction
drop constraint DF_Action_ActionSeed;

alter table tbAction
drop constraint DF_Action_ActionVersion;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
add 
  PerformanceVersion bigint constraint DF_Performance_PerformanceVersion default (0),
  PerformanceSequence bigint constraint DF_Performance_PerformanceSequence default (0),
  PerformanceSeed smallint constraint DF_Performance_PerformanceSeed default (0);

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_Performance_PerformanceSequence ON tbPerformance ( PerformanceSequence ) INCLUDE (PerformanceSeed) WHERE PerformanceSequence is not null;

CREATE UNIQUE INDEX UQ_Performance_PerformanceVersion ON tbPerformance ( PerformanceVersion ) WHERE PerformanceVersion is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
drop constraint DF_Performance_PerformanceSequence;

alter table tbPerformance
drop constraint DF_Performance_PerformanceSeed;

alter table tbPerformance
drop constraint DF_Performance_PerformanceVersion;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTask
set LastEntityChangeId=0
where LastEntityChangeId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTask
set LastEntityChangeId = null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTask
set LastReference = null
where ClassAlias='task-process-recover' or ClassAlias='task-ledger-recover'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.338</SQLVERSION><RMTRACKLINK>SIT-10641</RMTRACKLINK><REASON>New tbTicketRenew index</REASON><TABLENAMES>tbTicketRenew</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name='IX_TicketRenew_RenewStartDate' AND object_id = OBJECT_ID('tbTicketRenew')) 
BEGIN 
  CREATE  INDEX IX_TicketRenew_RenewStartDate ON tbTicketRenew (RenewStartDate);
END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.337</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbPerformance.DynRateCode</REASON><TABLENAMES>tbPerformance</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPerformance
add
  DynRateCode bit not null constraint DF_Performance_DynRateCode default (1)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
drop constraint DF_Performance_DynRateCode
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.336</SQLVERSION><RMTRACKLINK>SIT-10326</RMTRACKLINK><REASON>Drop table tbLedgerQueue replaced by using async finalize logic</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbLedgerQueue
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.335</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add field RenewFromInstallmentContractId to tbInstallmentContract

create table tbInstallmentContractTrigger</REASON><TABLENAMES>tbInstallmentContract
tbInstallmentContractTrigger</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
add
  RenewFromInstallmentContractId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbInstallmentContract ADD CONSTRAINT FK_InstallmentContract_RenewFromInstallmentContract FOREIGN KEY ( RenewFromInstallmentContractId ) REFERENCES tbInstallmentContract( InstallmentContractId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_InstallmentContract_RenewFromInstallmentContractId ON tbInstallmentContract ( RenewFromInstallmentContractId ) where RenewFromInstallmentContractId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE TABLE tbInstallmentContractTrigger ( 
	InstallmentContractTriggerId uniqueidentifier NOT NULL,
	InstallmentContractId uniqueidentifier NOT NULL,
	InstallmentContractTriggerType smallint NOT NULL,
	ScheduledDate        date NOT NULL,
	TriggerDateTime      datetime,
	CONSTRAINT PK_InstallmentContractTrigger PRIMARY KEY  ( InstallmentContractTriggerId ) 
 )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT></SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_InstallmentContractTrigger_InstallmentContractId ON tbInstallmentContractTrigger ( InstallmentContractId, ScheduledDate )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_InstallmentContractTrigger_ScheduledDate ON tbInstallmentContractTrigger ( ScheduledDate, TriggerDateTime ) where TriggerDateTime is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbInstallmentContractTrigger ADD CONSTRAINT FK_InstallmentContractTrigger_InstallmentContract FOREIGN KEY ( InstallmentContractId ) REFERENCES tbInstallmentContract( InstallmentContractId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.334</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added new columns  to tbTicketUsage
 0 FlashAtTurnstile
1 PeopleOfDetermination
2 RotationsAllowed
3 ExtraEntry</REASON><TABLENAMES>tbTicketUsage</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add FlashAtTurnstile bit 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add PeopleOfDetermination bit
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add RotationsAllowed smallint
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add ExtraEntry bit
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.333</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>updating tbProductGuest stored procs because of patch 3.330</REASON><TABLENAMES>tbProductGuest</TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>gscotti</ADDEDBY><SQLVERSION>3.332</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>SIT 10516</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbTagLink set tbTagLink.TagLinkType = 20 from tbTagLink as TL inner join tbPromoRule as PR on TL.EntityId = PR.ProductId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.331</SQLVERSION><RMTRACKLINK>SIT-10250</RMTRACKLINK><REASON>create table tbTicketUsageExternalRedeem</REASON><TABLENAMES>tbTicketUsageExternalRedeem</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND  TABLE_NAME = 'tbTicketUsageExternalRedeem'))
BEGIN
  CREATE TABLE tbTicketUsageExternalRedeem ( 
  	  TicketUsageId        uniqueidentifier NOT NULL    ,
	  PluginId             uniqueidentifier NOT NULL    ,
	  DocData              nvarchar(max)     ,
	  CONSTRAINT PK_TicketUsageExternalRedeem PRIMARY KEY  ( TicketUsageId ) 
  );  

  CREATE  INDEX IX_TicketUsageExternalRedeem_PluginId ON tbTicketUsageExternalRedeem ( PluginId );  

  ALTER TABLE tbTicketUsageExternalRedeem ADD CONSTRAINT FK_TicketUsageExternalRedeem_TicketUsage FOREIGN KEY ( TicketUsageId ) REFERENCES tbTicketUsage( TicketUsageId ) ON DELETE NO ACTION ON UPDATE NO ACTION;  

  ALTER TABLE tbTicketUsageExternalRedeem ADD CONSTRAINT FK_TicketUsageExternalRedeem_Plugin FOREIGN KEY ( PluginId ) REFERENCES tbPlugin( PluginId ) ON DELETE NO ACTION ON UPDATE NO ACTION;  

END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.330</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProductGuest.AutoAddToCart</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductGuest
add
  AutoAddToCart bit not null constraint DF_ProductGuest_AutoAddToCart default (0)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductGuest
drop constraint DF_ProductGuest_AutoAddToCart
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.329</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>create tbAccessPointDescription</REASON><TABLENAMES>tbAccessPointDescription</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE tbAccessPointDescription ( 
  AccessPointId        uniqueidentifier NOT NULL    ,
  ValidDateFrom        date NOT NULL    ,
  ValidDateTo          date     ,
  Description          nvarchar(100)     ,
  CONSTRAINT PK_AccessPointDescription PRIMARY KEY  ( AccessPointId, ValidDateFrom ) 
 );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAccessPointDescription ADD CONSTRAINT FK_AccessPointDescription_AccessPoint FOREIGN KEY ( AccessPointId ) REFERENCES tbAccessPoint( AptWorkstationId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.328</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add field TagLinkType to tbTagLink</REASON><TABLENAMES>tbTagLink</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTagLink
add
  TagLinkType smallint not null constraint DF_TagLink_TagLinkType default (1)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTagLink
drop constraint DF_TagLink_TagLinkType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX IX_TagLink_EntityId ON tbTagLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTagLink DROP CONSTRAINT PK_TagLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTagLink
ADD CONSTRAINT PK_TagLink PRIMARY KEY (TagId, EntityId, TagLinkType);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TagLink_EntityId ON tbTagLink ( EntityId ASC, TagLinkType ASC )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.327</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add field FeePercValue to tbProductPriceDate</REASON><TABLENAMES>tbProductPriceDate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductPriceDate
add
  FeePercValue money null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.326</SQLVERSION><RMTRACKLINK>SIT-8365</RMTRACKLINK><REASON>Increase size of tbIndividualCoupon.IndividualCouponCode
NB. Size is checked first because this change is rolled into 8.8.1 as well</REASON><TABLENAMES>tbIndividualCoupon</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>if (SELECT COL_LENGTH('tbIndividualCoupon', 'IndividualCouponCode')) &lt; 150
begin
  alter table tbIndividualCoupon
  alter column IndividualCouponCode varchar(150) not null
end
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.325</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Create table tbEventDynRateCode
- Add fields to tbEvent: DynRateCodeType and DynRateCodeValueType</REASON><TABLENAMES>tbEvent
tbEventDynRateCode</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE tbEventDynRateCode ( 
	EventDynRateCodeId   uniqueidentifier NOT NULL    ,
	EventId              uniqueidentifier NOT NULL    ,
	PerformanceTypeId    uniqueidentifier     ,
	SeatCategoryId       uniqueidentifier     ,
	RateCodeId           uniqueidentifier NOT NULL    ,
	Value                money NOT NULL    ,
	CONSTRAINT PK_EventDynRateCode PRIMARY KEY  ( EventDynRateCodeId ) 
 );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_EventDynRateCode_EventId ON tbEventDynRateCode ( EventId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_EventDynRateCode_PerformanceTypeId ON tbEventDynRateCode ( PerformanceTypeId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_EventDynRateCode_SeatCategoryId ON tbEventDynRateCode ( SeatCategoryId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_EventDynRateCode_RateCodeId ON tbEventDynRateCode ( RateCodeId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbEventDynRateCode ADD CONSTRAINT FK_EventDynRateCode_Event FOREIGN KEY ( EventId ) REFERENCES tbEvent( EventId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbEventDynRateCode ADD CONSTRAINT FK_EventDynRateCode_PerformanceType FOREIGN KEY ( PerformanceTypeId ) REFERENCES tbPerformanceType( PerformanceTypeId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbEventDynRateCode ADD CONSTRAINT FK_EventDynRateCode_SeatCategoryAttributeItem FOREIGN KEY ( SeatCategoryId ) REFERENCES tbAttributeItem( AttributeItemId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbEventDynRateCode ADD CONSTRAINT FK_EventDynRateCode_RateCode FOREIGN KEY ( RateCodeId ) REFERENCES tbRateCode( RateCodeId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
add
  DynRateCodeType smallint null,  
  DynRateCodeValueType smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.324</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbSaleItem.HostSaleItemId</REASON><TABLENAMES>tbSaleItem</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItem
add HostSaleItemId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_SaleItem_HostSaleItemId ON tbSaleItem ( HostSaleItemId ) where HostSaleItemId is not null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleItem ADD CONSTRAINT FK_SaleItem_HostSaleItem FOREIGN KEY ( HostSaleItemId ) REFERENCES tbSaleItem( SaleItemId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.323</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTicketGuestLink</REASON><TABLENAMES>tbTicketGuestLink</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE tbTicketGuestLink ( 
	TicketId             uniqueidentifier NOT NULL    ,
	GuestTicketId        uniqueidentifier NOT NULL    ,
	CONSTRAINT PK_TicketGuestLink PRIMARY KEY  ( TicketId, GuestTicketId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TicketGuestLink_GuestTicketId ON tbTicketGuestLink ( GuestTicketId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketGuestLink ADD CONSTRAINT FK_TicketGuestLink_HostTicket FOREIGN KEY ( TicketId ) REFERENCES tbTicket( TicketId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketGuestLink ADD CONSTRAINT FK_TicketGuestLink_GuestTicket FOREIGN KEY ( GuestTicketId ) REFERENCES tbTicket( TicketId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbTicketGuestLink (
  TicketId,  
  GuestTicketId    
)
select
  SrcEntityId,  
  DstEntityId  
from
  tbEntityLink  
where
  EntityLinkType=2 and  
  exists (select * from tbTicket where TicketId=SrcEntityId) and  
  exists (select * from tbTicket where TicketId=DstEntityId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbEntityLink  
where EntityLinkType=2
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.322</SQLVERSION><RMTRACKLINK>10393</RMTRACKLINK><REASON>Add field tbDocTemplate.IndividualPAH</REASON><TABLENAMES>tbDocTemplate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
add
  IndividualPAH bit not null constraint DF_DocTemplate_IndividualPAH default (0)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
drop constraint DF_DocTemplate_IndividualPAH
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.321</SQLVERSION><RMTRACKLINK>SIT-10376</RMTRACKLINK><REASON>New tbSaleItem.TicketId field</REASON><TABLENAMES>tbSaleItem</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItem
add TicketId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_SaleItem_TicketId ON tbSaleItem ( TicketId ) where TicketId is not null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleItem ADD CONSTRAINT FK_SaleItem_Ticket FOREIGN KEY ( TicketId ) REFERENCES tbTicket( TicketId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.320</SQLVERSION><RMTRACKLINK>10335</RMTRACKLINK><REASON>Add fields to tbRepository:
- ConvertToPDF</REASON><TABLENAMES>tbRepository</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbRepository
add
  ConvertToPDF bit not null constraint DF_Repository_ConvertToPDF default (0)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbRepository
drop constraint DF_Repository_ConvertToPDF
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.319</SQLVERSION><RMTRACKLINK>SIT-10390</RMTRACKLINK><REASON>Set default value for used/unused flag in ledger rule "Refund"</REASON><TABLENAMES>tbLedgerRuleFlag</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF NOT EXISTS (
    select 
	  1
    from 
	  tbLedgerRuleFlag LRF inner join
	  tbLedgerRule LR on 
		LR.LedgerRuleId=LRF.LedgerRuleId and
		LR.LedgerTriggerType=105
	where 
	  LedgerRuleFlag in (5, 6) 
)
BEGIN
    insert into tbLedgerRuleFlag (LedgerRuleId, LedgerRuleFlag)
	select 
	  LR.LedgerRuleId,
	  5 /*Unused*/
	from 
	  tbLedgerRule LR
	where 
	  LR.LedgerTriggerType=105 and 
	  LR.LedgerRuleId not in (select LedgerRuleId from tbLedgerRuleFlag where LedgerRuleId=LR.LedgerRuleId and LedgerRuleFlag=5)

	insert into tbLedgerRuleFlag (LedgerRuleId, LedgerRuleFlag)
	select 
	  LR.LedgerRuleId,
	  6 /*Unused*/
	from 
	  tbLedgerRule LR
	where 
	  LR.LedgerTriggerType=105 and 
	  LR.LedgerRuleId not in (select LedgerRuleId from tbLedgerRuleFlag where LedgerRuleId=LR.LedgerRuleId and LedgerRuleFlag=6)
END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.318</SQLVERSION><RMTRACKLINK>10341</RMTRACKLINK><REASON>Create new table tbTransactionAccountMerge</REASON><TABLENAMES>tbTransactionAccountMerge</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE tbTransactionAccountMerge ( 
	TransactionId        uniqueidentifier NOT NULL    ,
	FinalAccountId       uniqueidentifier NOT NULL    ,
	SourceAccountId      uniqueidentifier NOT NULL    ,
	CONSTRAINT PK_TransactionAccountMerge PRIMARY KEY  ( TransactionId, FinalAccountId, SourceAccountId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TransactionAccountMerge_FinalAccountId ON tbTransactionAccountMerge ( FinalAccountId ASC );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TransactionAccountMerge_SourceAccountId ON tbTransactionAccountMerge ( SourceAccountId ASC );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionAccountMerge ADD CONSTRAINT FK_TransactionAccountMerge_Transaction FOREIGN KEY ( TransactionId ) REFERENCES tbTransaction( TransactionId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionAccountMerge ADD CONSTRAINT FK_TransactionAccountMerge_FinalAccount FOREIGN KEY ( FinalAccountId ) REFERENCES tbAccount( AccountId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionAccountMerge ADD CONSTRAINT FK_TransactionAccountMerge_SourceAccount FOREIGN KEY ( SourceAccountId ) REFERENCES tbAccount( AccountId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.317</SQLVERSION><RMTRACKLINK>10335</RMTRACKLINK><REASON>Add fields to tbRepository:
- RequireParsing
- DistinctAttachment</REASON><TABLENAMES>tbRepository</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbRepository
add
  RequireParsing bit not null constraint DF_Repository_RequireParsing default (0),  
  DistinctAttachment bit not null constraint DF_Repository_DistinctAttachment default (0)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbRepository
drop constraint DF_Repository_RequireParsing
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbRepository
drop constraint DF_Repository_DistinctAttachment
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.316</SQLVERSION><RMTRACKLINK>SIT-9892</RMTRACKLINK><REASON>[0..4] Add fields to tbWebAuth
[5..8] Add filed to tbSaleToken

NB: Changes rolled into 8.8.13.X (BAA) so IFs to check if to re-apply are needed</REASON><TABLENAMES>tbWebAuth
tbSaleToken</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF COL_LENGTH('tbWebAuth', 'PaymentId') IS NULL
BEGIN
  alter table tbWebAuth
  add 
    PaymentId uniqueidentifier null, 
    TransactionId uniqueidentifier null
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_WebAuth_PaymentId' AND object_id = OBJECT_ID('tbWebAuth'))
BEGIN
  CREATE INDEX IX_WebAuth_PaymentId ON tbWebAuth ( PaymentId ) where PaymentId is not null;    
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_WebAuth_TransactionId' AND object_id = OBJECT_ID('tbWebAuth'))
BEGIN
  CREATE INDEX IX_WebAuth_TransactionId ON tbWebAuth ( TransactionId ) where TransactionId is not null;    
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_WebAuth_Payment') and PARENT_OBJECT_ID = OBJECT_ID(N'tbWebAuth'))
BEGIN
  ALTER TABLE tbWebAuth ADD CONSTRAINT FK_WebAuth_Payment FOREIGN KEY ( PaymentId ) REFERENCES tbPayment( PaymentId ) ON DELETE NO ACTION ON UPDATE NO ACTION;  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_WebAuth_Transaction') and PARENT_OBJECT_ID = OBJECT_ID(N'tbWebAuth'))
BEGIN
  ALTER TABLE tbWebAuth ADD CONSTRAINT FK_WebAuth_Transaction FOREIGN KEY ( TransactionId ) REFERENCES tbTransaction( TransactionId ) ON DELETE NO ACTION ON UPDATE NO ACTION;  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF COL_LENGTH('tbSaleToken', 'WorkstationId') IS NULL
BEGIN
  alter table tbSaleToken
  add WorkstationId uniqueidentifier null
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF COL_LENGTH('tbSaleToke', 'WorkstationId') IS NOT NULL
BEGIN
  update tbSaleToken
  set WorkstationId = (select top(1) WorkstationId from tbWorkstation where WorkstationType=1)  
  where WorkstationId is null

  alter table tbSaleToken 
  alter column WorkstationId uniqueidentifier not null;  
END;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_SaleToken_WorkstationId' AND object_id = OBJECT_ID('tbSaleToken'))
BEGIN
  CREATE INDEX IX_SaleToken_WorkstationId ON tbSaleToken ( WorkstationId );    
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_SaleToken_Workstation') and PARENT_OBJECT_ID = OBJECT_ID(N'tbSaleToken'))
BEGIN
  ALTER TABLE tbSaleToken ADD CONSTRAINT FK_SaleToken_Workstation FOREIGN KEY ( WorkstationId ) REFERENCES tbWorkstation( WorkstationId ) ON DELETE NO ACTION ON UPDATE NO ACTION;  
END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.315</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbAccountFinance:
- ChannelManagerPluginId
- ChannelManagerWorkstationId
- ChannelManagerCodeAliasTypeId
- ChannelManagerResellerCode</REASON><TABLENAMES>tbAccountFinance</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
add
  ChannelManagerPluginId uniqueidentifier null,  
  ChannelManagerWorkstationId uniqueidentifier null,  
  ChannelManagerCodeAliasTypeId uniqueidentifier null,  
  ChannelManagerResellerCode varchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_AccountFinance_ChannelManagerPluginId ON tbAccountFinance ( ChannelManagerPluginId ) where ChannelManagerPluginId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_AccountFinance_ChannelManagerWorkstationId ON tbAccountFinance ( ChannelManagerWorkstationId ) where ChannelManagerWorkstationId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_AccountFinance_ChannelManagerCodeAliasTypeId ON tbAccountFinance ( ChannelManagerCodeAliasTypeId ) where ChannelManagerCodeAliasTypeId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAccountFinance ADD CONSTRAINT FK_AccountFinance_ChannelManagerPlugin FOREIGN KEY ( ChannelManagerPluginId ) REFERENCES tbPlugin( PluginId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAccountFinance ADD CONSTRAINT FK_AccountFinance_ChannelManagerWorkstation FOREIGN KEY ( ChannelManagerWorkstationId ) REFERENCES tbWorkstation( WorkstationId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAccountFinance ADD CONSTRAINT FK_AccountFinance_CodeAliasType FOREIGN KEY ( ChannelManagerCodeAliasTypeId ) REFERENCES tbCodeAliasType( CodeAliasTypeId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.314</SQLVERSION><RMTRACKLINK>SIT-9892</RMTRACKLINK><REASON>Add tbSaleToken.WebAuthId

NB: Changes rolled into 8.8.13.X (BAA) so IFs to check if to re-apply are needed</REASON><TABLENAMES>tbSaleToken</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF COL_LENGTH('tbSaleToken', 'WebAuthId') IS NULL
BEGIN
  alter table tbSaleToken
  add WebAuthId uniqueidentifier null
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_SaleToken_WebAuthId' AND object_id = OBJECT_ID('tbSaleToken'))
BEGIN
  CREATE INDEX IX_SaleToken_WebAuthId ON tbSaleToken ( WebAuthId ) where WebAuthId is not null;    
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_SaleToken_WebAuth') and PARENT_OBJECT_ID = OBJECT_ID(N'tbSaleToken'))
BEGIN
  ALTER TABLE tbSaleToken ADD CONSTRAINT FK_SaleToken_WebAuth FOREIGN KEY ( WebAuthId ) REFERENCES tbWebAuth( WebAuthId ) ON DELETE NO ACTION ON UPDATE NO ACTION;  
END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.313</SQLVERSION><RMTRACKLINK>SIT-9892</RMTRACKLINK><REASON>Change tbSaleToken.ExpireDateTime from date to smalldatetime

NB: Changes rolled into 8.8.13.X (BAA) so IFs to check if to re-apply are needed</REASON><TABLENAMES>tbSaleToken</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_SaleToken_SaleId' AND object_id = OBJECT_ID('tbSaleToken'))
BEGIN
  DROP INDEX tbSaleToken.IX_SaleToken_SaleId  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_SaleToken_StatusAndExpire' AND object_id = OBJECT_ID('tbSaleToken'))
BEGIN
  DROP INDEX tbSaleToken.IX_SaleToken_StatusAndExpire  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF COL_LENGTH('tbSaleToken', 'ExpireDateTime') IS NOT NULL
BEGIN
  alter table tbSaleToken alter column ExpireDateTime smalldatetime  
END

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_SaleToken_SaleId ON tbSaleToken ( SaleId, ExpireDateTime )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_SaleToken_StatusAndExpire ON tbSaleToken ( SaleTokenStatus, ExpireDateTime )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.312</SQLVERSION><RMTRACKLINK>SIT-9892</RMTRACKLINK><REASON>New tbSaleToken table

NB: Changes rolled into 8.8.13.X (BAA) so IFs to check if to re-apply are needed</REASON><TABLENAMES>tbSaleToken</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF OBJECT_ID (N'tbSaleToken', N'U') IS NULL 
BEGIN
  CREATE TABLE tbSaleToken ( 
  	SaleTokenId          uniqueidentifier NOT NULL    ,
	SaleId               uniqueidentifier NOT NULL    ,
	SaleTokenType        tinyint NOT NULL    ,
	SaleTokenStatus      tinyint NOT NULL    ,
	ExpireDateTime       date NOT NULL    ,
	CONSTRAINT PK_SaleToken_SaleTokenId PRIMARY KEY  ( SaleTokenId ) 
  )  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_SaleToken_SaleId' AND object_id = OBJECT_ID('tbSaleToken'))
BEGIN
  CREATE INDEX IX_SaleToken_SaleId ON tbSaleToken ( SaleId, ExpireDateTime )  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_SaleToken_StatusAndExpire' AND object_id = OBJECT_ID('tbSaleToken'))
BEGIN
  CREATE INDEX IX_SaleToken_StatusAndExpire ON tbSaleToken ( SaleTokenStatus, ExpireDateTime )  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_SaleToken_Sale') and PARENT_OBJECT_ID = OBJECT_ID(N'tbSaleToken'))
BEGIN
  ALTER TABLE tbSaleToken ADD CONSTRAINT FK_SaleToken_Sale FOREIGN KEY ( SaleId ) REFERENCES tbSale( SaleId ) ON DELETE NO ACTION ON UPDATE NO ACTION;  
END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.311</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Delete right 530</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbRight where RightType=530
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.310</SQLVERSION><RMTRACKLINK>SIT-10233</RMTRACKLINK><REASON>add column SourceFolder, Platform, ToRunningFolder to tbDriverFramework table
add default value to Plaftorm field
delete costraint PK_DriverFramework
rename column FrameworkFileName o FileName
add constrint PK_DriverFramework for field DriverId, FileName, Platform</REASON><TABLENAMES>tbDriverFramework</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDriverFramework
add 
SourceFolder varchar(100) null, 
Platform varchar(15) null,	
ToRunningFolder bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbDriverFramework
set Platform = 'WIN32'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDriverFramework
alter column Platform varchar(15) not null 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDriverFramework
drop constraint PK_DriverFramework
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>exec sp_rename 'tbDriverFramework.FrameworkFileName', 'FileName' , 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDriverFramework
add constraint PK_DriverFramework PRIMARY KEY (DriverId, FileName, Platform)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.309</SQLVERSION><RMTRACKLINK>SIT-10069</RMTRACKLINK><REASON>Rename tbAccountFinance.AudoDaysBeforeVisit into tbAccountFinance AutoDaysBeforeVisit

NB: Changes rolled into 8.8.13.X (BAA) so IFs to check if to re-apply are needed</REASON><TABLENAMES>tbAccountFinance</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF COL_LENGTH('tbAccountFinance', 'AudoDaysBeforeVisit') IS NOT NULL
BEGIN
  alter table tbAccountFinance
  drop column AudoDaysBeforeVisit  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF COL_LENGTH('tbAccountFinance', 'AutoDaysBeforeVisit') IS NULL
BEGIN
  alter table tbAccountFinance
  add AutoDaysBeforeVisit smallint null
END 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.308</SQLVERSION><RMTRACKLINK>SIT-10069</RMTRACKLINK><REASON>[0..6] Add fields to tbAccountFinance
[7..8] Add tbSale.ScheduledPaymentDate

NB: Changes rolled into 8.8.13.X (BAA) so IFs to check if to re-apply are needed</REASON><TABLENAMES>tbAccountFinance
tbSale</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF COL_LENGTH('tbAccountFinance', 'AutoPaymentMethodId') IS NULL
BEGIN
  alter table tbAccountFinance
  add 
    AudoDaysBeforeVisit smallint null, 
    AutoPaymentMethodId uniqueidentifier null,	
    AutoPaymentTokenId uniqueidentifier null, 
    AutoAltPaymentMethodId uniqueidentifier null
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_AccountFinance_AutoPaymentMethodId' AND object_id = OBJECT_ID('tbAccountFinance'))
BEGIN
  CREATE INDEX IX_AccountFinance_AutoPaymentMethodId ON tbAccountFinance ( AutoPaymentMethodId ) where AutoPaymentMethodId is not null;    
END


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_AccountFinance_AutoPaymentTokenId' AND object_id = OBJECT_ID('tbAccountFinance'))
BEGIN
  CREATE INDEX IX_AccountFinance_AutoPaymentTokenId ON tbAccountFinance ( AutoPaymentTokenId ) where AutoPaymentTokenId is not null;  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_AccountFinance_AutoAltPaymentMethodId' AND object_id = OBJECT_ID('tbAccountFinance'))
BEGIN
  CREATE INDEX IX_AccountFinance_AutoAltPaymentMethodId ON tbAccountFinance ( AutoAltPaymentMethodId ) where AutoAltPaymentMethodId is not null;  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_AccountFinance_PluginPaymentMethod_AutoPayment') and PARENT_OBJECT_ID = OBJECT_ID(N'tbAccountFinance'))
BEGIN
  ALTER TABLE tbAccountFinance ADD CONSTRAINT FK_AccountFinance_PluginPaymentMethod_AutoPayment FOREIGN KEY ( AutoPaymentMethodId ) REFERENCES tbPluginPaymentMethod( PluginId ) ON DELETE NO ACTION ON UPDATE NO ACTION;  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_AccountFinance_PluginPaymentMethod_AutoAltPayment') and PARENT_OBJECT_ID = OBJECT_ID(N'tbAccountFinance'))
BEGIN
  ALTER TABLE tbAccountFinance ADD CONSTRAINT FK_AccountFinance_PluginPaymentMethod_AutoAltPayment FOREIGN KEY ( AutoAltPaymentMethodId ) REFERENCES tbPluginPaymentMethod( PluginId ) ON DELETE NO ACTION ON UPDATE NO ACTION;    
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE OBJECT_ID = OBJECT_ID(N'FK_AccountFinance_PaymentToken') and PARENT_OBJECT_ID = OBJECT_ID(N'tbAccountFinance'))
BEGIN
  ALTER TABLE tbAccountFinance ADD CONSTRAINT FK_AccountFinance_PaymentToken FOREIGN KEY ( AutoPaymentTokenId ) REFERENCES tbPaymentToken( PaymentTokenId ) ON DELETE NO ACTION ON UPDATE NO ACTION;  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF COL_LENGTH('tbSale', 'ScheduledPaymentDate') IS NULL
BEGIN
  Alter table tbSale
  add ScheduledPaymentDate date null  
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes  WHERE name='IX_Sale_ScheduledPaymentDate' AND object_id = OBJECT_ID('tbSale'))
BEGIN
  CREATE INDEX IX_Sale_ScheduledPaymentDate ON tbSale ( ScheduledPaymentDate ) where (ScheduledPaymentDate) is not null and (Paid=0);  
END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>gscotti</ADDEDBY><SQLVERSION>3.307</SQLVERSION><RMTRACKLINK>SIT-10137</RMTRACKLINK><REASON>remove tbAccountFinance.AllowDeposit field</REASON><TABLENAMES>tbAccountFinance</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>  alter table tbAccountFinance drop column AllowDeposit   
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>tiero</ADDEDBY><SQLVERSION>3.306</SQLVERSION><RMTRACKLINK>SIT-10137</RMTRACKLINK><REASON>New tbAccountFinance.AllowDeposit field</REASON><TABLENAMES>tbAccountFinance</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF COL_LENGTH('tbAccountFinance', 'AllowDeposit') IS NULL
BEGIN

  alter table tbAccountFinance
  add AllowDeposit Bit NOT NULL constraint DF_AccountFinance_AllowDeposit default (0)    

  alter table tbAccountFinance 
  drop constraint DF_AccountFinance_AllowDeposit
   
END;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.305</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename 
FK_AccessPoint_ControlledWorkstation  (patch 3.57#2)
in
FK_AccessPoint_ControllerWorkstation </REASON><TABLENAMES>tbAccessPoint</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename 'FK_AccessPoint_ControlledWorkstation', 'FK_AccessPoint_ControllerWorkstation'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.304</SQLVERSION><RMTRACKLINK>SIT-10080</RMTRACKLINK><REASON>New tbTax.BearedTax field</REASON><TABLENAMES>tbTax</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF COL_LENGTH('tbTax', 'BearedTax') IS NULL
BEGIN

  alter table tbTax
  add BearedTax Bit NOT NULL constraint DF_Tax_BearedTax default (0)    

  alter table tbTax 
  drop constraint DF_Tax_BearedTax
   
END;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.303</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor indexes
- IX_TicketUsage_TicketId
- IX_TicketUsage_UsageFiscalDate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>if ((select COUNT(*) from tbTicketUsage) &lt; 1000000)
begin
  CREATE  INDEX IX_TicketUsage_TicketId_V2 ON tbTicketUsage ( TicketId, UsageFiscalDate ) include (UsageType, ValidateResult, SimulatedRedemption, Invalidated);  

  DROP INDEX IX_TicketUsage_TicketId on tbTicketUsage;

  CREATE  INDEX IX_TicketUsage_UsageFiscalDate_V2 ON tbTicketUsage ( UsageFiscalDate, UsageDateTime ) include (UsageType, ValidateResult, SimulatedRedemption, Invalidated);  

  DROP INDEX IX_TicketUsage_UsageFiscalDate on tbTicketUsage;

end;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.302</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbProductRevenueGateCategory</REASON><TABLENAMES>tbProductRevenueGateCategory</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory
add
  PriorityOrder smallint NOT NULL constraint DF_ProductRevenueGateCategory_PriorityOrder default (0),  
  ApplyOnTotal bit NOT NULL constraint DF_ProductRevenueGateCategory_ApplyOnTotal default (0),  
  ExtractFromGross bit NOT NULL constraint DF_ProductRevenueGateCategory_ExtractFromGross default (0)  

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory drop constraint DF_ProductRevenueGateCategory_PriorityOrder
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory drop constraint DF_ProductRevenueGateCategory_ApplyOnTotal
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory drop constraint DF_ProductRevenueGateCategory_ExtractFromGross
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_ProductRevenueGateCategory_PriorityOrder ON tbProductRevenueGateCategory ( ProductRevenueDateId, PriorityOrder );

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.301</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbProduct
- PerformanceTimeFrom
- PerformanceTimeTo</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add
  PerformanceTimeFrom smallint NULL,  
  PerformanceTimeTo smallint NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.300</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create column tbResourceHold.GroupHold</REASON><TABLENAMES>tbResourceHold</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbResourceHold
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceHold
add GroupHold bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.299</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbResourceHold.AvailabilityPluginId</REASON><TABLENAMES>tbResourceHold</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceHold
add AvailabilityPluginId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_ResourceHold_AvailabilityPluginId ON tbResourceHold ( AvailabilityPluginId ) where AvailabilityPluginId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbResourceHold ADD CONSTRAINT FK_ResourceHold_AvailabilityPlugin FOREIGN KEY ( AvailabilityPluginId ) REFERENCES tbPlugin( PluginId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.298</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.AgeCategory</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add AgeCategory smallint NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.297</SQLVERSION><RMTRACKLINK>SIT-9893</RMTRACKLINK><REASON>Change tbWbAuth.SaleId from "not null" to "null"</REASON><TABLENAMES>tbWebAuth</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbWebAuth
alter column SaleId uniqueidentifier null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.296</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbResourceConfig.GroupByPerformance</REASON><TABLENAMES>tbResourceConfig</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceConfig
add [GroupByPerformance] Bit NOT NULL constraint DF_ResourceConfig_GroupByPerformance default (0)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceConfig drop constraint DF_ResourceConfig_GroupByPerformance
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.295</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbResourceHold</REASON><TABLENAMES>tbResourceHold</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE tbResourceHold ( 
	ResourceHoldId       uniqueidentifier NOT NULL    ,
	ResourceHoldStatus   int NOT NULL    ,
	HoldDateTimeFrom       datetime NOT NULL    ,
	HoldDateTimeTo       datetime NOT NULL    ,
	CreateDateTime       datetime NOT NULL    ,
	ExpireDateTime       datetime     ,
	ExtResourceHold      varchar(50)     ,
	ExtResourceDesc      nvarchar(100)     ,
	ExtResourceData      nvarchar(max)     ,
	CONSTRAINT PK_ResourceHold PRIMARY KEY  ( ResourceHoldId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_ResourceHold_ExpireDateTime ON tbResourceHold ( ExpireDateTime ) include (ResourceHoldStatus) where ExpireDateTime is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_ResourceHold_ExtResourceHold ON tbResourceHold ( ExtResourceHold ) where ExtResourceHold is not null;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.294</SQLVERSION><RMTRACKLINK>SIT-9893</RMTRACKLINK><REASON>New tbPaymentToken.CardExpDate and tbPaymentToken.CardHolderName
New tbUpload.ErrorCode
</REASON><TABLENAMES>tbPaymentToken
tbUpload</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentToken
add 
  CardExpDate varchar(4) null,  
  CardHolderName varchar(30) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbUpload
add ErrorCode int null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.293</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor index IX_FullText_EntitType_Word</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP  INDEX IX_FullText_EntitType_Word ON tbFullText 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_FullText_EntitType_Word ON tbFullText ( EntityType ASC, Word ASC )  INCLUDE (SearchWeight);

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.292</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_Performance_EventId_DateTimeFrom</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Performance_EventId_DateTimeFrom ON tbPerformance ( EventId, DateTimeFrom )  INCLUDE (DateTimeTo, PerformanceStatus);

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.291</SQLVERSION><RMTRACKLINK>SIT-9893</RMTRACKLINK><REASON>Index on tbPaymentToken.PluginId</REASON><TABLENAMES>tbPaymentToken</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_PaymentToken_PluginId ON tbPaymentToken ( PluginId ) WHERE PluginId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.290</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0: Remove wrongly create FK_Sale_FulfilmentAreaTag FOREIGN KEY  on tbPerformnce
1: Create FK_Sale_FulfilmentAreaTag FOREIGN KEY  on tbSale</REASON><TABLENAMES>tbPerformance
tbSale</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbPerformance drop CONSTRAINT FK_Sale_FulfilmentAreaTag;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSale ADD CONSTRAINT FK_Sale_FulfilmentAreaTag FOREIGN KEY ( [FulfilmentAreaTagId ] ) REFERENCES tbTag( TagId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.289</SQLVERSION><RMTRACKLINK>SIT-9893</RMTRACKLINK><REASON>New tbPaymentToken.PluginId field</REASON><TABLENAMES>tbPaymentToken</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentToken
add PluginId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPaymentToken ADD CONSTRAINT FK_PaymentToken_Plugin FOREIGN KEY ( PluginId ) REFERENCES tbPlugin( PluginId ) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentToken
add constraint CK_PaymentToken_PluginId CHECK ((PaymentTokenType &lt;&gt; 1) OR ((PaymentTokenType = 1) AND (PluginId is not null)))
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.288</SQLVERSION><RMTRACKLINK>SIT-9883</RMTRACKLINK><REASON>0..3   create tbAccountAccessArea
4..8   add InheritFulfilmentArea and FulfilmentTagId to tbPerformance
9..14 add FulfilmentTagId to tbSale and indexes refactoring</REASON><TABLENAMES>tbAccountAccessArea
tbPerformance
tbSale</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE tbAccountAccessArea ( 
  AccountId            uniqueidentifier NOT NULL,
  FulfilmentAreaTagId  uniqueidentifier,
  CONSTRAINT PK_AccountAccessArea PRIMARY KEY  ( AccountId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX [IX_AccountAccessArea_FulfilmentAreaTagId ] ON tbAccountAccessArea ( FulfilmentAreaTagId ) where FulfilmentAreaTagId is not null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAccountAccessArea ADD CONSTRAINT FK_AccountAccessArea_Account FOREIGN KEY ( AccountId ) REFERENCES tbAccount( AccountId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAccountAccessArea ADD CONSTRAINT FK_AccountAccessArea_Tag FOREIGN KEY ( FulfilmentAreaTagId ) REFERENCES tbTag( TagId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPerformance ADD FulfilmentAreaTagId uniqueidentifier
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPerformance ADD InheritFulfilmentArea bit NOT NULL CONSTRAINT DF_Performance_InheritFulfilmentArea default(1);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPerformance drop CONSTRAINT DF_Performance_InheritFulfilmentArea;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPerformance ADD CONSTRAINT FK_Performance_FulfilmentAreaTag FOREIGN KEY ( [FulfilmentAreaTagId ] ) REFERENCES tbTag( TagId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Performance_FulfilmentAreaTagId ON tbPerformance ( [FulfilmentAreaTagId ] ) where FulfilmentAreaTagId is not null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSale ADD FulfilmentAreaTagId uniqueidentifier
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPerformance ADD CONSTRAINT FK_Sale_FulfilmentAreaTag FOREIGN KEY ( [FulfilmentAreaTagId ] ) REFERENCES tbTag( TagId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Sale_Batch_TEMP ON tbSale ( BatchDate ASC, FulfilmentAreaTagId , BatchNumber ASC, Printed ASC ) where BatchDate is not null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX IX_Sale_Batch ON tbSale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename N'tbSale.IX_Sale_Batch_TEMP', N'IX_Sale_Batch', N'INDEX';  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Sale_FulfilmentAreaTagId ON tbSale ( FulfilmentAreaTagId , BatchDate ASC , BatchNumber ASC, Printed ASC ) where FulfilmentAreaTagId is not null;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.287</SQLVERSION><RMTRACKLINK>SIT-9893</RMTRACKLINK><REASON>New tbPaymentToken.PaymentTokenDesc field</REASON><TABLENAMES>tbPaymentToken</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentToken
add PaymentTokenDesc varchar(30) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.286</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add flag tbSale.Consignment
Add flag tbTransaction.Consignment
Add field tbAccountFinance.ConsignmentPaymentMethodId</REASON><TABLENAMES>tbSale
tbTransaction
tbAccountFinance</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSale add Consignment bit NOT NULL constraint DF_Sale_Consignment default(0);

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale drop constraint DF_Sale_Consignment;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction add Consignment bit NOT NULL constraint DF_Transaction_Consignment default(0);

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction drop constraint DF_Transaction_Consignment;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
add ConsignmentPaymentMethodId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_AccountFinance_ConsignmentPaymentMethodId ON tbAccountFinance ( ConsignmentPaymentMethodId ) where ConsignmentPaymentMethodId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAccountFinance ADD CONSTRAINT FK_AccountFinance_Plugin FOREIGN KEY ( ConsignmentPaymentMethodId ) REFERENCES tbPlugin( PluginId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.285</SQLVERSION><RMTRACKLINK>SIT-9893</RMTRACKLINK><REASON>New tbPaymentTokenData table</REASON><TABLENAMES>tbPaymentTokenData</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE tbPaymentTokenData ( 
	PaymentTokenId       uniqueidentifier NOT NULL    ,
	ParamName            varchar(30) NOT NULL    ,
	ParamValue           nvarchar(100) NOT NULL    ,
	ParamValueLong       nvarchar(max)     ,
	CONSTRAINT PK_PaymentTokenData PRIMARY KEY  ( PaymentTokenId, ParamName ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPaymentTokenData ADD CONSTRAINT FK_PaymentTokenData_PaymentToken FOREIGN KEY ( PaymentTokenId ) REFERENCES tbPaymentToken( PaymentTokenId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.284</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbConsRotationQueue</REASON><TABLENAMES>tbConsRotationQueue</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>if (not exists(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'tbConsRotationQueue'))
begin
	CREATE TABLE tbConsRotationQueue ( 
		ConsRotationQueueId  uniqueidentifier NOT NULL    ,
		AccessPointId        uniqueidentifier NOT NULL    ,
		FiscalDate           date NOT NULL    ,
		RotationDateTime     datetime NOT NULL    ,
		RotationLocalDateTime datetime NOT NULL    ,
		QtyEntry             int NOT NULL    ,
		QtyExit              int NOT NULL    ,
		QtyEntryControlled   int NOT NULL    ,
		QtyExitControlled    int NOT NULL    ,
		QtyEntryFree         int NOT NULL    ,
		QtyExitFree          int NOT NULL    ,
		CONSTRAINT PK_ConsRotationQueue PRIMARY KEY  ( ConsRotationQueueId ) 
	);

	CREATE  INDEX IX_ConsRotationQueue_AccesssPointId ON tbConsRotationQueue ( AccessPointId, RotationDateTime );

	ALTER TABLE tbConsRotationQueue ADD CONSTRAINT FK_ConsRotationQueue_WksAccessPoint FOREIGN KEY ( AccessPointId ) REFERENCES tbWorkstation( WorkstationId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
end
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.283</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbAccountFinance:
- MaxExposureLimit
- ExposureBalance

Create table tbAccountExposureLog
</REASON><TABLENAMES>tbAccountFinance
tbAccountExposureLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountFinance add MaxExposureLimit money null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance add ExposureBalance money NOT NULL constraint DF_AccountFinance_ExposureBalance default(0);

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance drop constraint DF_AccountFinance_ExposureBalance;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE TABLE tbAccountExposureLog ( 
	AccountId            uniqueidentifier NOT NULL,
	LogFiscalDate        date NOT NULL,
	LogSerial            smallint NOT NULL,
	LogAmount            money NOT NULL,
	ExposureBalance      money NOT NULL,
	TransactionId        uniqueidentifier,
	CONSTRAINT PK_AccountExposureLog PRIMARY KEY  ( AccountId, LogFiscalDate, LogSerial ) 
 )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_AccountExposureLog_TransactionId ON tbAccountExposureLog ( TransactionId );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAccountExposureLog ADD CONSTRAINT FK_AccountExposureLog_Account FOREIGN KEY ( AccountId ) REFERENCES tbAccount( AccountId ) ON DELETE NO ACTION ON UPDATE NO ACTION

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAccountExposureLog ADD CONSTRAINT FK_AccountExposureLog_TransactionId FOREIGN KEY ( TransactionId ) REFERENCES tbTransaction( TransactionId ) ON DELETE NO ACTION ON UPDATE NO ACTION

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbAccountFlag(AccountId, AccountFlag)
select AccountId, 5 from tbAccount where EntityType=1
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.282</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop column tbEvent.AvailabilityPluginId</REASON><TABLENAMES>tbEvent</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Event_AvailabilityPluginId on tbEvent
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbEvent   
DROP CONSTRAINT FK_Event_AvailabilityPluginId;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
drop column AvailabilityPluginId;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.281</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbEvent2ResourceType</REASON><TABLENAMES>tbEvent2ResourceType</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE tbEvent2ResourceType ( 
	EventId              uniqueidentifier NOT NULL    ,
	ResourceTypeId       uniqueidentifier NOT NULL    ,
	CONSTRAINT PK_Event2ResourceType PRIMARY KEY  ( EventId, ResourceTypeId ) 
 );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Event2ResourceType_ResourceTypeId ON tbEvent2ResourceType ( ResourceTypeId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbEvent2ResourceType ADD CONSTRAINT FK_Event2ResourceType_EventId FOREIGN KEY ( EventId ) REFERENCES tbEvent( EventId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbEvent2ResourceType ADD CONSTRAINT FK_Event2ResourceType_ResourceTypeId FOREIGN KEY ( ResourceTypeId ) REFERENCES tbResourceType( ResourceTypeId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.280</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbResourceSchedule:
- ExtResourceHold
- ExtResourceDesc
- ExtResourceData</REASON><TABLENAMES>tbResourceSchedule</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule
add ExtResourceHold varchar(50) null
  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule
add ExtResourceDesc nvarchar(100) null
  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule
add ExtResourceData varchar(max) null
  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_ResourceSchedule_ExtResourceHold ON tbResourceSchedule ( ExtResourceHold ) where ExtResourceHold is not null;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.279</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create functions:
- fnAccountFlag
- fnAccountFlags
- fnProductFlag
- fnProductFlags</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE FUNCTION dbo.fnAccountFlag(@accountId uniqueidentifier, @flag int)
RETURNS bit
WITH EXECUTE AS CALLER
AS
BEGIN
  declare @result bit;
  set @result=0;

  if (exists(
       select * 
	   from 
	     tbAccountFlag 
	   where 
	     AccountId = @accountId and AccountFlag=@flag))
    set @result=1;

  RETURN(@result);
END

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE FUNCTION dbo.fnAccountFlags(@accountId uniqueidentifier)
RETURNS varchar(max)
WITH EXECUTE AS CALLER
AS
BEGIN
  RETURN Stuff((
    select ',' + Cast(AccountFlag as varchar(max))
    from tbAccountFlag
    where AccountId=@accountId
    FOR XML PATH('')
  ), 1, 1, '');
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE FUNCTION dbo.fnProductFlag(@productId uniqueidentifier, @flag int)
RETURNS bit
WITH EXECUTE AS CALLER
AS
BEGIN
  declare @result bit;
  set @result=0;

  if (exists(
       select * 
	   from 
	     tbProductFlag 
	   where 
	     ProductId = @productId and ProductFlag=@flag))
    set @result=1;

  RETURN(@result);
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE FUNCTION dbo.fnProductFlags(@productId uniqueidentifier)
RETURNS varchar(max)
WITH EXECUTE AS CALLER
AS
BEGIN
  RETURN Stuff((
    select ',' + Cast(ProductFlag as varchar(max))
    from tbProductFlag
    where ProductId=@productId
    FOR XML PATH('')
  ), 1, 1, '');
END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.278</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbResourceType.AvailabilityPluginId</REASON><TABLENAMES>tbResourceType</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceType
add AvailabilityPluginId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_ResourceType_AvailabilityPluginId ON tbResourceType ( AvailabilityPluginId ) where AvailabilityPluginId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbResourceType ADD CONSTRAINT FK_ResourceType_AvailabilityPlugin FOREIGN KEY ( AvailabilityPluginId ) REFERENCES tbPlugin( PluginId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.277</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbEvent.AvailabilityPluginId</REASON><TABLENAMES>tbEvent</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEvent
add AvailabilityPluginId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Event_AvailabilityPluginId ON tbEvent ( AvailabilityPluginId ) where AvailabilityPluginId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbEvent ADD CONSTRAINT FK_Event_AvailabilityPluginId FOREIGN KEY ( AvailabilityPluginId ) REFERENCES tbPlugin( PluginId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.276</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create function fnEntitlementReplaceVersion</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE FUNCTION [dbo].[fnEntitlementReplaceVersion](@ProductId uniqueidentifier, @EncodeFiscalDate date)
RETURNS int
AS
BEGIN
  declare @result int;  

  select top 1 @result=OverrideVersion  
  from tbEntitlementVersion with(index(IX_EntitlementVersion_ProductId_EncodeDateTo)) 
  where  
    ProductId=@ProductId and    
    EncodeDateTo&gt;=@EncodeFiscalDate and    
    EncodeDateFrom&lt;=@EncodeFiscalDate    
  order by  
    OverrideVersion DESC

  RETURN(@result);
END


</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.275</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add column tbTicket.EntitlementVersion
- Refactor IX_EntitlementVersion_ProductId_EncodeDateTo</REASON><TABLENAMES>tbTicket</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket 
add EntitlementVersion int null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_EntitlementVersion_ProductId_EncodeDateTo on tbEntitlementVersion
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_EntitlementVersion_ProductId_EncodeDateTo ON tbEntitlementVersion ( ProductId, EncodeDateTo )  INCLUDE (EncodeDateFrom, OverrideVersion)

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.274</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add tbSale.ReceiptPhoneNumber field</REASON><TABLENAMES>tbSale</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>if not exists( SELECT * FROM sys.columns WHERE Name = N'ReceiptPhoneNumber' AND Object_ID = Object_ID(N'tbSale'))
begin
  alter table tbSale add [ReceiptPhoneNumber] nvarchar(50)
end 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>gscotti</ADDEDBY><SQLVERSION>3.273</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add  BiometricStatus fileld on tbBiometric</REASON><TABLENAMES>tbBiometric</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbBiometric add [BiometricStatus] smallint NOT NULL constraint DF_Biometric_BiometricStatus default(1);
alter table tbBiometric drop constraint DF_Biometric_BiometricStatus;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.272</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename tbEntitlementOverride into tbEntitlementVersion</REASON><TABLENAMES>tbEntitlementVersion</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>sp_rename 'tbEntitlementOverride.EntitlementOverrideId', 'EntitlementVersionId', 'COLUMN';
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbEntitlementOverride', 'tbEntitlementVersion';  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbEntitlementVersion.PK_EntitlementOverride', 'PK_EntitlementVersion';  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_EntitlementOverride_ProductId on tbEntitlementVersion
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbEntitlementVersion.IX_EntitlementOverride_CreateUserAccountId', 'IX_EntitlementVersion_CreateUserAccountId', 'INDEX';  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbEntitlementVersion.IX_EntitlementOverride_CreateWorkstationId', 'IX_EntitlementVersion_WorkstationId', 'INDEX';
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'FK_EntitlementOverride_Product', 'FK_EntitlementVersion_Product';  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'FK_EntitlementOverride_CreateWorkstation', 'FK_EntitlementVersion_CreateWorkstation';
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'FK_EntitlementOverride_CreateUserAccount', 'FK_EntitlementVersion_CreateUserAccount';
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_EntitlementVersion_ProductId ON tbEntitlementVersion ( ProductId, OverrideVersion );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_EntitlementVersion_ProductId_EncodeDateTo ON tbEntitlementVersion ( ProductId, EncodeDateTo );

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.271</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>increase the current approval code/authorization code column from 20 varchar to 50 varchar.</REASON><TABLENAMES>tbAuth
tbPaymentCard
tbSaleItemGiftCard
tbWebAuth
</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAuth
alter column AuthorizationCode varchar(50) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop Index [IX_PaymentCard_AuthorizationCode] ON [tbPaymentCard] 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentCard
alter column AuthorizationCode varchar(50) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentCard_AuthorizationCode] ON [tbPaymentCard] ([AuthorizationCode]) where AuthorizationCode is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index [IX_SaleItemGiftCard_AuthorizationCode] ON [tbSaleItemGiftCard]
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemGiftCard
alter column AuthorizationCode varchar(50) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemGiftCard_AuthorizationCode] ON [tbSaleItemGiftCard] ([AuthorizationCode] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop Index [IX_WebAuth_AuthorizationCode] ON [tbWebAuth] 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbWebAuth
alter column AuthorizationCode varchar(50) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_WebAuth_AuthorizationCode] ON [tbWebAuth] ([AuthorizationCode])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>gscotti</ADDEDBY><SQLVERSION>3.270</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add  ExternalTemplateId fileld on tbBiometric</REASON><TABLENAMES>tbBiometric</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbBiometric
add [ExternalTemplateId] varchar(100) NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.269</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbEntitlementOverride</REASON><TABLENAMES>tbEntitlementOverride</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE tbEntitlementOverride ( 
	EntitlementOverrideId uniqueidentifier NOT NULL    ,
	ProductId            uniqueidentifier NOT NULL    ,
	EncodeDateFrom       date NOT NULL    ,
	EncodeDateTo         date NOT NULL    ,
	EntitlementData      varchar(max) NOT NULL    ,
	OverrideVersion      int NOT NULL    ,
	CreateDateTime       datetime NOT NULL    ,
	CreateWorkstationId  uniqueidentifier NOT NULL    ,
	CreateUserAccountId  uniqueidentifier     ,
	CONSTRAINT PK_EntitlementOverride PRIMARY KEY  ( EntitlementOverrideId ) 
 );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_EntitlementOverride_ProductId ON tbEntitlementOverride ( ProductId, CreateDateTime );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_EntitlementOverride_CreateUserAccountId ON tbEntitlementOverride ( CreateUserAccountId, CreateDateTime ) where CreateUserAccountId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_EntitlementOverride_CreateWorkstationId ON tbEntitlementOverride ( CreateWorkstationId, CreateDateTime );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbEntitlementOverride ADD CONSTRAINT FK_EntitlementOverride_Product FOREIGN KEY ( ProductId ) REFERENCES tbProduct( ProductId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbEntitlementOverride ADD CONSTRAINT FK_EntitlementOverride_CreateWorkstation FOREIGN KEY ( CreateWorkstationId ) REFERENCES tbWorkstation( WorkstationId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbEntitlementOverride ADD CONSTRAINT FK_EntitlementOverride_CreateUserAccount FOREIGN KEY ( CreateUserAccountId ) REFERENCES tbAccount( AccountId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.268</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>modify index on tbInvoiceItem </REASON><TABLENAMES>tbInvoiceItem </TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>if exists(SELECT * FROM sys.indexes WHERE name='UQ_InvoiceItem_InvoiceId' AND object_id = OBJECT_ID('tbInvoiceItem'))
begin
  DROP INDEX UQ_InvoiceItem_InvoiceId ON tbInvoiceItem
end

if exists(SELECT * FROM sys.indexes WHERE name='UQ_InvoiceItem_SaleItemId' AND object_id = OBJECT_ID('tbInvoiceItem'))
begin
 DROP INDEX UQ_InvoiceItem_SaleItemId ON tbInvoiceItem
end

    

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if exists(SELECT * FROM sys.indexes WHERE name='UQ_InvoiceItem_InvoiceId_New' AND object_id = OBJECT_ID('tbInvoiceItem'))
begin
  DROP INDEX UQ_InvoiceItem_InvoiceId_New ON tbInvoiceItem
end

if exists(SELECT * FROM sys.indexes WHERE name='UQ_InvoiceItem_SaleItemId_New' AND object_id = OBJECT_ID('tbInvoiceItem'))
begin
 DROP INDEX UQ_InvoiceItem_SaleItemId_New ON tbInvoiceItem
end

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_InvoiceItem_InvoiceId ON tbInvoiceItem ( InvoiceId, SaleItemId, UnitAmount );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_InvoiceItem_SaleItemId ON tbInvoiceItem ( SaleItemId, InvoiceId, UnitAmount );
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.267</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add Masking columns to tbMetaField
</REASON><TABLENAMES>tbMetaField</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMetaField
add
  MaskingRule smallint,  
  MaskStartChars smallint, 
  MaskEndChars smallint,  
  MaskSplitWords bit  NOT NULL constraint DF_MetaField_MaskSplitWords default (0),  
  MaskMinChars smallint,  
  MaskMinCharsAlign smallint,  
  MaskingRulePluginId uniqueidentifier

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbMetaField DROP CONSTRAINT DF_MetaField_MaskSplitWords

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbMetaField ADD CONSTRAINT FK_MetaField_Plugin FOREIGN KEY ( MaskingRulePluginId ) REFERENCES tbPlugin( PluginId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_MetaField_MaskingRulePluginId ON tbMetaField ( MaskingRulePluginId )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.266</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Create field tbPluginPaymentMethod.OpenCashDrawer</REASON><TABLENAMES>tbPluginPaymentMethod</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPluginPaymentMethod
add OpenCashDrawer bit NOT NULL constraint DF_tbPluginPaymentMethod_OpenCashDrawer default (1)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPluginPaymentMethod drop constraint DF_tbPluginPaymentMethod_OpenCashDrawer
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.265</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0 Create tbMetafieldGroup
1 create Unique Index on MetaFieldGroupCode
2 add MetaFieldGroupId to tbMetaField
3 Create index in tbMetaField on MetaFieldGroupId
4 Add foreign key FK_MetaField_MetaFieldGroup </REASON><TABLENAMES>tbMetaField
tbMetaFieldGroup</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE dbo.tbMetaFieldGroup ( 
	MetaFieldGroupId	uniqueidentifier NOT NULL,
	MetaFieldGroupCode	varchar(15) NOT NULL,
	MetaFieldGroupName	nvarchar(50) NOT NULL,
	SearchMatchType		smallint NOT NULL 			
	CONSTRAINT PK_MetaFieldGroup PRIMARY KEY  ( MetaFieldGroupId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_MetaFieldGroup_MetaFieldGroupCode ON dbo.tbMetaFieldGroup ( MetaFieldGroupCode );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE dbo.tbMetaField add MetaFieldGroupId uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_MetaField_MetaFieldGroupId ON dbo.tbMetaField ( MetaFieldGroupId ) where MetaFieldGroupId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE dbo.tbMetaField ADD CONSTRAINT FK_MetaField_MetaFieldGroup FOREIGN KEY ( MetaFieldGroupId ) REFERENCES dbo.tbMetaFieldGroup( MetaFieldGroupId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.264</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index UQ_AttributeItem_AttributeItemCode

patch is executed in java code</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.263</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Adding some missing foreign key indexes</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_AccessPoint_ControllerWorkstationId ON tbAccessPoint ( ControllerWorkstationId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_AccessPoint_DriverId ON tbAccessPoint ( DriverId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Auth_PaymentId ON tbAuth ( PaymentId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_CurrencyDetail_CurrencyId ON tbCurrencyDetail ( CurrencyId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_DocTemplate_CategoryId ON tbDocTemplate ( CategoryId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_DocTemplate_MediaGroupTagId ON tbDocTemplate ( MediaGroupTagId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_InvoicePayment_PaymentId ON tbInvoicePayment ( PaymentId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_LedgerManual_LocationId ON tbLedgerManual ( LocationId, LedgerManualDateTime );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_LedgerManualItem_LedgerManualId ON tbLedgerManualItem ( LedgerManualId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_LedgerManualItem_LedgerAccountId ON tbLedgerManualItem ( LedgerAccountId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_LedgerManualItem_LocationId ON tbLedgerManualItem ( LocationId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_LedgerRule_PluginId ON tbLedgerRule ( PluginId ) where PluginId is not null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_MaskItem_MetaFieldId ON tbMaskItem ( MetaFieldId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_MembershipPoint_ParentMembershipPointId ON tbMembershipPoint ( ParentMembershipPointId );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_OutboundMessage_BrokerPluginId ON tbOutboundMessage ( BrokerPluginId );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_PaymentIntercompany_IntercompanyCostCenterId ON tbPaymentIntercompany ( IntercompanyCostCenterId );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_PaymentProfileMembershipPoint_MembershipPointId ON tbPaymentProfileMembershipPoint ( MembershipPointId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_PaymentProfileMethod_PaymentMethodId ON tbPaymentProfileMethod ( PaymentMethodId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Performance_PerformaneTypeId ON tbPerformance ( PerformanceTypeId ) where PerformanceTypeId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_PortfolioInPerformance_PerformanceId on tbPortfolioInPerformance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_PortfolioInPerformance_PerformanceId ON tbPortfolioInPerformance ( PerformanceId ASC, Inside ASC );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_PortfolioSlotLog_PortfolioId on tbPortfolioSlotLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_PortfolioSlotLog_PortfolioId ON tbPortfolioSlotLog ( PortfolioId ASC, MembershipPointId ASC, PortfolioSlotType ASC, PortfolioSlotBalanceSerial, LogFiscalDate ASC );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Product_TicketVoidFeeProductId ON tbProduct ( TicketVoidFeeProductId ) where TicketVoidFeeProductId is not null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Product2Plugin_Product2PluginType on tbProduct2Plugin
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Product2Plugin_PluginId ON tbProduct2Plugin ( PluginId ASC, Product2PluginType ASC );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_PromoAction_ProductId on tbPromoAction
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_PromoAction_ProductId ON tbPromoAction ( ProductId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_PromoAction_ActionProductId ON tbPromoAction ( ActionProductId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_PromoRule_PosPromoRulePluginId ON tbPromoRule ( PosPromoRulePluginId ) where PosPromoRulePluginId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_PromoRule_WebPromoRulePluginId ON tbPromoRule ( WebPromoRulePluginId ) where WebPromoRulePluginId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_PromoTrigger_TriggerCategoryId ON tbPromoTrigger ( TriggerCategoryId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_PromoTrigger_TriggerProductId ON tbPromoTrigger ( TriggerProductId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_RedemptionCommissionRuleLink_EntityId on tbRedemptionCommissionRuleLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_RedemptionCommissionRuleLink_RedemptionCommissionRuleId ON tbRedemptionCommissionRuleLink ( RedemptionCommissionRuleId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_RepositoryIndex_RepositoryId ON tbRepositoryIndex ( RepositoryId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_SaleItemDetailRevalidate_SaleItemId on tbSaleItemDetailRevalidate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleItemDetailRevalidate 
DROP CONSTRAINT PK_SaleItemDetailRevalidate 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleItemDetailRevalidate
   ADD CONSTRAINT PK_SaleItemDetailRevalidate PRIMARY KEY CLUSTERED (SaleItemDetailId, TransactionId);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_SaleItemDetailRevalidate_TransactionId ON tbSaleItemDetailRevalidate ( TransactionId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Server_ServerProfileId ON tbServer ( ServerProfileId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_SiaeLog_EventId ON tbSiaeLog ( EventId ) where EventId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Task_NextTaskId ON tbTask ( NextTaskId ) where NextTaskId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TaskTrigger_TaskId ON tbTaskTrigger ( TaskId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Upload_WorkstationId ON tbUpload ( WorkstationId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_VoucherItem_ProductId ON tbVoucherItem ( ProductId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_VoucherItem_VoucherId ON tbVoucherItem ( VoucherId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Workstation_ChannelGroupTagId ON tbWorkstation ( ChannelGroupTagId ) where ChannelGroupTagId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Workstation_SaleChannelId ON tbWorkstation ( SaleChannelId ) where SaleChannelId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbOwner
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbPortfolioShare
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if (select COUNT(*) from tbSaleItem) &lt; 1000000
begin
	CREATE  INDEX IX_SaleItem_OptionSetId ON tbSaleItem ( OptionSetId ) where OptionSetId is not null;
	CREATE  INDEX IX_SaleItem_PerformanceTypeId ON tbSaleItem ( PerformanceTypeId ) where PerformanceTypeId is not null;
end;


</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.262</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>create table tbQueueWait</REASON><TABLENAMES>tbQueueWait</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF (NOT EXISTS (SELECT * 
                 FROM INFORMATION_SCHEMA.TABLES 
                 WHERE TABLE_SCHEMA = 'dbo' 
                 AND  TABLE_NAME = 'tbQueueWait'))
BEGIN

CREATE TABLE tbQueueWait ( 
	QueueStatType        smallint NOT NULL    ,
	ConsolidateType      smallint NOT NULL    ,
	TimeSlot             datetime NOT NULL    ,
	QueueCountMin        int NOT NULL    ,
	QueueCountMax        int NOT NULL    ,
	QueueWaitMaxMS       bigint NOT NULL    ,
	WorkCountMin         int NOT NULL    ,
	WorkCountMax         int NOT NULL    ,
	WorkProcMaxMS        bigint NOT NULL    ,
	CONSTRAINT PK_QueueWait PRIMARY KEY  ( QueueStatType, ConsolidateType, TimeSlot ) 
 );

CREATE  INDEX IX_QueueWait_TimeSlot ON tbQueueWait ( TimeSlot, ConsolidateType, QueueStatType );

END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.261</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add DriverSettingsto tbDriver</REASON><TABLENAMES>tbDriver</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF COL_LENGTH('tbDriver', 'DriverSettings') IS NULL
BEGIN
  ALTER TABLE tbDriver ADD DriverSettings nvarchar(max)  
END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.260</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add BiometricGroupfield to tbTicketUsage</REASON><TABLENAMES>tbTicketUsage</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add BiometricGroup bit not null constraint DF_TicketUsage_BiometricGroup default(0)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage drop constraint DF_TicketUsage_BiometricGroup
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.259</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_Transaction2TicketUsage_TicketUsageId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>If IndexProperty(Object_Id('tbTransaction2TicketUsage'), 'IX_Transaction2TicketUsage_TicketUsageId', 'IndexID') Is Null
begin
  CREATE  INDEX IX_Transaction2TicketUsage_TicketUsageId ON tbTransaction2TicketUsage ( TicketUsageId );
end
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.258</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add StraightSale field to tbPluginPaymentMethod </REASON><TABLENAMES>tbPluginPaymentMethod</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF COL_LENGTH('tbPluginPaymentMethod', 'StraightSale') IS NULL
BEGIN  
  alter table tbPluginPaymentMethod
  add StraightSale bit not null constraint DF_PluginPaymentMethod_StraightSale default(1);
  alter table tbPluginPaymentMethod drop constraint DF_PluginPaymentMethod_StraightSale;
END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.257</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create user-defined type UuidTableType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF TYPE_ID(N'UuidTableType') IS NULL
BEGIN
	CREATE TYPE UuidTableType AS TABLE 
	(
		ID uniqueidentifier
	)
END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.256</SQLVERSION><RMTRACKLINK>SIT-9584</RMTRACKLINK><REASON>New tbLedgerRule.TriggerCardTypes column</REASON><TABLENAMES>tbLedgerRule</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
add TriggerCardTypes varchar(50) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.255</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbEntityChange table</REASON><TABLENAMES>tbEntityChange</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @seed bigint;
select top 1 @seed=EntityChangeId+1 from tbEntityChange order by EntityChangeId desc

declare @sql nvarchar(max);
set @sql = 'CREATE TABLE TMP_tbEntityChange ( ' +
'	EntityChangeId       bigint IDENTITY(' + Cast(@seed as varchar(max)) +  ',1) NOT NULL    ,  ' +
'	EntityType           smallint NOT NULL    ,  ' +
'	EntityId             uniqueidentifier NOT NULL    ,  ' +
'	InsertUpdate         bit NOT NULL    ,  ' +
'	EntityChangeGroup    smallint NOT NULL    ,  ' +
'	CreateDate           date NOT NULL    ,  ' +
'	CONSTRAINT TMP_UQ_EntityChange_EntityId UNIQUE ( EntityId ASC ) ,  ' +
'	CONSTRAINT TMP_PK_EntityChange PRIMARY KEY  ( EntityChangeId )  ' +
' ) ';

EXECUTE sp_executesql @sql;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into TMP_tbEntityChange (
	EntityType,
	EntityId,
	InsertUpdate,
	EntityChangeGroup,
	CreateDate
)
select
	EntityType,
	EntityId,
	InsertUpdate,
	10,
	GetDate()
from tbEntityChange
where EntityType not in (20,21,22,23,25,58,8,38)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbEntityChange

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename 'TMP_tbEntityChange', 'tbEntityChange';
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbEntityChange.TMP_PK_EntityChange', 'PK_EntityChange'; 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbEntityChange.TMP_UQ_EntityChange_EntityId', 'UQ_EntityChange_EntityId';  

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_EntityChange_EntityType ON dbo.tbEntityChange ( EntityType ASC, EntityChangeId ASC ) include (InsertUpdate, EntityId);

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_EntityChange_EntityChangeGroup ON dbo.tbEntityChange ( EntityChangeGroup, CreateDate, EntityChangeId );
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.254</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Two new rights have been added:
"Products" : controls the ability to manage products by locations
"Media" : controls the ability manage media by locations

Both rights will be set with the value of the already existing right "Reservations"

0. delete rights 735, 736 ("Products, Media) created by patch 3.254
1. insert Product 
2. insert Media</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbRight where rightType in (735, 736)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbRight (RightId, EntityType, EntityId, RightType, RightValue)
select  
  NEWID(),
  EntityType,
  EntityId,
  735,
  RightValue
from 
  tbRight
where
  RightType = 4

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbRight (RightId, EntityType, EntityId, RightType, RightValue)
select  
  NEWID(),
  EntityType,
  EntityId,
  736,
  RightValue
from 
  tbRight
where
  RightType = 4

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.253</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>---This patch has been fisically removed since the two new rights cannot be limited to "Inactive" and "Read only"---

Two new rights have been added:
"Products" : controls the ability to lookup products by locations
"Media" : controls the ability to lookup media by locations
The actual patch that sets the default values has been implemented in the source code </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.252</SQLVERSION><RMTRACKLINK>SIT-9383</RMTRACKLINK><REASON>New table tbTransactionJob</REASON><TABLENAMES>tbTransactionJob</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE dbo.tbTransactionJob ( 
	TransactionId        uniqueidentifier NOT NULL    ,
	JobId                uniqueidentifier NOT NULL    ,
	CONSTRAINT PK_TransactionJob PRIMARY KEY  ( TransactionId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TransactionJob_JobId ON dbo.tbTransactionJob ( JobId );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE dbo.tbTransactionJob ADD CONSTRAINT FK_TransactionJob_Transaction FOREIGN KEY ( TransactionId ) REFERENCES dbo.tbTransaction( TransactionId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE dbo.tbTransactionJob ADD CONSTRAINT FK_TransactionJob_Job FOREIGN KEY ( JobId ) REFERENCES dbo.tbJob( JobId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.251</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbPluginPaymentMethod
- IconAlias
- BackgroundColor
- ForegroundColor</REASON><TABLENAMES>tbPluginPaymentMethod</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPluginPaymentMethod
add
  IconAlias varchar(50) null,  
  BackgroundColor varchar(6) null,  
  ForegroundColor varchar(6) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.250</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- drop table tbLedgerTotal
- drop column tbLedgerAccount.LedgerAccountBalance</REASON><TABLENAMES>tbLedgerAccount</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbLedgerTotal
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerAccount
drop column LedgerAccountBalance
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.249</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbAsyncProcess
- drop column AsyncProcessType
- add column AsyncProcessName
- addColumn AsyncProcessClassAlias</REASON><TABLENAMES>tbAsyncProcess</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbAsyncProcess
ADD AsyncProcessName nvarchar(50) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAsyncProcess
ADD AsyncProcessClassAlias varchar(25) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>UPDATE tbAsyncProcess
SET 
  AsyncProcessClassAlias = AsyncProcessType,
  AsyncProcessName = (
	CASE 
	  WHEN AsyncProcessType = 1 THEN 'Create performances'
	  WHEN AsyncProcessType = 2 THEN 'Regenerate ledger'
	  WHEN AsyncProcessType = 3 THEN 'Full-Text reindex'
	  WHEN AsyncProcessType = 4 THEN 'Regenerate consolidated sales'
	  WHEN AsyncProcessType = 5 THEN 'Regenerate consolidated accesses'
	  WHEN AsyncProcessType = 6 THEN 'Update performances'
	  WHEN AsyncProcessType = 7 THEN 'Delete performances'
	  WHEN AsyncProcessType = 8 THEN 'Reschedule blocked installment contract payments'
	  WHEN AsyncProcessType = 9 THEN 'Delete accounts'
	  WHEN AsyncProcessType = 10 THEN 'Update vouchers'
	  WHEN AsyncProcessType = 11 THEN 'Delete vouchers'
	  WHEN AsyncProcessType = 12 THEN 'File download'
	  WHEN AsyncProcessType = 13 THEN 'File upload'
	  WHEN AsyncProcessType = 14 THEN 'Update products'
	  WHEN AsyncProcessType = 15 THEN 'Delete products'
	  WHEN AsyncProcessType = 16 THEN 'Generate individual coupons'
	  WHEN AsyncProcessType = 17 THEN 'Replace entitlements on products'
	  WHEN AsyncProcessType = 18 THEN 'Update timezone on performances'
	  WHEN AsyncProcessType = 19 THEN 'Custom fields "encrypted" historical data'
	  WHEN AsyncProcessType = 20 THEN 'Regenerate ticket sale location'
	  WHEN AsyncProcessType = 21 THEN 'Finalize product creation'
	  WHEN AsyncProcessType = 22 THEN 'Syncronize cross platform account'
	  WHEN AsyncProcessType = 23 THEN 'Update promotion rules'
	  WHEN AsyncProcessType = 24 THEN 'Update coupon status'
	  WHEN AsyncProcessType = 25 THEN 'Set coupon expiration date'
	  WHEN AsyncProcessType = 26 THEN 'Catalog cache update'
	  WHEN AsyncProcessType = 27 THEN 'Update outbound queue status'
	  WHEN AsyncProcessType = 1001 THEN 'Import Account'
	  WHEN AsyncProcessType = 1002 THEN 'Import ProductType'
	  WHEN AsyncProcessType = 1003 THEN 'Import MetaFieldItem'
	  WHEN AsyncProcessType = 1004 THEN 'Import Media'
	  WHEN AsyncProcessType = 1005 THEN 'Import ExtMedia'
	  WHEN AsyncProcessType = 1006 THEN 'Import IndividualCoupon'
	  WHEN AsyncProcessType = 1007 THEN 'Import LedgerAccount'
	  WHEN AsyncProcessType = 1008 THEN 'Import Media Block'
	  WHEN AsyncProcessType = 1009 THEN 'Import Stat Date'
	  WHEN AsyncProcessType = 1010 THEN 'Import Stat Time'
	  WHEN AsyncProcessType = 1011 THEN 'Import Order'
	  WHEN AsyncProcessType = 1012 THEN 'Import MediaCode'
	  WHEN AsyncProcessType = 1013 THEN 'Import Performance'
	  WHEN AsyncProcessType = 2001 THEN 'Import SnApp product types'
	  WHEN AsyncProcessType = 3001 THEN 'Import siae seals'
	ELSE
	  'Unknown process'
    END
  )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAsyncProcess
ALTER COLUMN AsyncProcessName nvarchar(50) NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAsyncProcess
ALTER COLUMN AsyncProcessClassAlias varchar(25) NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAsyncProcess
DROP COLUMN AsyncProcessType
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.248</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbBoxWarn</REASON><TABLENAMES>tbBoxWarn</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE dbo.tbBoxWarn ( 
	BoxId                uniqueidentifier NOT NULL    ,
	BoxWarn              smallint NOT NULL    ,
	CONSTRAINT PK_BoxWarn PRIMARY KEY  ( BoxId, BoxWarn ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE dbo.tbBoxWarn ADD CONSTRAINT FK_BoxWarn_BoxId FOREIGN KEY ( BoxId ) REFERENCES dbo.tbBox( BoxId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.247</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbTransactionCommission refactoring

0: drop PK
1..2: Add field TransactionCommissionId
3: Create PK
4: Add field TicketId
5: Create index IX_TransactionCommission_TicketId
6: Create index UQ_TransactionCommission</REASON><TABLENAMES>tbTransactionCommission</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionCommission  
DROP CONSTRAINT PK_TransactionCommission
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionCommission
add TransactionCommissionId uniqueidentifier not null constraint DF_TransactionCommission_TransactionCommissionId default (newid())
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionCommission drop constraint DF_TransactionCommission_TransactionCommissionId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionCommission
ADD CONSTRAINT PK_TransactionCommission PRIMARY KEY (TransactionCommissionId);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionCommission
add TicketId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TransactionCommission_TicketId ON dbo.tbTransactionCommission ( TicketId ) where TicketId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_TransactionCommission ON dbo.tbTransactionCommission ( TransactionId, AccountId, CommissionId, SaleItemId, TicketId );

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.246</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbLogin.CryptType from 0 to 1</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbLogin 
set CryptType=1
where CryptType=0
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.245</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>create table tbSale2SaleTab
drop column tbSaleTab.SaleId
rename column tbSaleTab.SaleFiscal date to SaleTabFisclaDate
rename column tbSaleTab.SaleDateTime date to SaleTabDateTime</REASON><TABLENAMES>tbSale2SaleTab
tbSaleTab</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE tbSale2SaleTab ( 
	SaleId               uniqueidentifier NOT NULL    ,
	SaleTabId            uniqueidentifier NOT NULL    ,
	CONSTRAINT PK_Sale2SaleTab PRIMARY KEY  ( SaleId ) 
 )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_Sale2SaleTab_SaleTab ON tbSale2SaleTab ( SaleTabId , SaleId );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSale2SaleTab ADD CONSTRAINT FK_Sale2SaleTab_SaleId FOREIGN KEY ( SaleId ) REFERENCES tbSale( SaleId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSale2SaleTab ADD CONSTRAINT FK_Sale2SaleTab_SaleTabId FOREIGN KEY ( SaleTabId ) REFERENCES tbSaleTab( SaleTabId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>INSERT INTO tbSale2SaleTab (SaleId, SaleTabId)
SELECT 
  SaleId, SaleTabId
FROM 
  tbSaleTab
WHERE 
  tbSaleTab.SaleId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX IX_SaleTab_SaleId ON tbSaleTab 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleTab
DROP CONSTRAINT FK_SaleTab_Sale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleTab
DROP COLUMN saleId 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbSaleTab.SaleFiscalDate', 'SaleTabFiscalDate', 'COLUMN';
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbSaleTab.SaleDateTime', 'SaleTabDateTime', 'COLUMN';
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.244</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop table tbTicketDescription</REASON><TABLENAMES>tbTicketDescription</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbSaleItemDetail 
set 
  tbSaleItemDetail.Description = tbTicketDescription.TicketDescription 
from 
  tbSaleItemDetail inner join 
  tbTicketDescription on tbSaleItemDetail.SaleItemDetailId = tbTicketDescription.SaleItemDetailId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbTicketDescription
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.243</SQLVERSION><RMTRACKLINK>6779</RMTRACKLINK><REASON>Add tbSaleItemDetail.Description</REASON><TABLENAMES>tbSaleItemDetail</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleItemDetail 
ADD Description nvarchar(max) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.242</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_MetaFieldFlag_MetaFieldFlag</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_MetaFieldFlag_MetaFieldFlag ON dbo.tbMetaFieldFlag ( MetaFieldFlag );

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.241</SQLVERSION><RMTRACKLINK>SIT-9284</RMTRACKLINK><REASON>Drop and re-create index on dates</REASON><TABLENAMES>tbTicket2Event</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP INDEX IX_Ticket2Event_EventId ON tbTicket2Event  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Ticket2Event_EventId ON tbTicket2Event ( EventId, ValidDateTo, ValidDateFrom );
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.240</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change tbQueueStat fields from INT to BIGINT</REASON><TABLENAMES>tbQueueStat</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbQueueStat
alter column ProcMinMS bigint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbQueueStat
alter column ProcMaxMS bigint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbQueueStat
alter column ProcAvgMS bigint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbQueueStat
alter column QueueMinMS bigint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbQueueStat
alter column QueueMaxMS bigint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbQueueStat
alter column QueueAvgMS bigint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.239</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tbTicket.ManualStartValidity</REASON><TABLENAMES>tbTicket</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add ManualStartValidity bit not null constraint DF_Ticket_ManualStartValidity default(0)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket drop constraint DF_Ticket_ManualStartValidity
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.238</SQLVERSION><RMTRACKLINK>SIT-9257</RMTRACKLINK><REASON>Add tbAccount.CreateEmptyAccount</REASON><TABLENAMES>tbAccount</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccount
add CreateEmptyAccount bit not null constraint DF_Account_CreateEmptyAccount default(0)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccount drop constraint DF_Account_CreateEmptyAccount
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.237</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Update function fnIsValidTicketUsage</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER FUNCTION [dbo].[fnIsValidTicketUsage](@ValidateResult int, @Invalidated bit, @Simulated bit)
RETURNS bit
AS
BEGIN
  declare @result bit;
  set @result=0;

  if (@ValidateResult &lt; 100) and ((@Invalidated is null) or (@Invalidated &lt;&gt; 1)) and ((@Simulated is null) or (@Simulated &lt;&gt; 1))
    set @result=1;

  RETURN(@result);
END


</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.236</SQLVERSION><RMTRACKLINK>SIT-9135</RMTRACKLINK><REASON>Added:
tbTicketUsage.UsageMethodType
tbTicketUsage.BioEnrollmentType</REASON><TABLENAMES>tbTicketUsage</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add
  UsageMethodType tinyint not null constraint DF_TicketUsage_UsageMethodType default (10),  
  BioEnrollmentType tinyint not null constraint DF_TicketUsage_BioEnrollmentType default (0)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage drop constraint DF_TicketUsage_UsageMethodType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage drop constraint DF_TicketUsage_BioEnrollmentType
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.235</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Create field tbBoxDeposit.DepositFiscalDate and relative index</REASON><TABLENAMES>tbBoxDeposit</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbBoxDeposit
add [DepositFiscalDate] date NOT NULL constraint DF_BoxDeposit_DepositFiscalDate default (GetDate())



</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBoxDeposit drop constraint DF_BoxDeposit_DepositFiscalDate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_BoxDeposit_DepositFiscalDate ON dbo.tbBoxDeposit ( DepositFiscalDate, DepositDateTime );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbBoxDeposit
set DepositFiscalDate=FBoxDate
from tbBox
where tbBoxDeposit.BoxId=tbBox.BoxId

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.234</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create field tbOutboundQueue.RecoveryJobId</REASON><TABLENAMES>tbOutboundQueue</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbOutboundQueue
add RecoveryJobId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_OutboundQueue_RecoveryJobId ON dbo.tbOutboundQueue ( RecoveryJobId, CreateDateTime ) where RecoveryJobId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE dbo.tbOutboundQueue ADD CONSTRAINT FK_OutboundQueue_Job FOREIGN KEY ( RecoveryJobId ) REFERENCES dbo.tbJob( JobId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.233</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Regenerate table stored procedure</REASON><TABLENAMES>tbNotifyLog</TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.232</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Drop table tbNotifyRuleOrder
- Create field tbNotifyRule.DocData
- Create field tbNotifyLogRef.Invalidated
- Create field tbNotifyLog.ActionId</REASON><TABLENAMES>tbNotifyRule
tbNotifyLogRef
tbNotifyLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbNotifyRuleOrder
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbNotifyRule 
add DocData nvarchar(max)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbNotifyLogRef
add [Invalidated] Bit NOT NULL constraint DF_tbNotifyLogRef_Invalidated default (0)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbNotifyLogRef drop constraint DF_tbNotifyLogRef_Invalidated
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbNotifyLog
add ActionId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_NotifyLog_ActionId ON dbo.tbNotifyLog ( ActionId ) where ActionId is not null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE dbo.tbNotifyLog ADD CONSTRAINT FK_NotifyLog_Action FOREIGN KEY ( ActionId ) REFERENCES dbo.tbAction( ActionId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.231</SQLVERSION><RMTRACKLINK>SIT-9124</RMTRACKLINK><REASON>Add 
tbTicketUsageUser.MediaId
tbTicketUsageUser.TicketId</REASON><TABLENAMES>tbTicketUsageUser</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsageUser
add 
  MediaId uniqueidentifier null,  
  TicketId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TicketUsageUser_MediaId ON tbTicketUsageUser ( MediaId ) where MediaId is not null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TicketUsageUser_TicketId ON tbTicketUsageUser ( TicketId ) where TicketId is not null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketUsageUser ADD CONSTRAINT FK_TicketUsageUser_MediaId FOREIGN KEY ( MediaId ) REFERENCES tbMedia( MediaId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketUsageUser ADD CONSTRAINT FK_TicketUsageUser_TicketId FOREIGN KEY ( TicketId ) REFERENCES tbTicket( TicketId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.230</SQLVERSION><RMTRACKLINK>SIT-9167</RMTRACKLINK><REASON>New tbProduct.VisitCalendarId</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add VisitCalendarId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_Product_VisitCalendarId ON tbProduct ( VisitCalendarId ) where VisitCalendarId is not null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbProduct ADD CONSTRAINT FK_Product_Calendar_VisitCalendarId FOREIGN KEY ( VisitCalendarId ) REFERENCES tbCalendar( CalendarId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.229</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Set "ChangePerformance" product flag as true for all existing product types</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbProductFlag where ProductFlag=44


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProductFlag (ProductId, ProductFlag)
select
  ProductId,
  44
from
  tbProduct
where 
  ProductType not in (5, 10)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbEntityChange where EntityType=12 and InsertUpdate=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (EntityType, EntityId, InsertUpdate)
select
  12,
  ProductId,
  1
from
  tbProduct
where 
  ProductType not in (5, 10) and
  not exists (select * from tbEntityChange EC where EC.EntityId=tbProduct.ProductId)   
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbDBInfo 
set 
  ParamValue=Convert(varchar(max), GETDATE(), 126),
  LastUpdate=GETDATE()
where ParamName='CatalogCacheLastUpdate'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.228</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbServiceStatus</REASON><TABLENAMES>tbServiceStatus</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF  NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tbServiceStatus]') AND type in (N'U'))
BEGIN
	CREATE TABLE dbo.tbServiceStatus ( 
		ServerId             smallint NOT NULL    ,
		ServiceId            uniqueidentifier NOT NULL    ,
		ServiceName          varchar(100) NOT NULL    ,
		ServiceStatus        int NOT NULL    ,
		ErrorMessage         nvarchar(max)     ,
		ErrorMessageDateTime datetime     ,
		LastUpdate           datetime NOT NULL    ,
		CONSTRAINT PK_ServiceStatus PRIMARY KEY  ( ServerId, ServiceId ) 
	 );

	CREATE  INDEX IX_ServiceStatus_ServiceId ON dbo.tbServiceStatus ( ServiceId );

	ALTER TABLE dbo.tbServiceStatus ADD CONSTRAINT FK_ServiceStatus_Server FOREIGN KEY ( ServerId ) REFERENCES dbo.tbServer( ServerId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

END


</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.227</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbEntityRight "all organizations" into "all accounts"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbEntityRight
set
  UsrEntityType=1015,  
  UsrEntityId='A0000131-0000-0000-0000-000000001015'  
where
  UsrEntityType=1 and  
  UsrEntityId='A0000131-0000-0000-0000-000000000001'  

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.226</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbPerformance.EnvelopeSwapDateTime</REASON><TABLENAMES>tbPerformance</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPerformance
add EnvelopeSwapDateTime datetime null 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.225</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbEntitlement.PerformanceQuantity</REASON><TABLENAMES>tbEntitlement</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEntitlement
add PerformanceQuantity int null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.224</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbAction.DocTemplateType -&gt; NULLABLE</REASON><TABLENAMES>tbAction</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAction
alter column DocTemplateType smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.223</SQLVERSION><RMTRACKLINK>SIT-8881</RMTRACKLINK><REASON>Drop FK_gateCategory2Event_Event</REASON><TABLENAMES>tbGateCategory2Entity</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbGateCategory2Entity
DROP CONSTRAINT FK_GateCategory2Event_Event  
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.222</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbWorkstationActivity</REASON><TABLENAMES>tbWorkstationActivity</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE dbo.tbWorkstationActivity ( 
	WorkstationActivityId uniqueidentifier NOT NULL    ,
	WorkstationId        uniqueidentifier NOT NULL    ,
	FiscalDate           date NOT NULL    ,
	ActivityDateTime     datetime NOT NULL    ,
	ActivityType         smallint NOT NULL    ,
	Online               bit NOT NULL    ,
	UserAccountId        uniqueidentifier     ,
	CONSTRAINT PK_WorkstationActivity PRIMARY KEY  ( WorkstationActivityId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_WorkstationActivity_WorkstationId ON dbo.tbWorkstationActivity ( WorkstationId, ActivityDateTime );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_WorkstationActivity_FiscalDate ON dbo.tbWorkstationActivity ( FiscalDate, WorkstationId, ActivityDateTime );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_WorkstationActivity_UserAccountId ON dbo.tbWorkstationActivity ( UserAccountId, ActivityDateTime ) WHERE UserAccountId is not null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE dbo.tbWorkstationActivity ADD CONSTRAINT FK_WorkstationActivity_Workstation FOREIGN KEY ( WorkstationId ) REFERENCES dbo.tbWorkstation( WorkstationId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE dbo.tbWorkstationActivity ADD CONSTRAINT FK_WorkstationActivity_UserAccount FOREIGN KEY ( UserAccountId ) REFERENCES dbo.tbAccount( AccountId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.221</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index on DueDate to tbInvoice</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE INDEX IX_Invoice_DueDate ON tbInvoice ( DueDate, IssueDateTime );
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.220</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Regenerating all stored procedures</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.219</SQLVERSION><RMTRACKLINK>SIT-8881</RMTRACKLINK><REASON>Rename and refactor tbGateCategory2Event to tbGateCategory2Entity</REASON><TABLENAMES>tbGateCategory2Entity</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>sp_rename 'tbGateCategory2Event', 'tbGateCategory2Entity'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbGateCategory2Entity
add EntityType smallint not null constraint DF_GateCategory2Entity default (5)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbGateCategory2Entity drop constraint DF_GateCategory2Entity
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbGateCategory2Entity.EventId', 'EntityId', 'COLUMN';
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.218</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop table tbSeatPerformanceSectorCategory</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbSeatPerformanceSectorCategory
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.217</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbSeatSector.RootSectorId</REASON><TABLENAMES>tbSeatSector</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSeatSector add RootSectorId UniqueIdentifier NOT NULL constraint DF_SeatSector_RootSectorId default newid()
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatSector drop constraint DF_SeatSector_RootSectorId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_SeatSector_RootSectorId ON dbo.tbSeatSector ( RootSectorId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>with CTE AS (
  select 
    R.SeatSectorId as XSeatSectorId, 
    R.SeatSectorId as XRootSectorId
  from tbSeatSector R
  where R.ParentSectorId is null

  union all

  select 
    B.SeatSectorId as XSeatSectorId, 
    CTE.XRootSectorId
  from
    tbSeatSector B inner join
    CTE on CTE.XSeatSectorId=B.ParentSectorId
)

update tbSeatSector
set RootSectorId=XRootSectorId
from CTE
where SeatSectorId=XSeatSectorId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE dbo.tbSeatSector ADD CONSTRAINT FK_SeatSector_RootSector FOREIGN KEY ( RootSectorId ) REFERENCES dbo.tbSeatSector( SeatSectorId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.216</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop seat quantity columns from tbPerformance</REASON><TABLENAMES>tbPerformance</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPerformance drop column QuantityHeld;
alter table tbPerformance drop column QuantityReserved;
alter table tbPerformance drop column QuantityPaid;
alter table tbPerformance drop column QuantityFree;
alter table tbPerformance drop column QuantityMax;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.215</SQLVERSION><RMTRACKLINK>SIT-6799</RMTRACKLINK><REASON>Add tbTicketusage.IncProductValue</REASON><TABLENAMES>tbTicketUsage</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add IncProductValue money null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.214</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add 
-tbPortfolioSlotLog.LogAmountMoney
-tbPortfolioSlotBalance.BalanceMoney
-tbPortfolioSlotBalance.InitialValueMoney</REASON><TABLENAMES>tbPortfolioSlotLog
tbPortfolioSlotBalance</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbPortfolioSlotLog ADD LogAmountMoney money NOT NULL CONSTRAINT DF_LogAmountMoney default(0) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPortfolioSlotLog DROP CONSTRAINT DF_LogAmountMoney
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPortfolioSlotBalance ADD BalanceMoney money NOT NULL CONSTRAINT DF_BalanceMoney default(0) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPortfolioSlotBalance DROP CONSTRAINT DF_BalanceMoney
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPortfolioSlotBalance ADD InitialValueMoney money NOT NULL CONSTRAINT DF_InitialValueMoney default(0) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPortfolioSlotBalance DROP CONSTRAINT DF_InitialValueMoney
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.213</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbMaskItemCondition.MonitorValue</REASON><TABLENAMES>tbMaskItemCondition</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMaskItemCondition
add MonitorValue nvarchar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbMaskItemCondition
set MonitorValue=''
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMaskItemCondition
alter column MonitorValue nvarchar(max) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.212</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbMaskItemCondition</REASON><TABLENAMES>tbMaskItemCondition</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE dbo.tbMaskItemCondition ( 
	MaskItemConditionId  uniqueidentifier NOT NULL    ,
	MaskItemId           uniqueidentifier NOT NULL    ,
	MonitorMetaFieldId   uniqueidentifier NOT NULL    ,
	MonitorComparatorType smallint NOT NULL    ,
	MaskItemProperty     smallint NOT NULL    ,
	PropertyValue        nvarchar(max) NOT NULL    ,
	CONSTRAINT PK_MaskItemCondition PRIMARY KEY  ( MaskItemConditionId ) 
 );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_MaskItemCondition_MaskItemId ON dbo.tbMaskItemCondition ( MaskItemId, MonitorMetaFieldId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_MaskItemCondition_MonitorMetaFieldId ON dbo.tbMaskItemCondition ( MonitorMetaFieldId, MaskItemId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE dbo.tbMaskItemCondition ADD CONSTRAINT FK_MaskItemCondition_MaskItem FOREIGN KEY ( MaskItemId ) REFERENCES dbo.tbMaskItem( MaskItemId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE dbo.tbMaskItemCondition ADD CONSTRAINT FK_MaskItemCondition_MonitorMetaField FOREIGN KEY ( MonitorMetaFieldId ) REFERENCES dbo.tbMetaField( MetaFieldId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.211</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Update right "override upgrade restrictions"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRight
set RightValue='10'
where RightType=153 and RightValue='true'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.210</SQLVERSION><RMTRACKLINK>SIT-8611</RMTRACKLINK><REASON>Create table:
-tbInvoicePayment</REASON><TABLENAMES>tbInvoicePayment
tbInvoiceItem</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE tbInvoicePayment ( 
	InvoiceId            uniqueidentifier NOT NULL    ,
	PaymentId            uniqueidentifier NOT NULL    ,
	PaymentAmount        money NOT NULL    ,
	CONSTRAINT PK_InvoicePayment PRIMARY KEY  ( InvoiceId, PaymentId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbInvoicePayment ADD CONSTRAINT FK_InvoicePayment_Invoice FOREIGN KEY ( InvoiceId ) REFERENCES tbInvoice( InvoiceId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbInvoicePayment ADD CONSTRAINT FK_InvoicePayment_Payment FOREIGN KEY ( PaymentId ) REFERENCES tbPayment( PaymentId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.209</SQLVERSION><RMTRACKLINK>SIT-8611</RMTRACKLINK><REASON>Create tables:
-tbInvoice
-tbInvoiceItem
Add tbSale.Invoiced</REASON><TABLENAMES>tbInvoice
tbInvoiceItem
tbSale</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbSale ADD Invoiced bit NOT NULL CONSTRAINT DF_Sale default(0) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSale DROP CONSTRAINT DF_Sale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE TABLE tbInvoice ( 
	InvoiceId            uniqueidentifier NOT NULL    ,
	InvoiceCode          varchar(30) NOT NULL    ,
	InvoiceStatus        smallint NOT NULL    ,
	IssueDateTime        datetime NOT NULL    ,
	IssueDate            date NOT NULL    ,
	DueDate              date NOT NULL    ,
	AccountId            uniqueidentifier NOT NULL    ,
	LocationId           uniqueidentifier NOT NULL    ,
	OpAreaId             uniqueidentifier NOT NULL    ,
	WorkstationId        uniqueidentifier NOT NULL    ,
	UserAccountId        uniqueidentifier NOT NULL    ,
	TotalAmount          money NOT NULL    ,
	TotalTax             money NOT NULL    ,
	ItemCount            int NOT NULL    ,
	CONSTRAINT PK_Invoice PRIMARY KEY  ( InvoiceId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Invoice_AccountId ON tbInvoice ( AccountId, IssueDateTime );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Invoice_OpAreaId ON tbInvoice ( OpAreaId, IssueDateTime );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Invoice_UserAccountId ON tbInvoice ( UserAccountId, IssueDateTime );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Invoice_LocationId ON tbInvoice ( LocationId, IssueDateTime );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Invoice_WorkstationId ON tbInvoice ( WorkstationId, IssueDateTime );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Invoice_IssueDate ON tbInvoice ( IssueDate, IssueDateTime );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_Invoice_InvoiceCode ON tbInvoice ( InvoiceCode );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbInvoice ADD CONSTRAINT FK_Invoice_Account FOREIGN KEY ( AccountId ) REFERENCES tbAccount( AccountId ) ON DELETE NO ACTION ON UPDATE NO ACTION;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbInvoice ADD CONSTRAINT FK_Invoice_UserAccount FOREIGN KEY ( UserAccountId ) REFERENCES tbAccount( AccountId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbInvoice ADD CONSTRAINT FK_Invoice_Workstation FOREIGN KEY ( WorkstationId ) REFERENCES tbWorkstation( WorkstationId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbInvoice ADD CONSTRAINT FK_Invoice_LocationAccount FOREIGN KEY ( LocationId ) REFERENCES tbAccount( AccountId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbInvoice ADD CONSTRAINT FK_Invoice_OpAreaAccount FOREIGN KEY ( OpAreaId ) REFERENCES tbAccount( AccountId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE TABLE tbInvoiceItem ( 
	InvoiceItemId        uniqueidentifier NOT NULL    ,
	InvoiceId            uniqueidentifier NOT NULL    ,
	SaleItemId           uniqueidentifier NOT NULL    ,
	UnitAmount           money NOT NULL    ,
	UnitTax              money NOT NULL    ,
	Quantity             int NOT NULL    ,
	TotalAmount          money NOT NULL    ,
	TotalTax             money NOT NULL    ,
	CONSTRAINT PK_InvoiceItem PRIMARY KEY  ( InvoiceItemId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_InvoiceItem_InvoiceId ON tbInvoiceItem ( InvoiceId, SaleItemId );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE INDEX UQ_InvoiceItem_SaleItemId ON tbInvoiceItem ( SaleItemId, InvoiceId );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbInvoiceItem ADD CONSTRAINT FK_InvoiceItem_Invoice FOREIGN KEY ( InvoiceId ) REFERENCES tbInvoice( InvoiceId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbInvoiceItem ADD CONSTRAINT FK_InvoiceItem_SaleItem FOREIGN KEY ( SaleItemId ) REFERENCES tbSaleItem( SaleItemId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.208</SQLVERSION><RMTRACKLINK>SIT-8735</RMTRACKLINK><REASON>Added field tbSaleCapacityLog.SaleCapacityLogType</REASON><TABLENAMES>tbSaleCapacityLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleCapacityLog ADD SaleCapacityLogType smallint NOT NULL CONSTRAINT DF_SaleCapacityLog default(0) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleCapacityLog DROP CONSTRAINT DF_SaleCapacityLog 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.207</SQLVERSION><RMTRACKLINK>SIT-6686 SIT-7818</RMTRACKLINK><REASON>Added:
tbTicketRevenue.ProductAmortizationScheduledDate
tbTicketRevenue.ProductAmortizationCreateDateTime</REASON><TABLENAMES>tbTicketRevenue</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketRevenue
add ProductAmortizationScheduledDate date null,
    ProductAmortizationCreateDateTime datetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_TicketRevenue_ProductAmortizationScheduledDate ON dbo.tbTicketRevenue ( ProductAmortizationScheduledDate, ProductAmortizationCreateDateTime ) WHERE ProductAmortizationScheduledDate is not null;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.206</SQLVERSION><RMTRACKLINK>SIT-6686 SIT-7818</RMTRACKLINK><REASON>Added (again):
tbTicketRevenue.ProductAmortizationWithinExpiration</REASON><TABLENAMES>tbTicketRevenue</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketRevenue
add 
  ProductAmortizationWithinExpiration bit NOT NULL constraint DF_TicketRevenue_ProductAmortizationWithinExpiration default (0)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketRevenue drop constraint DF_TicketRevenue_ProductAmortizationWithinExpiration
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.205</SQLVERSION><RMTRACKLINK>SIT-6686 SIT-7818</RMTRACKLINK><REASON>[0..1] added:
tbProductRevenueGateCategory.AmortizationWithinExpiration
tbProductRevenueGateCategory.AmortizationDelay

[2..3] dropped:
tbTicketRevenue.ProductAmortizationWithinExpiration
tbTicketRevenue.ProductAmortizationDelay</REASON><TABLENAMES>tbProductRevenueGateCategory
tbTicketRevenue</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory
add 
  AmortizationWithinExpiration bit NOT NULL constraint DF_ProductRevenueGateCategory_AmortizationWithinExpiration default (0),
  AmortizationDelay smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory drop constraint DF_ProductRevenueGateCategory_AmortizationWithinExpiration
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketRevenue
drop column ProductAmortizationWithinExpiration
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketRevenue
drop column ProductAmortizationDelay
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.204</SQLVERSION><RMTRACKLINK>SIT-8633</RMTRACKLINK><REASON>Increased size of tbPaymentToken.PaymentTokenCode to 100</REASON><TABLENAMES>tbPaymentToken</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentToken
alter column PaymentTokenCode varchar(100) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.203</SQLVERSION><RMTRACKLINK>SIT-6686 SIT-7818</RMTRACKLINK><REASON>Added index on ValidDateFrom+ValidDateTo</REASON><TABLENAMES>tbTicket</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Ticket_ValidDateFrom ON tbTicket (ValidDateFrom, ValidDateTo);
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.202</SQLVERSION><RMTRACKLINK>SIT-6686 SIT-7818</RMTRACKLINK><REASON>Added:
tbTicketRevenue.ProductAmortizationWithinExpiration
tbTicketRevenue.ProductAmortizationDelay</REASON><TABLENAMES>tbTicketRevenue</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketRevenue
add 
  ProductAmortizationWithinExpiration bit NOT NULL constraint DF_TicketRevenue_ProductAmortizationWithinExpiration default (0),
  ProductAmortizationDelay smallint null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketRevenue drop constraint DF_TicketRevenue_ProductAmortizationWithinExpiration
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.201</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Invalidate  cache for categories and catalogs</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbEntityChange
where EntityId in  (
  select CategoryId
  from tbCategory
)

insert into tbEntityChange (
  EntityType, 
  EntityId, 
  InsertUpdate
)
(
  select distinct
    28 /*Category*/,
    CategoryId,
    1 /*true*/
  from tbCategory
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbEntityChange
where EntityId in  (
  select CatalogId
  from tbCatalog
)

insert into tbEntityChange (
  EntityType, 
  EntityId, 
  InsertUpdate
)
(
  select distinct
    47 /*Catalog*/,
    CatalogId,
    1 /*true*/
  from tbCatalog
)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.200</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added field tbMerchant.MerchantStatus</REASON><TABLENAMES>tbMerchant</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMerchant
add MerchantStatus smallint not null default 10 /*Active*/
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.199</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add column tbAccount.CreateDateTime
- Create table tbSaleTempEmptyAccount</REASON><TABLENAMES>tbAccount
tbSaleTempEmptyAccount</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccount add CreateDateTime datetime not null CONSTRAINT DF_Account_CreateDateTime DEFAULT '1999-12-31';

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAccount DROP CONSTRAINT DF_Account_CreateDateTime;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @CountAccount int;
declare @CountHistory int;
select @CountAccount=Count(*) from tbAccount;
select @CountHistory=Count(*) from tbHistoryLog;

if (@CountAccount &lt; 1000000) and (@CountHistory &lt; 1000000) 
begin
  update tbAccount
  set CreateDateTime=HL.LogTimestamp
  from tbHistoryLog HL
  where AccountId=HL.EntityId and HL.HistoryLogType=1/*create*/
end;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE TABLE tbSaleTempEmptyAccount ( 
	SaleId             uniqueidentifier NOT NULL,
	AccountId          uniqueidentifier NOT NULL,
	AccountCode        varchar(20) NOT NULL,
	PortfolioId        uniqueidentifier NOT NULL,
	CONSTRAINT PK_SaleTempEmptyAccount PRIMARY KEY  ( SaleId, AccountId ) 
 );
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.198</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbHistoryDetail
0: drop index IX_HistoryDetail_EntityId
1: drop column EntityId
2: drop column LogDateTime
3: rename HistoryLogDetailId into HistoryDetailId</REASON><TABLENAMES>tbHistoryDetail</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @count int;

SELECT @Count=Count(*) 
FROM sys.indexes 
WHERE name='IX_HistoryDetail_EntityId' AND object_id = OBJECT_ID('dbo.tbHistoryDetail');

if (@count = 1)
begin
  drop index IX_HistoryDetail_EntityId on tbHistoryDetail
end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbHistoryDetail
drop column EntityId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbHistoryDetail
drop column LogDateTime
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbHistoryDetail.HistoryLogDetailId', 'HistoryDetailId', 'COLUMN';  

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.197</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Invalidate cache for surveys</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete
from tbEntityChange
where
  EntityType=74 and
  EntityId in (select SurveyId from tbSurvey) and 
  InsertUpdate=1

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (EntityType, EntityId, InsertUpdate)
select 
  74,
  SurveyId,
  1
from tbSurvey
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.196</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create function fnIsValidTicketUsage</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE FUNCTION dbo.fnIsValidTicketUsage(@ValidateResult int, @Invalidated bit, @Simulated bit)
RETURNS bit
AS
BEGIN
  declare @result bit;
  set @result=0;

  if (@ValidateResult &lt; 100) and ((@Invalidated is null) or (@Invalidated &lt;&gt; 1) and ((@Simulated is null) or (@Simulated &lt;&gt; 1)))
    set @result=1;

  RETURN(@result);
END

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>fcolombo</ADDEDBY><SQLVERSION>3.195</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Edit primary key of tbHistoryDetail</REASON><TABLENAMES>tbHistoryDetail</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE INDEX IX_HistoryDetail_HistoryLogId ON tbHistoryDetail (HistoryLogId, HistoryField, HistorySubField)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_HistoryDetail_HistoryLogId')
BEGIN
  ALTER TABLE tbHistoryDetail DROP CONSTRAINT PK_HistoryDetail
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_HistoryDetail_HistoryLogId')
BEGIN
  ALTER TABLE tbHistoryDetail ADD CONSTRAINT PK_HistoryDetail PRIMARY KEY (HistoryLogDetailId)   
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_HistoryDetail_HistoryLogId')
BEGIN
  EXEC sp_rename 'FK_HistoryDetail_HistoryLogId', 'FK_HistoryDetail_HistoryLog'
END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.194</SQLVERSION><RMTRACKLINK>SIT-8368</RMTRACKLINK><REASON>New table tbTicket2Event</REASON><TABLENAMES>tbTicket2Event</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE tbTicket2Event ( 
	TicketId             uniqueidentifier NOT NULL    ,
	EventId              uniqueidentifier NOT NULL    ,
	ValidDateFrom        date     ,
	ValidDateTo          date     ,
	CONSTRAINT PK_Ticket2Event PRIMARY KEY  ( TicketId, EventId ) 
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Ticket2Event_EventId ON tbTicket2Event ( EventId, ValidDateFrom, ValidDateTo );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicket2Event ADD CONSTRAINT FK_Ticket2Event_Ticket FOREIGN KEY ( TicketId ) REFERENCES tbTicket( TicketId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicket2Event ADD CONSTRAINT FK_Ticket2Event_Event FOREIGN KEY ( EventId ) REFERENCES tbEvent( EventId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.193</SQLVERSION><RMTRACKLINK>SIT-8526</RMTRACKLINK><REASON>New tbTicket.AccrualEndDate field</REASON><TABLENAMES>tbTicket</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add AccrualEndDate date null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Ticket_AccrualEndDate ON tbTicket ( AccrualEndDate  DESC , EncodeFiscalDate  DESC  );
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.192</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbSurvey.AttachToSale</REASON><TABLENAMES>tbSurvey</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbSurvey ADD AttachToSale bit NOT NULL CONSTRAINT DF_Survey_AttachToSale DEFAULT 0 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSurvey DROP CONSTRAINT DF_Survey_AttachToSale
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.191</SQLVERSION><RMTRACKLINK>SIT-8215</RMTRACKLINK><REASON>Drop tbProduct.BiometricFrequencyType field
Add tbProduct.ManualVerificationType field</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
drop column BiometricFrequencyType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add ManualVerificationType smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.190</SQLVERSION><RMTRACKLINK>SIT-8215</RMTRACKLINK><REASON>New tbProduct.BiometricFrequencyType field</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add BiometricFrequencyType smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>fcolombo</ADDEDBY><SQLVERSION>3.189</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added new field OpAreaAccountId to table tbBox</REASON><TABLENAMES>tbBox</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbBox ADD OpAreaAccountId uniqueidentifier NOT NULL CONSTRAINT DF_OpAreaAccountId DEFAULT NEWID()
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbBox DROP CONSTRAINT DF_OpAreaAccountId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @DefaultOpAreaId uniqueidentifier;
select top 1 @DefaultOpAreaId=AccountId from tbAccount where EntityType=14

update BOX 
set OpAreaAccountId=Coalesce(WKS.OpAreaAccountId, @DefaultOpAreaId)
from 
  tbBox BOX left join
	tbWorkstation WKS on WKS.WorkstationId=(
		select top 1 XDEP.WorkstationId
		from tbBoxDeposit XDEP
		where	XDEP.BoxId=BOX.BoxId
		order by XDEP.DepositDateTime
	) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_Box_OpAreaAccountId ON tbBox (OpAreaAccountId, FBoxDate) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbBox ADD CONSTRAINT Fk_Box_OpAreaAccount FOREIGN KEY(OpAreaAccountId) REFERENCES tbAccount(AccountId)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>fcolombo</ADDEDBY><SQLVERSION>3.188</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor of
  - tbHistoryLog
  - tbHistoryDetail</REASON><TABLENAMES>tbHistoryLog
tbHistoryDetail</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbHistoryDetail DROP CONSTRAINT PK_HistoryDetail
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_HistoryDetail_HistoryLog')
BEGIN
  ALTER TABLE tbHistoryDetail DROP CONSTRAINT FK_HistoryDetail_HistoryLog
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbHistoryLog DROP CONSTRAINT PK_HistoryLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbHistoryLog ADD HistoryLogId uniqueidentifier NOT NULL CONSTRAINT DF_HistoryLogId DEFAULT NEWID() 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbHistoryLog DROP CONSTRAINT DF_HistoryLogId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbHistoryLog ADD CONSTRAINT PK_HistoryLog PRIMARY KEY (HistoryLogId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_HistoryLog_EntityId ON tbHistoryLog (EntityId, LogDateTime)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbHistoryDetail ADD HistoryLogDetailId uniqueidentifier NOT NULL CONSTRAINT DF_HistoryLogDetailId DEFAULT NEWID()
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbHistoryDetail DROP CONSTRAINT DF_HistoryLogDetailId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbHistoryDetail ADD HistoryLogId uniqueidentifier
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbHistoryDetail ADD CONSTRAINT FK_HistoryDetail_HistoryLog FOREIGN KEY([HistoryLogId]) REFERENCES tbHistoryLog([HistoryLogId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>UPDATE tbHistoryDetail SET HistoryLogId=HLOG.HistoryLogId
FROM 
  tbHistoryLog HLOG INNER JOIN 
	tbHistoryDetail HDET on HLOG.EntityId=HDET.EntityId AND HLOG.LogDateTime=HDET.LogDateTime AND HLOG.PriorityOrder=HDET.PriorityOrder

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DELETE tbHistoryDetail WHERE HistoryLogId IS NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbHistoryDetail ALTER COLUMN HistoryLogId uniqueidentifier NOT NULL 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbHistoryDetail ADD CONSTRAINT PK_HistoryDetail PRIMARY KEY (HistoryLogDetailId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_HistoryDetail_EntityId ON tbHistoryDetail (EntityId, LogDateTime) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbHistoryLog DROP COLUMN PriorityOrder
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbHistoryDetail DROP COLUMN PriorityOrder
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.187</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added field tbCurrency.CurrencyStatus</REASON><TABLENAMES>tbCurrency</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCurrency
add CurrencyStatus smallint not null default 10 /*Active*/
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.186</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added field tbTransaction.OpAreaId</REASON><TABLENAMES>tbTransaction</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransaction
ADD OpAreaId uniqueidentifier NOT NULL CONSTRAINT DF_Transaction_OpAreaId DEFAULT NEWID()

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_Transaction_OpAreaId ON tbTransaction (OpAreaId, TransactionFiscalDate, TransactionDateTime)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>UPDATE tbTransaction
SET tbTransaction.OpAreaId = WKS.OpAreaAccountId
FROM 
  tbTransaction TRN INNER JOIN
  tbWorkstation WKS ON WKS.WorkstationId=TRN.WorkstationId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransaction DROP CONSTRAINT DF_Transaction_OpAreaId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransaction ADD CONSTRAINT FK_Transaction_OpAreaAccount FOREIGN KEY (OpAreaId) REFERENCES tbAccount(AccountId) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.185</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Removed tbCategory2Mask.PrioeityOrder
Added tbMask.PriorityOrder</REASON><TABLENAMES>tbCategory2Mask
tbMask</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCategory2Mask
drop column PriorityOrder 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMask
add PriorityOrder int null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.184</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>update tbRight, move right 682 value to right 477
delete right 682 from tbRight
update tbDriver move drivetype 3252 to 3180 
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbRight select newid(), EntityType, EntityId, 477, RightValue from tbRight where RightType = 682 and EntityType=17
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbRight where RightType=682
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbDriver set DriverType=3180 where DriverType=3252
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.183</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added field tbDataSource.CryptType</REASON><TABLENAMES>tbDataSource</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDataSource
add CryptType smallint not null DEFAULT 0
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.182</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>IX_TicketLedgerTrigger_TicketId changed to UQ_TicketLedgerTrigger_TicketId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DELETE FROM tbTicketLedgerTrigger
WHERE
	TicketLedgerTriggerId IN (
	SELECT 
		X.TicketLedgerTriggerId
	FROM (
		SELECT
			TLT.TicketLedgerTriggerId, TLT.TicketId, TLT.TriggerLedgerType, TLT.TriggerDateTime,
			ROW_NUMBER() OVER (PARTITION BY TLT.TicketId, TLT.TriggerLedgerType  ORDER BY TLT.TriggerDateTime ASC) AS RowNumber
		FROM
			tbTicketLedgerTrigger TLT
	) X
	WHERE 
	  X.RowNumber &gt; 1
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX IX_TicketLedgerTrigger_TicketId   
    ON tbTicketLedgerTrigger
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketLedgerTrigger ADD CONSTRAINT UQ_TicketLedgerTrigger_TicketId UNIQUE ( TicketId, TriggerLedgerType)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.181</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Changed RefundProduct right to boolen to LkSNRightProductRefundLevel</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRight
set RightValue=20 /*LkSNRightProductRefundLevel.RefundableProducts*/
where 
  RightType=300 /*Product refund*/ and 
  RightValue='true'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.180</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbPortfolioSlotLog.TicketId
Add column tbProduct.WalletClearingTriggerType
Add column tbProduct.MembershiPointClearingTriggerType</REASON><TABLENAMES>tbPortfolioSlotLog
tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotLog
add TicketId uniqueidentifier null 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPortfolioSlotLog ADD CONSTRAINT FK_PortfolioSlotLog_Ticket FOREIGN KEY ( TicketId ) REFERENCES tbTicket( TicketId ) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_PortfolioSlotLog_TicketId ON tbPortfolioSlotLog ( TicketId ) where TicketId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add 
  WalletClearingTriggerType smallint null,
  MembershipPointClearingTriggerType smallint null 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.179</SQLVERSION><RMTRACKLINK>SIT-7406</RMTRACKLINK><REASON>New table tbSaleItemData</REASON><TABLENAMES>tbSaleItemData</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE tbSaleItemData ( 
	SaleItemId           uniqueidentifier NOT NULL    ,
	ParamName            varchar(30) NOT NULL    ,
	ParamValue           nvarchar(100) NOT NULL    ,
	ParamValueLong       nvarchar(max)
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemData add CONSTRAINT PK_SaleItemData PRIMARY KEY (SaleItemId, ParamName)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleItemData ADD CONSTRAINT FK_SaleItemData_SaleItem FOREIGN KEY ( SaleItemId ) REFERENCES tbSaleItem( SaleItemId ) ON DELETE NO ACTION ON UPDATE NO ACTION;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.178</SQLVERSION><RMTRACKLINK>SIT-7996</RMTRACKLINK><REASON>Invalidate calendars into tbEntityChange</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete 
  tbEntityChange
where 
  EntityType=67 and
  EntityId in (select CalendarId from tbCalendar) and 
  InsertUpdate=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (EntityType, EntityId, InsertUpdate)
select 
  67,
  CalendarId,
  1
from tbCalendar
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.177</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added tbLedgerManual.TransactionId</REASON><TABLENAMES>tbLedgerManual</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerManual
add TransactionId uniqueidentifier null  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerManual ADD CONSTRAINT FK_LedgerManual_Transaction FOREIGN KEY (TransactionId) REFERENCES tbTransaction(TransactionId) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_LedgerManual_TransactionId ON tbLedgerManual (TransactionId) where TransactionId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.176</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Delete rights for RightType=169 (Upgrade used tickets)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbRight
where RightType=169
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.175</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Remove Productflag=41</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete 
from tbProductFlag 
where ProductFlag=41
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.174</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added ExpirationUpgradeDays field</REASON><TABLENAMES>tbProductUpgrade</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductUpgrade add ExpirationUpgradeDays smallint
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.173</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create function fnMetaDataValue</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE FUNCTION [dbo].[fnMetaDataValue] (@EntityId uniqueidentifier, @MetaFieldCode varchar(100))
RETURNS nvarchar(max)
AS
BEGIN
	DECLARE @Result nvarchar(max);

	select @Result=Coalesce(MD.ShortValue, MD.LongValue)
	from
	  tbMetaField MF inner join
	  tbMetaData MD on Md.EntityId=@EntityId and MD.MetaFieldId=MF.MetaFieldId 
	where MF.MetaFieldCode=@MetaFieldCode

	RETURN @Result

END



</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.172</SQLVERSION><RMTRACKLINK>SIT-8130</RMTRACKLINK><REASON>New tbTask.LastUpdate field</REASON><TABLENAMES>tbTask</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTask add LastUpdate datetime
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.171</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop and re-create table tbSalePromotion</REASON><TABLENAMES>tbSalePromotion</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbSalePromotion

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE TABLE tbSalePromotion ( 
	SalePromotionId      uniqueidentifier NOT NULL,
	SaleId               uniqueidentifier NOT NULL,
	PromoProductId       uniqueidentifier NOT NULL,
	IndividualCouponId   uniqueidentifier,
	SaleFiscalDate       date NOT NULL,
	Quantity             int NOT NULL,
	DiscountAmount       money NOT NULL,
	CONSTRAINT PK_SalePromotion PRIMARY KEY  ( SalePromotionId ),
	CONSTRAINT UQ_SalePromotion UNIQUE ( SaleId, PromoProductId, IndividualCouponId )
 );

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSalePromotion ADD CONSTRAINT FK_SalePromotion_Sale FOREIGN KEY ( SaleId ) REFERENCES tbSale( SaleId ) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSalePromotion ADD CONSTRAINT FK_SalePromotion_Product FOREIGN KEY ( PromoProductId ) REFERENCES tbProduct( ProductId ) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSalePromotion ADD CONSTRAINT FK_SalePromotion_IndividualCoupon FOREIGN KEY ( IndividualCouponId ) REFERENCES tbIndividualCoupon( IndividualCouponId ) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_SalePromotion_PromoProductId ON tbSalePromotion ( PromoProductId, SaleFiscalDate )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_SalePromotion_SaleId ON tbSalePromotion ( SaleId, SaleFiscalDate )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_SalePromotion_IndividualCouponId ON tbSalePromotion ( IndividualCouponId, SaleFiscalDate ) where IndividualCouponId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.170</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>create table tbSalePromotion</REASON><TABLENAMES>tbSalePromotion</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE dbo.tbSalePromotion ( 
	SaleId uniqueidentifier NOT NULL,
	PromoProductId uniqueidentifier NOT NULL,
	Quantity int NOT NULL
 );
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSalePromotion ADD CONSTRAINT PK_SalePromotion PRIMARY KEY (SaleId, PromoProductId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSalePromotion ADD CONSTRAINT FK_SalePromotion_Sale FOREIGN KEY ( SaleId ) REFERENCES tbSale( SaleId ) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSalePromotion ADD CONSTRAINT FK_SalePromotion_Product FOREIGN KEY ( PromoProductId ) REFERENCES tbProduct( ProductId ) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_SalePromotion_PromoProductId ON tbSalePromotion ( PromoProductId )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.169</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbSaleCapacityHold.ExpireDateTime
Add index IX_SaleCapacityHold_StatusExpired
Add index IX_SeatHold_StatusExpired</REASON><TABLENAMES>tbSaleCapacityHold
tbSaleCapacityLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleCapacityHold
add
  [ExpireDateTime] datetime
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_SaleCapacityHold_StatusExpired ON tbSaleCapacityHold (HoldStatus, ExpireDateTime) where ExpireDateTime is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_SeatHold_StatusExpired ON tbSeatHold (HoldStatus, ExpireDateTime) where ExpireDateTime is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleCapacityLog
ALTER COLUMN [DateTime] dateTime not null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleCapacityHold
ALTER COLUMN [HoldDateTime] dateTime not null;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.168</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbOutboundOffline:
- CorrelationId
- SuppressEvent</REASON><TABLENAMES>tbOutboundOffline</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbOutboundOffline
add
  CorrelationId varchar(50) null,  
  SuppressEvent bit not null  constraint DF_OutboundOffline_SuppressEvent default (0)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbOutboundOffline drop constraint DF_OutboundOffline_SuppressEvent
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.167</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbSaleCapacityHold.SaleCapacityGroupHoldId</REASON><TABLENAMES>tbSaleCapacityHold</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleCapacityHold
add
  [SaleCapacityGroupHoldId] uniqueidentifier NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_SaleCapacityHold_SaleCapacityGroupHoldId ON tbSaleCapacityHold (SaleCapacityGroupHoldId)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.166</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbSaleItem.FacePrice
AddColumn tbSaleItem.FaceTax</REASON><TABLENAMES>tbSaleItem</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItem
add
  [UnitFaceAmount] Money NOT NULL constraint DF_SaleItem_UnitFaceAmount default (0)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItem drop constraint DF_SaleItem_UnitFaceAmount
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItem
add
  [UnitFaceTax] Money NOT NULL constraint DF_SaleItem_UnitFaceTax default (0)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItem drop constraint DF_SaleItem_UnitFaceTax
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.165</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added CashPayment to tbPluginPaymentMethod</REASON><TABLENAMES>tbPluginPaymentMethod</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPluginPaymentMethod
add CashPayment bit NOT NULL DEFAULT 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPluginPaymentMethod
set CashPayment=1
where PluginId in (
  select PLG.PluginId
  from 
    tbDriver DRV inner join
    tbPlugin PLG on PLG.DriverId=DRV.DriverId and PLG.PluginDefault=1
  where
    DRV.DriverType=1001
)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.164</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Created table tbTransactionTicketPerformance</REASON><TABLENAMES>tbTransactionTicketPerformance</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE tbTransactionTicketPerformance ( 
  TransactionId uniqueidentifier NOT NULL,
  TicketId uniqueidentifier NOT NULL,
  SourcePerformanceSetId uniqueidentifier NULL,
  TargetPerformanceSetId uniqueidentifier NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionTicketPerformance ADD CONSTRAINT PK_TransactionTicketPerformance PRIMARY KEY (TransactionId,TicketId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionTicketPerformance ADD CONSTRAINT FK_TransactionTicketPerformance_Transaction FOREIGN KEY (TransactionId) REFERENCES tbTransaction (TransactionId) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionTicketPerformance ADD CONSTRAINT FK_TransactionTicketPerformance_Ticket FOREIGN KEY (TicketId) REFERENCES tbTicket (TicketId) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionTicketPerformance ADD CONSTRAINT FK_TransactionTicketPerformance_SourcePerformanceSet FOREIGN KEY (SourcePerformanceSetId) REFERENCES tbPerformanceSet (PerformanceSetId) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionTicketPerformance ADD CONSTRAINT FK_TransactionTicketPerformance_TargetPerformanceSet FOREIGN KEY (TargetPerformanceSetId) REFERENCES tbPerformanceSet (PerformanceSetId) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionTicketPerformance_TicketId] ON tbTransactionTicketPerformance(TicketId) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_TransactionTicketPerformance_SourcePerformanceSetId ON tbTransactionTicketPerformance(SourcePerformanceSetId) where SourcePerformanceSetId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_TransactionTicketPerformance_TargetPerformanceSetId ON tbTransactionTicketPerformance(TargetPerformanceSetId) where TargetPerformanceSetId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.163</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added  fields:
  tbProduct.ChangePerformanceAdvanceDays
  tbProduct.TicketVoidAdvanceDays
  tbProduct.TicketVoidAdvanceFeeDays
  tbProduct.TicketVoidFeeProductId
  tbProductUpgrade.FromVisitUpgradeDays
  tbProductUpgrade.FromVisitUpgradePerfDays</REASON><TABLENAMES>tbProduct
tbProductUpgrade</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add 
  ChangePerformanceAdvanceDays smallint NULL,  
  TicketVoidAdvanceDays smallint NULL,
  TicketVoidAdvanceFeeDays smallint NULL,
  TicketVoidFeeProductId uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbProduct add constraint FK_Product_TicketVoidFeeProduct foreign key(TicketVoidFeeProductId) references [tbProduct] (ProductId)  on update no action on delete no action

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductUpgrade
add 
  FromVisitUpgradeDays smallint NULL,
  FromVisitUpgradePerfDays smallint NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>fcolombo</ADDEDBY><SQLVERSION>3.162</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column ExchangeRate on tables:
- tbBoxDepositDetail
- tbBoxDepositBreakdown</REASON><TABLENAMES>tbBoxDepositDetail
tbBoxDepositBreakdown</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbBoxDepositDetail ADD ExchangeRate Decimal(38,19) NOT NULL CONSTRAINT DF_BoxDepositDetail default(1) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbBoxDepositDetail DROP CONSTRAINT DF_BoxDepositDetail 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbBoxDepositBreakdown ADD ExchangeRate Decimal(38,19) NOT NULL CONSTRAINT DF_BoxDepositDetail default(1)             
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbBoxDepositBreakdown DROP CONSTRAINT DF_BoxDepositDetail
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>there</ADDEDBY><SQLVERSION>3.161</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbSaleItemDiscount.DiscountTax</REASON><TABLENAMES>tbSaleItemDiscount</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItemDiscount
add
  [DiscountTax] Money NOT NULL constraint DF_SaleItemDiscount_DiscountTax default (0)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemDiscount drop constraint DF_SaleItemDiscount_DiscountTax
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.160</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Renamed tbSaleItemDetailRevalidate.ExstensionDays to ExtensionDays</REASON><TABLENAMES>tbSaleItemDetailRevalidate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_RENAME 'tbSaleItemDetailRevalidate.ExstensionDays' , 'ExtensionDays'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>fcolombo</ADDEDBY><SQLVERSION>3.159</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Indexes missmatch</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename N'tbExtMediaCode.IX_ExtMediaCode_ExtMediaBatch', N'IX_ExtMediaCode_ExtMediaBatchId', N'INDEX'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_Message_CategoryId ON dbo.tbMessage ( CategoryId ASC )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_PPURule_OpAreaId ON dbo.tbPPURule ( OpAreaId ASC, AccessPointId ASC ) where OpAreaId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename N'dbo.tbPaymentIntercompany.PK_PaymentId', N'PK_PaymentIntercompany', N'INDEX'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_PaymentWallet_PortfolioId ON dbo.tbPaymentWallet ( TicketMediaMatchId ASC )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE  INDEX IX_PaymentWallet_MediaId ON dbo.tbPaymentWallet ( MediaId ASC ) where MediaId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename N'dbo.tbPluginPayment2IntercompanyCostCenter.PK_IntercompanyCostCenterPlugin', N'PK_PluginPayment2IntercompanyCostCenter', N'INDEX'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename N'dbo.tbPluginPaymentMethod.PK_PluginPaymentMethodn', N'PK_PluginPaymentMethod', N'INDEX'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @INDEXNAME varchar(100);

SET @INDEXNAME = (select top 1 i.name from sys.tables t inner join sys.indexes i on t.OBJECT_ID = i.object_id where t.name = 'tbShopCart' and i.type_desc='CLUSTERED' and i.name like 'PK_%');

EXEC ('sp_rename N''dbo.tbShopCart.'+@INDEXNAME+''', N''PK_ShopCart'', N''INDEX''');
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_TimedTicketRuleItem_TimedTicketRuleId ON dbo.tbTimedTicketRuleItem ( TimedTicketRuleId ASC )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename N'dbo.tbCodeAliasType.PK_tbCodeAliasType', N'PK_CodeAliasType', N'INDEX'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename N'dbo.tbIntercompanyCostCenter.PK_IntercompanyCostCenterId', N'PK_IntercompanyCostCenter', N'INDEX'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.158</SQLVERSION><RMTRACKLINK>SIT-7807</RMTRACKLINK><REASON>Clean tbEntityChange by "dead" categories</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbEntityChange
where 
  InsertUpdate=1 and
  EntityType=28 and 
  EntityId not in (select CategoryId from tbCategory)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.157</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added following foreign key:
  -  FK_TransactionActivationGroup_Transaction
  -  FK_TransactionActivationGroup_Ticket
  -  FK_TransactionActivationGroup_SecondaryTicket</REASON><TABLENAMES>tbTransactionActivationGroup</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionActivationGroup ADD CONSTRAINT FK_TransactionActivationGroup_Transaction FOREIGN KEY (TransactionId) REFERENCES [tbTransaction] (TransactionId) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionActivationGroup ADD CONSTRAINT FK_TransactionActivationGroup_Ticket FOREIGN KEY (TicketId) REFERENCES [tbTicket] (TicketId) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionActivationGroup ADD CONSTRAINT FK_TransactionActivationGroup_SecondaryTicket FOREIGN KEY (secondaryTicketId) REFERENCES [tbTicket] (TicketId) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.156</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Changed ShowResBatchSequence right from LkSNOrderSequenceDisplay to  boolean </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRight
set RightValue = 
(case
  when RightValue in ('20','30') then 'true'
  else 'false'
end)
where RightType=624 /*ShowResBatchSequence*/
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.155</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Removes association members (entity type 131) from tbCategory2Entity automatically created in BKO upon new member creation. Association member cannot be linked to categories</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbCategory2Entity where EntityType = 131
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>fcolombo</ADDEDBY><SQLVERSION>3.154</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added TransactionFiscalDate at TransactionDateTime at indexes:
  1. IX_Transaction_SaleId
  2. IX_Transaction_WorkstationId
  3.  IX_Transaction_UserAccountId
  4. IX_Transaction_SupAccountId
  5. IX_Transaction_BoxId</REASON><TABLENAMES>tbTransaction</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP INDEX IX_Transaction_SaleId on tbTransaction
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_Transaction_SaleId ON tbTransaction(SaleId, TransactionFiscalDate, TransactionDateTime)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX IX_Transaction_WorkstationId on tbTransaction
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_Transaction_WorkstationId ON tbTransaction( WorkstationId, TransactionFiscalDate, TransactionDateTime)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX IX_Transaction_UserAccountId on tbTransaction
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_Transaction_UserAccountId ON tbTransaction( UserAccountId, TransactionFiscalDate, TransactionDateTime) WHERE UserAccountId IS NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX IX_Transaction_SupAccountId on tbTransaction
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_Transaction_SupAccountId ON tbTransaction( SupAccountId, TransactionFiscalDate, TransactionDateTime) WHERE SupAccountId IS NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX IX_Transaction_BoxId on tbTransaction
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE INDEX IX_Transaction_BoxId ON tbTransaction( BoxId, TransactionFiscalDate, TransactionDateTime) WHERE BoxId IS NOT NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.153</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Invalidate all masks</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbEntityChange where InsertUpdate=1 and EntityType=18 /*mask*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange(EntityType, EntityId, InsertUpdate)
select
  18 as EntityType,  
  MaskId,  
  1 as InsertUpdate 
from
  tbMask
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.152</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Renamed tbSale.BatchSequence in SaleSequence
Changed ShowResBatchSequence right from boolean to LkSNOrderSequenceDisplay</REASON><TABLENAMES>tbSale</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_Sale_BatchSequence on tbSale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_RENAME 'tbSale.BatchSequence' , 'SaleSequence'

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Unique Index UQ_Sale_SaleSequence on tbSale (SaleSequence) where SaleSequence is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbRight
set RightValue = 
(case
  when RightValue='true' then 20 /*PNR-SEQUENCE*/
  else 10 /*Hidden*/
end)
where RightType=624 /*ShowResBatchSequence*/
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>fcolombo</ADDEDBY><SQLVERSION>3.151</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added the smallint SeatEnvelopePriority to the table tbSeatEnvelope</REASON><TABLENAMES>tbSeatEnvelope</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbSeatEnvelope ADD SeatEnvelopePriority smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>fcolombo</ADDEDBY><SQLVERSION>3.150</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Delete of records not attached to an entity type person or organization</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DELETE FROM tbFullText WHERE EntityType in ( 1, 15, 6, 130, 131 ) and EntityId not in ( SELECT AccountId FROM tbAccount )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.149</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Renamed tbLedgerManual.LedgerDateTime in tbLedgerManual.LedgerLocalDateTime

Added 
  tbLedgerManual.AffectClearingLimit
  tbLedgerManual.GateCategoryId </REASON><TABLENAMES>tbLedgerManual</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_RENAME 'tbLedgerManual.LedgerDateTime' , 'LedgerLocalDateTime'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerManual ADD AffectClearingLimit bit
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerManual ADD GateCategoryId uniqueidentifier
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerManual ADD CONSTRAINT FK_LedgerManual_GateCategory FOREIGN KEY (GateCategoryId) REFERENCES tbGateCategory  (GateCategoryId) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_LedgerManual_GateCategoryId ON tbLedgerManual(GateCategoryId) where GateCategoryId is not null 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.148</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Removed tbLedgerManualItem.FK_LedgerManualItem_Account
Added Removed tbLedgerManualItem.FK_LedgerManualItem_LedgerAccount</REASON><TABLENAMES>tbLedgerManualItem</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerManualItem
DROP CONSTRAINT FK_LedgerManualItem_Account
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerManualItem ADD CONSTRAINT FK_LedgerManualItem_LedgerAccount FOREIGN KEY (LedgerAccountId) REFERENCES tbLedgerAccount (LedgerAccountId) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>fcolombo</ADDEDBY><SQLVERSION>3.147</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tbLedgerManualItem</REASON><TABLENAMES>tbLedgerManualItem</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>CREATE TABLE tbLedgerManualItem ( 
	[LedgerManualItemId]   uniqueidentifier NOT NULL    ,
	[LedgerManualId]       uniqueidentifier NOT NULL    ,
	[LedgerAccountId]      uniqueidentifier NOT NULL    ,
	[LocationId]           uniqueidentifier NOT NULL    ,
	[LedgerAmount]         money NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbLedgerManualItem] ADD CONSTRAINT PK_LedgerManualItem PRIMARY KEY ([LedgerManualItemId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbLedgerManualItem] ADD CONSTRAINT FK_LedgerManualItem_LedgerManual FOREIGN KEY ([LedgerManualId]) REFERENCES [tbLedgerManual] ([LedgerManualId]) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbLedgerManualItem] ADD CONSTRAINT FK_LedgerManualItem_Location FOREIGN KEY ([LocationId]) REFERENCES [tbAccount] ([AccountId]) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbLedgerManualItem] ADD CONSTRAINT FK_LedgerManualItem_Account FOREIGN KEY ([LedgerAccountId]) REFERENCES [tbAccount] ([AccountId]) ON DELETE NO ACTION ON UPDATE NO ACTION
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>fcolombo</ADDEDBY><SQLVERSION>3.146</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added LocationId and LedgerDateTime to tbLedgerManual</REASON><TABLENAMES>tbLedgerManual</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerManual ADD LocationId UniqueIdentifier
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerManual ADD LedgerDateTime SmallDateTime
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbLedgerManual add constraint FK_LedgerManual_LocationAccount foreign key(LocationId) references [tbAccount] (AccountId)  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.145</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Removed Ticket2Mask, Media2Mask, Order2Mask and Transaction2Mask from LKSNEntityLink and handled in tbMask2Entity</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbMask2Entity 
(
  MaskId,
  EntityId,
  EntityType,
  PriorityOrder
) 
(
  select 
    M.MaskId,
    EL.SrcEntityId,
    EL.SrcEntityType,
    ROW_NUMBER() over (partition by EL.SrcEntityId order by M.MaskId) as PriorityOrder
  from 
    tbEntityLink EL inner join
    tbMask M on M.MaskId=EL.DstEntityId
  where EL.EntityLinkType=22 /*Ticket2Mask*/
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbEntityLink
where EntityLinkType=22 /*Ticket2Mask*/

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMask2Entity 
(
  MaskId,
  EntityId,
  EntityType,
  PriorityOrder
) 
(
  select 
    M.MaskId,
    EL.SrcEntityId,
    EL.SrcEntityType,
    ROW_NUMBER() over (partition by EL.SrcEntityId order by M.MaskId) as PriorityOrder
  from 
    tbEntityLink EL inner join
    tbMask M on M.MaskId=EL.DstEntityId
  where EL.EntityLinkType=23 /*Media2Mask*/
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbEntityLink
where EntityLinkType=23 /*Media2Mask*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMask2Entity 
(
  MaskId,
  EntityId,
  EntityType,
  PriorityOrder
) 
(
  select 
    M.MaskId,
    EL.SrcEntityId,
    EL.SrcEntityType,
    ROW_NUMBER() over (partition by EL.SrcEntityId order by M.MaskId) as PriorityOrder 
  from 
    tbEntityLink EL inner join
    tbMask M on M.MaskId=EL.DstEntityId
  where EL.EntityLinkType=24 /*Order2Mask*/
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbEntityLink
where EntityLinkType=24 /*Order2Mask*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMask2Entity 
(
  MaskId,
  EntityId,
  EntityType,
  PriorityOrder
) 
(
  select 
    M.MaskId,
    EL.SrcEntityId,
    EL.SrcEntityType,
    ROW_NUMBER() over (partition by EL.SrcEntityId order by M.MaskId) as PriorityOrder
  from 
    tbEntityLink EL inner join
    tbMask M on M.MaskId=EL.DstEntityId
  where EL.EntityLinkType=25 /*Transaction2Mask*/
)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbEntityLink
where EntityLinkType=25 /*Transaction2Mask*/
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>fcolombo</ADDEDBY><SQLVERSION>3.144</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>ValidDateFrom nullable
ValidDateTo nullable</REASON><TABLENAMES>tbSaleCapacitySlot</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleCapacitySlot ALTER COLUMN ValidDateTo DATE NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleCapacitySlot ALTER COLUMN ValidDateFrom DATE NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.143</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>rename tbEvent.BookingWindow in tbEvent.BookingWindowDays</REASON><TABLENAMES>tbEvent</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC SP_RENAME 'tbEvent.BookingWindow','BookingWindowDays'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.142</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add BookingWindow to tbEvent</REASON><TABLENAMES>tbEvent</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEvent
add BookingWindow SmallInt NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>fcolombo</ADDEDBY><SQLVERSION>3.141</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop field treeLevel of table tbSaleCapacity</REASON><TABLENAMES>tbSaleCapacity</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleCapacity drop column treeLevel
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.140</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add new ClearingInitialAllocation field to tbTicket and tbTicketRevenue</REASON><TABLENAMES>tbTicket
tbTicketRevenue</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add
  [ClearingInitialAllocation] Money NOT NULL constraint DF_Ticket_ClearingInitialAllocation default (0)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket drop constraint DF_Ticket_ClearingInitialAllocation
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketRevenue
add
  [ClearingInitialAllocation] Money NOT NULL constraint DF_TicketRevenue_ClearingInitialAllocation default (0)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketRevenue drop constraint DF_TicketRevenue_ClearingInitialAllocation
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.139</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Changed BatchSequence from smallint to int </REASON><TABLENAMES>tbSale</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_Sale_BatchSequence on tbSale 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale
alter column BatchSequence int null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Unique Index UQ_Sale_BatchSequence on tbSale (BatchSequence) where BatchSequence is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>MdRedwanurRahman</ADDEDBY><SQLVERSION>3.138</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New field added tbSaleCapacity.Serial
New field added tbSaleCapacity.TreeLevel</REASON><TABLENAMES>tbSaleCapacity</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleCapacity
add Serial Integer NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleCapacity
add TreeLevel Smallint NOT NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>there</ADDEDBY><SQLVERSION>3.137</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tbSaleItemPaymentTransaction</REASON><TABLENAMES>tbSaleItemPaymentTransaction</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleItemPaymentTransaction]
(
 [SaleItemId] Uniqueidentifier NOT NULL,
 [SourceSaleItemId] Uniqueidentifier NOT NULL,
 [TransactionId] Uniqueidentifier NOT NULL,
 [Quantity] Integer NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleItemPaymentTransaction add constraint PK_SaleItemPaymentTransaction Primary Key ([SaleItemId],[SourceSaleItemId],[TransactionId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleItemPaymentTransaction add constraint FK_SaleItemPaymentTransaction_SaleItem foreign key(SaleItemId) references [tbSaleItem] (SaleItemId)  on update no action on delete no action

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleItemPaymentTransaction add constraint FK_SaleItemPaymentTransaction_SourceSaleItem foreign key(SourceSaleItemId) references [tbSaleItem] (SaleItemId)  on update no action on delete no action

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleItemPaymentTransaction add constraint FK_SaleItemPaymentTransaction_Transaction foreign key(TransactionId) references [tbTransaction] (TransactionId)  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemPaymentTransaction_SourceSaleItemId] ON [tbSaleItemPaymentTransaction] ([SourceSaleItemId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemPaymentTransaction_TransactionId] ON [tbSaleItemPaymentTransaction] ([TransactionId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.136</SQLVERSION><RMTRACKLINK>SIT-6857</RMTRACKLINK><REASON>New field tbAccountDetail.BiometricOverride</REASON><TABLENAMES>tbAccountDetail</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
add BiometricOverride Tinyint NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>MdRedwanurRahman</ADDEDBY><SQLVERSION>3.135</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added table tbCardType
Added table tbCardTypeRange
Added table tbProduct2CardType</REASON><TABLENAMES>tbCardType
tbCardTypeRange
tbProduct2CardType</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbCardType]
(
 [CardTypeId] Uniqueidentifier NOT NULL,
 [CardTypeCode] Varchar(10) NOT NULL,
 [CardTypeName] Nvarchar(50) NOT NULL,
 [CardTypeStatus] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbCardType add constraint PK_CardType Primary Key (CardTypeId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbCardTypeRange]
(
 [CardTypeRangeId] Uniqueidentifier NOT NULL,
 [CardTypeId] Uniqueidentifier NOT NULL,
 [RangeFrom] Varchar(50) NOT NULL,
 [RangeTo] Varchar(50) NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbCardTypeRange add constraint PK_CardTypeRange Primary Key (CardTypeRangeId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbCardTypeRange add constraint FK_CardTypeRange_CardType foreign key(CardTypeId) references [tbCardType] (CardTypeId)  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbProduct2CardType]
(
 [ProductId] Uniqueidentifier NOT NULL,
 [CardTypeId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbProduct2CardType add constraint PK_Product2CardType Primary Key ([ProductId],[CardTypeId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbProduct2CardType add constraint FK_Product2CardType_Product foreign key(ProductId) references [tbProduct] (ProductId)  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbProduct2CardType add constraint FK_Product2CardType_CardType foreign key(CardTypeId) references [tbCardType] (CardTypeId)  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_CardTypeRange_CardTypeId] ON [tbCardTypeRange] ([CardTypeId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product2CardType_CardTypeId] ON [tbProduct2CardType] ([CardTypeId] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>MdRedwanurRahman</ADDEDBY><SQLVERSION>3.134</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop tbSaleCapacity.ValidDateFrom
drop tbSaleCapacity.ValidDateTo
add tbSaleCapacity.ValidDateFrom as Date null and  tbSaleCapacity.ValidDateTo as Date null
drop tbSaleCapacitySlot.ValidDateFrom
drop tbSaleCapacitySlot.ValidDateTo
add tbSaleCapacitySlot.ValidDateFrom as Date not null and  tbSaleCapacitySlot.ValidDateTo as Date not null
drop tbSaleCapacityLog.FiscalDate
add tbSaleCapacityLog.FiscalDate as Date not null</REASON><TABLENAMES>tbSaleCapacity
tbSaleCapacitySlot
tbSaleCapacityLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleCapacity drop column ValidDateFrom
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleCapacity drop column ValidDateTo
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleCapacity add ValidDateFrom Date null, ValidDateTo Date null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleCapacitySlot drop column ValidDateFrom
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleCapacitySlot drop column ValidDateTo
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleCapacitySlot add ValidDateFrom Date not null, ValidDateTo Date not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleCapacityLog drop column FiscalDate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleCapacityLog add FiscalDate Date not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.133</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Field type fixed on tbConsExtProductType.FiscalDate
Field type fixed on tbExtProductTypeLog.FiscalDate

tbConsExtProductType.TimeSlot nullable </REASON><TABLENAMES>tbConsExtProductType
tbExtProductTypeLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbConsExtProductType
drop column FiscalDate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbConsExtProductType
add FiscalDate date not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtProductTypeLog
drop column FiscalDate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtProductTypeLog
add FiscalDate date not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbConsExtProductType
ALTER COLUMN TimeSlot smalldatetime;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>MdRedwanurRahman</ADDEDBY><SQLVERSION>3.132</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added table tbSaleCapacity
Added table tbSaleCapacitySlot
Added table tbSaleCapacityHold
Added table tbSaleCapacityLog </REASON><TABLENAMES>tbSaleCapacity
tbSaleCapacitySlot
tbSaleCapacityHold
tbSaleCapacityLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleCapacity]
(
	[SaleCapacityId] Uniqueidentifier NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
	[SaleCapacityStatus] Smallint NOT NULL,
	[PriorityOrder] Smallint NOT NULL,
	[ValidDateFrom] Binary(3) NULL,
	[ValidDateTo] Binary(3) NULL,
	[Quantity] Integer NOT NULL,
	[TimeSlotType] Smallint NOT NULL,
	[TimeSlotStep] Smallint NOT NULL,
	[SaleChannelId] Uniqueidentifier NULL,
	[ParentSaleCapacityId] Uniqueidentifier NULL,
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleCapacity add constraint PK_SaleCapacity Primary Key (SaleCapacityId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleCapacity add constraint FK_SaleCapacity_Product foreign key(ProductId) references [tbProduct] (ProductId)  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleCapacity add constraint FK_SaleCapacity_SaleChannel foreign key(SaleChannelId) references [tbSaleChannel] (SaleChannelId)  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleCapacity add constraint FK_SaleCapacity_ParentSaleCapacity foreign key(ParentSaleCapacityId) references [tbSaleCapacity] (SaleCapacityId)  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSaleCapacitySlot]
(
	[SaleCapacitySlotId] Uniqueidentifier NOT NULL,
	[SaleCapacityId] Uniqueidentifier NOT NULL,
	[ValidDateFrom] Binary(3) NOT NULL,
	[ValidDateTo] Binary(3) NOT NULL,
	[QuantityMax] Integer NOT NULL,
	[QuantityFree] Integer NOT NULL,
	[QuantityHeld] Integer NOT NULL,
	[QuantityReserved] Integer NOT NULL,
	[QuantityPaid] Integer NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleCapacitySlot add constraint PK_SaleCapacitySlot Primary Key (SaleCapacitySlotId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleCapacitySlot add constraint FK_SaleCapacitySlot_SaleCapacity foreign key(SaleCapacityId) references [tbSaleCapacity] (SaleCapacityId)  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSaleCapacityHold]
(
	[SaleCapacityHoldId] Uniqueidentifier NOT NULL,
	[SaleCapacitySlotId] Uniqueidentifier NOT NULL,
	[WorkstationId] Uniqueidentifier NOT NULL,
	[UserAccountId] Uniqueidentifier NULL,
	[Quantity] Integer NOT NULL,
	[HoldDateTime] Smalldatetime NOT NULL,
	[HoldStatus] Smallint NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleCapacityHold add constraint PK_SaleCapacityHold Primary Key (SaleCapacityHoldId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleCapacityHold add constraint FK_SaleCapacityHold_SaleCapacitySlot foreign key(SaleCapacitySlotId) references [tbSaleCapacitySlot] (SaleCapacitySlotId)  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleCapacityHold add constraint FK_SaleCapacityHold_Workstation foreign key(WorkstationId) references [tbWorkstation] (WorkstationId)  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleCapacityHold add constraint FK_SaleCapacityHold_Account foreign key(UserAccountId) references [tbAccount] (AccountId)  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSaleCapacityLog]
(
	[SaleCapacityLogId] Uniqueidentifier NOT NULL,
	[SaleCapacitySlotId] Uniqueidentifier NOT NULL,
	[QuantityDelta] Smallint NOT NULL,
	[DateTime] Smalldatetime NOT NULL,
	[FiscalDate] Binary(3) NOT NULL,
	[TransactionId] Uniqueidentifier NULL,
	[SaleCapacityHoldId] Uniqueidentifier NULL,
	[EntityType] Smallint NULL,
	[EntityId] Uniqueidentifier NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleCapacityLog add constraint PK_SaleCapacityLog Primary Key (SaleCapacityLogId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleCapacityLog add constraint FK_SaleCapacityLog_SaleCapacitySlot foreign key(SaleCapacitySlotId) references [tbSaleCapacitySlot] (SaleCapacitySlotId)  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleCapacityLog add constraint FK_SaleCapacityLog_Transaction foreign key(TransactionId) references [tbTransaction] (TransactionId)  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleCapacityLog add constraint FK_SaleCapacityLog_SaleCapacityHold foreign key(SaleCapacityHoldId) references [tbSaleCapacityHold] (SaleCapacityHoldId)  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleCapacity_ProductId] ON [tbSaleCapacity] ([ProductId]) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleCapacity_SaleChannelId] ON [tbSaleCapacity] ([SaleChannelId] ) 
where SaleChannelId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleCapacity_ParentSaleCapacityId] ON [tbSaleCapacity] ([ParentSaleCapacityId] ) 
where ParentSaleCapacityId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleCapacitySlot_SaleCapacityId] ON [tbSaleCapacitySlot] ([SaleCapacityId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleCapacityHold_WorkstationId] ON [tbSaleCapacityHold] ([WorkstationId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleCapacityHold_SaleCapacitySlotId] ON [tbSaleCapacityHold] ([SaleCapacitySlotId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleCapacityHold_UserAccountId] ON [tbSaleCapacityHold] ([UserAccountId] ) 
where UserAccountId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleCapacityLog_SaleCapacitySlotId] ON [tbSaleCapacityLog] ([SaleCapacitySlotId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleCapacityLog_TransactionId] ON [tbSaleCapacityLog] ([TransactionId] ) where TransactionId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleCapacityLog_SaleCapacityHoldId] ON [tbSaleCapacityLog] ([SaleCapacityHoldId] ) 
where SaleCapacityHoldId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>MdRedwanurRahman</ADDEDBY><SQLVERSION>3.131</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added table tbConsExtProductType
Added table tbExtProductTypeLog

</REASON><TABLENAMES>tbConsExtProductType
tbExtProductTypeLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbConsExtProductType]
(
	[ConsExtProductTypeId] Uniqueidentifier NOT NULL,
	[ExtProductTypeId] Uniqueidentifier NOT NULL,
	[ConsExtProductTypeType] Smallint NOT NULL,
	[FiscalDate] Binary(3) NOT NULL,
	[TimeSlot] Smalldatetime NOT NULL,
	[Amount] Money NOT NULL,
	[Quantity] Integer NOT NULL,
	[Invalidated] Bit NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbConsExtProductType add constraint PK_ConsExtProductType Primary Key (ConsExtProductTypeId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbConsExtProductType add constraint FK_ConsExtProductType_ExtProductType foreign key(ExtProductTypeId) references [tbExtProductType] (ExtProductTypeId)  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbExtProductTypeLog]
(
	[ExtProductTypeLogId] Uniqueidentifier NOT NULL,
	[ExtProductTypeId] Uniqueidentifier NOT NULL,
	[ExtProductTypeLogType] Smallint NOT NULL,
	[DateTime] Smalldatetime NOT NULL,
	[FiscalDate] Binary(3) NOT NULL,
	[Quantity] Smallint NOT NULL,
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbExtProductTypeLog add constraint PK_ExtProductTypeLog Primary Key (ExtProductTypeLogId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbExtProductTypeLog add constraint FK_ExtProductTypeLog_ExtProductType foreign key(ExtProductTypeId) references [tbExtProductType] (ExtProductTypeId)  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsExtProductType_ExtProductTypeId] ON [tbConsExtProductType] ([ExtProductTypeId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ExtProductTypeLog_ExtProductTypeId] ON [tbExtProductTypeLog] ([ExtProductTypeId] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>there</ADDEDBY><SQLVERSION>3.130</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add field tbCodeAliasType.ReplaceExisting</REASON><TABLENAMES>tbCodeAliasType</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCodeAliasType 
add ReplaceExisting bit not null constraint DF_CodeAliasType_ReplaceExisting  default(0)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCodeAliasType
drop constraint DF_CodeAliasType_ReplaceExisting
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.129</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added field "MemberGridId"</REASON><TABLENAMES>tbAccountAssociation</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountAssociation
add MemberGridId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_AccountAssociation_MemberGridId ON tbAccountAssociation(MemberGridId) where MemberGridId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbAccountAssociation add constraint FK_AccountAssociation_Grid foreign key(MemberGridId) references tbGrid(GridId)  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.128</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbGrid</REASON><TABLENAMES>tbGrid</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table tbGrid
(
  GridId uniqueidentifier NOT NULL,
  GridCode varchar(10) NOT NULL,     
  GridName varchar(50) NOT NULL,  
  EntityType Smallint NOT NULL,  
  GridData varchar(max) NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbGrid add constraint PK_Grid Primary Key (GridId)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create unique index UQ_Grid_Code ON tbGrid (GridCode) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.127</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbextmediabatch.ExtMediaBatchAnomaly nullable
rename tbExtMediaBatchDetail.ValidFromDate 
rename tbExtMediaBatchDetail.ValidToDate 
add column ValidDateTo e ValidDateFrom in tbExtMediaCode
</REASON><TABLENAMES>tbExtMediaBatch
tbExtMediaBatchDetail
tbExtMediaCode</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbExtMediaBatch
alter column [ExtMediaBatchAnomaly] Smallint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtMediaBatch
drop column ValidFromDate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtMediaBatch
drop column ValidToDate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_RENAME 'tbExtMediaBatchDetail.ValidFromDate' , 'ValidDateFrom'

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_RENAME 'tbExtMediaBatchDetail.ValidToDate' , 'ValidDateTo'

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtMediaCode
add [ValidDateFrom] Date NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtMediaCode
add [ValidDateTo] Date NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtMediaCode
add [ExtProductTypeId] Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtMediaCode] add  constraint FK_ExtMediaCode_tbExtProductType foreign key([ExtProductTypeId]) references [tbExtProductType] ([ExtProductTypeId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ExtMediaCode_ExtProductType] ON [tbExtMediaCode] ([ExtProductTypeId] ) 
where ExtProductTypeId is not null                 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.126</SQLVERSION><RMTRACKLINK>SIT-6866</RMTRACKLINK><REASON>New tbTicketUsageUser.SupAccountId</REASON><TABLENAMES>tbTicketUsageUser</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsageUser
add SupAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsageUser_SupAccountId] ON [tbTicketUsageUser] ([SupAccountId] ) where SupAccountId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketUsageUser] add constraint FK_TicketUsageUser_SupAccount foreign key([SupAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.125</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>change ExtMediaBatchDetailId type</REASON><TABLENAMES>tbExtMediaBatchDetail</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table [tbExtMediaBatchDetail]
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbExtMediaBatchDetail]
(
	[ExtMediaBatchDetailId] Uniqueidentifier NOT NULL,
	[ExtMediaBatchId] Uniqueidentifier NOT NULL,
	[ExtProductCode] Varchar(50) NOT NULL,
	[ExtProductName] Nvarchar(50) NULL,
	[ExtProductPrice] Money NULL,
	[ExtMediaCode] Varchar(50) NOT NULL,
	[ValidFromDate] Date NULL,
	[ValidToDate] Date NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtMediaBatchDetail] add constraint PK_ExtMediaBatchDetail Primary Key ([ExtMediaBatchDetailId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtMediaBatchDetail] add  constraint FK_ExtMediaBatchDetail_ExtMediaBatch foreign key([ExtMediaBatchId]) references [tbExtMediaBatch] ([ExtMediaBatchId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ExtMediaBatchDetail_ExtMediaBatchId] ON [tbExtMediaBatchDetail] ([ExtMediaBatchId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ExtMediaBatchDetail_ExtProductCode] ON [tbExtMediaBatchDetail] ([ExtProductCode] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.124</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>inser column ExtMediaBatchWarnType into tbExtMediaBatch
insert column ExtBatchId into tbExtMediaCode
remove Pk from tbExtProductType
insert new PK column ExtProductTypeId into tbExtProductType
create table tbExtMediaBatchDetail</REASON><TABLENAMES>tbExtMediaBatch
tbExtMediaCode
tbExtProductType
tbExtMediaGroup
tbExtMediaBatchDetail</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbExtMediaBatch
alter column ExtMediaBatchAnomaly Smallint NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtProductType
add ExtProductTypeId Uniqueidentifier not NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtProductType
drop constraint PK_ExtProductType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbExtProductType] drop constraint FK_ExtMediaCode_ExtMediaGroup  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtProductType] add constraint PK_ExtProductType Primary Key ([ExtProductTypeId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_ExtProductType_ExtProductCode ON [tbExtProductType] ([ExtProductCode] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ExtProductType_AccountId_ExtProductCode] ON [tbExtProductType] ([AccountId] ,[ExtProductCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtMediaCode
alter column [ExtMediaGroupId] Uniqueidentifier NULL

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_ExtMediaCode_ExtMediaGroupId on [tbExtMediaGroup]

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_ExtMediaCode_ExtMediaGroupId ON [tbExtMediaCode] ([ExtMediaGroupId] ) 
where ExtMediaGroupId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtMediaCode
add ExtMediaBatchId Uniqueidentifier NULL

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtMediaCode] add constraint FK_ExtMediaCode_ExtMediaBatch foreign key([ExtMediaBatchId]) references [tbExtMediaBatch] ([ExtMediaBatchId])  on update no action on delete no action

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_ExtMediaCode_ExtMediaBatch ON [tbExtMediaCode] ([ExtMediaBatchId] ) 
where ExtMediaBatchId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtMediaCode] add constraint FK_ExtMediaCode_ExtMediaGroup foreign key([ExtMediaGroupId]) references [tbExtMediaGroup] ([ExtMediaGroupId])  on update no action on delete no action

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbExtMediaBatchDetail]
(
	[ExtMediaBatchDetailId] Smallint NOT NULL,
	[ExtMediaBatchId] Uniqueidentifier NOT NULL,
	[ExtProductCode] Varchar(50) NOT NULL,
	[ExtProductName] Nvarchar(50) NULL,
	[ExtProductPrice] Money NULL,
	[ExtMediaCode] Varchar(50) NOT NULL,
	[ValidFromDate] Date NULL,
	[ValidToDate] Date NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtMediaBatchDetail] add constraint PK_ExtMediaBatchDetail Primary Key ([ExtMediaBatchDetailId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtMediaBatchDetail] add  constraint FK_ExtMediaBatchDetail_ExtMediaBatch foreign key([ExtMediaBatchId]) references [tbExtMediaBatch] ([ExtMediaBatchId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ExtMediaBatchDetail_ExtMediaBatchId] ON [tbExtMediaBatchDetail] ([ExtMediaBatchId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ExtMediaBatchDetail_ExtProductCode] ON [tbExtMediaBatchDetail] ([ExtProductCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_ExtMediaBatch_ExtMediaGroupCode on tbExtMediaGroup

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ExtMediaGroup_ExtMediaGroupCode] ON [tbExtMediaGroup] ([ExtMediaGroupCode] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.123</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>rename tbExtMediaBatch.ExtMediaBatchExt2 and  tbExtMediaBatch.ExtMediaBatchExt1
create index on those fields</REASON><TABLENAMES>tbExtMediaBatch</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbExtMediaBatch.ExtMediaBatchExt1', 'ExtMediaBatchCodeExt1'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbExtMediaBatch.ExtMediaBatchExt2', 'ExtMediaBatchCodeExt2'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ExtMediaBatch_ExtMediaBatchCodeExt1] ON [tbExtMediaBatch] ([ExtMediaBatchCodeExt1] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ExtMediaBatch_ExtMediaBatchCodeExt2] ON [tbExtMediaBatch] ([ExtMediaBatchCodeExt2] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.122</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>delete a create UQ_ExtMediaBatch_AccountId_BatchCode
rename field ExtMediaBatchCodeExt to ExtMediaBatchCodeExt1
add column ExtMediaBatchCodeExt2</REASON><TABLENAMES>tbExtMediaBatch</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_ExtMediaBatch_AccountId_BatchCode on tbExtMediaBatch
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ExtMediaBatch_AccountId_BatchCode] ON [tbExtMediaBatch] ([AccountId] ,[ExtMediaBatchCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbExtMediaBatch.ExtMediaBatchCodeExt', 'ExtMediaBatchExt1'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtMediaBatch
  add ExtMediaBatchExt2 varchar(50) null  

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.121</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>create tbActivityLog</REASON><TABLENAMES>tbActivityLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbActivityLog]
(
	[ActivityLogId] Uniqueidentifier NOT NULL,
	[WorkstationId] Uniqueidentifier NOT NULL,
	[UserAccountId] Uniqueidentifier NULL,
	[ActivityLogType] Smallint NOT NULL,
	[LogLevel] Smallint NOT NULL,
	[ActivityLogDateTime] Datetime NOT NULL,
	[EntityType] Smallint NOT NULL,
	[EntityId] Uniqueidentifier NULL,
	[LogData] Nvarchar(max) NULL,
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbActivityLog] add constraint PK_ActivityLog Primary Key ([ActivityLogId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbActivityLog] add  constraint FK_ActivityLog_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbActivityLog] add  constraint FK_ActivityLog_UserAccount foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>create Index [IX_ActivityLog_ActivityLogDateTime] ON [tbActivityLog] ([ActivityLogDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ActivityLog_EntityId] ON [tbActivityLog] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ActivityLog_WorksatationId] ON [tbActivityLog] ([WorkstationId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ActivityLog_UserAccountId] ON [tbActivityLog] ([UserAccountId] ) 
where UserAccountId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.120</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add PortfolioSlotLogId to tbPortfolioSlotLog</REASON><TABLENAMES>tbPortfolioSlotLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotLog
drop constraint PK_PortfolioSlotLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotLog 
add PortfolioSlotLogId uniqueidentifier not null constraint DF_PortfolioSlotLog_PortfolioSlotLogId  default(newid())
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotLog
drop constraint DF_PortfolioSlotLog_PortfolioSlotLogId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotLog add constraint PK_PortfolioSlotLog primary Key (PortfolioSlotLogId)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>create index [IX_PortfolioSlotLog_PortfolioId] ON [tbPortfolioSlotLog] ([PortfolioId] ,[MembershipPointId] ,[PortfolioSlotType] ,[LogFiscalDate] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.119</SQLVERSION><RMTRACKLINK>SIT-7340</RMTRACKLINK><REASON>Drop tbPluginPaymentCardType table</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbPluginPaymentCardType
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.118</SQLVERSION><RMTRACKLINK>SIT-7335</RMTRACKLINK><REASON>Drop tbPaymentToken.AuthorizationCode</REASON><TABLENAMES>tbPaymentToken</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP INDEX tbPaymentToken.IX_PaymentToken_AuthorizationCode
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentToken
drop column AuthorizationCode
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.117</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Invalidate cache for categories linked to Organizations and People because of context account developments</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbEntityChange
where EntityId in  (
  select CategoryId
  from tbCategory
  where EntityType in (1,15) /*1:Organization 15:Person*/
)

insert into tbEntityChange (
  EntityType, 
  EntityId, 
  InsertUpdate
)
(
  select distinct
    28 /*Category*/,
    CategoryId,
    1 /*true*/
  from tbCategory
  where EntityType in (1,15) /*1 Organization 15 Person*/

)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.116</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tbExtMediaBatch
Create tbExtMediaGroup
Create tbExtProductType

Move rows from tbTag to tbExtMediaGroup where entitytype = 1018

Rename column tbExtMediaCode.ExtMediaGroupTagId in ExtMediaGroupId

Rename column tbProduct.ExtMediaGroupTagId in ExtMediaGroupId

delete from tbTag where entitytype = 1018</REASON><TABLENAMES>tbExtMediaBatch
tbExtMediaGroup
tbExtProductType
tbExtMediaCode
tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbExtMediaBatch]
(
	[ExtMediaBatchId] Uniqueidentifier NOT NULL,
	[ExtMediaBatchCode] Varchar(50) NOT NULL,
	[ExtMediaBatchCodeExt] Varchar(50) NULL,
	[ExtMediaBatchStatus] Smallint NOT NULL,
	[ExtMediaBatchAnomaly] Char(1) NOT NULL,
	[AccountId] Uniqueidentifier NOT NULL,
	[Quantity] Integer NOT NULL,
	[ValidFromDate] Date NULL,
	[ValidToDate] Date NULL,
	[ImportFileName] Varchar(250) NULL,
	[ImportFile] Varbinary(Max) NULL,
	[ServerId] Smallint NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtMediaBatch] add constraint PK_ExtMediaBatch Primary Key ([ExtMediaBatchId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtMediaBatch] add constraint FK_ExtMediaBatch_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtMediaBatch] add constraint FK_ExtMediaBatch_Server foreign key([ServerId]) references [tbServer] ([ServerId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ExtMediaBatch_AccountId_BatchCode] ON [tbExtMediaBatch] ([AccountId] ,[ExtMediaBatchId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ExtMediaBatch_ServerId] ON [tbExtMediaBatch] ([ServerId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbExtMediaGroup]
(
	[ExtMediaGroupId] Uniqueidentifier NOT NULL,
	[ExtMediaGroupCode] Varchar(50) NOT NULL,
	[ExtMediaGroupName] NVarchar(100) NULL,
	[NotifyQuantityLow] Integer NULL,
	[NotifyQuantityCritical] Integer NULL,
	[NotifyExpirationDays] Smallint NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtMediaGroup] add constraint PK_ExtMediaGroup Primary Key ([ExtMediaGroupId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ExtMediaBatch_ExtMediaGroupCode] ON [tbExtMediaGroup] ([ExtMediaGroupCode] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbExtProductType]
(
	[AccountId] Uniqueidentifier NOT NULL,
	[ExtProductCode] Varchar(50) NOT NULL,
	[ExtProductName] Nvarchar(50) NULL,
	[ExtProductPrice] Money NULL,
	[ExtMediaGroupId] Uniqueidentifier NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtProductType] add constraint PK_ExtProductType Primary Key ([AccountId], [ExtProductCode])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtProductType] add constraint FK_ExtProductType_ExtMediaGroup foreign key([ExtMediaGroupId]) references [tbExtMediaGroup] ([ExtMediaGroupId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ExtProductType_ExtMediaGroupId] ON [tbExtProductType] ([ExtMediaGroupId] ) 
where ExtMediaGroupId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbExtMediaGroup (ExtMediaGroupId, ExtMediaGroupCode, ExtMediaGroupName) select TagId, TagCode, TagName  from tbTag where EntityType = 1018
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtMediaCode] drop constraint FK_ExtMediaCode_ExtMediaGroupTag
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_ExtMediaCode_ExtMediaGroupTagId on [tbExtMediaCode]
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbExtMediaCode.ExtMediaGroupTagId', 'ExtMediaGroupId'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtProductType] add constraint FK_ExtMediaCode_ExtMediaGroup foreign key([ExtMediaGroupId]) references [tbExtMediaGroup] ([ExtMediaGroupId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ExtMediaCode_ExtMediaGroupId] ON [tbExtMediaGroup] ([ExtMediaGroupId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] drop constraint FK_Product_ExtMediaGroupTag
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Product_ExtMediaGroupTagId on[tbProduct] 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbProduct.ExtMediaGroupTagId', 'ExtMediaGroupId'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_ExtMediaGroup foreign key([ExtMediaGroupId]) references [tbExtMediaGroup] ([ExtMediaGroupId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_ExtMediaGroupId] ON [tbProduct] ([ExtMediaGroupId] ) 
where ExtMediaGroupId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbTag where EntityType = 1018
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.115</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tbTransaction2TicketUsage
Drop column tbTicketUsageUser.RefTicketUsage</REASON><TABLENAMES>tbTransaction2TicketUsage
tbTicketUsageUser</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTransaction2TicketUsage]
(
	[TransactionId] Uniqueidentifier NOT NULL,
	[TicketUsageId] Uniqueidentifier NOT NULL,
	[RefTicketUsageId] Uniqueidentifier NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransaction2TicketUsage] add constraint PK_Transaction2TicketUsage Primary Key ([TransactionId], [TicketUsageId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransaction2TicketUsage] add constraint FK_Transaction2TicketUsage_Transaction  foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransaction2TicketUsage] add constraint FK_Transaction2TicketUsage_TicketUsage foreign key([TicketUsageId]) references [tbTicketUsage] ([TicketUsageId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransaction2TicketUsage] add constraint FK_Transaction2TicketUsage_RefTicketUsage foreign key([RefTicketUsageId]) references [tbTicketUsage] ([TicketUsageId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_tbTransaction2TicketUsage_RefTicketUsageId] ON [tbTransaction2TicketUsage] ([RefTicketUsageId] ) 
where RefTicketUsageId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into 
	tbTransaction2TicketUsage(TransactionId, TicketUsageId, RefTicketUsageId)
select 
	TCK.TransactionId,
	TUU.TicketUsageId,
	TUU.RefTicketUsageId
from 
	tbTicketUsageUser TUU inner join
	tbTicketUsage TU on TU.TicketUsageId=TUU.TicketUsageId inner join
	tbTicket TCK on TCK.TicketId=TU.TicketId
where 
	TUU.RefTicketUsageId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX IX_TicketUsageUser_RefTicketUsageId ON tbTicketUsageUser
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsageUser drop constraint FK_TicketUsageUser_RefTicketUsage
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketUsageUser DROP COLUMN RefTicketUsageId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.114</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0 ..1: Add InheritAccountContext to tbCategory.
2..4: activate account contexts for all categories

</REASON><TABLENAMES>tbCategory</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCategory
add
  [InheritAccountContext] Bit NOT NULL constraint DF_Category_InheritAccountContext default (0)  


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCategory drop constraint DF_Category_InheritAccountContext
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbAccountContext
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE CATEGORY_IDS CURSOR FOR
select 
  CategoryId 
from 
  tbCategory  
where 
  EntityType IN (1,15) 

DECLARE @CATEGORY_ID varchar(max)
OPEN CATEGORY_IDS
FETCH NEXT FROM CATEGORY_IDS INTO @CATEGORY_ID

WHILE @@FETCH_STATUS = 0
BEGIN
  DECLARE @ACCOUNT_CONTEXT int = 10
  WHILE @ACCOUNT_CONTEXT &lt; 41
    BEGIN
      insert into 
        tbAccountContext
        (
          CategoryId,
      	  AccountContext
        )
      values
        (
          @CATEGORY_ID,
      	  @ACCOUNT_CONTEXT
        )
      SET @ACCOUNT_CONTEXT = @ACCOUNT_CONTEXT + 10 
    END
	
  FETCH NEXT FROM CATEGORY_IDS INTO @CATEGORY_ID
END

CLOSE CATEGORY_IDS
DEALLOCATE CATEGORY_IDS
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbCategory
set inheritAccountContext = 1
where ParentCategoryId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.113</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tbTicketUsageEntitlementDiff</REASON><TABLENAMES>tbTicketUsageEntitlementDiff</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTicketUsageEntitlementDiff]
(
	[TicketUsageId] Uniqueidentifier NOT NULL,
	[UsageFiscalDate] Date NOT NULL,
	[UsageDateTime] Datetime NOT NULL,
	[EntitlementDiff] Varchar(max) NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketUsageEntitlementDiff] add constraint PK_TicketUsageEntitlementDiff Primary Key ([TicketUsageId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketUsageEntitlementDiff] add constraint FK_TicketUsageEntitlementDiff_TicketUsage foreign key([TicketUsageId]) references [tbTicketUsage] ([TicketUsageId])  on update no action on delete no action

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsageEntitlementDiff_FiscalDate] ON [tbTicketUsageEntitlementDiff] ([UsageFiscalDate] ,[UsageDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.112</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add default account context values to organization and person root categories

1) delete existing account context (the table should be empty since the development is still a work in progress)

2) set the default values for organizations and persons root categories</REASON><TABLENAMES>tbAccountContext</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbAccountContext
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE CATEGORY_IDS CURSOR FOR
select 
  CategoryId 
from 
  tbCategory  
where 
  EntityType IN (1,15) and 
  ParentCategoryId is null

DECLARE @CATEGORY_ID varchar(max)
OPEN CATEGORY_IDS
FETCH NEXT FROM CATEGORY_IDS INTO @CATEGORY_ID

WHILE @@FETCH_STATUS = 0
BEGIN
  DECLARE @ACCOUNT_CONTEXT int = 10
  WHILE @ACCOUNT_CONTEXT &lt; 41
    BEGIN
      insert into 
        tbAccountContext
        (
          CategoryId,
      	  AccountContext
        )
      values
        (
          @CATEGORY_ID,
      	  @ACCOUNT_CONTEXT
        )
      SET @ACCOUNT_CONTEXT = @ACCOUNT_CONTEXT + 10 
    END
	
  FETCH NEXT FROM CATEGORY_IDS INTO @CATEGORY_ID
END

CLOSE CATEGORY_IDS
DEALLOCATE CATEGORY_IDS

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.111</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbTicket.EntitlementData from NVarChar to VarChar</REASON><TABLENAMES>tbTicket</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @count int;
select @count=Count(*) from tbTicket;

if (@count &lt; 10000000) 
begin
  ALTER TABLE tbTicket ALTER COLUMN EntitlementData VarChar(max) null
end;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.110</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Setted AutoPopulate flag=true for all metasfields except the following: 
LkSNMetaFieldType.Title,
LkSNMetaFieldType.FirstName,
LkSNMetaFieldType.MiddleName,
LkSNMetaFieldType.Gender,
LkSNMetaFieldType.BirthDate,
LkSNMetaFieldType.EmailAddress1,
LkSNMetaFieldType.EmailAddress2,
LkSNMetaFieldType.LoginEmail

Invalidate cache for all metafields</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbMetaFieldFlag (
  MetaFieldId,
  MetaFieldFlag
)
select
  MetaFieldId, 
  5 /*AutoPopulate*/
from tbMetaField
where
  FieldType is null or 
  FieldType not in (   
    5 , /*Title*/      
    1 , /*FirstName*/   
    2 , /*MiddleName*/   
    19 , /*Gender*/   
    5 , /*BirthDate*/   
    21 , /*EmailAddress1*/   
    22 , /*EmailAddress2*/   
    60   /*LoginEmail*/
  )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete 
from tbEntityChange
where EntityId in (
  select MetaFieldId
  from tbMetaField
)

insert into tbEntityChange (
  EntityType, 
  EntityId, 
  InsertUpdate
)
(
  select distinct
    16 /*MetaField*/,
    MetaFieldId,
    1 /*true*/
  from tbMetaField
)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.109</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added table tbMetaFieldFlag
Moved FullTextIndex,UniqueIndex,Encrypted,Engravable fields from tbMetafield to tbMetaFieldFlag</REASON><TABLENAMES>tbMetaField
tbMetaFieldFlag</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbMetaFieldFlag]
(
  [MetaFieldId] Uniqueidentifier NOT NULL,
  [MetaFieldFlag] Smallint NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMetaFieldFlag add constraint PK_MetaFieldFlag Primary Key (MetaFieldId,MetaFieldFlag)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMetaFieldFlag] add constraint FK_MetaFieldFlag_MetaField foreign key([MetaFieldId]) references [tbMetaField] ([MetaFieldId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaFieldFlag (
  MetaFieldId,
  MetaFieldFlag
)
( 
 select
    MetaFieldId, 
    1 /*FullTextIndex*/
 from tbMetaField
 where FullTextIndex=1
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaFieldFlag (
  MetaFieldId,
  MetaFieldFlag
)
( 
 select
    MetaFieldId, 
    2 /*UniqueIndex*/
 from tbMetaField
 where UniqueIndex=1
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaFieldFlag (
  MetaFieldId,
  MetaFieldFlag
)
( 
 select
    MetaFieldId, 
    3 /*Encrypted*/
 from tbMetaField
 where Encrypted=1
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaFieldFlag (
  MetaFieldId,
  MetaFieldFlag
)
( 
 select
    MetaFieldId, 
    4 /*Engravable*/
 from tbMetaField
 where Engravable=1
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMetaField
drop column 
  FullTextIndex,
  UniqueIndex,  
  Encrypted,  
  Engravable
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.108</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Splitted PartialPayments right into DepositOnorder and ModifyPaidReservation</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbRight (
  RightId,
  EntityType,
  EntityId,
  RightType,
  RightValue
) 
(
  select
    NEWID(),
    EntityType,
    EntityId,
    631 /*ModifyPaidReservation*/,
    RightValue
  from tbRight
  where RightType=31 /*DepositOnOrder*/ 
)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.107</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Changed right InstallmentContract(144) from lookup to boolean items.</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRight
set
  RightType=625/*InstallmentContractRead*/, 
  RightValue='true'
where 
  RightType=144 and 
  RightValue=2/*Read*/

  



</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbRight
set
  RightType=626/*InstallmentContractCancel*/, 
  RightValue='true'
where 
  RightType=144 and 
  RightValue=5/*Cancel*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbRight
set
  RightType=627/*InstallmentContractVoid*/, 
  RightValue='true'
where 
  RightType=144 and 
  RightValue=9/*Void*/

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbRight
where 
  RightType=144 and 
  RightValue=1/*Inactive*/
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.106</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>create stored procedure for tbAccountContext</REASON><TABLENAMES>tbAccountContext</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT></SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.105</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tbAccountContext</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbAccountContext]
(
  [CategoryId] Uniqueidentifier NOT NULL,
  [AccountContext] Smallint NOT NULL,
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountContext] add constraint PK_AccountContext Primary Key ([CategoryId],[AccountContext])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountContext] add constraint FK_AccountContext_Category foreign key([CategoryId]) references [tbCategory] ([CategoryId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.104</SQLVERSION><RMTRACKLINK>SIT-7223</RMTRACKLINK><REASON>New tbSaleItemDetail.SetAsMain field</REASON><TABLENAMES>tbSaleItemDetail</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItemDetail
add SetAsMain bit null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>MdRedwanurRahman</ADDEDBY><SQLVERSION>3.103</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0  - drop table tbRedemptionCommissionRule
1  - Create table tbRedemptionCommissionRule with new fields
2  - create primary key RedemptionCommissionRuleId
3  - create foreign key FK_RedemptionCommissionRule_LocationAccount
4  - create foreign key FK_RedemptionCommissionRule_OpAreaAccount
5  - create foreign key FK_RedemptionCommissionRule_Workstation
6  - create foreign key FK_RedemptionCommissionRule_MembershipPoint
7  - create index key IX_RedemptionCommissionRule_LocationId
8  - create index key IX_RedemptionCommissionRule_OpAreaId
9  - create index key IX_RedemptionCommissionRule_AccessPointId
10 - create index key IX_RedemptionCommissionRule_MembershipPointId
11  - create index key IX_RedemptionCommissionRule_PriorityOrder
12  - create table tbRedemptionCommissionRuleLink
13  - create primary keys EntityId, RedemptionCommissionRuleId
14  - create foreign key FK_RedemptionCommissionRuleLink_RedemptionCommissionRule
15  - create index key IX_RedemptionCommissionRuleLink_EntityId</REASON><TABLENAMES>tbRedemptionCommissionRule
tbRedemptionCommissionRuleLink</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbRedemptionCommissionRule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>create table [tbRedemptionCommissionRule]
(
  [RedemptionCommissionRuleId] Uniqueidentifier NOT NULL,
  [LocationId] Uniqueidentifier NULL,
  [OpAreaId] Uniqueidentifier NULL,
  [AccessPointId] Uniqueidentifier NULL, 
  [MembershipPointId] Uniqueidentifier NOT NULL, 
  [ValidDateFrom] date,
  [ValidDateTo] date,
  [CommissionRuleValueType] Smallint NOT NULL,
  [CommissionRuleValue] Money NOT NULL,
  [CommissionRuleFormula] Smallint NOT NULL,
  [CommissionRuleStatus] Smallint NOT NULL,
  [PriorityOrder] Smallint NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbRedemptionCommissionRule add constraint PK_RedemptionCommissionRule Primary Key (RedemptionCommissionRuleId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbRedemptionCommissionRule] add  constraint FK_RedemptionCommissionRule_LocationAccount foreign key([LocationId]) references [tbAccount]([AccountId]) on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbRedemptionCommissionRule] add  constraint FK_RedemptionCommissionRule_OpAreaAccount foreign key([OpAreaId]) references [tbAccount](AccountId) on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbRedemptionCommissionRule] add  constraint FK_RedemptionCommissionRule_Workstation foreign key([AccessPointId]) references [tbWorkstation]([WorkstationId]) on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbRedemptionCommissionRule] add  constraint FK_RedemptionCommissionRule_MembershipPoint foreign key([MembershipPointId]) references [tbMembershipPoint]([MembershipPointId]) on update no action on delete no action

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>create index [IX_RedemptionCommissionRule_LocationId] ON [tbRedemptionCommissionRule] ([LocationId]) where LocationId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>create index [IX_RedemptionCommissionRule_OpAreaId] ON [tbRedemptionCommissionRule] ([OpAreaId]) where OpAreaId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>create index [IX_RedemptionCommissionRule_AccessPointId] ON [tbRedemptionCommissionRule] ([AccessPointId]) where AccessPointId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>create index [IX_RedemptionCommissionRule_MembershipPointId] ON [tbRedemptionCommissionRule] ([MembershipPointId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>create Index [IX_RedemptionCommissionRule_PriorityOrder] ON [tbRedemptionCommissionRule] ([PriorityOrder]) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>create table [tbRedemptionCommissionRuleLink]
(
  [RedemptionCommissionRuleId] Uniqueidentifier NOT NULL,
  [EntityId] Uniqueidentifier NOT NULL,
  [EntityType] Smallint NOT NULL,
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT> alter table tbRedemptionCommissionRuleLink add constraint PK_RedemptionCommissionRuleLink Primary Key (EntityId, RedemptionCommissionRuleId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT> alter table [tbRedemptionCommissionRuleLink] add  constraint FK_RedemptionCommissionRuleLink_RedemptionCommissionRule foreign key([RedemptionCommissionRuleId]) references [tbRedemptionCommissionRule]([RedemptionCommissionRuleId]) on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>create Index [IX_RedemptionCommissionRuleLink_EntityId] ON [tbRedemptionCommissionRuleLink] ([EntityId])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.102</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Alter tbPortfolioSlotBalance.ExchangeRate from money to decimal(38,19)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotBalance
alter column ExchangeRate decimal(38,19)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.101</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added field tbMembershipPoint.ClearingProductId</REASON><TABLENAMES>tbMembershipPoint</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMembershipPoint
add ClearingProductId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_MembershipPoint_ClearingProductId] ON [tbMembershipPoint] ([ClearingProductId] ) 
where ClearingProductId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMembershipPoint] add constraint FK_MembershipPoint_ClearingProduct foreign key([ClearingProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.100</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbWorkstation2AccessPoint</REASON><TABLENAMES>tbWorkstation2AccessPoint</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbWorkstation2AccessPoint]
(
	[WorkstationId] Uniqueidentifier NOT NULL,
	[AptWorkstationId] Uniqueidentifier NOT NULL,
	[PriorityOrder] int NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbWorkstation2AccessPoint add constraint PK_Workstation2AccessPoint Primary Key ([WorkstationId],[AptWorkstationId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Workstation2AccessPoint_AptWorkstationId] ON [tbWorkstation2AccessPoint] ([AptWorkstationId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbWorkstation2AccessPoint] add constraint FK_Workstation2AccessPoint_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbWorkstation2AccessPoint] add constraint FK_Workstation2AccessPoint_AccessPoint foreign key([AptWorkstationId]) references [tbAccessPoint] ([AptWorkstationId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.99</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added field tbSale.BatchSequence</REASON><TABLENAMES>tbSale</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSale
add BatchSequence smallint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Unique Index UQ_Sale_BatchSequence on tbSale (BatchSequence) where BatchSequence is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.98</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Merged  Product type and Event in an unique form category</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbMask
set EntityType=12 /*Product type*/
where EntityType=5 /*Event*/
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>3.97</SQLVERSION><RMTRACKLINK>SIT-7044</RMTRACKLINK><REASON>New tbGateCategory2Event table</REASON><TABLENAMES>tbGateCategory2Event
tbEvent</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbGateCategory2Event]
(
	[GateCategoryId] Uniqueidentifier NOT NULL,
	[EventId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbGateCategory2Event add constraint PK_GateCategory2Event Primary Key ([GateCategoryId],[EventId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_GateCategory2Event_EventId] ON [tbGateCategory2Event] ([EventId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbGateCategory2Event] add constraint FK_GateCategory2Event_GateCategory foreign key([GateCategoryId]) references [tbGateCategory] ([GateCategoryId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbGateCategory2Event] add constraint FK_GateCategory2Event_Event foreign key([EventId]) references [tbEvent] ([EventId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into [tbGateCategory2Event] (GateCategoryId, EventId)
select 
  GateCategoryId,
  EventId
from 
  tbEvent
where
  GateCategoryId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX tbEvent.IX_Event_GateCategoryId;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbEvent
DROP CONSTRAINT FK_Event_GateCategory;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
drop column GateCategoryId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.96</SQLVERSION><RMTRACKLINK>SIT-7082</RMTRACKLINK><REASON>Refactor rights to organize step</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRight
set RightValue = (case 
                    when RightValue='true' then '3'
        when RightValue='false' then '2'    
                  end)
where RightType=540
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.95</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add tbMembershipPoint.ExpirationType</REASON><TABLENAMES>tbMembershipPoint</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMembershipPoint
add ExpirationType Smallint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update
  tbMembershipPoint
set
  ExpirationType = 10
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMembershipPoint
alter column ExpirationType Smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.94</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Changed right BlockContract(316) from boolean to lookup.</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRight
set RightValue=20 /*Manual*/
where
  RightValue='true' and
  RightType=516 /*BlockUnblock contract*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbRight
set RightValue=10 /*No*/
where
  RightValue='false' and 
  RightType=516 /*BlockUnblock contract*/
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.93</SQLVERSION><RMTRACKLINK>SIT-7147</RMTRACKLINK><REASON>New tbInstallmentContract.TestPaymentId field</REASON><TABLENAMES>tbInstallmentContract</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
add TestPaymentId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContract_TestPaymentId] ON [tbInstallmentContract] ([TestPaymentId] ) 
where TestPaymentId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentContract] add constraint FK_InstallmentContract_PaymentCard foreign key([TestPaymentId]) references [tbPaymentCard] ([PaymentId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.92</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>refactoring tbHistoryDetail, moved 1638 to 1451</REASON><TABLENAMES>tbHistoryDetail
tbRedemptionCommissionRule</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update
  tbHistoryDetail
set
  HistoryField = 1451
where
  HistoryField = 1638 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>MdRedwanurRahman</ADDEDBY><SQLVERSION>3.91</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0 - Rename table name tbRedemptionCommission to tbRedemptionCommissionRule

Renamed foreign key : 
1 -  FK_RedemptionCommission_Account to  FK_RedemptionCommissionRule_Account
2 -  FK_RedemptionCommission_Event to  FK_RedemptionCommissionRule_Event
3 -  FK_RedemptionCommission_Product to  FK_RedemptionCommissionRule_Product
4 -  FK_RedemptionCommission_SaleChannel to  FK_RedemptionCommissionRule_SaleChannel 

Renamed index : 
5-  IX_RedemptionCommission_AccountId to  IX_RedemptionCommissionRule_AccountId
6 -  IX_RedemptionCommission_EventId to  IX_RedemptionCommissionRule_EventId
7-   IX_RedemptionCommission_ProductId to  IX_RedemptionCommissionRule_ProductId
8 -  IX_RedemptionCommission_SaleChannelId to  IX_RedemptionCommissionRule_SaleChannelId
9 -  IX_RedemptionCommission_PriorityOrder to  IX_RedemptionCommissionRule_PriorityOrder

Rename fields :
10 - RedemptionCommissionId to RedemptionCommissionRuleId
11 - CommissionValue to CommissionRuleValue
12 - CommissionValueType to CommissionRuleValueType
13 - CommissionFormula to CommissionRuleFormula

Rename Primary key:
14 - CommissionFormula to CommissionRuleFormula</REASON><TABLENAMES>tbRedemptionCommission</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbRedemptionCommission', 'tbRedemptionCommissionRule'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @ConstraintName AS NVARCHAR(255)

SET @ConstraintName = (
  select CONSTRAINT_NAME
  from INFORMATION_SCHEMA.TABLE_CONSTRAINTS
  where
    TABLE_NAME = 'tbRedemptionCommissionRule' and
    CONSTRAINT_NAME like 'FK_RedemptionCommission_Account'
)

EXEC sp_rename @ConstraintName, 'FK_RedemptionCommissionRule_Account'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @ConstraintName AS NVARCHAR(255)

SET @ConstraintName = (
  select CONSTRAINT_NAME
  from INFORMATION_SCHEMA.TABLE_CONSTRAINTS
  where
    TABLE_NAME = 'tbRedemptionCommissionRule' and
    CONSTRAINT_NAME like 'FK_RedemptionCommission_Event'
)

EXEC sp_rename @ConstraintName, 'FK_RedemptionCommissionRule_Event'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @ConstraintName AS NVARCHAR(255)

SET @ConstraintName = (
  select CONSTRAINT_NAME
  from INFORMATION_SCHEMA.TABLE_CONSTRAINTS
  where
    TABLE_NAME = 'tbRedemptionCommissionRule' and
    CONSTRAINT_NAME like 'FK_RedemptionCommission_Product'
)

EXEC sp_rename @ConstraintName, 'FK_RedemptionCommissionRule_Product'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @ConstraintName AS NVARCHAR(255)

SET @ConstraintName = (
  select CONSTRAINT_NAME
  from INFORMATION_SCHEMA.TABLE_CONSTRAINTS
  where
    TABLE_NAME = 'tbRedemptionCommissionRule' and
    CONSTRAINT_NAME like 'FK_RedemptionCommission_SaleChannel'
)

EXEC sp_rename @ConstraintName, 'FK_RedemptionCommissionRule_SaleChannel'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename N'tbRedemptionCommissionRule.IX_RedemptionCommission_LocationId', N'IX_RedemptionCommissionRule_LocationId'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename N'tbRedemptionCommissionRule.IX_RedemptionCommission_EventId', N'IX_RedemptionCommissionRule_EventId'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename N'tbRedemptionCommissionRule.IX_RedemptionCommission_ProductId', N'IX_RedemptionCommissionRule_ProductId'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename N'tbRedemptionCommissionRule.IX_RedemptionCommission_SalechannelId', N'IX_RedemptionCommissionRule_SaleChannelId'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename N'tbRedemptionCommissionRule.IX_RedemptionCommission_PriorityOrder', N'IX_RedemptionCommissionRule_PriorityOrde'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT> EXEC sp_rename N'tbRedemptionCommissionRule.RedemptionCommissionId', N'RedemptionCommissionRuleId'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename N'tbRedemptionCommissionRule.CommissionValue', N'CommissionRuleValue'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename N'tbRedemptionCommissionRule.CommissionValueType', N'CommissionRuleValueType'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename N'tbRedemptionCommissionRule.CommissionFormula', N'CommissionRuleFormula'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename N'tbRedemptionCommissionRule.PK_RedemptionCommission', N'PK_RedemptionCommissionRule'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.90</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactoring of  LkSNHistoryDetail, moving back product related fields 4301..4313  to 250..262 and 4501...4504 to 263..266</REASON><TABLENAMES>tbHistoryDetail</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update
  tbHistoryDetail
set
  HistoryField = HistoryField - 4051
where
  HistoryField between 4301 and 4313


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update
  tbHistoryDetail
set
  HistoryField = HistoryField - 4238
where
  HistoryField between 4501 and 4504

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.89</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactoring of  LkSNHistoryDetail, moving ledger related fields from 4601 on, in order to make room for the product type fields</REASON><TABLENAMES>tbHistoryDetail</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update
  tbHistoryDetail
set
  HistoryField = HistoryField + 4351
where
  HistoryField between 250 and 273
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update
  tbHistoryDetail
set
  HistoryField = HistoryField + 4345
where
  HistoryField between 280 and 293
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update
  tbHistoryDetail
set
  HistoryField = 4639
where
  HistoryField = 298  

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update
  tbHistoryDetail
set
  HistoryField = 4640
where
  HistoryField = 299 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>MdRedwanurRahman</ADDEDBY><SQLVERSION>3.88</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0 - create a new table tbRedemptionCommission
1 - create primary key
2 - create foreign key  for SaleChannel
3 - create foreign key  for Product
4 - create foreign key  for Event
5 - create foreign key  for Account
6 - create index  for Account
7 - create index  for Product
8 - create index  for Event
9 - create index  for SaleChannel
10 - create index  for PriorityOrder</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbRedemptionCommission]
(
  [RedemptionCommissionId] Uniqueidentifier NOT NULL,
  [SaleChannelId] Uniqueidentifier NULL,
  [ProductId] Uniqueidentifier NULL,
  [EventId] Uniqueidentifier NULL,
  [LocationId] Uniqueidentifier NULL,
  [CommissionValueType] Smallint NOT NULL,
  [CommissionValue] Money NOT NULL,
  [CommissionFormula] Smallint NOT NULL,
  [PriorityOrder] Smallint NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT> alter table tbRedemptionCommission add constraint PK_RedemptionCommission Primary Key (RedemptionCommissionId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT> Alter table [tbRedemptionCommission] add  constraint FK_RedemptionCommission_SaleChannel foreign key([SaleChannelId]) references [tbSaleChannel]([SaleChannelId]) on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT> Alter table [tbRedemptionCommission] add  constraint FK_RedemptionCommission_Product foreign key([ProductId]) references [tbProduct]([ProductId]) on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT> Alter table [tbRedemptionCommission] add  constraint FK_RedemptionCommission_Event foreign key([EventId]) references [tbEvent]([EventId]) on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT> Alter table [tbRedemptionCommission] add  constraint FK_RedemptionCommission_Account foreign key([LocationId]) references [tbAccount]([AccountId]) on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_RedemptionCommission_LocationId] ON [tbRedemptionCommission] ([LocationId] ) 
where LocationId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_RedemptionCommission_EventId] ON [tbRedemptionCommission] ([EventId] ) 
where EventId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_RedemptionCommission_ProductId] ON [tbRedemptionCommission] ([ProductId] ) 
where ProductId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_RedemptionCommission_SaleChannelId] ON [tbRedemptionCommission] ([SaleChannelId] ) 
where SaleChannelId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_RedemptionCommission_PriorityOrder] ON [tbRedemptionCommission] ([PriorityOrder] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>3.87</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add fields to tbSaleItemDetailRevalidate</REASON><TABLENAMES>tbSaleItemDetailRevalidate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DELETE FROM tbSaleItemDetailRevalidate

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleItemDetailRevalidate
ADD 
  OldExpirationDate date NOT NULL,
  NewExpirationDate date NOT NULL,
  FeeProductId Uniqueidentifier NULL,
  FeeAmount Money NOT NULL,
  FeeTax Money NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemDetailRevalidate_FeeProductId] ON [tbSaleItemDetailRevalidate] ([FeeProductId] ) 
where FeeProductId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.86</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added FK_DocTemplate_IntercompanyCostCenter
Added index IX_IntercompanyCostCenter_DocTemplateId

</REASON><TABLENAMES>tbIntercompanyCostCenter</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_IntercompanyCostCenter_DocTemplateId] ON tbIntercompanyCostCenter (DocTemplateId) where DocTemplateId is not null    
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbIntercompanyCostCenter] add constraint FK_IntercompanyCostCenter_DocTemplate foreign key(DocTemplateId) references tbDocTemplate(DocTemplateId) on update no action on delete no action

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.85</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add Upgradable/Downgradable flags to tbSaleChannel</REASON><TABLENAMES>tbSaleChannel</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleChannel
add Upgradable bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSaleChannel
set Upgradable=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleChannel
alter column Upgradable bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleChannel
add Downgradable bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSaleChannel
set Downgradable=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleChannel
alter column Downgradable bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.84</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added table tbMask2Entity
Removed table tbPluginPayment2Mask
Added field tbIntercompanyCostCenter.DocTemplateId </REASON><TABLENAMES>tbMask2Entity
tbIntercompanyCostCenter</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table tbMask2Entity
(
   MaskId Uniqueidentifier NOT NULL,
   EntityId Uniqueidentifier NOT NULL,
   EntityType Smallint NOT NULL,
   PriorityOrder Smallint NOT NULL
) 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMask2Entity
add constraint PK_Mask2Entity Primary Key (MaskId,EntityId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Mask2Entity_EntityId] ON [tbMask2Entity] ([EntityId] ,[PriorityOrder] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbMask2Entity add constraint FK_Mask2Entity_Mask foreign key(MaskId) references tbMask (MaskId)  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMask2Entity(
  MaskId, 
  EntityId, 
  EntityType, 
  PriorityOrder
)
(
  select
    MaskId, 
    PluginId,
    27 /*Plugin*/,
    PriorityOrder
  from 
    tbPluginPayment2Mask  
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbPluginPayment2Mask
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbIntercompanyCostCenter
add DocTemplateId uniqueidentifier null 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.83</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added tbCurrency.ReverseExchangeRate</REASON><TABLENAMES>tbCurrency</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCurrency
add ReverseExchangeRate decimal(38,19) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>there</ADDEDBY><SQLVERSION>3.82</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop tbTransactionTicketRevalidate
Created table
tbSaleItemDetailRevalidate</REASON><TABLENAMES>tbSaleItemDetailRevalidate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbTransactionTicketRevalidate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSaleItemDetailRevalidate]
(
  [TransactionId] Uniqueidentifier NOT NULL,
  [SaleItemDetailId] Uniqueidentifier NOT NULL,
  [ExstensionDays] Smallint NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemDetailRevalidate] add constraint PK_SaleItemDetailRevalidate Primary Key (SaleItemDetailId, TransactionId)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemDetailRevalidate] add constraint FK_SaleItemDetailRevalidate_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemDetailRevalidate] add constraint FK_SaleItemDetailRevalidate_SaleItemDetail foreign key([SaleItemDetailId]) references [tbSaleItemDetail] ([SaleItemDetailId])  on update no action on delete no action

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_SaleItemDetailRevalidate_SaleItemId ON tbSaleItemDetailRevalidate (SaleItemDetailId) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.81</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Removed default value constraint for tbNote.NoteType </REASON><TABLENAMES>tbNote</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE @ConstraintName AS NVARCHAR(255)
DECLARE @DropConstraintSQL AS NVARCHAR(255)

SET @ConstraintName = (
  select con.name
  from 
    sys.default_constraints con left join 
    sys.objects t on con.parent_object_id = t.object_id left join
    sys.all_columns col on con.parent_column_id = col.column_id and con.parent_object_id = col.object_id
  where 
    con.name like 'DF__tbNote%NoteType%'
)

SET @DropConstraintSQL = 'ALTER TABLE tbNote DROP CONSTRAINT ' + @ConstraintName

EXEC (@DropConstraintSQL)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.80</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added tbNote.NoteType</REASON><TABLENAMES>tbNote</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbNote
add NoteType smallint not null default(10)/*Standard*/
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio Pangallo</ADDEDBY><SQLVERSION>3.79</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New fields
tbProduct.RevalidateFeeProductId 
tbProduct.RevalidateExtensionDays
tbProduct.RevalidateWindowStartDays 
tbProduct.RevalidateWindowEndDays
Created table
tbTransactionTicketRevalidate</REASON><TABLENAMES>tbProduct
tbTransactionTicketRevalidate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add
  RevalidateFeeProductId Uniqueidentifier NULL,
  RevalidateExtensionDays Smallint NULL,
  RevalidateWindowStartDays Smallint NULL,
  RevalidateWindowEndDays Smallint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbProduct add constraint FK_Product_RevalidateFeeProductId foreign key(RevalidateFeeProductId) references tbProduct (ProductId)  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_Product_RevalidateFeeProductId ON tbProduct (RevalidateFeeProductId) 
where RevalidateFeeProductId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTransactionTicketRevalidate]
(
  [TransactionId] Uniqueidentifier NOT NULL,
  [TicketId] Uniqueidentifier NOT NULL,
  [ExstensionDays] Smallint NOT NULL
 )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionTicketRevalidate add constraint PK_TransactionTicketRevalidate Primary Key (TransactionId,TicketId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionTicketRevalidate] add constraint FK_TransactionTicketRevalidate_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_TransactionTicketRevalidate_TicketId ON tbTransactionTicketRevalidate (TicketId) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.78</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added index IX_ProductRenewFromProduct_SourceProductId to tbProductRenewFromProduct </REASON><TABLENAMES>tbProductRenewFromProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index IX_ProductRenewFromProduct_SourceProductId ON tbProductRenewFromProduct(SourceProductId)

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.77</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New fields
tbTicket.ValidateFiscalDate
tbTicket.FirstUsageFiscalDate</REASON><TABLENAMES>tbTicket</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add
  ValidateFiscalDate date null,  
  FirstUsageFiscalDate date null 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.76</SQLVERSION><RMTRACKLINK>SIT-6946</RMTRACKLINK><REASON>New fields
tbTicket.TriggerBreakage
tbTicket.TriggerClearing
tbTicket.TriggerExpiration</REASON><TABLENAMES>tbTicket</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add 
  [TriggerBreakage]   Bit NOT NULL  constraint DF_Ticket_TriggerBreakage   default (0),
  [TriggerExpiration] Bit NOT NULL  constraint DF_Ticket_TriggerExpiration default (0),
  [TriggerClearing]   Bit NOT NULL  constraint DF_Ticket_TriggerClearing   default (0)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket drop constraint DF_Ticket_TriggerBreakage  

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket drop constraint DF_Ticket_TriggerExpiration  

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket drop constraint DF_Ticket_TriggerClearing  

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicket
set 
  TriggerBreakage=(case TLT.TriggerLedgerType when 302 then 1 else 0 end),
  TriggerExpiration=(case TLT.TriggerLedgerType when 301 then 1 else 0 end),
  TriggerClearing=(case TLT.TriggerLedgerType when 301 then 1 else 0 end)
from tbTicketLedgerTrigger TLT
where tbTicket.TicketId=TLT.TicketId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_TriggerBreakage] ON [tbTicket] ([BreakageDate] ,[TriggerBreakage] ) where (BreakageDate is not null) and TriggerBreakage=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_TriggerExpiration] ON [tbTicket] ([ValidDateTo] ,[TriggerExpiration] ) where (ValidDateTo is not null) and TriggerExpiration=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_TriggerClearing] ON [tbTicket] ([ValidDateTo] ,[TriggerClearing] ) where (ValidDateTo is not null) and TriggerClearing=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX tbTicket.IX_Ticket_BreakageDate
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.75</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added tbTicketUsage.SimulatedRedemption</REASON><TABLENAMES>tbTicketUsage</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add SimulatedRedemption bit null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.74</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added tbMetaField.MaxLength</REASON><TABLENAMES>tbMetafield</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMetaField
add MaxLength smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.73</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Update tbCodeAlias.CodeAlias from varchar(50) to varchar(100)</REASON><TABLENAMES>tbCodeAlias</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCodeAlias
alter column CodeAlias varchar(100) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.72</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Renamed tbInstallmentContract.Exported in tbInstallmentContract.ExportedDateTime and changed from bit to DateTime
Created IX_InstallmentContract_ToBeExported
Created IX_HistoryLog_JobId</REASON><TABLENAMES>tbInstallmentContract
tbHistoryLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
drop column Exported
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
add ExportedDateTime datetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_InstallmentContract_ToBeExported ON tbInstallmentContract(ExportedDateTime,CreateDateTime) where ExportedDateTime is null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_HistoryLog_JobId ON tbHistoryLog(JobId) where JobId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.71</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added tbInstallmentContract.Exported
Added tbHistoryLog.JobId</REASON><TABLENAMES>tbInstallmentContract
tbHistoryLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
add Exported bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbHistoryLog
add JobId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbHistoryLog] add constraint FK_HistoryLog_Job foreign key([JobId]) references [tbJob] ([JobId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.70</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Right type 203, "ProductExpDate"  switches from boolean to lookup</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update 
  tbRight
set 
  RightValue = 30
where 
  RightType = 203
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.69</SQLVERSION><RMTRACKLINK>SIT-6369</RMTRACKLINK><REASON>New tbSaleItem.ValidDateFrom and tbSaleItem.ValidDateTor</REASON><TABLENAMES>tbSaleItem</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItem
add
  ValidDateFrom date null,  
  ValidDateTo date null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcire</ADDEDBY><SQLVERSION>3.68</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index on CodeAliasTypeId</REASON><TABLENAMES>tbCodeAlias</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_CodeAlias_CodeAliasTypeId] ON [tbCodeAlias] ([CodeAliasTypeId] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.67</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Created table tbEventFlag
- Removed tbEvent.TracePortfolioInPerformance (managed in tbEventFlag)
- Removed tbEvent.PerfOnDemand (managed in tbEventFlag)
- Removed tbEvent.QueueControl (managed in tbEventFlag)</REASON><TABLENAMES>tbEventFlag
tbEvent</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbEventFlag]
(
  [EventId] Uniqueidentifier NOT NULL,
  [EventFlag] Smallint NOT NULL
) 



</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEventFlag add constraint PK_EventFlag Primary Key (EventId,EventFlag)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbEventFlag] add constraint FK_EventFlag_Event foreign key([EventId]) references [tbEvent] ([EventId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEventFlag (
  EventId,
  EventFlag
)
( 
 select
    EventId, 
    1 /*TrackInParkPortfolios*/
 from tbEvent
 where TracePortfolioInPerformance=1
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEventFlag (
  EventId,
  EventFlag
)
( 
 select
    EventId, 
    2 /*PerformanceCreationOnDemand*/
 from tbEvent
 where PerfOnDemand=1
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEventFlag (
  EventId,
  EventFlag
)
( 
 select
    EventId, 
    3 /*QueueControl*/
 from tbEvent
 where QueueControl=1
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
drop column TracePortfolioInPerformance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
drop column PerfOnDemand
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
drop column QueueControl
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.66</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactoring AssignMedia rights</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRight
set RightType=304
where 
  RightType=305 and 
  RightValue='1'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbRight (RightId, EntityType, EntityId, RightType, RightValue)
select distinct
  newid(),
  EntityType, 
  EntityId, 
  304, 
  '30'
from tbRight
where
  RightType=305 and
  RightValue in ('10','20','30')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.65</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add TransactionId field</REASON><TABLENAMES>tbNote</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbNote
add TransactionId Uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Note_TransactionId] ON [tbNote] ([TransactionId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNote] add constraint FK_Note_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.64</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop field tbSaleItemDetail.InstallmentBilling</REASON><TABLENAMES>tbSaleItemDetail</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItemDetail
drop column InstallmentBilling
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.63</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add field tbSaleItemDetail.InstallmentBilling</REASON><TABLENAMES>tbSaleItemDetail</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItemDetail
add InstallmentBilling bit null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.62</SQLVERSION><RMTRACKLINK>SIT-6539</RMTRACKLINK><REASON>New tbLedgerClearingClearingAllocated field</REASON><TABLENAMES>tbLedgerClearing</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerClearing
add ClearingAllocated money null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.61</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbOutboundTrigger</REASON><TABLENAMES>tbOutboundTrigger</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbOutboundTrigger]
(
  [OutboundTriggerId] Uniqueidentifier NOT NULL,
  [TriggerDateTime] Datetime NOT NULL,
  [EntityId] Uniqueidentifier NOT NULL,
  [EntityType] Smallint NOT NULL,
  [WorkstationId] Uniqueidentifier NOT NULL,
  [UserAccountId] Uniqueidentifier NULL,
  [TriggerOptions] Nvarchar(max) NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbOutboundTrigger add constraint PK_OutboundTrigger Primary Key ([OutboundTriggerId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundTrigger_TriggerDateTime] ON [tbOutboundTrigger] ([TriggerDateTime] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundTrigger_EntityId] ON [tbOutboundTrigger] ([EntityId] ,[TriggerDateTime] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundTrigger_WorkstationId] ON [tbOutboundTrigger] ([WorkstationId] ,[TriggerDateTime] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundTrigger_UserAccountId] ON [tbOutboundTrigger] ([UserAccountId] ,[TriggerDateTime] ) 
where UserAccountId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundTrigger] add constraint FK_OutboundTrigger_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundTrigger] add constraint FK_OutboundTrigger_UserAccount foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.60</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added field "BiometricTicketOverride"</REASON><TABLENAMES>tbTicket</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add BiometricTicketOverride tinyint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.59</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Removes dead CatalogCache IDs from tbEntityChange</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbEntityChange
where EntityId in (
  select EC.EntityId  
  from   
    tbEntityChange EC left join    
    tbCatalogCache CC on CC.CatalogCacheId=EC.EntityId    
  where
    EC.EntityType=125 and 
    CC.CatalogCacheId is null
)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>3.58</SQLVERSION><RMTRACKLINK>6526</RMTRACKLINK><REASON>0) drop Foreign key from tbProductPrice
1) drop Foreign key from tbProductPriceAdvance
2) drop Foreign key from tbProductPriceMembershipPoint
3) add ProductPriceDateSerialNumber to tbProductPriceDate
4) update ProductPriceDateSerialNumber in tbProductPriceDate
5) set ProductPriceDateSerialNumber not null in tbProductPriceDate
6) Add ProductPriceDateStatus LK[378] to tbProductPriceDate nullable
7) Update ProductPriceDateStatus in tbProductPriceDate with value "Active"
8) set ProductPriceDateStatus in tbProductPriceDate as not nullable
9) add ProductPriceDateId to tbProductPriceDate
10) update ProductPriceDateId values in tbProductPriceDate
11) set ProductPriceDateId not null in tbProductPriceDate
12) add ProductPriceDateId to tbProductPrice
13) copy ProductPriceDateId from tbProductPriceDate to tbProductPrice
14) set ProductPriceDateSerialNumber not null in tbProductPrice
15) add ProductPriceDateId to tbProductPriceAdvance
16) copy ProductPriceDateId from tbProductPriceDate to tbProductPriceAdvance
17) set ProductPriceDateSerialNumber not null in tbProductPrice
18) add ProductPriceDateId to tbProductPriceMembershipPoint
19) copy ProductPriceDateId from tbProductPriceDate to tbProductPriceMembershipPoint
20) set ProductPriceDateId not null in tbProductPriceMembershipPoint
21) drop Primary Key PriorityOrder tbProductPriceDate
22) add new Primary Key ProductPriceDateIdtbProductPriceDate
23) drop UQ_ProductPrice from tbProductPrice
24) Create unique index on tbProductPrice
25) drop IX_ProductPrice_ProductId from tbProductPrice
26) drop ProductId and PriorityOrder from tbProductPrice
27) drop UQ_ProductPriceAdvance from tbProductPriceAdvance
28) drop PK_ProductPriceAdvance from tbProductPriceAdvance
29) drop ProductId and PriorityOrder from tbProductPriceAdvance
30) recreate primary key for tbProductPriceAdvance
31) Create UNIQUE Index [UQ_ProductPriceAdvance] ON [tbProductPriceAdvance] 
32) drop PK_ProductPriceMembershipPoint from tbProductPriceMembershipPoint
33) drop ProductId and PriorityOrder from tbProductPriceMembershipPoint
34) recreate primary key for tbProductPriceMembershipPoint
35) recreate foreign key tbProductPrice
36)recreate foreign key tbProductPriceAdvance
37) recreate foreign key tbProductPriceMembershipPoint
</REASON><TABLENAMES>tbProductPriceDate
tbProductPrice
tbProductPriceAdvance
tbProductPriceMembershipPoint
</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductPrice 
drop constraint FK_ProductPrice_ProductPriceDate

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceAdvance 
drop constraint FK_ProductPriceAdvance_ProductPriceDate

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceMemberShipPoint 
drop constraint FK_ProductPriceMembershipPoint_ProductPriceDate

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceDate
add ProductPriceDateSerialNumber integer null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>;with tmpProductPriceDate as
(
  select
    PPD.ProductId,
    PPD.PriorityOrder,
    PPD.ProductPriceDateSerialNumber,
    Rn = ROW_NUMBER() over (partition by ProductId order by PriorityOrder)
  from tbProductPriceDate PPD
)

update tmpProductPriceDate set ProductPriceDateSerialNumber = Rn
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceDate
alter column ProductPriceDateSerialNumber integer not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceDate
add ProductPriceDateStatus Smallint null 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductPriceDate
set ProductpriceDateStatus=10

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceDate
alter column ProductPriceDateStatus Smallint not null


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceDate 
add ProductPriceDateId uniqueidentifier null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductPriceDate set ProductPriceDateId = newId()
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceDate 
alter column ProductPriceDateId uniqueidentifier not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPrice
add ProductPriceDateId uniqueidentifier null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update
  tbProductPrice 
set
  ProductPriceDateId = PPD.ProductPriceDateId
from
  tbProductPriceDate PPD inner join tbProductPrice PP on 
  PPD.ProductId = PP.ProductId and PPD.PriorityOrder = PP.PriorityOrder
where PPD.ProductId = PP.ProductId and PPD.PriorityOrder = PP.PriorityOrder

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPrice 
alter column ProductPriceDateId uniqueidentifier not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceAdvance
add ProductPriceDateId uniqueidentifier null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update
  tbProductPriceAdvance 
set
  ProductPriceDateId = PPD.ProductPriceDateId
from
  tbProductPriceDate PPD inner join tbProductPriceAdvance PPA on 
  PPD.ProductId = PPA.ProductId and PPD.PriorityOrder = PPA.PriorityOrder
where PPD.ProductId = PPA.ProductId and PPD.PriorityOrder = PPA.PriorityOrder

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceAdvance 
alter column ProductPriceDateId uniqueidentifier not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceMembershipPoint
add ProductPriceDateId uniqueidentifier null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update
  tbProductPriceMembershipPoint
set
  ProductPriceDateId = PPD.ProductPriceDateId
from
  tbProductPriceDate PPD inner join tbProductPriceMembershipPoint PPMP on 
  PPD.ProductId = PPMP.ProductId and PPD.PriorityOrder = PPMP.PriorityOrder
where PPD.ProductId = PPMP.ProductId and PPD.PriorityOrder = PPMP.PriorityOrder

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceMembershipPoint 
alter column ProductPriceDateId uniqueidentifier not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceDate
drop constraint PK_ProductPriceDate

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceDate
add constraint PK_ProductPriceDate primary key (ProductPriceDateId)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index tbProductPrice.UQ_ProductPrice
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Unique Index UQ_ProductPrice on tbProductPrice ([ProductPriceDateId] ,[SaleChannelId], [PerformanceTypeId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index tbProductPrice.IX_ProductPrice_ProductId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPrice 
drop column ProductId, PriorityOrder

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index tbProductPriceAdvance.UQ_ProductPriceAdvance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceAdvance
drop constraint PK_ProductPriceAdvance

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceAdvance
drop column ProductId, PriorityOrder

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceAdvance
add constraint PK_ProductPriceAdvance Primary Key ([ProductPriceDateId],[CellIndex])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ProductPriceAdvance] ON [tbProductPriceAdvance] ([ProductPriceDateId] ,[SaleChannelId] ,[PerformanceTypeId] ,[RateCodeId] ,[AdvanceDays] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceMembershipPoint
drop constraint PK_ProductPriceMembershipPoint

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceMembershipPoint
drop column ProductId, PriorityOrder

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceMembershipPoint
add constraint PK_ProductPriceMembershipPoint Primary Key ([ProductPriceDateId],[MembershipPointId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPrice
add constraint FK_ProductPrice_ProductPriceDate foreign key(ProductPriceDateId) references tbProductPriceDate (ProductPriceDateId)  on update no action on delete no action


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceAdvance
add constraint FK_ProductPriceAdvance_ProductPriceDate foreign key(ProductPriceDateId) references tbProductPriceDate (ProductPriceDateId)  on update no action on delete no action

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceMembershipPoint
add constraint FK_ProductPriceMembershipPoint_ProductPriceDate foreign key(ProductPriceDateId) references tbProductPriceDate (ProductPriceDateId)  on update no action on delete no action

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.57</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Renamed foreign key to: 
- tbUserActivity
- tbResourceSkill
- tbAccessPoint
- tbLicense
- tbPaymentWallet
- tbPromoActionMembershipPoint
- tbMedia</REASON><TABLENAMES>tbUserActivity
tbResourceSkill
tbAccessPoint
tbLicense
tbPaymentWallet
tbPromoActionMembershipPoint
tbMedia</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE @ConstraintName AS NVARCHAR(255)
DECLARE @DropConstraintSQL AS NVARCHAR(255)

SET @ConstraintName = (
  select CONSTRAINT_NAME
  from INFORMATION_SCHEMA.TABLE_CONSTRAINTS
  where
    TABLE_NAME = 'tbUserActivity' and
    CONSTRAINT_NAME like 'FK__tbUserAct%'
)

EXEC sp_rename @ConstraintName, 'FK_UserActivity_Plugin'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @ConstraintName AS NVARCHAR(255)
DECLARE @DropConstraintSQL AS NVARCHAR(255)

SET @ConstraintName = (
  select CONSTRAINT_NAME
  from INFORMATION_SCHEMA.TABLE_CONSTRAINTS
  where
    TABLE_NAME = 'tbResourceSkill' and
    CONSTRAINT_NAME like 'FK__tbResourc%'
)

EXEC sp_rename @ConstraintName, 'FK_ResourceSkill_ResourceType'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @ConstraintName AS NVARCHAR(255)
DECLARE @DropConstraintSQL AS NVARCHAR(255)

SET @ConstraintName = (
  select CONSTRAINT_NAME
  from INFORMATION_SCHEMA.TABLE_CONSTRAINTS
  where
    TABLE_NAME = 'tbAccessPoint' and
    CONSTRAINT_NAME like 'FK__tbAccessP__Contr%'
)

EXEC sp_rename @ConstraintName, 'FK_AccessPoint_ControlledWorkstation'

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @ConstraintName AS NVARCHAR(255)
DECLARE @DropConstraintSQL AS NVARCHAR(255)

SET @ConstraintName = (
  select CONSTRAINT_NAME
  from INFORMATION_SCHEMA.TABLE_CONSTRAINTS
  where
    TABLE_NAME = 'tbAccessPoint' and
    CONSTRAINT_NAME like 'FK__tbAccessP__AptWo%'
)

EXEC sp_rename @ConstraintName, 'FK_AccessPoint_AptWorkstation'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @ConstraintName AS NVARCHAR(255)
DECLARE @DropConstraintSQL AS NVARCHAR(255)

SET @ConstraintName = (
  select CONSTRAINT_NAME
  from INFORMATION_SCHEMA.TABLE_CONSTRAINTS
  where
    TABLE_NAME = 'tbLicense' and
    CONSTRAINT_NAME like 'FK__tbLicense__Accou%'
)

EXEC sp_rename @ConstraintName, 'FK_License_Account'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @ConstraintName AS NVARCHAR(255)
DECLARE @DropConstraintSQL AS NVARCHAR(255)

SET @ConstraintName = (
  select CONSTRAINT_NAME
  from INFORMATION_SCHEMA.TABLE_CONSTRAINTS
  where
    TABLE_NAME = 'tbPaymentWallet' and
    CONSTRAINT_NAME like 'FK__tbPayment__Membe%'
)

EXEC sp_rename @ConstraintName, 'FK_PaymentWallet_MembershipPoint'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @ConstraintName AS NVARCHAR(255)
DECLARE @DropConstraintSQL AS NVARCHAR(255)

SET @ConstraintName = (
  select CONSTRAINT_NAME
  from INFORMATION_SCHEMA.TABLE_CONSTRAINTS
  where
    TABLE_NAME = 'tbPromoActionMembershipPoint' and
    CONSTRAINT_NAME like 'FK__tbPromoAc__Membe%'
)

EXEC sp_rename @ConstraintName, 'FK_PromoActionMembershipPoint_MembershipPoint'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @ConstraintName AS NVARCHAR(255)
DECLARE @DropConstraintSQL AS NVARCHAR(255)

SET @ConstraintName = (
  select CONSTRAINT_NAME
  from INFORMATION_SCHEMA.TABLE_CONSTRAINTS
  where
    TABLE_NAME = 'tbPromoActionMembershipPoint' and
    CONSTRAINT_NAME like 'FK__tbPromoAc__Produ%'
)

EXEC sp_rename @ConstraintName, 'FK_PromoActionMembershipPoint_Product'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @ConstraintName AS NVARCHAR(255)
DECLARE @DropConstraintSQL AS NVARCHAR(255)

SET @ConstraintName = (
  select CONSTRAINT_NAME
  from INFORMATION_SCHEMA.TABLE_CONSTRAINTS
  where
    TABLE_NAME = 'tbMedia' and
    CONSTRAINT_NAME like 'FK__tbMedia__Transac%'
)

EXEC sp_rename @ConstraintName, 'FK_Media_Transaction'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.56</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop field tbIntercompanyCostCenter.DocTemplateId</REASON><TABLENAMES>tbIntercompanyCostCenter</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbIntercompanyCostCenter
drop column DocTemplateId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.55</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added name to foreign key in tbServer</REASON><TABLENAMES>tbServer</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE @ConstraintName AS NVARCHAR(255)
DECLARE @DropConstraintSQL AS NVARCHAR(255)

SET @ConstraintName = (
  select CONSTRAINT_NAME
  from INFORMATION_SCHEMA.TABLE_CONSTRAINTS
  where
    TABLE_NAME = 'tbServer' and
    CONSTRAINT_NAME like 'FK__tbServer__Server%'
)

SET @DropConstraintSQL = 'ALTER TABLE tbServer DROP CONSTRAINT ' + @ConstraintName

EXEC (@DropConstraintSQL)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbServer] add constraint FK_Server_ServerProfile foreign key([ServerProfileId]) references [tbServerProfile] ([ServerProfileId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.54</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbIntercompanyCostCenter
- drop DocTemplateId
- add ForceReceipt</REASON><TABLENAMES>tbIntercompanyCostCenter</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_IntercompanyCostCenter_DocTemplateId on tbIntercompanyCostCenter
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbIntercompanyCostCenter drop constraint FK_IntercompanyCostCenter_DocTemplate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbIntercompanyCostCenter
add ForceReceipt bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbIntercompanyCostCenter
set ForceReceipt=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbIntercompanyCostCenter
alter column ForceReceipt bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.53</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbIntercompanyCostCenter.DocTemplateId</REASON><TABLENAMES>tbIntercompanyCostCenter</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbIntercompanyCostCenter
add DocTemplateId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_IntercompanyCostCenter_DocTemplateId] ON [tbIntercompanyCostCenter] ([DocTemplateId]) where DocTemplateId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbIntercompanyCostCenter] add constraint FK_IntercompanyCostCenter_DocTemplate foreign key([DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.52</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields tbDataSource.DBReadOnlyIntent</REASON><TABLENAMES>tbDataSource</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDataSource
add DBReadOnlyIntent bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbDataSource
set DBReadOnlyIntent=(case when DataSourceType in (1,3) then 1 else 0 end)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDataSource
alter column DBReadOnlyIntent bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.51</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Update TransactionDateTime from smallDateTime to datetime</REASON><TABLENAMES>tbTransaction</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Transaction_FiscalDate on tbTransaction
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column TransactionDateTime datetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_Transaction_FiscalDate 
ON tbTransaction 
(
  TransactionFiscalDate Desc,
  TransactionDateTime Desc,
  TransactionSerial Desc
) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.50</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop index IX_Account_DisplayName
Create index IX_Account_Status</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Account_DisplayName on tbAccount
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Account_Status] ON [tbAccount] ([EntityType],[AccountStatus],[DisplayName])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.49</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbHistoryLog.LogTimestamp</REASON><TABLENAMES>tbHistoryLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbHistoryLog
add LogTimestamp datetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbHistoryLog
set LogTimestamp=LogDateTime
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbHistoryLog
alter column LogTimestamp datetime not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.48</SQLVERSION><RMTRACKLINK>SIT-6252</RMTRACKLINK><REASON>Update tbBoxDepositBreakdown.Quantity due to refactor</REASON><TABLENAMES>tbBoxDepositBreakdown</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbBoxDepositBreakdown
set Quantity=1
where Quantity&gt;0
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.47</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added LastUpdate to tbWorkstation</REASON><TABLENAMES>tbWorkstation</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbWorkstation
add LastUpdate datetime null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>3.46</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>The catalog cache needs to be deleted since LkSNProductPriorityLevel values have been changed</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from 
  tbEntityChange
where
  EntityId in (
    select
      ProductId
    from 
      tbProduct
    where
      ProductPriorityLevel is not null
  ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>  insert into 
    tbEntityChange 
    (
      EntityType, 
      EntityId, 
      InsertUpdate
    )
    (
      select 
        12 /*ProductType*/,
        ProductId,
        1 /*true*/
      from 
        tbProduct
      where
        ProductPriorityLevel is not null
    )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbCatalogCache
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbDBInfo
set 
  LastUpdate=getdate(),
  ParamValue=CONVERT(varchar(max), getdate(), 126)  
where 
  ParamName='CatalogCacheLastUpdate'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.45</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSaleCode</REASON><TABLENAMES>tbSaleCode</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleCode]
(
  [SaleCode] varchar(15) NOT NULL,
  [CreateFiscalDate] date NOT NULL,
  [CreateDateTime] datetime NOT NULL
)


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleCode add constraint PK_SaleCode Primary Key ([SaleCode])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleCode_CreateFiscalDate] ON [tbSaleCode] ([CreateFiscalDate],[CreateDateTime])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>3.44</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change LkSnProductPriorityLevel values:
Primary from 1 to 10
Secondary from 2 to 20</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update
  tbProduct 
set
  ProductPriorityLevel = (
                           case 
           when  ProductPriorityLevel = 1 then 10
           when  ProductPriorityLevel = 2 then 20
           else  ProductPriorityLevel end
                         )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.43</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Updated tbServerParam.ParamValue=4 (CustomParameter)
where ParamName='ConfServerURL'</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbServerParam
set ParamValue=4 
where ParamName='ConfServerURL'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>redwan</ADDEDBY><SQLVERSION>3.42</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Update tbAccountFlag table and remove LoginSNP, LoginB2B, LoginB2C from tbAccount </REASON><TABLENAMES>tbAccount</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbAccountFlag (AccountId, AccountFlag)
select AccountId, 1001
from [tbAccount]
where LoginSNP=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbAccountFlag (AccountId, AccountFlag)
select AccountId, 1002
from [tbAccount]
where LoginB2B=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbAccountFlag (AccountId, AccountFlag)
select AccountId, 1003
from [tbAccount]
where LoginB2C=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccount
drop column 
  LoginSNP,
  LoginB2B,
  LoginB2C
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.41</SQLVERSION><RMTRACKLINK>SIT-6413</RMTRACKLINK><REASON>New tbProduct.TrnMaxQty field</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add TrnMaxQty smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.40</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Created tbServerProfile
- Added fields ServerProfileId and DefaultServerProfileCode to tbServer</REASON><TABLENAMES>tbServer
tbServerProfile</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbServerProfile]
(
  [ServerProfileId] Uniqueidentifier NOT NULL,
  [ServerProfileCode] Varchar(15) NOT NULL,
  [ServerProfileName] Nvarchar(100) NOT NULL
)


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbServerProfile add constraint PK_ServerProfile Primary Key ([ServerProfileId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ServerProfile_ProfileCode] ON [tbServerProfile] ([ServerProfileCode] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table
  tbServer
add
  ServerProfileId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbServer] add foreign key([ServerProfileId]) references [tbServerProfile] ([ServerProfileId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>3.39</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Removed AssociationAccountId from tbPromoRule with both the index and the foreign key</REASON><TABLENAMES>tbPromoRule</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbPromoRule
DROP CONSTRAINT FK_PromoRule_AccountAssociation

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX tbPromoRule.IX_PromoRule_AssociationAccountId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPromoRule
DROP COLUMN AssociationAccountId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>3.38</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add AssociationAccountId column for members validation
0  -  add  AssociationAccountId column
1 -  add index to AssociationAccountId
2 - add foreign key FK:PromoRule_AssociationAccount</REASON><TABLENAMES>tbPromoRule</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table
  tbPromoRule
add
  [AssociationAccountId] Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PromoRule_AssociationAccountId] ON [tbPromoRule] ([AssociationAccountId] ) 
where AssociationAccountId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPromoRule] add constraint FK_PromoRule_AccountAssociation foreign key([AssociationAccountId]) references [tbAccountAssociation] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>redwan</ADDEDBY><SQLVERSION>3.37</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop constrain FK_AccountFlag_AccountFinance
add constrain FK_AccountFlag_Account</REASON><TABLENAMES>tbAccountFlag</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Alter table tbAccountFlag drop constraint FK_AccountFlag_AccountFinance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbAccountFlag add constraint FK_AccountFlag_Account foreign key(AccountId) references [tbAccount] (AccountId)  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.36</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Invalidate cache for all product types with configured renewal source products
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete
from tbEntityChange
where EntityId in (
  select distinct ProductId
  from tbProductRenewFromProduct
)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (
  EntityType, 
  EntityId, 
  InsertUpdate
)
(
  select distinct
    12 /*ProductType*/,
    ProductId,
    1 /*true*/
  from tbProductRenewFromProduct
)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>reduo</ADDEDBY><SQLVERSION>3.35</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbAccountFlag added</REASON><TABLENAMES>tbAccountFlag
tbAccountFinance</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table tbAccountFlag
(
  AccountId Uniqueidentifier NOT NULL,
  AccountFlag Smallint NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbAccountFlag add constraint PK_AccountFlag Primary Key (AccountId , AccountFlag)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbAccountFlag add constraint FK_AccountFlag_AccountFinance foreign key(AccountId) references [tbAccountFinance] (AccountId)  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbAccountFlag (AccountId, AccountFlag)
select AccountId, 1
from [tbAccountFinance]
where ResPurgeLock=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbAccountFlag (AccountId, AccountFlag)
select AccountId, 2
from [tbAccountFinance]
where AllowInventory=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
drop column 
  ResPurgeLock,
  AllowInventory
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.34</SQLVERSION><RMTRACKLINK>SIT-6413</RMTRACKLINK><REASON>New tbProduct2Plugin table</REASON><TABLENAMES>tbProduct2Plugin</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProduct2Plugin]
(
  [ProductId] Uniqueidentifier NOT NULL,
  [Product2PluginType] Smallint NOT NULL,
  [PluginId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbProduct2Plugin add constraint PK_Product2Plugin Primary Key (ProductId, Product2PluginType, PluginId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product2Plugin_Product2PluginType] ON [tbProduct2Plugin] ([Product2PluginType] ,[PluginId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct2Plugin] add constraint FK_Product2Plugin_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct2Plugin] add constraint FK_Product2Plugin_Plugin foreign key([PluginId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.33</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTicket.OfflineVirtual</REASON><TABLENAMES>tbTicket</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket 
add OfflineVirtual bit null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.32</SQLVERSION><RMTRACKLINK>SIT-6365</RMTRACKLINK><REASON>New tbWebAuth.UserAccountId field</REASON><TABLENAMES>tbWebAuth</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbWebAuth
add UserAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_WebAuth_UserAccountId] ON [tbWebAuth] ([UserAccountId] ) 
where UserAccountId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbWebAuth] add constraint FK_WebAuth_Account foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>3.31</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add ValidationPluginId column for members validation
0  -  add  ValidationPluginId column
1 -  add index to ValidationPluginId
2 - add foreign key FK:AssociationAccount_Plugin</REASON><TABLENAMES>tbAccountAssociation</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table
  tbAccountAssociation
add
  [ValidationPluginId] Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccountAssociation_ValidationPluginId] ON [tbAccountAssociation] ([ValidationPluginId] ) 
where ValidationPluginId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountAssociation] add constraint FK_AccountAssociation_Plugin foreign key([ValidationPluginId]) references [tbPlugin] ([PluginId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.30</SQLVERSION><RMTRACKLINK>SIT-6366</RMTRACKLINK><REASON>Split of right "Account Inventory" into two rights</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbRight 
  (RightId, EntityType, EntityId, RightType, RightValue)
select
  NEWID(),
  EntityType,
  EntityId,
  535,
  RightValue
from 
  tbRight R
where 
  RightType=528 and
  not exists (select EntityId from tbRight R2 where R.EntityType=R2.EntityType and R.EntityId=R2.EntityId and R2.RightType=535)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.29</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>1) add field tbTicketUsage.Invalidated
2) tbTicketUsageUser.UserAccountId nullable
3) Re-Create IX_TicketUsageUser_UserAccountId</REASON><TABLENAMES>tbTicketUsage</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add Invalidated bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_TicketUsageUser_UserAccountId on tbTicketUsageUser
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsageUser
alter column UserAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_TicketUsageUser_UserAccountId ON tbTicketUsageUser (UserAccountId,OperationDateTime) where UserAccountId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.28</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbTicketUsageUser:
- OperationDateTime
- RefTicketUsageId</REASON><TABLENAMES>tbTicketUsageUser</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsageUser
add
  OperationDateTime datetime null,  
  RefTicketUsageId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketUsageUser
set OperationDateTime=XDT
from (
  select
    TU.TicketUsageId as XID,
    TU.UsageDateTime as XDT   
  from  
    tbTicketUsageUser TUU inner join    
    tbTicketUsage TU on TU.TicketUsageId=TUU.TicketUsageId
) X
where TicketUsageId=XID
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsageUser
alter column OperationDateTime datetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_TicketUsageUser_Account on tbTicketUsageUser

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_TicketUsageUser_UserAccountId ON tbTicketUsageUser (UserAccountId,OperationDateTime) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_TicketUsageUser_RefTicketUsageId ON tbTicketUsageUser (RefTicketUsageId) where RefTicketUsageId is not null 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbTicketUsageUser add constraint FK_TicketUsageUser_RefTicketUsage foreign key(RefTicketUsageId) references [tbTicketUsage] (TicketUsageId)  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.27</SQLVERSION><RMTRACKLINK>SIT-6389</RMTRACKLINK><REASON>New index on OutboundQueueId on tbOutboundQueueHistory</REASON><TABLENAMES>tbOutboundQueueHistory</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>if not exists(select * from sys.indexes where name='IX_OutboundQueueHistory_OutboundQueueId')
begin
  Create Index IX_OutboundQueueHistory_OutboundQueueId ON tbOutboundQueueHistory (OutboundQueueId)
end
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.26</SQLVERSION><RMTRACKLINK>6363</RMTRACKLINK><REASON>New tbLedgerRuleFlag</REASON><TABLENAMES>tbLedgerRuleFlag
tbLedgerRule</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table tbLedgerRuleFlag
(
  LedgerRuleId Uniqueidentifier NOT NULL,
  LedgerRuleFlag Smallint NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbLedgerRuleFlag add constraint PK_LedgerRuleFlag Primary Key (LedgerRuleId,LedgerRuleFlag)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbLedgerRuleFlag add constraint FK_LedgerRuleFlag_LedgerRule foreign key(LedgerRuleId) references [tbLedgerRule] (LedgerRuleId)  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbLedgerRuleFlag (LedgerRuleId, LedgerRuleFlag)
select LedgerRuleId, 1
from [tbLedgerRule]
where TriggerOnRefund=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbLedgerRuleFlag (LedgerRuleId, LedgerRuleFlag)
select LedgerRuleId, 2
from [tbLedgerRule]
where TriggerOnUpgrade=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbLedgerRuleFlag (LedgerRuleId, LedgerRuleFlag)
select LedgerRuleId, 4
from [tbLedgerRule]
where AffectClearingLimit=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbLedgerRuleFlag (LedgerRuleId, LedgerRuleFlag)
select LedgerRuleId, 5
from [tbLedgerRule]
where UsedTicket=1

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbLedgerRuleFlag (LedgerRuleId, LedgerRuleFlag)
select LedgerRuleId, 6
from [tbLedgerRule]
where UnusedTicket=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbLedgerRuleFlag (LedgerRuleId, LedgerRuleFlag)
select LedgerRuleId, 7
from [tbLedgerRule]
where ValidOnlineOffline=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbLedgerRuleFlag (LedgerRuleId, LedgerRuleFlag)
select LedgerRuleId, 8
from [tbLedgerRule]
where InvalidOffline=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbLedgerRuleFlag (LedgerRuleId, LedgerRuleFlag)
select LedgerRuleId, 9
from [tbLedgerRule]
where MultiplyWeight=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbLedgerRuleFlag (LedgerRuleId, LedgerRuleFlag)
select LedgerRuleId, 10
from [tbLedgerRule]
where IncludeUpgradedProductsUsages=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
drop column 
  TriggerOnNegative,
  TriggerOnRefund,
  TriggerOnUpgrade,
  AffectClearingLimit,
  UsedTicket,
  UnusedTicket,
  ValidOnlineOffline,
  InvalidOffline,
  MultiplyWeight,
  IncludeUpgradedProductsUsages
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>3.25</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbNotifyRuleOrder</REASON><TABLENAMES>tbNotifyRuleOrder</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbNotifyRuleOrder]
(
    [NotifyRuleId] Uniqueidentifier NOT NULL,
    [DocTemplateId] Uniqueidentifier NOT NULL,
    [SaleAccountType] Smallint NOT NULL,
    [AlternativeEmailAddress] Nvarchar(100) NOT NULL,
    [NotifyRuleOrderStatus] Smallint NULL,
    [TransactionType] Smallint NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNotifyRuleOrder] ADD CONSTRAINT PK_NotifyRuleOrder PRIMARY KEY ([NotifyRuleId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNotifyRuleOrder] add constraint FK_NotifyRuleOrder_NotifyRule foreign key([NotifyRuleId]) references [tbNotifyRule] ([NotifyRuleId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_NotifyRuleOrder_DocTemplateId] ON [tbNotifyRuleOrder] ([DocTemplateId] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.24</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New tbLedgerClearing.CarriedFromSource</REASON><TABLENAMES>tbLedgerClearing</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table 
  tbLedgerClearing
add 
  GroupEntityType smallint null,
  InheritedEntry bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbLedgerClearing
set 
  tbLedgerClearing.GroupEntityType = tbLedger.GroupEntityType
from 
  tbLedgerClearing
inner join
  tbLedger
on
  tbLedger.GroupEntityId=tbLedgerClearing.GroupEntityId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerClearing
set GroupEntityType = 0
where GroupEntityType is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerClearing
set InheritedEntry=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerClearing
alter column GroupEntityType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerClearing
alter column InheritedEntry bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.23</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields:
- tbEvent.IconAlias
- tbCatalog.IconAlias
- tbProductFamily.IconAlias</REASON><TABLENAMES>tbEvent
tbCatalog
tbProductFamily</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEvent
add IconAlias varchar(50) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCatalog
add IconAlias varchar(50) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductFamily
add IconAlias varchar(50) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.22</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbMetaField.Engravable</REASON><TABLENAMES>tbMetaField</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMetaField
add Engravable bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbMetaField 
set Engravable=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMetaField
alter column Engravable bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.21</SQLVERSION><RMTRACKLINK>SIT-6302</RMTRACKLINK><REASON>New tbPaymentToken.AuthorizationCode field</REASON><TABLENAMES>tbPaymentToken</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentToken
add AuthorizationCode varchar(20) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentToken_AuthorizationCode] ON [tbPaymentToken] ([AuthorizationCode] ) 
where AuthorizationCode is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>ugog</ADDEDBY><SQLVERSION>3.20</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index IX_TicketUsage_IncProductId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsage_IncProductId] ON [tbTicketUsage] ([IncProductId] ) 
where IncProductId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.19</SQLVERSION><RMTRACKLINK>SIT-6006</RMTRACKLINK><REASON>New tbAccountFinance.AllowInventory field</REASON><TABLENAMES>tbAccountFinance</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
add AllowInventory bit null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccountFinance
set AllowInventory=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
alter column AllowInventory bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>3.18</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0 - Add  a new field to tbHistoryLog:  Transaction id
1 - Create new index on tbHistoryLog.TransactionId
2- Create new Foreign Key: FK_HistoryLog_Transaction

3 - Add new fields to tbHistoryDetail: OldEntityType, OldEntityId, NewEntityType, NewEntityId
4 - Create new index on tbHistoryDetail.OldEntityId
5 - Create new index on tbHistoryDetail.NewEntityId</REASON><TABLENAMES>tbHistoryLog
tbHistoryDetail</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Alter table  tbHistoryLog
add 
  [TransactionId] Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_HistoryLog_TransactionId] ON [tbHistoryLog] ([TransactionId] ) 
where TransactionId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbHistoryLog] add constraint FK_HistoryLog_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbHistoryDetail
Add
  [OldEntityType] Smallint NULL,
  [OldEntityId] Uniqueidentifier NULL,
  [NewEntityType] Smallint NULL,
  [NewEntityId] Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_HistoryDetail_OldEntityId] ON [tbHistoryDetail] ([OldEntityId] ) 
where OldEntityId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_HistoryDetail_NewEntityId] ON [tbHistoryDetail] ([NewEntityId] ) 
where NewEntityId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.17</SQLVERSION><RMTRACKLINK>SIT-6006</RMTRACKLINK><REASON>Refactor tbAccountInventoryBalance UQ index</REASON><TABLENAMES>tbAccountInventoryBalance</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP INDEX tbAccountInventoryBalance.UQ_AccountInventoryBalance_AccountId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_AccountInventoryBalance_AccountId] ON [tbAccountInventoryBalance] ([AccountId] ,[ProductId] ,[PerformanceSetId] ,[OptionSetId], [UnitAmount])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>ugog</ADDEDBY><SQLVERSION>3.16</SQLVERSION><RMTRACKLINK>SIT-6271</RMTRACKLINK><REASON>Update on right MediaAssign</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT> update tbRight
set RightValue=(case RightValue when 'true' then 20 else 1 end)
where RightType=305
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.15</SQLVERSION><RMTRACKLINK>SIT-6006</RMTRACKLINK><REASON>New tables:
[0..9] tbAccountInventoryBalance
[10..14] tbTransactionAccountInventory</REASON><TABLENAMES>tbAccountInventoryBalance
tbTransactionAccountInventory
</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbAccountInventoryBalance]
(
  [AccountInventoryBalanceId] Uniqueidentifier NOT NULL,
  [AccountId] Uniqueidentifier NOT NULL,
  [ProductId] Uniqueidentifier NOT NULL,
  [PerformanceSetId] Uniqueidentifier NULL,
  [OptionSetId] Uniqueidentifier NULL,
  [Quantity] Integer NOT NULL,
  [UnitAmount] Money NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountInventoryBalance] ADD CONSTRAINT PK_AccountInventoryBalance PRIMARY KEY ([AccountInventoryBalanceId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_AccountInventoryBalance_AccountId] ON [tbAccountInventoryBalance] ([AccountId] ,[ProductId] ,[PerformanceSetId] ,[OptionSetId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccountInventoryBalance_ProductId] ON [tbAccountInventoryBalance] ([ProductId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccountInventoryBalance_PerformanceSetId] ON [tbAccountInventoryBalance] ([PerformanceSetId] ) 
where PerformanceSetId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccountInventoryBalance_OptionSetId] ON [tbAccountInventoryBalance] ([OptionSetId] ) 
where OptionSetId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountInventoryBalance] add constraint FK_AccountInventoryBalance_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountInventoryBalance] add constraint FK_AccountInventoryBalance_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountInventoryBalance] add constraint FK_AccountInventoryBalance_PerformanceSet foreign key([PerformanceSetId]) references [tbPerformanceSet] ([PerformanceSetId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountInventoryBalance] add constraint FK_AccountInventoryBalance_OptionSet foreign key([OptionSetId]) references [tbOptionSet] ([OptionSetId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTransactionAccountInventory]
(
  [TransactionId] Uniqueidentifier NOT NULL,
  [AccountInventoryBalanceId] Uniqueidentifier NOT NULL,
  [Quantity] smallint NOT NULL,
  [UnitAmount] Money NOT NULL,
  [FiscalDate] date NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionAccountInventory] ADD CONSTRAINT PK_TransactionAccountInventory PRIMARY KEY ([TransactionId],[AccountInventoryBalanceId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionAccountInventory_AccountInventoryBalanceId] ON [tbTransactionAccountInventory] ([AccountInventoryBalanceId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionAccountInventory] add constraint FK_TransactionAccountInventory_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionAccountInventory] add constraint FK_TransactionAccountInventory_AccountInventoryBalance foreign key([AccountInventoryBalanceId]) references [tbAccountInventoryBalance] ([AccountInventoryBalanceId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>3.14</SQLVERSION><RMTRACKLINK>SIT-6196</RMTRACKLINK><REASON>add new fields:
BiometricScore
BiometricType</REASON><TABLENAMES>tbTicketUsage</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add 
  [BiometricScore] Integer NULL,
  [BiometricType] Tinyint NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.13</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Populates tbTicketSecondary based on PortfolioGroupId for backward compability</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbTicketSecondary
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbTicketSecondary (TicketId, SecondaryTicketId)
select distinct TCKPRM.TicketId, TCKSEC.TicketId
from
  tbProduct PRDPRM inner join
  tbTicket TCKPRM on TCKPRM.ProductId=PRDPRM.ProductId inner join
  tbTicketMediaMatch TMMPRM on TMMPRM.TicketMediaMatchId=TCKPRM.TicketMediaMatchId inner join
  tbTicketMediaMatch TMMSEC on TMMSEC.PortfolioGroupId=TMMPRM.PortfolioGroupId inner join
  tbTicket TCKSEC on TCKSEC.TicketMediaMatchId=TMMSEC.TicketMediaMatchId inner join
  tbProduct PRDSEC on PRDSEC.ProductId=TCKSEC.ProductId and PRDSEC.ProductPriorityLevel=2/*sec*/
where
  PRDPRM.ProductPriorityLevel=1/*primary*/

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.12</SQLVERSION><RMTRACKLINK>SIT-6221</RMTRACKLINK><REASON>Added new fields:
PosPromoRulePluginId
WebPromoRulePluginId</REASON><TABLENAMES>tbPromoRule</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPromoRule
add 
  [PosPromoRulePluginId] Uniqueidentifier NULL,
  [WebPromoRulePluginId] Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPromoRule] add constraint FK_PromoRule_PosPromoRulePlugin foreign key([PosPromoRulePluginId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPromoRule] add constraint FK_PromoRule_WebPromoRulePlugin foreign key([WebPromoRulePluginId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>there</ADDEDBY><SQLVERSION>3.11</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add FK IndividualCouponId to tbSaleItemDiscount</REASON><TABLENAMES>tbSaleItemDiscount</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItemDiscount
add IndividualCouponId Uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleItemDiscount add constraint FK_SaleItemDiscount_IndividualCoupon foreign key([IndividualCouponId]) references [tbIndividualCoupon] ([IndividualCouponId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemDiscount_IndividualCouponId] ON [tbSaleItemDiscount] (IndividualCouponId ) 
where IndividualCouponId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbIndividualCoupon
set
  IndividualCouponStatus = 104
from 
  tbIndividualCoupon IC inner join
  tbTransaction TRN on TRN.TransactionId = IC.SettleTransactionId left join
  tbSale S on S.SaleId = TRN.SaleId
where 
  IC.IndividualCouponStatus = 101 and
  S.Encoded = 0
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Salvo</ADDEDBY><SQLVERSION>3.10</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTransactionActivationGroup</REASON><TABLENAMES>tbTransactionActivationGroup</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTransactionActivationGroup]
(
  [TransactionId] Uniqueidentifier NOT NULL,
  [TicketId] Uniqueidentifier NOT NULL,
  [SecondaryTicketId] Uniqueidentifier NOT NULL,
  [AddLink] Bit NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionActivationGroup] ADD CONSTRAINT PK_TransactionActivationGroup PRIMARY KEY ([TransactionId],[TicketId],[SecondaryTicketId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionActivationGroup_TicketId] ON [tbTransactionActivationGroup] ([TicketId] ) 
Create Index [IX_TransactionActivationGroup_SecondaryTicketId] ON [tbTransactionActivationGroup] ([SecondaryTicketId] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.9</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTicketSecondary</REASON><TABLENAMES>tbTicketSecondary</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTicketSecondary]
(
  [TicketId] Uniqueidentifier NOT NULL,
  [SecondaryTicketId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketSecondary] ADD CONSTRAINT PK_TicketSecondary PRIMARY KEY ([TicketId],[SecondaryTicketId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketSecondary_SecondaryTicketId] ON [tbTicketSecondary] ([SecondaryTicketId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketSecondary] ADD CONSTRAINT FK_TicketSecondary_PrimaryTicket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketSecondary] ADD CONSTRAINT FK_TicketSecondary_SecondaryTicket foreign key([SecondaryTicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.8</SQLVERSION><RMTRACKLINK>SIT-6103</RMTRACKLINK><REASON></REASON><TABLENAMES>tbPortfolioSlotLog
tbPortfolioSlotBalance</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbPortfolioSlotBalance (
    PortfolioId,
    MembershipPointId,
    PortfolioSlotType,
    PortfolioSlotBalanceSerial,
    ExchangeRate,
    Balance,
    InitialValue,
    Status
)
select distinct
    PSL.PortfolioId,
    PSL.MembershipPointId,
    PSL.PortfolioSlotType,
    PSL.PortfolioSlotBalanceSerial,
    1,
    PS.SlotBalance,
    0,
    1 /*active*/
from
  tbPortfolioSlotLog PSL inner join
  tbPortfolioSlot PS on 
    PS.PortfolioId=PSL.PortfolioId and 
  PS.MembershipPointId=PSL.MembershipPointId and 
  PS.PortfolioSlotType=PSL.PortfolioSlotType
where not exists (
  select * 
  from tbPortfolioSlotBalance PSB 
  where 
    PSB.PortfolioId=PSL.PortfolioId and 
  PSB.MembershipPointId=PSL.MembershipPointId and 
  PSB.PortfolioSlotType=PSL.PortfolioSlotType and 
  PSB.PortfolioSlotBalanceSerial=PSL.PortfolioSlotBalanceSerial
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPortfolioSlotLog] add constraint FK_PortfolioSlotLog_PortfolioSlotBalance foreign key([PortfolioId],[MembershipPointId],[PortfolioSlotType],[PortfolioSlotBalanceSerial]) references [tbPortfolioSlotBalance] ([PortfolioId],[MembershipPointId],[PortfolioSlotType], [PortfolioSlotBalanceSerial])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotBalance
add PortfolioSlotBalanceType Tinyint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPortfolioSlotBalance
set PortfolioSlotBalanceType=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotBalance
alter column PortfolioSlotBalanceType Tinyint not NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>3.7</SQLVERSION><RMTRACKLINK>Association</RMTRACKLINK><REASON>drop Constraint FK_Association2Product_Product on tbAssociation2Product since the script is wrong

add the correct foreign key   FK_Association2Product_Product 

</REASON><TABLENAMES>tbAssociation2Product</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAssociation2Product drop Constraint FK_Association2Product_Product
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbAssociation2Product] ADD CONSTRAINT FK_Association2Product_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>3.6</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop table tbAssociation2Mask
drop table tbAssociation2Product
drop table tbAccountAssociation

create table tbAccountAssociation
create table tbAssociation2Mask
create table tbAssociation2Product

</REASON><TABLENAMES>tbAccountAssociation
tbAssociation2Mask
tbAssociation2Product
</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbAssociation2Mask
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbAssociation2Product
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbAccountAssociation
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbAccountAssociation]
(
  [AccountId] Uniqueidentifier NOT NULL,
  [ActiveFrom] Date NULL,
  [ActiveTo] Date NULL,
  [MemberRequired] Bit NOT NULL,
  [MemberVerificationType] Smallint NOT NULL,
  [MemberValidationType] Smallint NOT NULL  
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountAssociation] ADD CONSTRAINT PK_AccountAssociation PRIMARY KEY ([AccountId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountAssociation] ADD CONSTRAINT FK_AccountAssociation_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbAssociation2Mask]
(
  [AccountId] Uniqueidentifier NOT NULL,
  [MaskId] Uniqueidentifier NOT NULL,
  [PriorityOrder] Integer NOT NULL 
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAssociation2Mask] ADD CONSTRAINT PK_Association2Mask PRIMARY KEY ([AccountId],[MaskId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Association2Mask_MaskId] ON [tbAssociation2Mask] ([MaskId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAssociation2Mask] ADD CONSTRAINT FKAssociation2Mask_AccountAssociation foreign key([AccountId]) references [tbAccountAssociation] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAssociation2Mask] ADD CONSTRAINT FK_Association2Mask_Mask foreign key([MaskId]) references [tbMask] ([MaskId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbAssociation2Product]
(
  [AccountId] Uniqueidentifier NOT NULL,
  [ProductId] Uniqueidentifier NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAssociation2Product] ADD CONSTRAINT PK_Association2Product PRIMARY KEY ([AccountId],[ProductId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Association2Product_ProductId] ON [tbAssociation2Product] ([ProductId]) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAssociation2Product] ADD CONSTRAINT FK_Association2Product_AccountAssociation foreign key([AccountId]) references [tbAccountAssociation] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAssociation2Product] ADD CONSTRAINT FK_Association2Product_Product foreign key([AccountId]) references [tbProduct] ([ProductId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.5</SQLVERSION><RMTRACKLINK>SIT-6113</RMTRACKLINK><REASON>Patch to fix wrong data combination on tbProductRevenueGateCategory</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update 
  tbProductRevenueGateCategory
set
  ClearingLimitType=2
where
  ClearingLimit is null and
  ClearingLimitType=1
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>3.4</SQLVERSION><RMTRACKLINK>Association</RMTRACKLINK><REASON>tbAccountAssociation: convert columns ActiveFrom and ActiveTo to proper types.
0: drop tbAccountAssociation.ActiveFrom
1: drop tbAccountAssociation.ActiveTo
2: add  tbAccountAssociation.ActiveFrom and  tbAccountAssociation.ActiveTo as Date null

</REASON><TABLENAMES>tbAccountAssociation</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountAssociation
drop column ActiveFrom

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountAssociation
drop column ActiveTo
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountAssociation
add ActiveFrom Date null, ActiveTo Date null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>3.3</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New table tbPorfolioSlotBalance</REASON><TABLENAMES>tbPortfolioSlotBalance
tbPortfolioSlotLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbPortfolioSlotBalance]
(
  [PortfolioId] Uniqueidentifier NOT NULL,
  [MembershipPointId] Uniqueidentifier NOT NULL,
  [PortfolioSlotType] Tinyint NOT NULL,
  [PortfolioSlotBalanceSerial] Smallint NOT NULL,
  [ExchangeRate] Money NOT NULL,
  [Balance] Money NOT NULL,
  [InitialValue] Money NOT NULL,
  [ExpireDate] Date NULL,
  [Status] Tinyint NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPortfolioSlotBalance] ADD CONSTRAINT PK_PortfolioSlotBalance PRIMARY KEY ([PortfolioId],[MembershipPointId],[PortfolioSlotType], [PortfolioSlotBalanceSerial])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioSlotBalance_MembershipPointId] ON [tbPortfolioSlotBalance] ([MembershipPointId] ,[PortfolioSlotType] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPortfolioSlotBalance] add constraint FK_PortfolioSlotBalance_PortfolioSlot foreign key([PortfolioId],[MembershipPointId],[PortfolioSlotType]) references [tbPortfolioSlot] ([PortfolioId],[MembershipPointId],[PortfolioSlotType])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbPortfolioSlotBalance (PortfolioId, MembershipPointId, PortfolioSlotType, PortfolioSlotBalanceSerial, ExchangeRate, Balance, InitialValue, ExpireDate, Status)
select
  PortfolioId,
  MembershipPointId,
  PortfolioSlotType,
  1 as PortfolioSlotBalanceSerial,
  1.00 as ExchangeRate,
  SlotBalance as Balance,
  SlotBalance as InitialValue,
  null as ExpireDate,
  1 as Status
from
  tbPortfolioSlot
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotLog
add PortfolioSlotBalanceSerial smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPortfolioSlotLog
set PortfolioSlotBalanceSerial=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotLog
alter column PortfolioSlotBalanceSerial smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>3.2</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0: create tbAccountAssociation
1: add foreign key AccountId  to  tbAccountAssociation
2: create tbAssociation2Mask
3: create index on tbAssociation2Mask.MaskId
4: add foreign key AccountId  to  tbAssociation2Mask
5: add foreign key MaskId  to  tbAssociation2Mask
6:create tbAssociation2Product
7: create index on tbAssociation2Product.ProductId
8: add foreign key AccountId  to  tbAssociation2Product
9: add foreign key ProductId  to  tbAssociation2Mask
</REASON><TABLENAMES>tbAccountAssociation
tbAssociation2Mask
tbAssociation2Product</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbAccountAssociation]
(
  [AccountId] Uniqueidentifier NOT NULL,
  [ActiveFrom] Binary(3) NULL,
  [ActiveTo] Binary(3) NULL,
  [MemberRequired] Bit NOT NULL,
  [MemberVerificationType] Smallint NOT NULL,
  [MemberValidationType] Smallint NOT NULL,
  
  Primary Key ([AccountId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountAssociation] add  foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbAssociation2Mask]
(
  [AccountId] Uniqueidentifier NOT NULL,
  [MaskId] Uniqueidentifier NOT NULL,
  [PriorityOrder] Integer NOT NULL,
  
  Primary Key ([AccountId],[MaskId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Association2Mask_MaskId] ON [tbAssociation2Mask] ([MaskId]) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAssociation2Mask] add  foreign key([AccountId]) references [tbAccountAssociation] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAssociation2Mask] add  foreign key([MaskId]) references [tbMask] ([MaskId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbAssociation2Product]
(
  [ProductId] Uniqueidentifier NOT NULL,
  [AccountId] Uniqueidentifier NOT NULL,
  
  Primary Key ([ProductId],[AccountId])
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Association2Product_ProductId] ON [tbAssociation2Product] ([ProductId]) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAssociation2Product] add  foreign key([AccountId]) references [tbAccountAssociation] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAssociation2Product] add  foreign key([AccountId]) references [tbProduct] ([ProductId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>3.1</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_OutboundQueue_EntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name='IX_OutboundQueue_EntityId' AND object_id = OBJECT_ID('dbo.tbOutboundQueue'))
BEGIN
  CREATE NONCLUSTERED INDEX IX_OutboundQueue_EntityId ON [dbo].[tbOutboundQueue] ([EntityId]);
END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Salvo</ADDEDBY><SQLVERSION>3.0</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added new patch file (snp-db-update-03.xml)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbDBInfo
set ParamValue=ParamValue
where ParamName=''
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE></SQLUPDATELIST><LATESTDBVERSION>3.598</LATESTDBVERSION></ROOT>