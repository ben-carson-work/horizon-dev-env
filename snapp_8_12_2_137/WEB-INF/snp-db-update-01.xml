<ROOT><SQLUPDATELIST><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.996</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbTransactionStock:
- FaceMeasureId
- FaceQuantityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionStock  
DROP CONSTRAINT PK_TransactionStock  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionStock
add
  FaceMeasureId uniqueidentifier null,  
  FaceQuantity money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTransactionStock
set
  FaceMeasureId=MeasureId,  
  FaceQuantity=Quantity
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionStock
alter column FaceMeasureId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionStock
alter column FaceQuantity money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionStock_FaceMeasureId] ON [tbTransactionStock] ([FaceMeasureId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionStock
ADD CONSTRAINT PK_TransactionStock PRIMARY KEY ([TransactionId],[ProductId],[WarehouseId],[MeasureId],[FaceMeasureId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionStock] add constraint FK_TransactionStock_FaceMeasure foreign key([FaceMeasureId]) references [tbMeasure] ([MeasureId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.995</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbTransactionStock and tbWarehouseStock</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionStock  
DROP CONSTRAINT PK_TransactionStock  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionStock
ADD CONSTRAINT PK_TransactionStock PRIMARY KEY ([TransactionId],[ProductId],[WarehouseId],[MeasureId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbWarehouseStock  
DROP CONSTRAINT PK_WarehouseStock   
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbWarehouseStock
ADD CONSTRAINT PK_WarehouseStock PRIMARY KEY ([WarehouseId],[ProductId],[MeasureId])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.994</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbTransactionStock</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTransactionStock drop constraint FK_TransactionStock_AltMeasure
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_TransactionStock_AltMeasureId on tbTransactionStock
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionStock
drop column AltMeasureId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionStock
drop column AltQuantity
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbTransactionStock.BaseQuantity', 'Quantity', 'COLUMN';  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbTransactionStock.BaseMeasureId', 'MeasureId', 'COLUMN';  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename N'tbTransactionStock.IX_TransactionStock_BaseMeasureId', N'IX_TransactionStock_MeasureId', N'INDEX';  

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'FK_TransactionStock_BaseMeasure', 'FK_TransactionStock_Measure';  

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>MARCO CIRENI</ADDEDBY><SQLVERSION>1.993</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0: drop IX_Product_ProductPaymentProfileId
1: rename tbProduct.ProductPaymentProfileId in PaymentProfileId
2: create  IX_Product_PaymentProfileId
3: rename FK_Product_ProductPaymentProfile in FK_ProductPaymentProfile</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index tbProduct.IX_Product_ProductPaymentProfileId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbProduct.ProductPaymentProfileId',
    @newname = 'PaymentProfileId'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_PaymentProfileId] ON [tbProduct] ([PaymentProfileId] ) 
where PaymentProfileId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename
  @objname = 'FK_Product_ProductPaymentProfile ',
  @newname = 'FK_Product_PaymentProfile'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.992</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbTransactionStock
- AltMeasureId
- BaseMeasureId
- AltQuantity

rename field Quantity into BaseQuantity</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTransactionStock
add 
  AltMeasureId uniqueidentifier null,  
  BaseMeasureId uniqueidentifier null,  
  AltQuantity money null,  
  BaseQuantity money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @MeasureId uniqueidentifier;
select @MeasureId=MeasureId from tbMeasure where MeasureCode='#UNIT';

update tbTransactionStock
set
  AltMeasureId=@MeasureId,  
  BaseMeasureId=@MeasureId,  
  AltQuantity=Quantity,  
  BaseQuantity=Quantity;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionStock
alter column AltMeasureId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionStock
alter column BaseMeasureId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionStock
alter column AltQuantity money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionStock
alter column BaseQuantity money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionStock
drop column Quantity 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionStock] add constraint FK_TransactionStock_AltMeasure foreign key([AltMeasureId]) references [tbMeasure] ([MeasureId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionStock] add constraint FK_TransactionStock_BaseMeasure foreign key([BaseMeasureId]) references [tbMeasure] ([MeasureId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionStock_AltMeasureId] ON [tbTransactionStock] ([AltMeasureId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionStock_BaseMeasureId] ON [tbTransactionStock] ([BaseMeasureId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.991</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tbWarehouseStock.MeasureId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbWarehouseStock
add MeasureId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @MeasureId uniqueidentifier;
set @MeasureId=newid();

insert into tbMeasure (MeasureId, MeasureCode, MeasureName, Enabled)
values (@MeasureId, '#UNIT', '@Product.MeasureUnit', 1);

update tbWarehouseStock
set MeasureId=@MeasureId;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbWarehouseStock
alter column MeasureId uniqueidentifier not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_WarehouseStock_MeasureId] ON [tbWarehouseStock] ([MeasureId] ) 

 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbWarehouseStock] add constraint FK_WarehouseStock_Measure foreign key([MeasureId]) references [tbMeasure] ([MeasureId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbWarehouseStock
alter column Quantity money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionStock
alter column Quantity money not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>MARCO CIRENI</ADDEDBY><SQLVERSION>1.990</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0: rename tbProductPaymentProfile in tbPaymentProfile
1: rename tbProductPaymentMethod in tbPaymentProfileMethod
2: rename tbProductMembershipPoint in tbPaymentProfileMembershipPoint

</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbProductPaymentProfile',
    @newname = 'tbPaymentProfile'

EXEC sp_rename
    @objname = 'tbPaymentProfile.ProductPaymentProfileId',
    @newname = 'PaymentProfileId'

EXEC sp_rename
    @objname = 'tbPaymentProfile.ProductPaymentProfileCode',
    @newname = 'PaymentProfileCode'

EXEC sp_rename
    @objname = 'tbPaymentProfile.ProductPaymentProfileName',
    @newname = 'PaymentProfileName'

EXEC sp_rename
    @objname = 'tbPaymentProfile.PK_ProductPaymentProfile',
    @newname = 'PK_PaymentProfile'

EXEC sp_rename
    @objname = 'tbPaymentProfile.UQ_ProductPaymentProfile_Code',
    @newname = 'UQ_PaymentProfile_Code'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbProductPaymentProfileMethod',
    @newname = 'tbPaymentProfileMethod'

EXEC sp_rename
    @objname = 'tbPaymentProfileMethod.ProductPaymentProfileId',
    @newname = 'PaymentProfileId'

EXEC sp_rename
    @objname = 'tbPaymentProfileMethod.PK_ProductPaymentProfileMethod',
    @newname = 'PK_PaymentProfileMethod'


EXEC sp_rename
    @objname = 'FK_ProductPaymentProfile_PluginId',
    @newname = 'FK_PaymentProfile_PluginId'

EXEC sp_rename
    @objname = 'FK_ProductPaymentProfileMethod_ProductPaymentProfile',
    @newname = 'FK_PaymentProfileMethod_PaymentProfile'		
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbProductMembershipPoint',
    @newname = 'tbPaymentProfileMembershipPoint'

EXEC sp_rename
    @objname = 'tbPaymentProfileMembershipPoint.ProductPaymentProfileId',
    @newname = 'PaymentProfileId'

EXEC sp_rename
    @objname = 'tbPaymentProfileMembershipPoint.PK_ProductMembershipPoint',
    @newname = 'PK_PaymentProfileMembershipPoint'

EXEC sp_rename
    @objname = 'FK_ProductMembershipPoint_MembershipPoint',
    @newname = 'FK_PaymentProfileMembershipPoint_MembershipPoint'

EXEC sp_rename
    @objname = 'FK_ProductMembershipPoint_ProductPaymentProfile',
    @newname = 'FK_PaymentProfileMembershipPoint_PaymentProfile'	
	
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.989</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add field tbProduct.MeasureProfileId
- Add field tbMeasureProfile.BaseMeasureId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct 
add MeasureProfileId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_MeasureProfileId] ON [tbProduct] ([MeasureProfileId] ) 
where MeasureProfileId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_MeasureProfile foreign key([MeasureProfileId]) references [tbMeasureProfile] ([MeasureProfileId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbMeasureConversion
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbMeasureProfile
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMeasureProfile
add BaseMeasureId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_MeasureProfile_BaseMeasureId] ON [tbMeasureProfile] ([BaseMeasureId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMeasureProfile] add constraint FK_MeasureProfile_BaseMeasure foreign key([BaseMeasureId]) references [tbMeasure] ([MeasureId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.988</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbProductBOM</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProductBOM]
(
	[ProductId] Uniqueidentifier NOT NULL,
	[MaterialProductId] Uniqueidentifier NOT NULL,
	[MeasureId] Uniqueidentifier NOT NULL,
	[Quantity] Money NOT NULL,
	[PriorityOrder] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbProductBOM
ADD CONSTRAINT PK_ProductBOM PRIMARY KEY ([ProductId],[MaterialProductId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductBOM_MaterialProductId] ON [tbProductBOM] ([MaterialProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductBOM_MeasureId] ON [tbProductBOM] ([MeasureId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductBOM] add constraint FK_ProductBOM_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductBOM] add constraint FK_ProductBOM_MaterialProduct foreign key([MaterialProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductBOM] add constraint FK_ProductBOM_Measure foreign key([MeasureId]) references [tbMeasure] ([MeasureId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Marco&amp;Ugo</ADDEDBY><SQLVERSION>1.987</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.ProductPaymentProfileId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add ProductPaymentProfileId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_ProductPaymentProfileId] ON [tbProduct] ([ProductPaymentProfileId] ) 
where ProductPaymentProfileId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_ProductPaymentProfile foreign key([ProductPaymentProfileId]) references [tbProductPaymentProfile] ([ProductPaymentProfileId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.986</SQLVERSION><RMTRACKLINK>SIT-3341</RMTRACKLINK><REASON>Increase size of tbVoucher.VoucherCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbVoucher ALTER COLUMN VoucherCode VARCHAR (25) NOT NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.985</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tables:
- [0..2] tbMeasure
- [3..5] tbMeasureProfile
- tbMeasureConversion</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbMeasure]
(
	[MeasureId] Uniqueidentifier NOT NULL,
	[MeasureCode] Varchar(15) NOT NULL,
	[MeasureName] Nvarchar(50) NOT NULL,
	[Enabled] Bit NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbMeasure
ADD CONSTRAINT PK_Measure PRIMARY KEY ([MeasureId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Measure_Code] ON [tbMeasure] ([MeasureCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbMeasureProfile]
(
	[MeasureProfileId] Uniqueidentifier NOT NULL,
	[MeasureProfileCode] Varchar(15) NOT NULL,
	[MeasureProfileName] Nvarchar(50) NOT NULL,
	[Enabled] Bit NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbMeasureProfile
ADD CONSTRAINT PK_MeasureProfile PRIMARY KEY ([MeasureProfileId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_MeasureProfile_Code] ON [tbMeasureProfile] ([MeasureProfileCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbMeasureConversion]
(
	[EntityId] Uniqueidentifier NOT NULL,
	[AltMeasureId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[BaseMeasureId] Uniqueidentifier NOT NULL,
	[BaseQuantity] Money NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbMeasureConversion
ADD CONSTRAINT PK_MeasureConversion PRIMARY KEY ([EntityId],[AltMeasureId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_MeasureConversion_AltMeasureId] ON [tbMeasureConversion] ([AltMeasureId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_MeasureConversion_BaseMeasureId] ON [tbMeasureConversion] ([BaseMeasureId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMeasureConversion] add constraint FK_MeasureConversion_AltMeasure foreign key([AltMeasureId]) references [tbMeasure] ([MeasureId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMeasureConversion] add constraint FK_MeasureConversion_BaseMeasure foreign key([BaseMeasureId]) references [tbMeasure] ([MeasureId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.984</SQLVERSION><RMTRACKLINK>SIT-3431</RMTRACKLINK><REASON>New tbOpArea2Role table</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbOpArea2Role]
(
	[OpAreaId] Uniqueidentifier NOT NULL,
	[RoleId] Uniqueidentifier NOT NULL,
	[OpAreaRoleType] Smallint NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbOpArea2Role
ADD CONSTRAINT PK_OpArea2Role PRIMARY KEY ([OpAreaId],[RoleId],[OpAreaRoleType])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OpArea2Role_RoleId] ON [tbOpArea2Role] ([RoleId] ,[OpAreaRoleType] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOpArea2Role] add constraint FK_OpArea2Role_Account foreign key([OpAreaId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOpArea2Role] add constraint FK_OpArea2Role_Role foreign key([RoleId]) references [tbRole] ([RoleId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Marco Cireni</ADDEDBY><SQLVERSION>1.983</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add FK and IX to tbMembershipPoint.DebitLedgerAccountId and  tbMembershipPoint.CreditLedgerAccountId 
0 set both fields = null
1 create index
2 add foreign keys</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbMembershipPoint
set
  DebitLedgerAccountId = null,
  CreditLedgerAccountId = null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_MembershipPoint_DebitLedgerAccountId] ON [tbMembershipPoint] ([DebitLedgerAccountId] ) 
where DebitLedgerAccountId is not null

Create Index [IX_MembershipPoint_CreditLedgerAccountId] ON [tbMembershipPoint] ([CreditLedgerAccountId] ) 
where CreditLedgerAccountId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMembershipPoint] add constraint FK_MembershipPoint_DebitLedgerAccount foreign key([DebitLedgerAccountId]) references [tbLedgerAccount] ([LedgerAccountId])  on update no action on delete no action 
Alter table [tbMembershipPoint] add constraint FK_MembershipPoint_CreditLedgerAccount foreign key([CreditLedgerAccountId]) references [tbLedgerAccount] ([LedgerAccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.982</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbPerformance.PerformanceTypeFromCalendar</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPerformance
add PerformanceTypeFromCalendar bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPerformance
set PerformanceTypeFromCalendar=(case when PerformanceTypeId is null then 1 else 0 end)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
alter column PerformanceTypeFromCalendar bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.981</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop table tbPaymentMembershipPoint

tbPaymentWallet
Add columns MembershipPointId, ExchangeRate and PointAmount

</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Drop table tbPaymentMembershipPoint
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table 
  tbPaymentWallet
add
  MembershipPointId uniqueidentifier null,
  PointAmount money null,
  ExchangeRate money null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentWallet] add  foreign key([MembershipPointId]) references [tbMembershipPoint] ([MembershipPointId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @WalletMemPointId uniqueidentifier;
set @WalletMemPointId = (select MembershipPointId from tbMembershipPoint where MembershipPointCode='#WALLET')

update
    tbPaymentWallet
set
    tbPaymentWallet.PointAmount = PAY.PaymentAmount,
    tbPaymentWallet.ExchangeRate = 1,
    tbPaymentWallet.MembershipPointId = @WalletMemPointId
from
    tbPaymentWallet PW inner join 
    tbPayment PAY ON PW.PaymentId = PAY.PaymentId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentWallet
alter column MembershipPointId uniqueidentifier not null 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentWallet
alter column PointAmount money not null 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentWallet
alter column ExchangeRate money not null 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT> Create Index [IX_PaymentWallet_MembershipPointId] ON [tbPaymentWallet] ([MembershipPointId] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.980</SQLVERSION><RMTRACKLINK>SIT-3431</RMTRACKLINK><REASON>[0..3] New tbSaleTable
[4..9] New tbSaleTab fields</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleTable]
(
	[SaleTableId] Uniqueidentifier NOT NULL,
	[OpAreaAccountId] Uniqueidentifier NOT NULL,
	[SaleTableCode] Varchar(15) NOT NULL,
	[SaleTableName] Nvarchar(50) NOT NULL,
	[SaleTableStatus] Smallint NOT NULL,
	[Quantity] Smallint NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleTable
ADD CONSTRAINT PK_SaleTable PRIMARY KEY ([SaleTableId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleTable_OpAreaAccountId] ON [tbSaleTable] ([OpAreaAccountId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleTable] add constraint FK_SaleTable_OpAreaAccountId foreign key(OpAreaAccountId) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleTab drop constraint FK_SerialTab_ResourceSerial
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index tbSaleTab.IX_SaleTab_ResourceSerialId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleTab
drop column ResourceSerialId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleTab
add [SaleTabDesc] Nvarchar(50) NULL,
    [SaleTableId] Uniqueidentifier NULL,
    [UserAccountId] Uniqueidentifier NULL,
    [DateTimeFrom] Smalldatetime NULL,
    [DateTimeTo] Smalldatetime NULL,
    [PartyNumber] Smallint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleTab] add constraint FK_SaleTab_SaleTable foreign key([SaleTableId]) references [tbSaleTable] ([SaleTableId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleTab_SaleTableId] ON [tbSaleTab] ([SaleTableId] ,[SaleTabStatus] ,[SaleFiscalDate] ) 
where SaleTableId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleTab] add constraint FK_SaleTab_UserAccount foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleTab_UserAccountId] ON [tbSaleTab] ([UserAccountId] ) 
where UserAccountId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Marco Cireni</ADDEDBY><SQLVERSION>1.979</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add  fields to tbProductPaymetProfile
  ProductPaymentProfileCode (UQ)
  ProductPaymentProfileName
  Active</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductPaymentProfile
add
  ProductPaymentProfileCode varchar(15) not null,
  ProductPaymentProfileName nvarchar(50) not null,   
  Active bit not null  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ProductPaymentProfile_Code] ON [tbProductPaymentProfile] ([ProductPaymentProfileCode] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.978</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbShopCart.ServerId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbShopCart
add 
  ServerId smallint null,  
  UploadId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ShopCart_UploadId] ON [tbShopCart] ([UploadId] ,[CreateDateTime] ) 
where UploadId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ShopCart_ServerId] ON [tbShopCart] ([ServerId] ,[ShopCartStatus] ) 
where ServerId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbShopCart] add constraint FK_ShopCart_Upload foreign key([UploadId]) references [tbUpload] ([UploadId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Marco Cireni</ADDEDBY><SQLVERSION>1.977</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0..1  new tbProductPaymentProfile 
2..4  new tbProductPaymentProfileMethod
5..7  new tbProductMembershipPoint</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProductPaymentProfile]
(
	[ProductPaymentProfileId] Uniqueidentifier NOT NULL,
	[RestrictPaymentMethods] Bit NOT NULL,
	[AllowMembershipPoints] Bit NOT NULL,
	[RestrictMembershipPoints] Bit NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPaymentProfile
add constraint PK_ProductPaymentProfile primary key (ProductPaymentProfileId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbProductPaymentProfileMethod]
(
	[ProductPaymentProfileId] Uniqueidentifier NOT NULL,
	[PaymentMethodId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbProductPaymentProfileMethod] 
ADD CONSTRAINT PK_ProductPaymentProfileMethod Primary Key ([ProductPaymentProfileId],[PaymentMethodId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductPaymentProfileMethod] add constraint FK_ProductPaymentProfileMethod_ProductPaymentProfile foreign key([ProductPaymentProfileId]) references [tbProductPaymentProfile] ([ProductPaymentProfileId])  on update no action on delete no action
Alter table [tbProductPaymentProfileMethod] add constraint FK_ProductPaymentProfile_PluginId foreign key([PaymentMethodId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 
 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbProductMembershipPoint]
(
	[ProductPaymentProfileId] Uniqueidentifier NOT NULL,
	[MembershipPointId] Uniqueidentifier NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductMembershipPoint
add constraint PK_ProductMembershipPoint primary key ([ProductPaymentProfileId],[MembershipPointId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductMembershipPoint] add constraint FK_ProductMembershipPoint_ProductPaymentProfile foreign key([ProductPaymentProfileId]) references [tbProductPaymentProfile] ([ProductPaymentProfileId])  on update no action on delete no action
Alter table [tbProductMembershipPoint] add constraint FK_ProductMembershipPoint_MembershipPoint foreign key([MembershipPointId]) references [tbMembershipPoint] ([MembershipPointId])  on update no action on delete no action 
 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.976</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>new table tbPaymentMembershiPoint</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbPaymentMembershipPoint]
(
	[PaymentId] Uniqueidentifier NOT NULL,
	[MembershipPointId] Uniqueidentifier NOT NULL,
	[PointAmount] Money NOT NULL,
	[ExchangeRate] Money NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbPaymentMembershipPoint] 
ADD CONSTRAINT PK_PaymentMembershipPoint PRIMARY KEY ([PaymentId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentMembershipPoint] add  foreign key([MembershipPointId]) references [tbMembershipPoint] ([MembershipPointId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentMembershipPoint_MembershipPointId] ON [tbPaymentMembershipPoint] ([MembershipPointId] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Marco Cireni</ADDEDBY><SQLVERSION>1.975</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbMembershipPoints

ValidDateFrom (date nullable)
ValidDateTo (date nullable)
ExchangeRate (float not null)
RoundDecimals (smallint not null)
SmallestDenomination (money not null)
RoundingType (smallint not null)
AlgebraicThreshold (Money not null)
DebitLedgerAccountId Uniqueidentifier NULL
CreditLedgerAccountId Uniqueidentifier NULL</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMembershipPoint
add
  ValidDateFrom date null,
  ValidDateTo date null,
  ExchangeRate float null,
  RoundDecimals smallint null,
  SmallestDenomination money null,
  RoundingType smallint null,
  AlgebraicThreshold money null,
  DebitLedgerAccountId uniqueidentifier null,
  CreditLedgerAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbMembershipPoint
set
  ExchangeRate=0,
  RoundDecimals=0,
  SmallestDenomination=1,
  RoundingType=1,
  AlgebraicThreshold=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMembershipPoint
alter column ExchangeRate float not null 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMembershipPoint
alter column RoundDecimals smallint not null 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMembershipPoint
alter column SmallestDenomination money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMembershipPoint
alter column RoundingType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMembershipPoint
alter column AlgebraicThreshold money not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.974</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create field tbRateCode.RateCodeSymbol</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbRateCode
add RateCodeSymbol varchar(20) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.973</SQLVERSION><RMTRACKLINK>SIT-3162</RMTRACKLINK><REASON>New tbProductCrossSell.CrossProductStatus
New tbEvent.CrossEventStatus</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductCrossSell
add CrossProductStatus smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductCrossSell
set CrossProductStatus=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductCrossSell
alter column CrossProductStatus smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
add CrossEventStatus smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbEvent
set CrossEventStatus=1
where CrossPlatformId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>1.972</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop HistoryDetail table
create tbHistoryDetail adding new column HistorySubField (PK)  </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbHistoryDetail
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbHistoryDetail]
(
	[EntityId] Uniqueidentifier NOT NULL,
	[LogDateTime] Datetime NOT NULL,
	[HistoryField] Smallint NOT NULL,
	[HistorySubField] Nvarchar(15) NOT NULL,
	[OldValue] Nvarchar(100) NULL,
	[NewValue] Nvarchar(100) NULL,
	[OldValueLong] Ntext NULL,
	[NewValueLong] Ntext NULL,
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbHistoryDetail] 
ADD CONSTRAINT PK_HistoryDetail Primary Key ([EntityId],[LogDateTime],[HistoryField],[HistorySubField])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbHistoryDetail] add constraint FK_HistoryDetail_HistoryLog foreign key([EntityId],[LogDateTime]) references [tbHistoryLog] ([EntityId],[LogDateTime])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.971</SQLVERSION><RMTRACKLINK>SIT-3162</RMTRACKLINK><REASON>New tbTransactionCrossPlatform.CrossTransactionRef and tbTransactionCrossPlatform.CrossSaleRef
Rename tbAccountCrossPlatform.CrossPlatformCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTransactionCrossPlatform
add CrossTransactionRef varchar(36) null,
    CrossSaleRef varchar(36) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionCrossPlatform_CrossTransactionRef] ON [tbTransactionCrossPlatform] ([CrossPlatformId] ,[CrossTransactionRef] ) 
Create Index [IX_TransactionCrossPlatform_CrossSaleRef] ON [tbTransactionCrossPlatform] ([CrossPlatformId] ,[CrossSaleRef] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbAccountCrossPlatform.CrossPlatformCode', 'CrossPlatformRef', 'COLUMN'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.970</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbRateCode
- PriceActionType
- PriceValueType
- PriceValue</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbRateCode
add
  PriceActionType smallint null,  
  PriceValueType smallint null,  
  PriceValue money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbRateCode
set
  PriceActionType=0,  
  PriceValueType=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbRateCode
alter column PriceActionType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbRateCode
alter column PriceValueType smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>1.969</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tbHistoryDetail table</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbHistoryDetail]
(
	[EntityId] Uniqueidentifier NOT NULL,
	[LogDateTime] Datetime NOT NULL,
	[HistoryField] Smallint NOT NULL,
	[OldValue] Nvarchar(100) NULL,
	[NewValue] Nvarchar(100) NULL,
	[OldValueLong] Ntext NULL,
	[NewValueLong] Ntext NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbHistoryDetail] 
ADD CONSTRAINT PK_HistoryDetail Primary Key ([EntityId],[LogDateTime],[HistoryField])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbHistoryDetail] add constraint FK_HistoryDetail_HistoryLog foreign key([EntityId],[LogDateTime]) references [tbHistoryLog] ([EntityId],[LogDateTime])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.968</SQLVERSION><RMTRACKLINK>SIT-3162</RMTRACKLINK><REASON>New tbEvent.CrossPlatformId field</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEvent
add [CrossPlatformId] Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Event_CrossPlatformId] ON [tbEvent] ([CrossPlatformId] ) 
where CrossPlatformId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbEvent] add constraint FK_Event_AccountCrossPlatform foreign key([CrossPlatformId]) references [tbAccountCrossPlatform] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.967</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbShopCart.UpdateDateTime -&gt; not nullable</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbShopCart
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbShopCart
alter column UpdateDateTime datetime not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.966</SQLVERSION><RMTRACKLINK>SIT-3162</RMTRACKLINK><REASON>New tbTransactionCrossPlatform.ErrorCode and tbTransactionCrossPlatform.ErrorMsg</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTransactionCrossPlatform
add ErrorCode smallint null, ErrorMsg ntext null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.965</SQLVERSION><RMTRACKLINK>SIT-3188</RMTRACKLINK><REASON>New tbPromoRule fields</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>if Exists(select * from sys.columns where Name = N'ActionValueMax' and Object_ID = Object_ID(N'tbPromoAction'))
begin
  alter table tbPromoAction 
  drop column ActionValueMax
end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if not Exists(select * from sys.columns where Name = N'PromoDiscountValueMax' and Object_ID = Object_ID(N'tbPromoRule'))
begin
  alter table tbPromoRule 
  add PromoDiscountValueMax money null
end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if not Exists(select * from sys.columns where Name = N'VariableDiscount' and Object_ID = Object_ID(N'tbPromoRule'))
begin
  alter table tbPromoRule 
  add VariableDiscount bit null
end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if (select  
      is_nullable 
    from    
      sys.columns 
    where 
      object_id = object_id('tbPromoRule') and name = 'VariableDiscount'
    ) = 1
begin
  update tbPromoRule
  set VariableDiscount=0

  alter table tbPromoRule 
  alter column VariableDiscount bit not null
end
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.964</SQLVERSION><RMTRACKLINK>SIT-3162</RMTRACKLINK><REASON>Refactor IX_TransactionCrossPlatform_ServerId
New tbAccountCrossPlatform.LicenseId
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index tbTransactionCrossPlatform.IX_TransactionCrossPlatform_ServerId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionCrossPlatform_ServerId] ON [tbTransactionCrossPlatform] ([ServerId] ,[Status] ,[NextAttemptDateTime] ) 
where ServerId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountCrossPlatform
add LicenseId Smallint NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccountCrossPlatform_LicenseId] ON [tbAccountCrossPlatform] ([LicenseId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountCrossPlatform] add constraint FK_AccountCrossPlatform_License foreign key([LicenseId]) references [tbLicense] ([LicenseId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.963</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New tbLedgerRule.TriggerOnNegative</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
add TriggerOnNegative bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerRule
set TriggerOnNegative = 
  case
    when LedgerTriggerType=101 then 1
    else 0
  end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
alter column TriggerOnNegative bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.962</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New tbLicense.UQ_License_MainLicense</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_License_MainLicense] ON [tbLicense] ([MainLicense] ) 
where MainLicense=1
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.961</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbShopCart</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>
Create table [tbShopCart]
(
	[ShopCartId] Uniqueidentifier NOT NULL,
	[ShopCartStatus] Smallint NOT NULL,
	[WorkstationId] Uniqueidentifier NOT NULL,
	[CreateFiscalDate] date NOT NULL,
	[CreateDateTime] Datetime NOT NULL,
	[UpdateDateTime] Datetime NULL,
	[ItemCount] Smallint NOT NULL,
	[TotalAmount] Money NOT NULL,
	[TransactionId] Uniqueidentifier NULL,
	[ShopCartData] Ntext NULL,
Primary Key ([ShopCartId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ShopCart_CreateDateTime] ON [tbShopCart] ([CreateDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ShopCart_WorkstationId] ON [tbShopCart] ([WorkstationId] ,[CreateDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ShopCart_TransactionId] ON [tbShopCart] ([TransactionId] ,[CreateDateTime] ) 
where TransactionId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ShopCart_Status] ON [tbShopCart] ([ShopCartStatus] ,[CreateDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ShopCart_CreateFiscalDate] ON [tbShopCart] ([CreateFiscalDate] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbShopCart] add constraint FK_ShopCart_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbShopCart] add constraint FK_ShopCart_WorkstationId foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.960</SQLVERSION><RMTRACKLINK>SIT-3162</RMTRACKLINK><REASON>Add tbLicense.MainLicense</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLicense
add MainLicense bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLicense
set MainLicense=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLicense
alter column MainLicense bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.959</SQLVERSION><RMTRACKLINK>SIT-3162</RMTRACKLINK><REASON>[0..3] New tbTransactionCrossPlatform 
[4..7] New tbTransactionCrossPlatformItem</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTransactionCrossPlatform]
(
	[TransactionCrossPlatformId] Uniqueidentifier NOT NULL,
	[TransactionId] Uniqueidentifier NOT NULL,
	[CrossPlatformId] Uniqueidentifier NOT NULL,
	[Status] Smallint NOT NULL,
	[AttemptCount] Smallint NOT NULL,
	[NextAttemptDateTime] Smalldatetime NULL,
	[LastAttemptDateTime] Smalldatetime NULL,
	[ServerId] Smallint NULL,
	[Message] Ntext NULL
 )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionCrossPlatform
add constraint PK_TransactionCrossPlatform primary key ([TransactionCrossPlatformId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionCrossPlatform_TransactionId] ON [tbTransactionCrossPlatform] ([TransactionId] ,[CrossPlatformId] ) 

Create Index [IX_TransactionCrossPlatform_CrossPlatformId] ON [tbTransactionCrossPlatform] ([CrossPlatformId] ,[TransactionId] ) 

Create Index [IX_TransactionCrossPlatform_ServerId] ON [tbTransactionCrossPlatform] ([ServerId] ,[Status] ) 
where ServerId is not null

Create Index [IX_TransactionCrossPlatform_NextAttemptDateTime] ON [tbTransactionCrossPlatform] ([NextAttemptDateTime] ) 
where NextAttemptDateTime is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionCrossPlatform] add constraint FK_TransactionCrossPlatform_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

Alter table [tbTransactionCrossPlatform] add constraint FK_TransactionCrossPlatform_AccountCrossPlatform foreign key([AccountId]) references [tbAccountCrossPlatform] ([CrossPlatformId])  on update no action on delete no action

Alter table [tbTransactionCrossPlatform] add constraint FK_TransactionCrossPlatform_Server foreign key([ServerId]) references [tbServer] ([ServerId])  on update no action on delete no action

  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTransactionCrossPlatformItem]
(
	[TransactionCrossPlatformId] Uniqueidentifier NOT NULL,
	[SaleItemId] Uniqueidentifier NOT NULL,
	[Quantity] Smallint NOT NULL,
	[UnitPrice] Money NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionCrossPlatformItem
add constraint PK_TransactionCrossPlatformItem primary key ([TransactionCrossPlatformId],[SaleItemId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionCrossPlatformItem_SaleItemId] ON [tbTransactionCrossPlatformItem] ([SaleItemId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionCrossPlatformItem] add constraint FK_TransactionCrossPlatformItem_TransactionCrossPlatform foreign key([TransactionCrossPlatformId]) references [tbTransactionCrossPlatform] ([TransactionCrossPlatformId])  on update no action on delete no action

Alter table [tbTransactionCrossPlatformItem] add constraint FK_TransactionCrossPlatformItem_SaleItem foreign key([SaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action  
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.958</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add column ActionValueMax to tbPromoAction</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table [tbPromoAction]
add 
  [ActionValueMax] Money NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.957</SQLVERSION><RMTRACKLINK>SIT-3162</RMTRACKLINK><REASON>Refactor tbProductCrossSell</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table [tbProductCrossSell]
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbProductCrossSell]
(
	[ProductId] Uniqueidentifier NOT NULL,
	[CrossPlatformId] Uniqueidentifier NOT NULL,
	[CrossProductId] Varchar(50) NOT NULL,
	[CrossProductCode] Varchar(15) NULL,
	[CrossProductName] Nvarchar(50) NULL,
	[UnitPrice] Money NOT NULL
)
ALTER TABLE [tbProductCrossSell] ADD CONSTRAINT PK_ProductCrossSell PRIMARY KEY ([ProductId],[CrossPlatformId],[CrossProductId])
Create Index [IX_ProductCrossSell_CrossPlatformId] ON [tbProductCrossSell] ([CrossPlatformId]) 
Alter table [tbProductCrossSell] add constraint FK_ProductCrossSell_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 
Alter table [tbProductCrossSell] add constraint FK_ProductCrossSell_AccountCrossPlatform foreign key([CrossPlatformId]) references [tbAccountCrossPlatform] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.956</SQLVERSION><RMTRACKLINK>SIT-3183</RMTRACKLINK><REASON>Refactor tbTicketLocation into tbTicketTransaction</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbTicketLocation
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTicketTransaction]
(
	[TicketId] Uniqueidentifier NOT NULL,
	[TicketTransactionType] Tinyint NOT NULL,
	[TransactionId] Uniqueidentifier NOT NULL
 )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTicketTransaction ADD CONSTRAINT PK_TicketTransaction PRIMARY KEY (TicketId, TicketTransactionType)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketTransaction_TransactionId] ON [tbTicketTransaction] ([TransactionId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketTransaction] add constraint FK_TicketLocation_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketTransaction] add constraint FK_TicketTransaction_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.955</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields SessionToken and SessionData to tbSession</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSession
add 
  SessionToken varchar(50) NULL, 
  SessionData ntext NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.954</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbBiometric refactoring</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbBiometric DROP CONSTRAINT PK_Biometric
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbBiometric ADD CONSTRAINT PK_Biometric PRIMARY KEY (EntityId, BiometricSerial)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.953</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0..2] Change FK tbLoginAlias from tbAccount to tbLogin
[3..5] Change FK tbPasswordHistory from tbAccount to tbLogin
[6] Drop tbAccountLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLoginAlias drop constraint FK_LoginAlias_Account
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbLoginAlias
where AccountId not in (select AccountId from tbLogin)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLoginAlias] add constraint FK_LoginAlias_Login foreign key([AccountId]) references [tbLogin] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPasswordHistory drop constraint FK_PasswordHistory_Account
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbPasswordHistory
where AccountId not in (select AccountId from tbLogin)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPasswordHistory] add constraint FK_PasswordHistory_Login foreign key([AccountId]) references [tbLogin] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbAccountLink
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.952</SQLVERSION><RMTRACKLINK>SIT-3070</RMTRACKLINK><REASON>New XPI functionality (Cross Platform Integration)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCrossPlatformParam drop constraint FK_CrossPlatformParam_CrossPlatform
alter table tbCrossPlatform drop constraint FK_CrossPlatform_Workstation
drop table tbCrossPlatformParam
drop table tbCrossPlatform
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbAccountCrossPlatform]
(
	[AccountId] Uniqueidentifier NOT NULL,
	[WorkstationId] Uniqueidentifier NOT NULL,
	[CrossPlatformType] Smallint NOT NULL,
	[CrossPlatformStatus] Smallint NOT NULL,
	[CrossPlatformURL] Nvarchar(1000) NOT NULL,
	[CrossPlatformCode] Varchar(50) NOT NULL,
	[InboundURL] Nvarchar(1000) NOT NULL
) 
ALTER TABLE tbAccountCrossPlatform ADD CONSTRAINT PK_AccountCrossPlatform PRIMARY KEY (AccountId)
Create UNIQUE Index [UQ_AccountCrossPlatform_WorkstationId] ON [tbAccountCrossPlatform] ([WorkstationId] ) 
Create Index [IX_AccountCrossPlatform_Code] ON [tbAccountCrossPlatform] ([CrossPlatformCode] )
Alter table [tbAccountCrossPlatform] add constraint FK_AccountCrossPlatform_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
Alter table [tbAccountCrossPlatform] add constraint FK_AccountCrossPlatform_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbAccountCrossPlatformParam]
(
	[AccountId] Uniqueidentifier NOT NULL,
	[ParamName] Varchar(50) NOT NULL,
	[ParamValue] Ntext NOT NULL
) 
ALTER TABLE tbAccountCrossPlatformParam ADD CONSTRAINT PK_AccountCrossPlatformParam PRIMARY KEY (AccountId)
Create Index [IX_AccountCrossPlatformParam_ParamName] ON [tbAccountCrossPlatformParam] ([ParamName] ) 
Alter table [tbAccountCrossPlatformParam] add constraint FK_AccountCrossPlatformParam_AccountCrossPlatform  foreign key([AccountId]) references [tbAccountCrossPlatform] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbProductShare]
(
	[ProductId] Uniqueidentifier NOT NULL,
	[CrossPlatformId] Uniqueidentifier NOT NULL,
	[UnitPrice] Money NOT NULL
) 
ALTER TABLE [tbProductShare] ADD CONSTRAINT PK_ProductShare PRIMARY KEY ([ProductId],[CrossPlatformId])
Create Index [IX_PlatformShare_CrossPlatformId] ON [tbProductShare] ([CrossPlatformId] ) 
Alter table [tbProductShare] add constraint FK_ProductShare_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 
Alter table [tbProductShare] add constraint FK_ProductShare_AccountCrossPlatform foreign key([CrossPlatformId]) references [tbAccountCrossPlatform] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbProductCrossSell]
(
	[ProductId] Uniqueidentifier NOT NULL,
	[CrossPlatformId] Uniqueidentifier NOT NULL,
	[CrossPlatformCode] Varchar(50) NOT NULL,
	[UnitPrice] Money NOT NULL
)
ALTER TABLE [tbProductCrossSell] ADD CONSTRAINT PK_ProductCrossSell PRIMARY KEY ([ProductId],[CrossPlatformId],[CrossPlatformCode])
Create Index [IX_ProductCrossSell_CrossPlatformId] ON [tbProductCrossSell] ([CrossPlatformId] ) 
Alter table [tbProductCrossSell] add constraint FK_ProductCrossSell_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 
Alter table [tbProductCrossSell] add constraint FK_ProductCrossSell_AccountCrossPlatform foreign key([CrossPlatformId]) references [tbAccountCrossPlatform] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.951</SQLVERSION><RMTRACKLINK>SIT-3146</RMTRACKLINK><REASON>Dummy patch to fulfill tbEntitlement new fields starting from EntitlementData
Patch done in BLBO_DatabaseUpdate.</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>1.950</SQLVERSION><RMTRACKLINK>SIT-3075</RMTRACKLINK><REASON>Patch to set tbDocTemplate.MediaRfidOptionType=LkSNMediaRfidOptionType.ReadRfidWhenSupported</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbDocTemplate
set MediaRfidOptionType=1
where DocTemplateType=1 and MediaRfidOptionType is null 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Marco</ADDEDBY><SQLVERSION>1.949</SQLVERSION><RMTRACKLINK>SIT-3075</RMTRACKLINK><REASON>New tbDocTemplate.MediaRfidOptionType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
add MediaRfidOptionType smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.948</SQLVERSION><RMTRACKLINK>SIT-3146</RMTRACKLINK><REASON>Refactor tbEntitlement</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
drop column 
  VarExpRule, 
  VarExpQuantity,
  VarFirstUsageRule,
  VarFirstUsageQuantity,
  AdmDateFrom,
  AdmDateTo,
  AdmTimeFrom,
  AdmTimeTo
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEntitlement
add 
  VarExpRule Smallint null,
  VarExpQuantity Smallint null,
  VarFirstUsageRule Smallint null,
  VarFirstUsageQuantity Smallint null,
  AdmDateFrom date null,
  AdmDateTo date null,
  AdmTimeFrom datetime null,
  AdmTimeTo datetime null,
  AdmCalendarId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Entitlement_AdmCalendarId] ON [tbEntitlement] ([AdmCalendarId] ) 
where AdmCalendarId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbEntitlement] add constraint FK_Entitlement_Calendar foreign key([AdmCalendarId]) references [tbCalendar] ([CalendarId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbEntitlement
set AdmCalendarId=(select AdmCalendarId from tbProduct where ProductId=EntityId)
where EntityType=12
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbProduct
DROP CONSTRAINT FK_Product_AdmCalendar
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX tbProduct.IX_Product_AdmCalendarId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
drop column AdmCalendarId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.947</SQLVERSION><RMTRACKLINK>SIT-3146</RMTRACKLINK><REASON>Refactor tbProduct</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add 
  VarExpRule Smallint null,
  VarExpQuantity Smallint null,
  VarFirstUsageRule Smallint null,
  VarFirstUsageQuantity Smallint null,
  AdmDateFrom date null,
  AdmDateTo date null,
  AdmTimeFrom datetime null,
  AdmTimeTo datetime null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.946</SQLVERSION><RMTRACKLINK>SIT-3118</RMTRACKLINK><REASON>Remove tbVoucher.AmountCommitted
Add IX_Voucher_Exposure to tbVoucher</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbVoucher
drop column AmountCommitted
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Voucher_Exposure] ON [tbVoucher] ([AccountId] ,[VoucherStatus] ,[AmountMax] ) 
 INCLUDE (TotalAmount)
where VoucherStatus in (101, 302) and AmountMax is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.945</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tables
- tbConsAPI (0..3)
- tbConsServer (4..7)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbConsAPI]
(
	[ConsolidateType] Smallint NOT NULL,
	[FiscalDate] date NOT NULL,
	[DateTime] Smalldatetime NOT NULL,
	[Service] Varchar(25) NOT NULL,
	[Command] Varchar(50) NOT NULL,
	[ServerId] Smallint NOT NULL,
	[HitCount] Integer NOT NULL,
	[MinMS] Integer NOT NULL,
	[AvgMS] Integer NOT NULL,
	[MaxMS] Integer NOT NULL,
	[MaxDateTime] Datetime NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbConsAPI] 
ADD CONSTRAINT PK_ConsAPI Primary Key ([ConsolidateType],[FiscalDate],[DateTime],[Service],[Command],[ServerId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAPI_ServerId] ON [tbConsAPI] ([ServerId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsAPI] add constraint FK_ConsAPI_Server foreign key([ServerId]) references [tbServer] ([ServerId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbConsServer]
(
	[ConsolidateType] Smallint NOT NULL,
	[FiscalDate] date NOT NULL,
	[DateTime] Smalldatetime NOT NULL,
	[ServerId] Smallint NOT NULL,
	[CpuMin] Smallmoney NOT NULL,
	[CpuAvg] Smallmoney NOT NULL,
	[CpuMax] Smallmoney NOT NULL,
	[MemMin] Smallmoney NOT NULL,
	[MemAvg] Smallmoney NOT NULL,
	[MemMax] Smallmoney NOT NULL,
	[DskMin] Smallmoney NOT NULL,
	[DskAvg] Smallmoney NOT NULL,
	[DskMax] Smallmoney NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbConsServer] 
ADD CONSTRAINT PK_ConsServer Primary Key ([ConsolidateType],[FiscalDate],[DateTime],[ServerId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsServer_ServerId] ON [tbConsServer] ([ServerId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsServer] add constraint FK_ConsServer_Server foreign key([ServerId]) references [tbServer] ([ServerId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.944</SQLVERSION><RMTRACKLINK>SIT-</RMTRACKLINK><REASON>[0..2] New tbAccountFinance.TotalUncommitted
[3..5] New tbVoucher.AmountCommitted
[6..12] New table tbTransactionVoucher</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
add TotalUncommitted Money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccountFinance
set TotalUncommitted=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
alter column TotalUncommitted Money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbVoucher
add AmountCommitted money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbVoucher
set AmountCommitted=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbVoucher
alter column AmountCommitted money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTransactionVoucher]
(
	[TransactionId] Uniqueidentifier NOT NULL,
	[VoucherId] Uniqueidentifier NOT NULL,
	[AccountId] Uniqueidentifier NOT NULL,
	[CommittedAmount] Money NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbTransactionVoucher]
ADD CONSTRAINT PK_TransactionVoucher Primary Key ([TransactionId],[VoucherId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionVoucher_VoucherId] ON [tbTransactionVoucher] ([VoucherId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionVoucher_AccountId] ON [tbTransactionVoucher] ([AccountId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionVoucher] add constraint FK_TransactionVoucher_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionVoucher] add constraint FK_TransactionVoucher_Voucher foreign key([VoucherId]) references [tbVoucher] ([VoucherId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionVoucher] add constraint FK_TransactionVoucher_AccountFinance foreign key([AccountId]) references [tbAccountFinance] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.943</SQLVERSION><RMTRACKLINK>SIT-3106</RMTRACKLINK><REASON>Add tbSaleItemVoucher.Quantity</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItemVoucher
add Quantity tinyint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSaleItemVoucher
set Quantity=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemVoucher
alter column Quantity tinyint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.942</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Indexes creates during WDW POC</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_ConsQueue_ConsQueueType on tbConsQueue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsQueue_ConsQueueType] ON [tbConsQueue] ([ConsQueueType] ,[ConsQueueStatus] ,[QueueDateTime] ) 
 INCLUDE (EntityId,EntityType)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Upload_StatusPriorityType on tbUpload
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Upload_StatusPriorityType] ON [tbUpload] ([ServerId] ,[UploadStatus] ,[QueuePriority] ,[UploadType] ,[RequestDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if exists(select * from sys.indexes where name='IX_Performance_AcAreaDateTimeTo')
begin
  drop index IX_Performance_AcAreaDateTimeTo on tbPerformance
end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if exists(select * from sys.indexes where name='IX_Performance_EventAutoCreated')
begin
  drop index IX_Performance_EventAutoCreated on tbPerformance
end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Performance_AcAreaDateTimeTo] ON [tbPerformance] ([AccessAreaAccountId] ,[DateTimeTo] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Performance_EventAutoCreated] ON [tbPerformance] ([EventId] ,[AutoCreated] ,[DBDateTimeTo] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.941</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create missing indexes on foreign keys to tbAccount</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>if not exists(select * from sys.indexes where name='IX_Box_LocationAccountId')
begin
  Create Index [IX_Box_LocationAccountId] ON [tbBox] ([LocationAccountId] ,[FBoxDate] ) 
end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if not exists(select * from sys.indexes where name='IX_Box_UserAccountId')
begin
  Create Index [IX_Box_UserAccountId] ON [tbBox] ([UserAccountId] ,[FBoxDate] ) 
end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if not exists(select * from sys.indexes where name='IX_Workstation_LastUserAccountId')
begin
  Create Index [IX_Workstation_LastUserAccountId] ON [tbWorkstation] ([LastUserAccountId] ) 
end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if not exists(select * from sys.indexes where name='IX_Auth_LicenseId')
begin
  Create Index [IX_Auth_LicenseId] ON [tbAuth] ([LicenseId] )
end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if not exists(select * from sys.indexes where name='IX_Auth_WorkstationId')
begin
  Create Index [IX_Auth_WorkstationId] ON [tbAuth] ([WorkstationId] )
end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if not exists(select * from sys.indexes where name='IX_Auth_UserAccountId')
begin
  Create Index [IX_Auth_UserAccountId] ON [tbAuth] ([UserAccountId] ) 
end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if not exists(select * from sys.indexes where name='IX_TicketUsage_AccessAreaId')
begin
  Create Index [IX_TicketUsage_AccessAreaId] ON [tbTicketUsage] ([AccessAreaAccountId] ) 
end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if not exists(select * from sys.indexes where name='IX_Merchant_OpAreaId')
begin
  Create Index [IX_Merchant_OpAreaId] ON [tbMerchant] ([OperatingAreaId] ) 
end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if not exists(select * from sys.indexes where name='IX_Merchant_WorkstationId')
begin
  Create Index [IX_Merchant_WorkstationId] ON [tbMerchant] ([WorkstationId] )
end
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.940</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New table tbRateCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbRateCode]
(
	[RateCodeId] Uniqueidentifier NOT NULL,
	[RateCodeCode] Varchar(10) NOT NULL,
	[RateCodeName] Nvarchar(50) NOT NULL,
	[RateCodeColor] Varchar(7) NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbRateCode
ADD CONSTRAINT PK_RateCode PRIMARY KEY ([RateCodeId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_RateCode_Code] ON [tbRateCode] ([RateCodeCode] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbRateCode (RateCodeId, RateCodeCode, RateCodeName)
select TagId, TagName, TagName from tbTag where EntityType=1026
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbCalendarDetail
DROP CONSTRAINT FK_CalendarDetail_RateCode
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCalendarDetail] add constraint FK_CalendarDetail_RateCode foreign key([RateCodeId]) references [tbRateCode] ([RateCodeId])  on update no action on delete no action  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbProductPriceAdvance
DROP CONSTRAINT FK_ProductPriceAdvance_Tag
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbProductPriceAdvance add constraint FK_ProductPriceAdvance_RateCode foreign key([RateCodeId]) references [tbRateCode] ([RateCodeId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbTag where EntityType=1026
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.939</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactoring tbCalendarDetail</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCalendarDetail
add CalendarDate date null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbCalendarDetail
set CalendarDate=DATEFROMPARTS(Year, Month, Day)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCalendarDetail
alter column CalendarDate date not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbCalendarDetail
DROP CONSTRAINT PK_CalendarDetail
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCalendarDetail
drop column Year, Month, Day
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbCalendarDetail
ADD CONSTRAINT PK_CalendarDetail PRIMARY KEY (CalendarId, CalendarDate)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea M</ADDEDBY><SQLVERSION>1.938</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0..1] Refactor tbProductPriceAdvance.UQ_ProductPriceAdvance
[2..7] Refactor tbCalendarDetail</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP INDEX tbProductPriceAdvance.UQ_ProductPriceAdvance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ProductPriceAdvance] ON [tbProductPriceAdvance] ([ProductId] ,[PriorityOrder] ,[SaleChannelId] ,[PerformanceTypeId] ,[RateCodeId] ,[AdvanceDays] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbCalendarDetailTmp]
(
	[CalendarId] Uniqueidentifier NOT NULL,
	[Year] Smallint NOT NULL,
	[Month] Tinyint NOT NULL,
	[Day] Tinyint NOT NULL,
	[PerformanceTypeId] Uniqueidentifier NULL,
	[RateCodeId] Uniqueidentifier NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCalendarDetail] drop constraint PK_CalendarDetail
Alter table [tbCalendarDetailTmp] add constraint PK_CalendarDetail Primary Key ([CalendarId],[Year],[Month],[Day])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_CalendarDetail_PerformanceTypeId] ON [tbCalendarDetailTmp] ([PerformanceTypeId] ) 
where PerformanceTypeId is not null

Create Index [IX_CalendarDetail_RateCodeId] ON [tbCalendarDetailTmp] ([RateCodeId] ) 
where RateCodeId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCalendarDetail] drop constraint FK_CalendarDetail_Calendar
Alter table [tbCalendarDetailTmp] add constraint FK_CalendarDetail_Calendar foreign key([CalendarId]) references [tbCalendar] ([CalendarId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCalendarDetailTmp] add constraint FK_CalendarDetail_PerformanceType foreign key([PerformanceTypeId]) references [tbPerformanceType] ([PerformanceTypeId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCalendarDetailTmp] add constraint FK_CalendarDetail_RateCode foreign key([RateCodeId]) references [tbTag] ([TagId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea M</ADDEDBY><SQLVERSION>1.937</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0..0] New field tbPerformanceType.PerformanceTypeColor
[1..6] New fields tbProduct
[7..11] New fields tbProductPriceAdvance</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPerformanceType
add PerformanceTypeColor varchar(7) null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add AdmCalendarId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_AdmCalendar foreign key([AdmCalendarId]) references [tbCalendar] ([CalendarId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_AdmCalendarId] ON [tbProduct] ([AdmCalendarId] ) 
where AdmCalendarId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add ProductPriceAdvanceType Smallint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set ProductPriceAdvanceType=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column ProductPriceAdvanceType Smallint NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table 
  tbProductPriceAdvance
add 
  PerformanceTypeId Uniqueidentifier NULL,
  RateCodeId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductPriceAdvance_PerformanceTypeId] ON [tbProductPriceAdvance] ([PerformanceTypeId] ) 
where PerformanceTypeId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductPriceAdvance_RateCodeId] ON [tbProductPriceAdvance] ([RateCodeId] ) 
where RateCodeId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductPriceAdvance] add constraint FK_ProductPriceAdvance_PerformanceType foreign key([PerformanceTypeId]) references [tbPerformanceType] ([PerformanceTypeId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductPriceAdvance] add constraint FK_ProductPriceAdvance_Tag foreign key([RateCodeId]) references [tbTag] ([TagId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.936</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0..3] New table tbCrossPlatform
[4..6] New table tbCrossPlatformParam</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbCrossPlatform]
(
	[CrossPlatformId] Uniqueidentifier NOT NULL,
	[CrossPlatformType] Smallint NOT NULL,
	[CrossPlatformStatus] Smallint NOT NULL,
	[CrossPlatformURL] Nvarchar(1000) NOT NULL,
	[CrossPlatformCode] Varchar(50) NOT NULL,
        [InboundURL] Nvarchar(1000) NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCrossPlatform] add constraint PK_CrossPlatform Primary Key ([CrossPlatformId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_CrossPlatform_Code] ON [tbCrossPlatform] ([CrossPlatformCode] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCrossPlatform] add constraint FK_CrossPlatform_Workstation foreign key([CrossPlatformId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbCrossPlatformParam]
(
	[CrossPlatformId] Uniqueidentifier NOT NULL,
	[ParamName] Varchar(50) NOT NULL,
	[ParamValue] Ntext NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCrossPlatformParam] add constraint PK_CrossPlatformParam Primary Key ([CrossPlatformId],[ParamName])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCrossPlatformParam] add constraint FK_CrossPlatformParam_CrossPlatform foreign key([CrossPlatformId]) references [tbCrossPlatform] ([CrossPlatformId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.935</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbServerParam and tbServerStartUp</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbServerStartUp where ServerId not in (select ServerId from tbServer)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbServerStartUp] add constraint FK_ServerStartUp_Server foreign key([ServerId]) references [tbServer] ([ServerId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbServerParam where ServerId not in (select ServerId from tbServer)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbServerParam] add constraint FK_ServerParam_Server foreign key([ServerId]) references [tbServer] ([ServerId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbServerParam
DROP CONSTRAINT PK_ServerParam   
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbServerParam
add ParamType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbServerParam
set ParamType=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbServerParam
alter column ParamType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbServerParam] add constraint PK_ServerParam Primary Key ([ServerId],[ParamType],[ParamName])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbServerParam.IX_tbServer_LastUpdate', 'IX_ServerParam_LastUpdate', 'INDEX'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.934</SQLVERSION><RMTRACKLINK>SIT-2971</RMTRACKLINK><REASON>Add tbPerformance.DeltaPriceType and tbPerformance.DeltaPriceValue</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPerformance
add 
  DeltaPriceType Tinyint NULL, 
  DeltaPriceValue Money NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.933</SQLVERSION><RMTRACKLINK>SIT-2976</RMTRACKLINK><REASON>[0..2, 31] Refactor tbCommision into tbCommission

[3..8, 28] Refactor tbCommisionDetail into tbCommissionDetail

[9..15] Refactor tbAccountFinance.CommisionId into tbAccountFinance.CommissionId 

[16..29] Refactor tbTransactionCommision into tbTransactionCommission</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbCommission]
(
	[CommissionId] Uniqueidentifier NOT NULL,
	[CommissionCode] Varchar(15) NOT NULL,
	[CommissionName] Nvarchar(50) NOT NULL,
	[Enabled] Bit NOT NULL,
	[PeriodType] Smallint NOT NULL,
	[IsQuantity] Bit NOT NULL
)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCommission] add constraint PK_Commission Primary Key ([CommissionId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbCommission
select * from tbCommision

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbCommissionDetail]
(
	[CommissionId] Uniqueidentifier NOT NULL,
	[CommissionSequence] Smallint NOT NULL,
	[FinanceGroupTagId] Uniqueidentifier NULL,
	[Percentage] Money NOT NULL,
	[QuantityFrom] Integer NULL,
	[QuantityTo] Integer NULL,
	[AmountFrom] Money NULL,
	[AmountTo] Money NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCommissionDetail] add constraint PK_CommissionDetail Primary Key ([CommissionId],[CommissionSequence]) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCommissionDetail] add constraint FK_CommissionDetail_Commission foreign key([CommissionId]) references [tbCommission] ([CommissionId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCommissionDetail] add constraint FK_CommissionDetail_Tag foreign key([FinanceGroupTagId]) references [tbTag] ([TagId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_CommissionDetail_FinanceGroupTagId] ON [tbCommissionDetail] ([FinanceGroupTagId] ) where FinanceGroupTagId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbCommissionDetail
select * from tbCommisionDetail
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
add CommissionId uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccountFinance
set CommissionId=CommisionId 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountFinance] add constraint FK_AccountFinance_Commission foreign key([CommissionId]) references [tbCommission] ([CommissionId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccountFinance_CommissionId] ON [tbAccountFinance] ([CommissionId] ) 
where CommissionId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAccountFinance
DROP CONSTRAINT FK_AccountFinance_Commision
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index tbAccountFinance.IX_AccountFinance_CommisionId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
drop column CommisionId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTransactionCommission]
(
	[TransactionId] Uniqueidentifier NOT NULL,
	[SaleItemId] Uniqueidentifier NOT NULL,
	[AccountId] Uniqueidentifier NOT NULL,
	[CommissionId] Uniqueidentifier NOT NULL,
	[FinanceGroupTagId] Uniqueidentifier NOT NULL,
	[FiscalDate] date NOT NULL,
	[Quantity] Smallint NOT NULL,
	[CommissionAmount] Money NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionCommission] add constraint PK_TransactionCommission Primary Key ([TransactionId],[SaleItemId],[AccountId],[CommissionId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionCommission_SaleItemId] ON [tbTransactionCommission] ([SaleItemId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionCommission_CommisionId] ON [tbTransactionCommission] ([CommissionId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionCommission_AccountId] ON [tbTransactionCommission] ([AccountId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionCommission_FinanceGroupTagId] ON [tbTransactionCommission] ([FinanceGroupTagId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionCommission_FiscalDate] ON [tbTransactionCommission] ([FiscalDate] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionCommission] add constraint FK_TransactionCommission_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionCommission] add constraint FK_TransactionCommission_SaleItem foreign key([SaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionCommission] add constraint FK_TransactionCommission_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionCommission] add constraint FK_TransactionCommission_Commission foreign key([CommissionId]) references [tbCommission] ([CommissionId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionCommission] add constraint FK_TransactionCommission_Tag foreign key([FinanceGroupTagId]) references [tbTag] ([TagId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into 
  tbTransactionCommission (TransactionId, SaleItemId, AccountId, CommissionId, FinanceGroupTagId, FiscalDate, Quantity, CommissionAmount)
select TransactionId, SaleItemId, AccountId, CommisionId, FinanceGroupTagId, FiscalDate, Quantity, CommisionAmount from tbTransactionCommision
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbTransactionCommision
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbCommisionDetail
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbCommision
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.932</SQLVERSION><RMTRACKLINK>2938</RMTRACKLINK><REASON>[0..1] New tbProduct.BackgroundColor and tbProduct.ForegroundColor
[2..6] New tbTicketLocation table</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add BackgroundColor varchar(6) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add ForegroundColor varchar(6) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTicketLocation]
(
	[TicketId] Uniqueidentifier NOT NULL,
	[TicketLocationType] Tinyint NOT NULL,
	[LocationId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbTicketLocation] ADD CONSTRAINT PK_TicketLocation Primary Key ([TicketId],[TicketLocationType])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketLocation_LocationId] ON [tbTicketLocation] ([LocationId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketLocation] add constraint FK_TicketLocation_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketLocation] add constraint FK_TicketLocation_Location foreign key([LocationId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.931</SQLVERSION><RMTRACKLINK>SIT-2737</RMTRACKLINK><REASON>New tbProduct.LocationId field</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add LocationId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_LocationId] ON [tbProduct] ([LocationId] ) 
where LocationId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_Location foreign key([LocationId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.930</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbTransaction table for "real" dates/times</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbTransactionDate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_Transaction_TDSSN on tbTransaction
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
add
  SerialFiscalDate date null,  
  SerialDateTime smalldatetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTransaction
set
  SerialFiscalDate=TransactionFiscalDate,  
  SerialDateTime=TransactionDateTime
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column SerialFiscalDate date not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column SerialDateTime smalldatetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Transaction_TDSSN] ON [tbTransaction] ([SerialFiscalDate] ,[LicenseId] ,[StationSerial] ,[TransactionSerial] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Transaction_SerialFiscalDate] ON [tbTransaction] ([SerialFiscalDate] ,[SerialDateTime], [TransactionSerial] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.929</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Fields rename into tbSaleItemDetail</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItemDetail
drop column ExpDateFrom
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemDetail
drop column ExpDateTo
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemDetail
add ValidDateFrom date null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemDetail
add ValidDateTo date null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.928</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbTransactionDate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_TransactionDate_FiscalDate on tbTransactionDate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionDate
drop column TransactionFiscalDate 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionDate
add TransactionFiscalDate date not null

 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionDate_FiscalDate] ON [tbTransactionDate] ([TransactionFiscalDate] ,[TransactionDateTime] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.927</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTransactionDate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTransactionDate]
(
	[TransactionId] Uniqueidentifier NOT NULL,
	[TransactionFiscalDate] Binary(3) NOT NULL,
	[TransactionDateTime] Smalldatetime NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbTransactionDate] ADD CONSTRAINT PK_TransactionDate PRIMARY KEY ([TransactionId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionDate_FiscalDate] ON [tbTransactionDate] ([TransactionFiscalDate] ,[TransactionDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionDate] add constraint FK_TransactionDate_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.926</SQLVERSION><RMTRACKLINK>SIT-2871</RMTRACKLINK><REASON>New fields to tbSaleItemDetail</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItemDetail
add ExpDateFrom date null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemDetail
add ExpDateTo date null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemDetail
add FirstUsageDateFrom date null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemDetail
add FirstUsageDateTo date null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.925</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbOpArea2AccessArea</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbOpArea2AccessArea]
(
	[OpAreaId] Uniqueidentifier NOT NULL,
	[AccessAreaId] Uniqueidentifier NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbOpArea2AccessArea] ADD CONSTRAINT PK_OpArea2AccessArea PRIMARY KEY ([OpAreaId],[AccessAreaId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OpArea2AccessArea_AccessAreaId] ON [tbOpArea2AccessArea] ([AccessAreaId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOpArea2AccessArea] add constraint FK_OpArea2AccessArea_OpArea foreign key([OpAreaId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOpArea2AccessArea] add constraint FK_OpArea2AccessArea_AccessArea foreign key([AccessAreaId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.924</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Create table tbCryptoKey
- Create field tbMetaData.CryptoKey
- Create field tbMetaField.Encrypted</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbCryptoKey]
(
	[CryptoKeyId] uniqueidentifier NOT NULL,
	[EncryptedKey] Nvarchar(1000) NOT NULL,
	[LastChangeDate] date NOT NULL,
	[Deprecated] Bit NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbCryptoKey] ADD CONSTRAINT PK_CryptoKey PRIMARY KEY ([CryptoKeyId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMetaData
add CryptoKeyId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMetaData] add constraint FK_MetaData_CryptoKey foreign key([CryptoKeyId]) references [tbCryptoKey] ([CryptoKeyId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_MetaData_CryptoKeyId] ON [tbMetaData] ([CryptoKeyId] ) 
where CryptoKeyId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMetaField
add Encrypted bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbMetaField
set Encrypted=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMetaField
alter column Encrypted bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.923</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Spread all tbAccountDetail fields into tbMetaData</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbMetaData
where
  EntityType in (1, 5, 6, 15, 17) and
  MetaFieldId in (
    select MetaFieldId
	from tbMetaField
	where FieldType in (1, 3, 31, 6, 10, 8, 54, 9, 11, 12, 13, 15, 14, 21, 58)
  )

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaData (MetaFieldId, EntityId, EntityType, ShortValue)
select 
  (select MetaFieldId from tbMetaField where FieldType=1),
  A.AccountId, 
  A.EntityType,
  AD.FirstName
from 
  tbAccountDetail AD inner join
  tbAccount A on A.AccountId=AD.AccountId
where 
  A.EntityType in (1, 5, 6, 15, 17) and
  AD.FirstName is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaData (MetaFieldId, EntityId, EntityType, ShortValue)
select 
  (select MetaFieldId from tbMetaField where FieldType=3),
  A.AccountId, 
  A.EntityType,
  AD.LastName
from 
  tbAccountDetail AD inner join
  tbAccount A on A.AccountId=AD.AccountId
where  
  A.EntityType in (1, 5, 6, 15, 17) and
  AD.LastName is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaData (MetaFieldId, EntityId, EntityType, ShortValue)
select 
  (select MetaFieldId from tbMetaField where FieldType=31),
  A.AccountId, 
  A.EntityType,
  AD.CompanyName
from 
  tbAccountDetail AD inner join
  tbAccount A on A.AccountId=AD.AccountId
where  
  A.EntityType in (1, 5, 6, 15, 17) and
  AD.CompanyName is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaData (MetaFieldId, EntityId, EntityType, ShortValue)
select 
  (select MetaFieldId from tbMetaField where FieldType=6),
  A.AccountId, 
  A.EntityType,
  AD.Address
from 
  tbAccountDetail AD inner join
  tbAccount A on A.AccountId=AD.AccountId
where  
  A.EntityType in (1, 5, 6, 15, 17) and
  AD.Address is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaData (MetaFieldId, EntityId, EntityType, ShortValue)
select 
  (select MetaFieldId from tbMetaField where FieldType=10),
  A.AccountId, 
  A.EntityType,
  AD.ZipCode
from 
  tbAccountDetail AD inner join
  tbAccount A on A.AccountId=AD.AccountId
where  
  A.EntityType in (1, 5, 6, 15, 17) and
  AD.ZipCode is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaData (MetaFieldId, EntityId, EntityType, ShortValue)
select 
  (select MetaFieldId from tbMetaField where FieldType=8),
  A.AccountId, 
  A.EntityType,
  AD.City
from 
  tbAccountDetail AD inner join
  tbAccount A on A.AccountId=AD.AccountId
where  
  A.EntityType in (1, 5, 6, 15, 17) and
  AD.City is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaData (MetaFieldId, EntityId, EntityType, ShortValue)
select 
  (select MetaFieldId from tbMetaField where FieldType=54),
  A.AccountId, 
  A.EntityType,
  AD.Province
from 
  tbAccountDetail AD inner join
  tbAccount A on A.AccountId=AD.AccountId
where  
  A.EntityType in (1, 5, 6, 15, 17) and
  AD.Province is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaData (MetaFieldId, EntityId, EntityType, ShortValue)
select 
  (select MetaFieldId from tbMetaField where FieldType=9),
  A.AccountId, 
  A.EntityType,
  AD.State
from 
  tbAccountDetail AD inner join
  tbAccount A on A.AccountId=AD.AccountId
where  
  A.EntityType in (1, 5, 6, 15, 17) and
  AD.State is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaData (MetaFieldId, EntityId, EntityType, ShortValue)
select 
  (select MetaFieldId from tbMetaField where FieldType=11),
  A.AccountId, 
  A.EntityType,
  AD.Country
from 
  tbAccountDetail AD inner join
  tbAccount A on A.AccountId=AD.AccountId
where  
  A.EntityType in (1, 5, 6, 15, 17) and
  AD.Country is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaData (MetaFieldId, EntityId, EntityType, ShortValue)
select 
  (select MetaFieldId from tbMetaField where FieldType=12),
  A.AccountId, 
  A.EntityType,
  AD.HomePhone
from 
  tbAccountDetail AD inner join
  tbAccount A on A.AccountId=AD.AccountId
where  
  A.EntityType in (1, 5, 6, 15, 17) and
  AD.HomePhone is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaData (MetaFieldId, EntityId, EntityType, ShortValue)
select 
  (select MetaFieldId from tbMetaField where FieldType=13),
  A.AccountId, 
  A.EntityType,
  AD.BusinessPhone
from 
  tbAccountDetail AD inner join
  tbAccount A on A.AccountId=AD.AccountId
where  
  A.EntityType in (1, 5, 6, 15, 17) and
  AD.BusinessPhone is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaData (MetaFieldId, EntityId, EntityType, ShortValue)
select 
  (select MetaFieldId from tbMetaField where FieldType=15),
  A.AccountId, 
  A.EntityType,
  AD.MobilePhone
from 
  tbAccountDetail AD inner join
  tbAccount A on A.AccountId=AD.AccountId
where  
  A.EntityType in (1, 5, 6, 15, 17) and
  AD.MobilePhone is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaData (MetaFieldId, EntityId, EntityType, ShortValue)
select 
  (select MetaFieldId from tbMetaField where FieldType=14),
  A.AccountId, 
  A.EntityType,
  AD.Fax
from 
  tbAccountDetail AD inner join
  tbAccount A on A.AccountId=AD.AccountId
where  
  A.EntityType in (1, 5, 6, 15, 17) and
  AD.Fax is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaData (MetaFieldId, EntityId, EntityType, ShortValue)
select 
  (select MetaFieldId from tbMetaField where FieldType=21),
  A.AccountId, 
  A.EntityType,
  AD.EmailAddress
from 
  tbAccountDetail AD inner join
  tbAccount A on A.AccountId=AD.AccountId
where  
  A.EntityType in (1, 5, 6, 15, 17) and
  AD.EmailAddress is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaData (MetaFieldId, EntityId, EntityType, ShortValue)
select 
  (select MetaFieldId from tbMetaField where FieldType=58),
  A.AccountId, 
  A.EntityType,
  AD.NickName
from 
  tbAccountDetail AD inner join
  tbAccount A on A.AccountId=AD.AccountId
where  
  A.EntityType in (1, 5, 6, 15, 17) and
  AD.NickName is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.922</SQLVERSION><RMTRACKLINK>SIT-2845</RMTRACKLINK><REASON>New tables tbLedgerRuleTemplate and tbLedgerRuleTemplate2Entity</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbLedgerRuleTemplate]
(
	[LedgerRuleTemplateId] Uniqueidentifier NOT NULL,
	[LedgerRuleTemplateCode] Varchar(15) NOT NULL,
	[LedgerRuleTemplateName] Nvarchar(50) NOT NULL,
	[Enabled] Bit NOT NULL
 )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbLedgerRuleTemplate] ADD CONSTRAINT PK_LedgerRuleTemplate PRIMARY KEY ([LedgerRuleTemplateId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbLedgerRuleTemplate2Entity]
(
	[LedgerRuleTemplateId] Uniqueidentifier NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbLedgerRuleTemplate2Entity] ADD CONSTRAINT PK_LedgerRuleTemplate2Entity PRIMARY KEY ([LedgerRuleTemplateId],[EntityId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerRuleTemplate2Entity_EntityId] ON [tbLedgerRuleTemplate2Entity] ([EntityId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRuleTemplate2Entity] add constraint FK_LedgerRuleTemplate2Entity_LedgerRuleTemplate foreign key([LedgerRuleTemplateId]) references [tbLedgerRuleTemplate] ([LedgerRuleTemplateId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.921</SQLVERSION><RMTRACKLINK>SIT-2839</RMTRACKLINK><REASON>New field tbBoxDeposit.SupAccountId
New indexes on tbBoxDeposit FKs</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbBoxDeposit
add SupAccountId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBoxDeposit] add constraint FK_BoxDeposit_SupAccount foreign key([SupAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_BoxDeposit_BoxId] ON [tbBoxDeposit] ([BoxId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_BoxDeposit_WorkstationId] ON [tbBoxDeposit] ([WorkstationId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_BoxDeposit_UserAccountId] ON [tbBoxDeposit] ([UserAccountId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_BoxDeposit_SupAccountId] ON [tbBoxDeposit] ([SupAccountId] ) where SupAccountId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.920</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Fix error ""Unable to find lookup value 0 for table Price Value Type"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbProductPrice
set PriceValueType=1
where PriceValueType=0
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.919</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_PaymentCard_AuthorizationCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name='IX_PaymentCard_AuthorizationCode' AND object_id=OBJECT_ID('tbPaymentCard'))
BEGIN
  Create Index [IX_PaymentCard_AuthorizationCode] ON [tbPaymentCard] ([AuthorizationCode]) where AuthorizationCode is not null
END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.918</SQLVERSION><RMTRACKLINK>SIT-2747</RMTRACKLINK><REASON>New field tbVoucher.PartiallyRedeemable</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbVoucher
add PartiallyRedeemable bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbVoucher
set PartiallyRedeemable=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbVoucher
alter column PartiallyRedeemable bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.917</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbUserFilter</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbUserFilter]
(
	[UserAccountId] Uniqueidentifier NOT NULL,
	[UserFilterType] Smallint NOT NULL,
	[FilterData] Ntext NOT NULL,
	[LastUpdate] Datetime NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbUserFilter] ADD CONSTRAINT PK_UserFilter PRIMARY KEY ([UserAccountId],[UserFilterType])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_UserFilter_LastUpdate] ON [tbUserFilter] ([LastUpdate] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbUserFilter] add constraint FK_UserFilter_Account foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.916</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTicketUsage.UsageFiscalDate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add UsageFiscalDate date null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketUsage
set UsageFiscalDate=(case when DatePart(hour, UsageDateTime) &lt; 5 then DateAdd(day, -1, Cast(UsageDateTime as date)) else Cast(UsageDateTime as date) end)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
alter column UsageFiscalDate date not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsage_UsageFiscalDate] ON [tbTicketUsage] ([UsageFiscalDate] ,[UsageDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.915</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New filed tbLedgerRule.IncludeUpgradedProductsUsages</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
add IncludeUpgradedProductsUsages bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerRule
set IncludeUpgradedProductsUsages=1

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
alter column IncludeUpgradedProductsUsages bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.914</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add foreign key to tbPortfolioSlot</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbPortfolioSlot
where PortfolioId not in (select TicketMediaMatchId from tbTicketMediaMatch)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if NOT EXISTS (select
     name
   from
     sys.foreign_keys
   where
     name = 'FK_PortfolioSlot_TicketMediaMatch'
  ) 
  Alter table [tbPortfolioSlot] add constraint FK_PortfolioSlot_TicketMediaMatch foreign key([PortfolioId]) references [tbTicketMediaMatch] ([TicketMediaMatchId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.913</SQLVERSION><RMTRACKLINK>SIT-2566</RMTRACKLINK><REASON>New table tbTicketRenew</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTicketRenew]
(
	[TicketId] Uniqueidentifier NOT NULL,
	[SourceTicketId] Uniqueidentifier NOT NULL,
	[RenewStartDate] date NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbTicketRenew] ADD CONSTRAINT PK_TicketRenew PRIMARY KEY ([TicketId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketRenew_SourceTicketId] ON [tbTicketRenew] ([SourceTicketId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketRenew] add constraint FK_TicketRenew_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketRenew] add constraint FK_TicketRenew_SourceTicket  foreign key([SourceTicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbTicketRenew (TicketId, SourceTicketId, RenewStartDate)
select 
  EL.DstEntityId,
  EL.SrcEntityId,
  T.ValidDateFrom
from
  tbEntityLink EL inner join
  tbTicket T on T.TicketId=EL.DstEntityId
where 
  EL.EntityLinkType=5
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbEntityLink where EntityLinkType=5
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.912</SQLVERSION><RMTRACKLINK>SIT-2649</RMTRACKLINK><REASON>Refactor tbProduct2DocTemplate
Refactor tbProduct</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProduct2DocTemplateTemp]
(
	[ProductId] Uniqueidentifier NOT NULL,
	[ProductTemplateType] Smallint NOT NULL,
	[Serial] Integer NOT NULL,
	[DocTemplateId] Uniqueidentifier NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProduct2DocTemplateTemp (ProductId, ProductTemplateType, Serial, DocTemplateId)
select
  ProductId,
  7,
  ROW_NUMBER () OVER (partition by ProductId Order by ProductId),
  DocTemplateId
from 
  tbProduct2DocTemplate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProduct2DocTemplateTemp (ProductId, ProductTemplateType, Serial, DocTemplateId)
select
  ProductId,
  1,
  1,
  POS_DocTemplateId
from 
  tbProduct
where
  (POS_DocTemplateId is not null or POS_AllowPrint=1)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProduct2DocTemplateTemp (ProductId, ProductTemplateType, Serial, DocTemplateId)
select
  ProductId,
  2,
  1,
  CLC_DocTemplateId
from 
  tbProduct
where
  (CLC_DocTemplateId is not null or CLC_AllowPrint=1)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProduct2DocTemplateTemp (ProductId, ProductTemplateType, Serial, DocTemplateId)
select
  ProductId,
  3,
  1,
  B2B_DocTemplateId
from 
  tbProduct
where
  (B2B_DocTemplateId is not null or B2B_AllowPrint=1)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProduct2DocTemplateTemp (ProductId, ProductTemplateType, Serial, DocTemplateId)
select
  ProductId,
  4,
  1,
  B2C_DocTemplateId
from 
  tbProduct
where
  (B2C_DocTemplateId is not null or B2C_AllowPrint=1)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProduct2DocTemplateTemp (ProductId, ProductTemplateType, Serial, DocTemplateId)
select
  ProductId,
  8,
  1,
  AutoGenDocTemplateId
from 
  tbProduct
where
  AutoGenDocTemplateId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table [tbProduct2DocTemplate]
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbProduct2DocTemplate]
(
	[ProductId] Uniqueidentifier NOT NULL,
	[ProductTemplateType] Smallint NOT NULL,
	[Serial] Integer NOT NULL,
	[DocTemplateId] Uniqueidentifier NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbProduct2DocTemplate] ADD CONSTRAINT PK_Product2DocTemplate PRIMARY KEY ([ProductId], [ProductTemplateType], [Serial])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product2DocTemplate_DocTemplateId] ON [tbProduct2DocTemplate] ([DocTemplateId] ) where DocTemplateId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbProduct2DocTemplate] ADD CONSTRAINT FK_Product2DocTemplate_Product FOREIGN KEY ([ProductId]) REFERENCES tbProduct([ProductId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbProduct2DocTemplate] ADD CONSTRAINT FK_Product2DocTemplate_DocTemplate FOREIGN KEY ([DocTemplateId]) REFERENCES tbDocTemplate([DocTemplateId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProduct2DocTemplate 
  select 
    ProductId,
	ProductTemplateType,
	Serial,
	DocTemplateId
   from tbProduct2DocTemplateTemp
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbProduct] DROP CONSTRAINT FK_Product_POS_DocTemplate
ALTER TABLE [tbProduct] DROP CONSTRAINT FK_Product_CLC_DocTemplate
ALTER TABLE [tbProduct] DROP CONSTRAINT FK_Product_B2B_DocTemplate
ALTER TABLE [tbProduct] DROP CONSTRAINT FK_Product_B2C_DocTemplate
ALTER TABLE [tbProduct] DROP CONSTRAINT FK_Product_DocTemplate_AutoGenDocTemplateId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX tbProduct.IX_Product_POS_DocTemplateId
DROP INDEX tbProduct.IX_Product_CLC_DocTemplateId
DROP INDEX tbProduct.IX_Product_B2B_DocTemplateId
DROP INDEX tbProduct.IX_Product_B2C_DocTemplateId
DROP INDEX tbProduct.IX_Product_AutoGenDocTemplateId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct drop column POS_DocTemplateId
alter table tbProduct drop column CLC_DocTemplateId
alter table tbProduct drop column B2B_DocTemplateId
alter table tbProduct drop column B2C_DocTemplateId
alter table tbProduct drop column AutoGenDocTemplateId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct add MOB_AllowPrint bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct set MOB_AllowPrint=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct alter column MOB_AllowPrint bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table [tbProduct2DocTemplateTemp]
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.911</SQLVERSION><RMTRACKLINK>SIT-2655</RMTRACKLINK><REASON>Dummy patch to adjust fill tbTaxProfile and tbTaxProfile2Tax</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.910</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbProductFlag</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProductFlag]
(
	[ProductId] Uniqueidentifier NOT NULL,
	[ProductFlag] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductFlag] add constraint PK_ProductFlag Primary Key ([ProductId],[ProductFlag])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductFlag] add constraint FK_ProductFlag_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProductFlag (ProductId, ProductFlag)
select ProductId, 1
from tbProduct
where TrackInventory=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProductFlag (ProductId, ProductFlag)
select ProductId, 2
from tbProduct
where IgnoreEncodedEntitlements=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProductFlag (ProductId, ProductFlag)
select ProductId, 3
from tbProduct
where WritePerformanceAccountId=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProductFlag (ProductId, ProductFlag)
select ProductId, 4
from tbProduct
where VariableDescription=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProductFlag (ProductId, ProductFlag)
select ProductId, 5
from tbProduct
where HidePriceVisibility=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProductFlag (ProductId, ProductFlag)
select ProductId, 6
from tbProduct
where Membership=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProductFlag (ProductId, ProductFlag)
select ProductId, 7
from tbProduct
where RestrictOpenOrder=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProductFlag (ProductId, ProductFlag)
select ProductId, 8
from tbProduct
where ForceMediaGeneration=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProductFlag (ProductId, ProductFlag)
select ProductId, 9
from tbProduct
where MediaExclusiveUse=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProductFlag (ProductId, ProductFlag)
select ProductId, 10
from tbProduct
where RequireAccount=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProductFlag (ProductId, ProductFlag)
select ProductId, 11
from tbProduct
where BiometricEnrollOnPOS=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProductFlag (ProductId, ProductFlag)
select ProductId, 12
from tbProduct
where Refundable=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProductFlag (ProductId, ProductFlag)
select ProductId, 13
from tbProduct
where Upgradable=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProductFlag (ProductId, ProductFlag)
select ProductId, 14
from tbProduct
where Downgradable=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
drop column 
  TrackInventory,
  IgnoreEncodedEntitlements,
  WritePerformanceAccountId,
  VariableDescription,
  HidePriceVisibility,
  Membership,
  RestrictOpenOrder,
  ForceMediaGeneration,
  MediaExclusiveUse,
  RequireAccount,
  BiometricEnrollOnPOS,
  Refundable,
  Upgradable,
  Downgradable

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.909</SQLVERSION><RMTRACKLINK>SIT-2655</RMTRACKLINK><REASON>[0..1] New table tbTaxProfile
[2..6] New table tbTaxProfile2Tax
[7..9] New filed tbProduct.TaxProfileId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTaxProfile]
(
	[TaxProfileId] Uniqueidentifier NOT NULL,
	[TaxProfileCode] Varchar(10) NOT NULL,
	[TaxProfileName] Nvarchar(50) NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTaxProfile] add constraint PK_TaxProfile Primary Key ([TaxProfileId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTaxProfile2Tax]
(
	[TaxProfileId] Uniqueidentifier NOT NULL,
	[TaxId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTaxProfile2Tax] add constraint PK_TaxProfile2Tax Primary Key ([TaxProfileId], [TaxId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TaxProfile2Tax_TaxId] ON [tbTaxProfile2Tax] ([TaxId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTaxProfile2Tax] add constraint FK_TaxProfile2Tax_TaxProfile foreign key([TaxProfileId]) references [tbTaxProfile] ([TaxProfileId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTaxProfile2Tax] add constraint FK_TaxProfile2Tax_Tax foreign key([TaxId]) references [tbTax] ([TaxId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add TaxProfileId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_TaxProfile foreign key([TaxProfileId]) references [tbTaxProfile] ([TaxProfileId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_TaxProfileId] ON [tbProduct] ([TaxProfileId] ) 
where TaxProfileId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.908</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create translation label for report "Transactin products export"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbTranslate where LabelKey='@Stats.TrnTicketsExp'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbTranslate (LangISO, LabelKey, LabelValue) values ('000', '@Stats.TrnTicketsExp', 'Transaction products export')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccount
set EntityType=90 
where EntityType=89
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.907</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create field tbSaleItemDetail.SubItem</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItemDetail
add SubItem bit null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.906</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop field tbPromoRule.MaxItemCount</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPromoRule
drop column MaxItemCount
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.905</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbPromoRule.MaxItemCount</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPromoRule
add MaxItemCount Integer NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.904</SQLVERSION><RMTRACKLINK>SIT-2601</RMTRACKLINK><REASON>[0..1] Refactor tbFinanceGroupLinkHistory PK
[2..3] Refactor tbTransactionCommision PK
[4] New filed tbTransactionCommision.Quantity</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbFinanceGroupLinkHistory DROP CONSTRAINT PK_FinanceGroupLinkHistory
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbFinanceGroupLinkHistory] add constraint PK_FinanceGroupLinkHistory Primary Key ([FinanceGroupTagId],[ChangeDateTime])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionCommision DROP CONSTRAINT PK_TransactionCommision
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionCommision] add constraint PK_TransactionCommision Primary Key ([TransactionId],[SaleItemId],[AccountId],[CommisionId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionCommision
add Quantity smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.903</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor table tbLog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLog drop constraint FK_Log_Workstation
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLog drop constraint FK_Log_SourceWorkstation
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLog drop constraint FK_Log_SourceUserAccount
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Log_WorkstationId on tbLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Log_SourceWorkstationId on tbLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Log_SourceUserAccountId on tbLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLog
drop column WorkstationId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbLog.SourceWorkstationId',
    @newname = 'WorkstationId',
    @objtype = 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbLog.SourceUserAccountId',
    @newname = 'UserAccountId',
    @objtype = 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Log_WorkstationId] ON [tbLog] ([WorkstationId] ) 
where WorkstationId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Log_UserAccountId] ON [tbLog] ([UserAccountId] ) 
where UserAccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLog] add constraint FK_Log_UserAccount foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLog] add constraint FK_Log_SourceWorkstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.902</SQLVERSION><RMTRACKLINK>SIT-2601</RMTRACKLINK><REASON>[0..0] - new field tbCommision
[1..3] - new field tbAccountFinance
[4..10] - new table tbConsAccountSale
[11..21] - new table tbTransactionCommision
[22..24] - new table tbFinanceGroupLinkHistory</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCommision
add IsQuantity bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
add CommisionId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountFinance] add constraint FK_AccountFinance_Commision foreign key([CommisionId]) references [tbCommision] ([CommisionId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccountFinance_CommisionId] ON [tbAccountFinance] ([CommisionId] ) where CommisionId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbConsAccountSale]
(
	[FiscalDate] date NOT NULL,
	[AccountId] Uniqueidentifier NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
	[OptionSetId] Uniqueidentifier NOT NULL,
	[TotalAmount] Money NOT NULL,
	[TotalQuantity] Integer NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsAccountSale] add constraint PK_ConsAccountSale Primary Key ([FiscalDate],[AccountId],[ProductId],[OptionSetId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAccountSale_AccountId] ON [tbConsAccountSale] ([AccountId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAccountSale_ProductId] ON [tbConsAccountSale] ([ProductId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAccountSale_OptionSetId] ON [tbConsAccountSale] ([OptionSetId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsAccountSale] add constraint FK_ConsAccountSale_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsAccountSale] add constraint FK_ConsAccountSale_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTransactionCommision]
(
	[TransactionId] Uniqueidentifier NOT NULL,
	[SaleItemId] Uniqueidentifier NOT NULL,
	[AccountId] Uniqueidentifier NOT NULL,
	[CommisionId] Uniqueidentifier NOT NULL,
	[FinanceGroupTagId] Uniqueidentifier NULL,
	[FiscalDate] date NOT NULL,
	[CommisionAmount] Money NOT NULL
 )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionCommision] add constraint PK_TransactionCommision Primary Key ([TransactionId],[SaleItemId],[CommisionId],[AccountId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionCommision_SaleItemId] ON [tbTransactionCommision] ([SaleItemId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionCommision_CommisionId] ON [tbTransactionCommision] ([CommisionId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionCommision_AccountId] ON [tbTransactionCommision] ([AccountId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionCommision_FinanceGroupTagId] ON [tbTransactionCommision] ([FinanceGroupTagId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionCommision_FiscalDate] ON [tbTransactionCommision] ([FiscalDate] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionCommision] add constraint FK_TransactionCommision_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionCommision] add constraint FK_TransactionCommision_SaleItem foreign key([SaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionCommision] add constraint FK_TransactionCommision_Commision foreign key([CommisionId]) references [tbCommision] ([CommisionId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionCommision] add constraint FK_TransactionCommision_Tag foreign key([FinanceGroupTagId]) references [tbTag] ([TagId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbFinanceGroupLinkHistory]
(
     [FinanceGroupTagId] Uniqueidentifier NOT NULL,
     [ChangeDateTime] Datetime NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbFinanceGroupLinkHistory] add constraint PK_FinanceGroupLinkHistory Primary Key ([FinanceGroupTagId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbFinanceGroupLinkHistory] add constraint FK_FinanceGroupLink_Tag foreign key([FinanceGroupTagId]) references [tbTag] ([TagId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.901</SQLVERSION><RMTRACKLINK>SIT-2615</RMTRACKLINK><REASON>Add field tbLedgerRef.UsedTicket</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerRef
add UsedTicket bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerRef
set UsedTicket=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRef
alter column UsedTicket bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.900</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbVoucher.CreateDateTime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbVoucher
add CreateDateTime smalldatetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbVoucher
set CreateDateTime=CreateDate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbVoucher
alter column CreateDateTime smalldatetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Voucher_AccountId on tbVoucher
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Voucher_AccountId] ON [tbVoucher] ([AccountId] ,[CreateDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.899</SQLVERSION><RMTRACKLINK>SIT-2601</RMTRACKLINK><REASON>Change field typlogy tbCommision.PeriodType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCommision
drop column PeriodType
 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCommision
add PeriodType smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.898</SQLVERSION><RMTRACKLINK>SIT-3601</RMTRACKLINK><REASON>[0..1] New table tbCommision
[2..6] New table tbCommisionDetail</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT> Create table [tbCommision]
(
	[CommisionId] Uniqueidentifier NOT NULL,
	[CommisionCode] Varchar(15) NOT NULL,
	[CommisionName] Nvarchar(50) NOT NULL,
	[Enabled] Bit NOT NULL,
	[PeriodType] Char(1) NOT NULL
) 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCommision] add constraint PK_Commision Primary Key ([CommisionId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbCommisionDetail]
(
	[CommisionId] Uniqueidentifier NOT NULL,
	[CommisionSequence] Smallint NOT NULL,
	[FinanceGroupTagId] Uniqueidentifier NULL,
	[Percentage] Money NOT NULL,
	[QuantityFrom] Integer NULL,
	[QuantityTo] Integer NULL,
	[AmountFrom] Money NULL,
	[AmountTo] Money NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCommisionDetail] add constraint PK_CommisionDetail Primary Key ([CommisionId],[CommisionSequence])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCommisionDetail] add constraint FK_CommisionDetail_Commision foreign key([CommisionId]) references [tbCommision] ([CommisionId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCommisionDetail] add constraint FK_CommisionDetail_Tag foreign key([FinanceGroupTagId]) references [tbTag] ([TagId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_CommisionDetail_FinanceGroupTagId] ON [tbCommisionDetail] ([FinanceGroupTagId] ) where FinanceGroupTagId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.897</SQLVERSION><RMTRACKLINK>SIT-577</RMTRACKLINK><REASON>Modify tbAccountFinance.TotalCredit</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbAccountFinance
set TotalCredit=0
where TotalCredit is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
alter column TotalCredit money not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.896</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbPaymentDoc</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbPaymentDoc 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPaymentDoc]
(
	[PaymentId] Uniqueidentifier NOT NULL,
	[TransactionId] Uniqueidentifier NOT NULL,
	[DocTemplateId] Uniqueidentifier NOT NULL,
	[DocFiscalDate] Date NOT NULL,
	[DocDateTime] Datetime NOT NULL,
	[DocData] Image NOT NULL
)  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentDoc] add constraint PK_PaymentDoc Primary Key ([PaymentId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentDoc_TransactionId] ON [tbPaymentDoc] ([TransactionId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentDoc_DocFiscalDate] ON [tbPaymentDoc] ([DocFiscalDate] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentDoc_DocTemplateId] ON [tbPaymentDoc] ([DocTemplateId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentDoc] add constraint FK_PaymentDoc_Payment foreign key([PaymentId]) references [tbPayment] ([PaymentId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentDoc] add constraint FK_PaymentDoc_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentDoc] add constraint FK_PaymentDoc_DocTemplate foreign key([DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.895</SQLVERSION><RMTRACKLINK>2483</RMTRACKLINK><REASON>New table tbServerStartUp</REASON><TABLENAMES>tbServerStartUp</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbServerStartUp]
(
	[ServerId] Smallint NOT NULL,
	[StartupDateTime] Datetime NOT NULL
)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbServerStartUp 
add constraint PK_ServerStartUp Primary Key ([ServerId],[StartupDateTime])

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.894</SQLVERSION><RMTRACKLINK>SIT-2592</RMTRACKLINK><REASON>New table tbPaymentDoc</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbPaymentDoc]
(
	[PaymentId] Uniqueidentifier NOT NULL,
	[TransactionId] Uniqueidentifier NOT NULL,
	[DocFiscalDate] Date NOT NULL,
	[DocDateTime] Datetime NOT NULL,
	[DocTempateId] Uniqueidentifier NOT NULL,
	[DocData] Image NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentDoc] add constraint PK_PaymentDoc Primary Key ([PaymentId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentDoc_TransactionId] ON [tbPaymentDoc] ([TransactionId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentDoc_DocFiscalDate] ON [tbPaymentDoc] ([DocFiscalDate] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentDoc] add constraint FK_PaymentDoc_Payment foreign key([PaymentId]) references [tbPayment] ([PaymentId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentDoc] add constraint FK_PaymentDoc_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.893</SQLVERSION><RMTRACKLINK>SIT-2591</RMTRACKLINK><REASON>Refactor tbPaymentCard</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentCard
alter column CardNumber varchar(20) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.892</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tbMerchant.MerchantCode, tbMerchant.MerchantCategory, tbMerchant.MerchantTerminalId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMerchant
add MerchantCategory Varchar(10) NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMerchant
add MerchantCode Varchar(30) NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMerchant
add MerchantTerminalId Varchar(15) NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbMerchant DROP CONSTRAINT FK_Merchant_WorkstationAccount
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMerchant] add constraint FK_Merchant_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.891</SQLVERSION><RMTRACKLINK>SIT-2583</RMTRACKLINK><REASON>New table tbMerchant</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbMerchant]
(
	[MerchantId] Uniqueidentifier NOT NULL,
	[AccountId] Uniqueidentifier NOT NULL,
	[LocationId] Uniqueidentifier NULL,
	[OperatingAreaId] Uniqueidentifier NULL,
	[WorkstationId] Uniqueidentifier NULL,
	[CardType] Smallint NULL
 )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMerchant] add constraint PK_Merchant Primary Key ([MerchantId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMerchant] add constraint FK_Merchant_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMerchant] add constraint FK_Merchant_LocationAccount foreign key([LocationId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMerchant] add constraint FK_Merchant_OpAreaAccount foreign key([OperatingAreaId]) references [tbAccount] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMerchant] add constraint FK_Merchant_WorkstationAccount foreign key([WorkstationId]) references [tbAccount] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Merchant_LocationId] ON [tbMerchant] ([LocationId] ,[OperatingAreaId] ,[WorkstationId] ,[CardType] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Merchant_AccountId] ON [tbMerchant] ([AccountId] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.890</SQLVERSION><RMTRACKLINK>SIT-2573</RMTRACKLINK><REASON></REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProductPaymentMethod]
(
	[ProductId] Uniqueidentifier NOT NULL,
	[PaymentMethodId] Uniqueidentifier NOT NULL
 )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductPaymentMethod] add constraint PK_ProductPaymentMethod Primary Key ([ProductId],[PaymentMethodId])


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductPaymentMethod] add constraint FK_ProductPaymentMethod_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductPaymentMethod] add constraint FK_ProductPaymentMethod_PluginId foreign key([PaymentMethodId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductPaymentMethod_PaymentMethodId] ON [tbProductPaymentMethod] ([PaymentMethodId] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.889</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add field tbTicket.PriorityOrder
- Refactor index IX_Ticket_PortfolioId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add PriorityOrder smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Ticket_PortfolioId on tbTicket
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_PortfolioId] ON [tbTicket] ([TicketMediaMatchId] ,[PriorityOrder] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.888</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbPerformance adding DB timezone fields</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Performance_EventDateTime on tbPerformance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Performance_DateTimeFromTo on tbPerformance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Performance_LocationDateTime on tbPerformance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Performance_AcAreaDateTime on tbPerformance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Performance_Event_Status_DateTimeTo on tbPerformance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
alter column DateTimeFrom smalldatetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
alter column DateTimeTo smalldatetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
add
  TimeZone tinyint null,
  DBDateTimeFrom smalldatetime null,  
  DBDateTimeTo smalldatetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPerformance
set
  TimeZone=Coalesce((select Coalesce((select (case when isnumeric(Cast(RightValue as varchar(max)) + '.0e0') = 1 then Cast(Cast(RightValue as varchar(max)) as int) else 1 end) from tbRight where RightType=12 and EntityType=17), 1) from tbRight where RightType=12 and EntityType=17), 1), 
  DBDateTimeFrom=DateTimeFrom,  
  DBDateTimeTo=DateTimeTo
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
alter column DBDateTimeFrom smalldatetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
alter column DBDateTimeTo smalldatetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
alter column TimeZone tinyint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Performance_EventDateTime] ON [tbPerformance] ([EventId] ,[DBDateTimeFrom] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Performance_DateTimeFromTo] ON [tbPerformance] ([DBDateTimeFrom] ,[DBDateTimeTo] ) 
include (EventId)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Performance_LocationDateTime] ON [tbPerformance] ([LocationAccountId] ,[DBDateTimeFrom] ) 
include ([EventId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Performance_AcAreaDateTime] ON [tbPerformance] ([AccessAreaAccountId] ,[DBDateTimeFrom] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Performance_Event_Status_DateTimeTo] ON [tbPerformance] ([EventId] ,[PerformanceStatus] ,[DBDateTimeTo] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
add LocationTimeZone tinyint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.887</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON></REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
add VariableDownPayment bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbInstallmentPlan
set VariableDownPayment=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
alter column VariableDownPayment bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.886</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New table tbTaxLocation</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTaxLocation]
(
	[TaxId] Uniqueidentifier NOT NULL,
	[LocationAccountId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTaxLocation] add constraint PK_TaxLocation Primary Key ([TaxId],[LocationAccountId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTaxLocation] add constraint FK_TaxLocation_Tax foreign key([TaxId]) references [tbTax] ([TaxId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTaxLocation] add constraint FK_TaxLocation_Account foreign key([LocationAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TaxLocation_LocationAccountId] ON [tbTaxLocation] ([LocationAccountId] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.885</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor ProductRefund right</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbRight (RightId, EntityType, EntityId, RightType, RightValue)
select
  newid(),  
  EntityType,  
  EntityId,  
  300,  
  (case Cast(RightValue as varchar(max)) when '1' then 'false' else 'true' end)
from tbRight
where RightType=19
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbRight (RightId, EntityType, EntityId, RightType, RightValue)
select
  newid(),  
  EntityType,  
  EntityId,  
  301,  
  (case Cast(RightValue as varchar(max)) when '5' then '10' when '9' then '20' else '1' end)
from tbRight
where RightType=19
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbRight 
where RightType=19
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.884</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbPaymentWallet.MediaId -&gt; NULLABLE</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentWallet
alter column MediaId uniqueidentifier null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.883</SQLVERSION><RMTRACKLINK>2351</RMTRACKLINK><REASON>Add new field tbPortfolioSlot.ExpireDate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlot add ExpireDate date null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_PortfolioSlot_MembershipPointId on tbPortfolioSlot
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioSlot_MembershipPointId] ON [tbPortfolioSlot] ([MembershipPointId] ,[PortfolioSlotType] ,[ExpireDate] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.882</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tbBroadcast</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbBroadcast]
(
	[BroadcastId] Uniqueidentifier NOT NULL,
	[SrcWorkstationId] Uniqueidentifier NOT NULL,
	[BroadcastType] Smallint NOT NULL,
	[BroadcastName] Varchar(15) NOT NULL,
	[BroadcastDateTime] Datetime NOT NULL,
	[Acknowledged] Bit NOT NULL,
	[BroadcastData] Ntext NULL,
	[ExpireDateTime] Smalldatetime NULL,
	[DstLocationId] Uniqueidentifier NULL,
	[DstOpAreaId] Uniqueidentifier NULL,
	[DstWorkstationId] Uniqueidentifier NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBroadcast] add constraint PK_Broadcast Primary Key ([BroadcastId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBroadcast] add constraint FK_Broadcast_DstWorkstation foreign key([DstWorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBroadcast] add constraint FK_Broadcast_SrcWorkstation foreign key([SrcWorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBroadcast] add constraint FK_Broadcast_DstLoacationAccount foreign key([DstLocationId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBroadcast] add constraint FK_Broadcast_OpAreaAccount foreign key([DstOpAreaId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Broadcast_BroadcastDateTime] ON [tbBroadcast] ([BroadcastDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Broadcast_SrcWorkstationId] ON [tbBroadcast] ([SrcWorkstationId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Broadcast_DstWorkstationId] ON [tbBroadcast] ([DstWorkstationId] ) 
where DstWorkstationId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Broadcast_DstLocationId] ON [tbBroadcast] ([DstLocationId] ) 
where DstLocationId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Broadcast_DstOpAreaId] ON [tbBroadcast] ([DstOpAreaId] ) 
where DstOpAreaId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Broadcast_ExpireDateTime] ON [tbBroadcast] ([ExpireDateTime] ) 
where ExpiredateTime is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.881</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Creates ApiFirewall tables</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbApiFirewall]
(
	[EntityId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[CustomAddressRange] Bit NOT NULL,
	[CustomServiceFilter] Bit NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbApiFirewall] add constraint PK_ApiFirewall Primary Key ([EntityId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbApiFirewallAddress]
(
	[EntityId] Uniqueidentifier NOT NULL,
	[AddressSequence] Smallint NOT NULL,
	[FromIP] Varchar(40) NOT NULL,
	[ToIP] Varchar(40) NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbApiFirewallAddress] add constraint PK_ApiFirewallAddress Primary Key ([EntityId],[AddressSequence])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbApiFirewallService]
(
	[EntityId] Uniqueidentifier NOT NULL,
	[ServiceSequence] Smallint NOT NULL,
	[ServiceName] Varchar(50) NULL,
	[CommandName] Varchar(50) NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbApiFirewallService] add constraint PK_ApiFirewallService Primary Key ([EntityId],[ServiceSequence])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbApiFirewallAddress] add constraint FK_ApiFirewall_ApiFirewallAddress foreign key([EntityId]) references [tbApiFirewall] ([EntityId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbApiFirewallService] add constraint FK_ApiFirewall_ApiFirewallService foreign key([EntityId]) references [tbApiFirewall] ([EntityId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.880</SQLVERSION><RMTRACKLINK>SIT-2483</RMTRACKLINK><REASON>- Remove tbRepository.SortName
- Refactor tbRepository.IX_Repository_EntityType</REASON><TABLENAMES>tbRepository</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Repository_SortName on tbRepository
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbRepository
drop column SortName
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Repository_EntityType on tbRepository
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Repository_EntityType] ON [tbRepository] ([EntityType] ,[FileName] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.879</SQLVERSION><RMTRACKLINK>2481</RMTRACKLINK><REASON>Refactor tbTicket.IX_Ticket_ProductId index</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Ticket_ProductId on tbTicket
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_ProductId] ON [tbTicket] ([ProductId] ,[EncodeFiscalDate], [EncodeDateTime] ) include (TicketStatus, FirstUsagedateTime)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.878</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add indexes to tbUpload</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Upload_RequestDateTime] ON [tbUpload] ([RequestDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Upload_TypeAndDateTime] ON [tbUpload] ([UploadType] ,[RequestDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Upload_StatusAndDateTime] ON [tbUpload] ([UploadStatus] ,[RequestDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.877</SQLVERSION><RMTRACKLINK>2483</RMTRACKLINK><REASON>- Create field tbRepository.Hash
- Create field tbRepository.SortName
- Create field IX_Repository_SortName</REASON><TABLENAMES>tbRepository</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbRepository
add [Hash] Nvarchar(32) NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbRepository
add [SortName] Nvarchar(50) NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Repository_SortName] ON [tbRepository] ([SortName] ) 
where SortName is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.876</SQLVERSION><RMTRACKLINK>SIT-2481</RMTRACKLINK><REASON>***** Refactor tbTicket.IX_Ticket_ProductId index 
Patch replaced by patch 1.879</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.875</SQLVERSION><RMTRACKLINK>SIT-2483</RMTRACKLINK><REASON>- Create index [IX_Repository_EntityType]</REASON><TABLENAMES>tbRepository</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Repository_EntityType] ON [tbRepository] ([EntityType] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.874</SQLVERSION><RMTRACKLINK>SIT-2353</RMTRACKLINK><REASON>- Create tbSaleChannel.OutstandingSaleChannelId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleChannel
add [OutstandingSaleChannelId] Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleChannel] add constraint FK_SaleChannel_OutstandingSaleChannel foreign key([OutstandingSaleChannelId]) references [tbSaleChannel] ([SaleChannelId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutstandingSaleChannelId] ON [tbSaleChannel] ([OutstandingSaleChannelId] ) 
where OutstandingSaleChannelId is not null 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.873</SQLVERSION><RMTRACKLINK>SIT-2354</RMTRACKLINK><REASON>- Create field tbSaleChannel.RestrictOpenOrder
- Create field tbEvent.RestrictOpenOrder
- Create field tbPerformance.RestrictOpenOrder
- Create field tbProduct.RestrictOpenOrder</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleChannel
add RestrictOpenOrder bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSaleChannel
set RestrictOpenOrder=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleChannel
alter column RestrictOpenOrder bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
add RestrictOpenOrder bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbEvent
set RestrictOpenOrder=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
alter column RestrictOpenOrder bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
add RestrictOpenOrder bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPerformance
set RestrictOpenOrder=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
alter column RestrictOpenOrder bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add RestrictOpenOrder bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set RestrictOpenOrder=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column RestrictOpenOrder bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.872</SQLVERSION><RMTRACKLINK>SIT-2184</RMTRACKLINK><REASON>- Create field tbAsyncProcess.RefEntityType
- Create field tbAsyncProcess.RefEntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAsyncProcess
add RefEntityType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAsyncProcess
add RefEntityId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.871</SQLVERSION><RMTRACKLINK>SIT-2357</RMTRACKLINK><REASON>- Create field tbLogin.LoginStatus
- Create field tbLogin.TempBlockDateTime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLogin
add LoginStatus smallint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLogin
set LoginStatus=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLogin
alter column LoginStatus smallint not NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLogin
add TempBlockDateTime datetime NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.870</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Create field tbBox.CashLimitWarnAmount
- Refactor index [IX_Box_DateLocationUser]</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbBox
add CashLimitWarnAmount money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Box_DateLocationUser on tbBox
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Box_DateLocationUser] ON [tbBox] ([FBoxDate] ,[LocationAccountId] ,[UserAccountId] ,[BoxStatus] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.869</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create field tbBox.LastWorkstationId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbBox
add LastWorkstationId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Box_LastWorkstationId] ON [tbBox] ([LastWorkstationId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBox] add constraint FK_Box_LastWorkstation foreign key([LastWorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.868</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Remove tbPluginPaymentMethod.DocTemplateId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP INDEX tbPluginPaymentMethod.IX_PluginPaymentMethod_DocTemplateIdId


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPluginPaymentMethod
DROP CONSTRAINT FK_PluginPaymentMethod_DocTemplateId


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPluginPaymentMethod
DROP COLUMN DocTemplateId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.867</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0..2] New field tbPluginPaymentMethod.DocTemplateId
[3..6] New tbPaymentMethodCardType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPluginPaymentMethod
add DocTemplateId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbPluginPaymentMethod add constraint FK_PluginPaymentMethod_DocTemplateId foreign key(DocTemplateId) references [tbDocTemplate] (DocTemplateId)  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PluginPaymentMethod_DocTemplateIdId] ON tbPluginPaymentMethod ([DocTemplateId]) where DocTemplateId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPaymentMethodCardType]
(
	[PluginId] Uniqueidentifier NOT NULL,
	[CCType] Smallint NOT NULL,
	[DocTemplateId] Uniqueidentifier NOT NULL)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentMethodCardType] add constraint PK_PaymentMethodCardType Primary Key ([PluginId],[CCType])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentMethodCardType_DocTemplateId] ON [tbPaymentMethodCardType] ([DocTemplateId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentMethodCardType] add constraint FK_PaymentMethodCardType_DocTemplate foreign key(DocTemplateId) references [tbDocTemplate] (DocTemplateId)  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.866</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Create field tbBox.CashContentAmount
- Create table tbBoxContent</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbBox
add CashContentAmount money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbBox
set CashContentAmount=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBox
alter column CashContentAmount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbBoxContent]
(
	[BoxId] Uniqueidentifier NOT NULL,
	[PluginId] Uniqueidentifier NOT NULL,
	[CurrencyISO] Varchar(3) NOT NULL,
	[Quantity] Integer NOT NULL,
	[ContentAmount] Money NOT NULL,
	[CurrencyAmount] Money NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBoxContent] add constraint PK_BoxContent Primary Key ([BoxId],[PluginId],[CurrencyISO])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_BoxContent_PluginId] ON [tbBoxContent] ([PluginId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBoxContent] add constraint FK_BoxContent_Box foreign key([BoxId]) references [tbBox] ([BoxId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBoxContent] add constraint FK_BoxContent_Plugin foreign key([PluginId]) references [tbPluginPaymentMethod] ([PluginId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>vgsrd</ADDEDBY><SQLVERSION>1.865</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Remove columns from tbServer
- ServerData
- ServicesEnabled
- ServicesStarted</REASON><TABLENAMES>tbServer
tbServerParam</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table [tbServer] drop column [ServerData]

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbServer] drop column [ServicesEnabled]
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbServer] drop column [ServicesStarted]
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbServerParam]
(
	[ServerId] Smallint NOT NULL,
	[ParamName] Nvarchar(50) NOT NULL,
	[ParamValue] Ntext NOT NULL,
	[LastUpdate] Datetime NOT NULL
)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbServerParam] add constraint PK_ServerParam Primary Key ([ServerId],[ParamName])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_tbServer_LastUpdate] ON [tbServerParam] ([LastUpdate] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.864</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add columns to tbServer
- WarVersion
- ServerData
- ServicesEnabled
- ServicesStarted</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table [tbServer]
add [WarVersion] Varchar(15) NULL,
	[ServerData] Ntext NULL,
	[ServicesEnabled] Bit NULL,
	[ServicesStarted] Bit NULL;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update [tbServer]
set [ServicesEnabled]=0, [ServicesStarted]=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbServer]
alter column [ServicesEnabled] Bit NOT NULL;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbServer]
alter column [ServicesStarted] Bit NOT NULL;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.863</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Reset right 47 for boolean values</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbRight
where RightType=47 and Cast(RightValue as varchar(max)) in ('true','false')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.862</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTask.LastEntityChangeId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTask
add LastEntityChangeId bigint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.861</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>SIT-2333

update old "expired" tickets' status</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbTicket
set TicketStatus=110 /*expired*/
where
  ExpiredOnDateTime is not null and  
  TicketStatus&lt;100

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.860</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbSeatPerformanceCategory.PerformanceDateTime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSeatPerformanceCategory
add PerformanceDateTime smalldatetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSeatPerformanceCategory
set PerformanceDateTime=X_PerformanceDateTime
from (
  select 
    P.PerformanceId as X_PerformanceId,
    P.DateTimeFrom as X_PerformanceDateTime  
  from  
    tbSeatPerformanceCategory SPC inner join    
    tbPerformance P on P.PerformanceId=SPC.PerformanceId    
) X
where PerformanceId=X_PerformanceId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformanceCategory
alter column PerformanceDateTime smalldatetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_SeatPerformanceCategory_SeatEnvelopeId on tbSeatPerformanceCategory
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatPerformanceCategory_SeatEnvelopeId] ON [tbSeatPerformanceCategory] ([SeatEnvelopeId] ,[PerformanceDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.859</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tbSeatEnvelope fields:
- SwapHours
- SwapSeatEnvelopeId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSeatEnvelope
add
  SwapHours smallint null,  
  SwapSeatEnvelopeId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatEnvelope_SwapSeatEnvelopeId] ON [tbSeatEnvelope] ([SwapSeatEnvelopeId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatEnvelope] add constraint FK_SeatEnvelope_SwapSeatEnvelope foreign key([SwapSeatEnvelopeId]) references [tbSeatEnvelope] ([SeatEnvelopeId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.858</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Create field tbTicketUpgrade.FlatUpgrade
- Renames tbTicket field "TicketSubstatus" into "PurgeLevel"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUpgrade
add FlatUpgrade bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketUpgrade
set FlatUpgrade=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketUpgrade
set FlatUpgrade=1
where TicketId in (select TicketId from tbTicket where TicketSubstatus=2)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUpgrade
alter column FlatUpgrade bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_RENAME 'tbTicket.TicketSubstatus', 'PurgeLevel' , 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicket
set PurgeLevel=null
where PurgeLevel is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_ValidDateTo] ON [tbTicket] ([ValidDateTo] ) 
 INCLUDE (ExpiredOnDateTime)
where ValidDateTo is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Ticket_ValidDateToNotExpired on tbTicket
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.857</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbMetaField.FieldDataFormat</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMetaField
add FieldDataFormat smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbMetaField
set FieldDataFormat=12
where FieldType in (1,2,3,4,5,6,7,8,23,36,37,38,53)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbMetaField
set FieldDataFormat=10
where FieldType in (9,10,39,41,54)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.856</SQLVERSION><RMTRACKLINK>SIT-2184</RMTRACKLINK><REASON>Patch to fill tbIndividualCoupon table</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index tbIndividualCoupon.UQ_IndividualCoupon_Code

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>  Create UNIQUE Index [UQ_IndividualCoupon_Code] ON [tbIndividualCoupon] ([IndividualCouponCode] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbIndividualCoupon (
  IndividualCouponId,
  IndividualCouponCode,
  IndividualCouponStatus,
  ProductId,
  IssueTransactionId,
  IssueFiscalDate,
  IssueDateTime,
  SettleTransactionId,
  SettleFiscalDate,
  SettleDateTime,
  ValidDateFrom,
  ValidDateTo,
  CampaignCode,
  AccountId
)
select 
  NEWID() as IndividualCouponId,
  MC.MediaCode as IndividualCouponCode,
  (case T.TicketStatus
    when 0 then 1
	when 2 then 2
	when 106 then 101 
	when 108 then 103
    else 102
  end) as IndividualCouponStatus,
  T.ProductId as ProductId,
  T.TransactionId as IssueTransactionId,
  TR.TransactionFiscalDate as IssueFiscalDate,
  TR.TransactionDateTime as IssueDateTime,
  null as SettleTransactionId,
  null as SettleFiscalDate,
  null as SettleDateTime,
  T.ValidDateFrom as ValidDateFrom,
  T.ValidDateTo as ValidDateTo,
  null as CampaignCode,
  null as AccountId
from
  tbTicket T inner join
  tbProduct P on P.ProductId=T.ProductId and P.ProductType=5 inner join
  tbMedia M on M.TicketMediaMatchId=T.TicketMediaMatchId inner join
  tbMediaCode MC on MC.MediaId=M.MediaId inner join
  tbTransaction TR on TR.TransactionId=T.TransactionId
where
  MC.MediaCode Like '5%' and DATALENGTH(MC.MediaCode) = 14
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.855</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create field tbReceiptSpool.OpAreaAccountId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbReceiptSpool
add OpAreaAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbReceiptSpool
set OpAreaAccountId=X_OpAreaId
from (
  select
    RS.TransactionId as X_TransactionId,
    W.OpAreaAccountId as X_OpAreaId  
  from  
    tbReceiptSpool RS inner join    
    tbTransaction T on T.TransactionId=RS.TransactionId inner join    
    tbWorkstation W on W.WorkstationId=T.WorkstationId
) X
where TransactionId=X_TransactionId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbReceiptSpool
alter column OpAreaAccountId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ReceiptSpool_OpAreaAccountId] ON [tbReceiptSpool] ([OpAreaAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbReceiptSpool] add constraint FK_ReceiptSpool_OpAreaAccountId foreign key([OpAreaAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.854</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Shift rights 273..275 by 1</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRight
set RightType=RightType+1
where RightType in (273, 274, 275)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.853</SQLVERSION><RMTRACKLINK>SIT-2184</RMTRACKLINK><REASON>New tbIndividualCoupon table</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbIndividualCoupon]
(
	[IndividualCouponId] Uniqueidentifier NOT NULL,
	[IndividualCouponCode] Varchar(50) NOT NULL,
	[IndividualCouponStatus] Smallint NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
	[IssueTransactionId] Uniqueidentifier NOT NULL,
	[IssueFiscalDate] date NOT NULL,
	[IssueDateTime] Smalldatetime NOT NULL,
	[SettleTransactionId] Uniqueidentifier NULL,
	[SettleFiscalDate] date NULL,
	[SettleDateTime] Smalldatetime NULL,
	[ValidDateFrom] date NULL,
	[ValidDateTo] date NULL,
	[CampaignCode] Varchar(15) NULL,
	[AccountId] Uniqueidentifier NULL
	)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbIndividualCoupon] add constraint PK_IndividualCoupon Primary Key ([IndividualCouponId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_IndividualCoupon_Code] ON [tbIndividualCoupon] ([IndividualCouponId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_IndividualCoupon_ProductId] ON [tbIndividualCoupon] ([ProductId] ,[IssueDateTime] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_IndividualCoupon_IssueTransactionId] ON [tbIndividualCoupon] ([IssueTransactionId] ,[IssueDateTime] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_IndividualCoupon_SettleTransactionId] ON [tbIndividualCoupon] ([SettleTransactionId] ,[SettleDateTime] ) 
where SettleTransactionId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_IndividualCoupon_AccountId] ON [tbIndividualCoupon] ([AccountId] ,[IssueDateTime] ) 
where AccountId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_IndividualCoupon_IssueFiscalDate] ON [tbIndividualCoupon] ([IssueFiscalDate] ,[IssueDateTime] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_IndividualCoupon_SettleFiscalDate] ON [tbIndividualCoupon] ([SettleFiscalDate] ,[SettleDateTime] ) 
where SettleFiscalDate is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_IndividualCoupon_CampaignCode] ON [tbIndividualCoupon] ([CampaignCode] ,[IssueDateTime] ) 
where CampaignCode is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbIndividualCoupon] add constraint FK_IndividualCoupon_IssueTransaction foreign key([IssueTransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbIndividualCoupon] add constraint FK_IndividualCoupon_SettleTransaction foreign key([SettleTransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbIndividualCoupon] add constraint FK_IndividualCoupon_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbIndividualCoupon] add constraint FK_IndividualCoupon_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.852</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Invalidate all promo rules</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbEntityChange where EntityId in (select ProductId from tbPromoRule)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (
  EntityType, 
  EntityId,
  InsertUpdate
)
select  
  55,  
  ProductId,  
  1  
from
  tbPromoRule
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.851</SQLVERSION><RMTRACKLINK>SIT-2184</RMTRACKLINK><REASON>tbPromotionRule refactoring</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPromoRule
add PromoSelectionType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPromoRule
set PromoSelectionType=PromoRuleType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPromoRule
alter column PromoSelectionType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPromoRule
drop column PromoRuleType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPromoRule
add PromoRuleType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update
  tbPromoRule
set 
  PromoRuleType = (case
		     when SelectableByCode = 1 then 1
		     when SelectableByCode = 2 then 2
		     else 0
	  	  end),
  PromoSelectionType = (case
			  when SelectableByCode = 1 then 30
			  when SelectableByCode = 2 then 30
			  else PromoSelectionType
  			end)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPromoRule
alter column PromoRuleType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPromoRule
drop column SelectableByCode
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.850</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create  IX_Action_EntityType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Action_EntityType] ON [tbAction] ([EntityType] ,[CreateDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.849</SQLVERSION><RMTRACKLINK>SIT-2120</RMTRACKLINK><REASON>Remove B2B_ForgotPassword_DocTemplateId and B2B_EmailVerification_DocTemplateId rights</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbRight where RightType in (262, 263)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.848</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Convert email metafields to proper type</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbMetaField
set FieldDataType=15
where FieldType in (21,22,60)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.847</SQLVERSION><RMTRACKLINK>SIT-2181</RMTRACKLINK><REASON>New table tbTicketFacePrice</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTicketFacePrice]
(
	[TicketId] Uniqueidentifier NOT NULL,
	[UnitAmount] Money NOT NULL,
	[UnitTax] Money NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketFacePrice] add constraint PK_TicketFacePrice Primary Key ([TicketId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketFacePrice] add constraint FK_TicketFacePrice_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.846</SQLVERSION><RMTRACKLINK>SIT-2181</RMTRACKLINK><REASON>Add tbSaleChannel.UpgradeFromFacePrice</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleChannel
add UpgradeFromFacePrice bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSaleChannel
set UpgradeFromFacePrice=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleChannel
alter column UpgradeFromFacePrice bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.845</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactoring tbProductCodeExt to make it generic (tbCodeAlias)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbCodeAlias]
(
	[EntityType] Smallint NOT NULL,
	[CodeAlias] Varchar(50) NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCodeAlias] add constraint PK_CodeAlias Primary Key ([EntityType],[CodeAlias])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_CodeAlias_EntityId] ON [tbCodeAlias] ([EntityId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbCodeAlias (EntityType, CodeAlias, EntityId)
select 12, ProductCodeExt, ProductId from tbProductCodeExt
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbProductCodeExt
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.844</SQLVERSION><RMTRACKLINK>SIT-2240</RMTRACKLINK><REASON>Add new filed tbReceiptSpool.PrintFull</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbReceiptSpool
drop constraint PK_ReceiptSpool
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbReceiptSpool
add PrintFull bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbReceiptSpool
set PrintFull=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbReceiptSpool
alter column PrintFull bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbReceiptSpool] add constraint PK_ReceiptSpool Primary Key ([TransactionId],[DocTemplateId],[PrintFull])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.843</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change LkTaskType codes</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbTask
set TaskType=(case TaskType when 1 then 101 when 8 then 1001 else TaskType end)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbJob where TaskId in (select TaskId from tbTask where TaskType=6)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbTaskTrigger where TaskId in (select TaskId from tbTask where TaskType=6)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbTaskDataExport where TaskId in (select TaskId from tbTask where TaskType=6)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbTask where TaskType=6
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.842</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Create table tbConsQueue
- Drop ConsXXX fields from tbTransaction and tbTicketUsage</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbConsQueue]
(
	[EntityId] Uniqueidentifier NOT NULL,
	[ConsQueueType] Smallint NOT NULL,
	[EntityType] Smallint NOT NULL,
	[ServerId] Smallint NULL,
	[ConsQueueStatus] Smallint NOT NULL,
	[QueueDateTime] Datetime NOT NULL,
	[StartDateTime] Datetime NULL,
	[EndDateTime] Datetime NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsQueue] add constraint PK_ConsQueue Primary Key ([EntityId],[ConsQueueType])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsQueue_ConsQueueType] ON [tbConsQueue] ([ConsQueueType] ,[ConsQueueStatus] ,[QueueDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsQueue_ServerId] ON [tbConsQueue] ([ServerId] ,[ConsQueueStatus] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbConsQueue (
  EntityId,
  ConsQueueType,
  EntityType,
  ConsQueueStatus,
  QueueDateTime
)

select
  TransactionId,  
  1, /*sale*/
  20, /*transaction*/
  1, /*waiting*/
  TransactionDateTime
from tbTransaction
where ConsSale=0

union  

select
  TransactionId,  
  3, /*ledger*/
  20, /*transaction*/
  1, /*waiting*/
  TransactionDateTime
from tbTransaction
where ConsLedger=0

union  

select
  TicketUsageId,  
  2, /*access*/
  58, /*ticket-usage*/
  1, /*waiting*/
  UsageDateTime
from tbTicketUsage
where ConsAccess=0

union  

select
  TicketUsageId,  
  3, /*ledger*/
  58, /*ticket-usage*/
  1, /*waiting*/
  UsageDateTime
from tbTicketUsage
where ConsLedger=0

union  

select
  TicketId,  
  3, /*ledger*/
  22, /*ticket*/
  1, /*waiting*/
  EncodeDateTime
from tbTicket
where ExpiredConsLedger=0 and ExpiredOnDateTime is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index tbTransaction.IX_Transaction_ConsSale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index tbTransaction.IX_Transaction_ConsLedger 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
drop column ConsSale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
drop column ConsLedger
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index tbTicketUsage.IX_TicketUsage_ConsAccess 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index tbTicketUsage.IX_TicketUsage_ConsLedger 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
drop column ConsAccess
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
drop column ConsLedger
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index tbTicket.IX_Ticket_ExpiredConsLedger 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
drop column ExpiredConsLedger
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_ExpiredOnDateTime] ON [tbTicket] ([ExpiredOnDateTime] ) 
where ExpiredOnDateTime is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.841</SQLVERSION><RMTRACKLINK>SIT-2180</RMTRACKLINK><REASON>tbReceiptSpool refactor</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbReceiptSpool
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbReceiptSpool]
(
	[TransactionId] Uniqueidentifier NOT NULL,
	[DocTemplateId] Uniqueidentifier NOT NULL,
	[ReceiptSpoolStatus] Smallint NOT NULL,
	[TransactionFiscalDate] date NOT NULL,
	[PrintDateTime] Smalldatetime NULL,
	[WorkstationId] Uniqueidentifier NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbReceiptSpool] add constraint PK_ReceiptSpool Primary Key ([TransactionId],[DocTemplateId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ReceiptSpool_DocTemplateId] ON [tbReceiptSpool] ([DocTemplateId] ,[ReceiptSpoolStatus] ,[WorkstationId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ReceiptSpool_TransactionFiscalDate] ON [tbReceiptSpool] ([TransactionFiscalDate] ,[ReceiptSpoolStatus] ,[WorkstationId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbReceiptSpool] add constraint FK_ReceiptSpool_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbReceiptSpool] add constraint FK_ReceiptSpool_DocTemplate foreign key([DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.840</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbProductPriceAdvance</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProductPriceAdvance]
(
	[ProductId] Uniqueidentifier NOT NULL,
	[PriorityOrder] Smallint NOT NULL,
	[CellIndex] Smallint NOT NULL,
	[SaleChannelId] Uniqueidentifier NULL,
	[AdvanceDays] Smallint NOT NULL,
	[PriceActionType] Smallint NOT NULL,
	[PriceValueType] Smallint NOT NULL,
	[PriceValue] Money NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductPriceAdvance] add constraint PK_ProductPriceAdvance Primary Key ([ProductId],[PriorityOrder],[CellIndex])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ProductPriceAdvance] ON [tbProductPriceAdvance] ([ProductId] ,[PriorityOrder] ,[SaleChannelId], [AdvanceDays] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductPriceAdvance_SaleChannelId] ON [tbProductPriceAdvance] ([SaleChannelId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductPriceAdvance] add constraint FK_ProductPriceAdvance_ProductPriceDate foreign key([ProductId],[PriorityOrder]) references [tbProductPriceDate] ([ProductId],[PriorityOrder])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductPriceAdvance] add constraint FK_ProductPriceAdvance_SaleChannel foreign key([SaleChannelId]) references [tbSaleChannel] ([SaleChannelId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.839</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New tbReceiptSpool</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbReceiptSpool]
(
	[TransactionId] Uniqueidentifier NOT NULL,
	[DocTemplateId] Uniqueidentifier NOT NULL,
	[ReceiptSpoolStatus] Smallint NOT NULL,
	[TransactionFiscalDate] date NOT NULL,
	[PrintDateTime] Smalldatetime NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbReceiptSpool] add constraint PK_ReceiptSpool Primary Key ([TransactionId],[DocTemplateId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ReceiptSpool_DocTemplateId] ON [tbReceiptSpool] ([DocTemplateId] ,[ReceiptSpoolStatus] )  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ReceiptSpool_TransactionFiscalDate] ON [tbReceiptSpool] ([TransactionFiscalDate] ,[ReceiptSpoolStatus] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbReceiptSpool] add constraint FK_ReceiptSpool_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbReceiptSpool] add constraint FK_ReceiptSpool_DocTemplate foreign key([DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.838</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTaskDataExport</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTaskDataExport]
(
	[TaskId] Uniqueidentifier NOT NULL,
	[DocTemplateId] Uniqueidentifier NOT NULL,
	[DataExportOption] Smallint NOT NULL,
	[RecipientRecap] nvarchar(100) NULL,
	[LastEntityChangeId] Bigint NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTaskDataExport] add constraint PK_TaskDataExport Primary Key ([TaskId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TaskDataExport_DocTemplateId] ON [tbTaskDataExport] ([DocTemplateId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTaskDataExport] add constraint FK_TaskDataExport_Task foreign key([TaskId]) references [tbTask] ([TaskId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTaskDataExport] add constraint FK_TaskDataExport_DocTemplate foreign key([DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.837</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>set tbSaleItem.DistinctItem where the sale item has a record in tbSaleItemPromo
delete table tbSaleItemPromo</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbSaleItem
set DistinctItem=1
where SaleItemId in (select SaleItemId from tbSaleItemPromo)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbSaleItemPromo
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.836</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tbEntityChange records for:
- Transactions
- Sales
- Tickets
- Medias</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE @OriginalSaleId uniqueidentifier
DECLARE @NewSaleId uniqueidentifier

declare db_cursor cursor for
select 
  S.SaleId
from 
  tbSale S inner join
  tbTransaction T on T.TransactionId=S.SaleId
union
select 
  S.SaleId
from 
  tbSale S inner join
  tbTicket T on T.TicketId=S.SaleId

open db_cursor
fetch NEXT from db_cursor into @OriginalSaleId

while @@FETCH_STATUS = 0
begin
  set @NewSaleId=NEWID()

  insert into tbSale (
    SaleId,
	LicenseId,
	UserAccountId,
	WorkstationId,
	SaleStatus,
	SaleDateTime,
	SaleFiscalDate,
	SaleCode,
	Approved,
	Paid,
	Encoded,
	Printed,
	Validated,
	Completed,
	TotalAmount,
	PaidAmount,
	ItemCount,
	HoldId,
	ReceiptEmailAddress,
	AutoPurge,
	SaleChannelId,
	SaleFlowType,
	BatchDate,
	BatchNumber, 
	TaxExempt)
  select 
    @NewSaleId,
	LicenseId,
	UserAccountId,
	WorkstationId,
	SaleStatus,
	SaleDateTime,
	SaleFiscalDate,
	SaleCode,
	Approved,
	Paid,
	Encoded,
	Printed,
	Validated,
	Completed,
	TotalAmount,
	PaidAmount,
	ItemCount,
	HoldId,
	ReceiptEmailAddress,
	AutoPurge,
	SaleChannelId,
	SaleFlowType,
	BatchDate,
	BatchNumber, 
	TaxExempt
  from
    tbSale
  where
    SaleId = @OriginalSaleId

  update tbTransaction
  set SaleId=@NewSaleId
  where SaleId=@OriginalSaleId

  update tbWebAuth 
  set SaleId=@NewSaleId
  where SaleId=@OriginalSaleId

  update tbSaleApprove 
  set SaleId=@NewSaleId
  where SaleId=@OriginalSaleId

  update tbSale2Performance 
  set SaleId=@NewSaleId
  where SaleId=@OriginalSaleId

  update tbSaleTab 
  set SaleId=@NewSaleId
  where SaleId=@OriginalSaleId

  update tbSale2Account 
  set SaleId=@NewSaleId
  where SaleId=@OriginalSaleId

  update tbSaleMembership 
  set SaleId=@NewSaleId
  where SaleId=@OriginalSaleId

  update tbSaleItem 
  set SaleId=@NewSaleId
  where SaleId=@OriginalSaleId

  fetch NEXT from db_cursor into @OriginalSaleId
end

CLOSE db_cursor   

open db_cursor
fetch NEXT from db_cursor into @OriginalSaleId

while @@FETCH_STATUS = 0
begin
  delete tbSale where SaleId=@OriginalSaleId

  fetch NEXT from db_cursor into @OriginalSaleId
end

CLOSE db_cursor   
DEALLOCATE db_cursor

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @OriginalTckId uniqueidentifier
DECLARE @NewTckId uniqueidentifier

ALTER INDEX UQ_Ticket_SaleItemDetailId ON tbTicket
DISABLE; 

ALTER INDEX UQ_Ticket_TDSSN ON tbTicket
DISABLE; 

declare db_cursor cursor for
select 
  Tck.TicketId
from 
  tbTicket Tck inner join
  tbTransaction T on T.TransactionId=Tck.TicketId

open db_cursor
fetch NEXT from db_cursor into @OriginalTckId

while @@FETCH_STATUS = 0
begin
  set @NewTckId=NEWID()

  insert into tbTicket (
    TicketId,
	TicketMediaMatchId,
	SaleItemDetailId,
	ProductId,
	PerformanceSetId,
	LicenseId,
	TicketStatus,
	StationSerial,
	TicketSerial,
	EncodeDateTime,
	EncodeFiscalDate,
	ValidateDateTime,
	FirstUsageDateTime,
	SeatHoldId,
	GroupQuantity,
	GroupTicketOption,
	TransactionId,
	EntitlementData,
	Settled,
	ValidDateFrom,
	ValidDateTo,
	TicketSubstatus,
	ManualExpiration,
	BonusEntry,
	UnitAmount,
	UnitTax,
	ClearingLimit,
	ClearingUsed,
	ExpiredOnDateTime,
	ExpiredConsLedger)
  select 
    @NewTckId,
	TicketMediaMatchId,
	SaleItemDetailId,
	ProductId,
	PerformanceSetId,
	LicenseId,
	TicketStatus,
	StationSerial,
	TicketSerial,
	EncodeDateTime,
	EncodeFiscalDate,
	ValidateDateTime,
	FirstUsageDateTime,
	SeatHoldId,
	GroupQuantity,
	GroupTicketOption,
	TransactionId,
	EntitlementData,
	Settled,
	ValidDateFrom,
	ValidDateTo,
	TicketSubstatus,
	ManualExpiration,
	BonusEntry,
	UnitAmount,
	UnitTax,
	ClearingLimit,
	ClearingUsed,
	ExpiredOnDateTime,
	ExpiredConsLedger
  from
    tbTicket
  where
    TicketId = @OriginalTckId

  update tbTicketIncProd
  set TicketId=@NewTckId
  where TicketId=@OriginalTckId

  update tbTimedTicketStatement
  set TicketId=@NewTckId
  where TicketId=@OriginalTckId

  update tbTicketUsage
  set TicketId=@NewTckId
  where TicketId=@OriginalTckId

  update tbResourceSchedule
  set TicketId=@NewTckId
  where TicketId=@OriginalTckId

  update tbSiaeLog
  set TicketId=@NewTckId
  where TicketId=@OriginalTckId

  update tbTicketGuest
  set TicketId=@NewTckId
  where TicketId=@OriginalTckId

  update tbTicketUpgradeTax
  set TicketId=@NewTckId
  where TicketId=@OriginalTckId

  update tbSaleMembership
  set TicketId=@NewTckId
  where TicketId=@OriginalTckId

  update tbInstallmentContract2Ticket
  set TicketId=@NewTckId
  where TicketId=@OriginalTckId

  update tbTicketUpgrade
  set TicketId=@NewTckId
  where TicketId=@OriginalTckId 

  update tbTicketUpgrade
  set SourceTicketId=@NewTckId
  where SourceTicketId=@OriginalTckId 

  update tbTicketUpgrade
  set RootTicketId=@NewTckId
  where RootTicketId=@OriginalTckId 

  update tbTicketLocker
  set TicketId=@NewTckId
  where TicketId=@OriginalTckId
  
  fetch NEXT from db_cursor into @OriginalTckId
end

CLOSE db_cursor   

open db_cursor
fetch NEXT from db_cursor into @OriginalTckId

while @@FETCH_STATUS = 0
begin
  delete tbTicket where TicketId=@OriginalTckId

  fetch NEXT from db_cursor into @OriginalTckId
end

CLOSE db_cursor   
DEALLOCATE db_cursor

ALTER INDEX UQ_Ticket_SaleItemDetailId ON tbTicket
REBUILD; 

ALTER INDEX UQ_Ticket_TDSSN ON tbTicket
REBUILD;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbEntityChange where EntityType in (20,21,22,23)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (EntityId, EntityType, InsertUpdate)
select TransactionId, 20, 1
from tbTransaction
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (EntityId, EntityType, InsertUpdate)
select SaleId, 21, 1
from tbSale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (EntityId, EntityType, InsertUpdate)
select TicketId, 22, 1
from tbTicket

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (EntityId, EntityType, InsertUpdate)
select MediaId, 23, 1
from tbMedia
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.835</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>remove tbSaleItemDiscount.DistinctItem 
Add tbSaleItem.DistinctItem</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItem
add DistinctItem bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSaleItem
set DistinctItem=0  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItem
alter column DistinctItem bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemDiscount
drop column DistinctItem
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.834</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Merge MetaFieldDataType "multi-lang" with "text"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbMetaField
set FieldDataType=1
where FieldDataType=13
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.833</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index [IX_MetaFieldItem_PriorityOrder]</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_MetaFieldItem_PriorityOrder] ON [tbMetaFieldItem] ([MetaFieldId] ,[PriorityOrder] ,[MetaFieldItemName] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.832</SQLVERSION><RMTRACKLINK>SIT-2091</RMTRACKLINK><REASON>Modify tbPortfolioSlotHold.UserAccountId from NOT NULL to NULL</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP INDEX tbPortfolioSlotHold.IX_PortfolioSlotHold_UserAccountId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotHold
alter column UserAccountId uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioSlotHold_UserAccountId] ON [tbPortfolioSlotHold] ([UserAccountId] ) where UserAccountId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.831</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbSaleItemDiscount.DistinctItem</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItemDiscount
add
  DistinctItem bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSaleItemDiscount
set 
  DistinctItem=0  

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemDiscount
alter column DistinctItem bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.830</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add column tbProduct.Membership</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add
  Membership bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set 
  Membership=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set 
  Membership=1  
where
  ProductType=7
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column Membership bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set 
  ProductType=1  
where
  ProductType=7
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.829</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbCatalogRule</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCatalogRule drop constraint PK_CatalogRule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCatalogRule] add constraint PK_CatalogRule Primary Key ([CatalogId],[EntityType],[CatalogRuleLine],[TagId])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.828</SQLVERSION><RMTRACKLINK>SIT-1991</RMTRACKLINK><REASON>Refactor tbSaleTab</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbSaleTab
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleTab drop constraint PK_SaleTab
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleTab alter column SaleId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleTab add SaleTabId Uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleTab] add constraint PK_SaleTab Primary Key ([SaleTabId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [IX_SaleTab_SaleId] ON [tbSaleTab] ([SaleId] ) where SaleId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index tbSaleTab.UQ_Saletab_SaleTabCode
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_SaleTab_SaleTabCode] ON [tbSaleTab] ([OpAreaAccountId] ,[SaleFiscalDate] ,[SaleTabPrefix] ,[SaleTabSerial] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index tbSaleTab.IX_SerialTab_ResourceSerialId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleTab_ResourceSerialId] ON [tbSaleTab] ([ResourceSerialId] ,[SaleTabStatus] ,[SaleFiscalDate] ) where ResourceSerialId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.827</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tbCatalogRule</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCatalog
add
  AutoSynchronize bit null,    
  ManualChange bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbCatalog
set 
  AutoSynchronize=0,  
  ManualChange=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCatalog
alter column AutoSynchronize bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCatalog
alter column ManualChange bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbCatalogRule]
(
	[CatalogId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[CatalogRuleLine] Smallint NOT NULL,
	[TagId] Uniqueidentifier NOT NULL,
	[RuleInclude] Bit NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCatalogRule] add constraint PK_CatalogRule Primary Key ([CatalogId],[EntityType],[CatalogRuleLine])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_CatalogRule_TagId] ON [tbCatalogRule] ([TagId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCatalogRule] add constraint FK_CatalogRule_Catalog foreign key([CatalogId]) references [tbCatalog] ([CatalogId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCatalogRule] add constraint FK_CatalogRule_Tag foreign key([TagId]) references [tbTag] ([TagId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.826</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Makes tbAccountDetail fields nvarchar(100)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column FirstName nvarchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column LastName nvarchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column Address nvarchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column ZipCode nvarchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column City nvarchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column Province nvarchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column State nvarchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column Country nvarchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column HomePhone nvarchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column BusinessPhone nvarchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column MobilePhone nvarchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column Fax nvarchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column EmailAddress nvarchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column ExternalCode varchar(30) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_AccountDetail_NickName on tbAccountDetail


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column NickName nvarchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccountDetail_NickName] ON [tbAccountDetail] ([NickName] ) 
where NickName is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.825</SQLVERSION><RMTRACKLINK>SIT-1991</RMTRACKLINK><REASON>New table tbSaleTab</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleTab]
(
	[SaleId] Uniqueidentifier NOT NULL,
	[OpAreaAccountId] Uniqueidentifier NOT NULL,
	[SaleFiscalDate] date NOT NULL,
	[SaleTabPrefix] Varchar(3) NOT NULL,
	[SaleTabSerial] Smallint NOT NULL,
	[SaleTabStatus] Tinyint NOT NULL,
	[ResourceSerialId] Uniqueidentifier NULL
 )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleTab] add constraint PK_SaleTab Primary Key ([SaleId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Saletab_SaleTabCode] ON [tbSaleTab] ([OpAreaAccountId] ,[SaleFiscalDate] ,[SaleTabPrefix] ,[SaleTabSerial] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SerialTab_ResourceSerialId] ON [tbSaleTab] ([ResourceSerialId] ,[SaleTabStatus] ,[SaleFiscalDate] ) where ResourceSerialId is not null 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleTab_Status] ON [tbSaleTab] ([SaleTabStatus] ,[OpAreaAccountId] ,[SaleFiscalDate] ,[SaleTabSerial] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleTab] add constraint FK_SaleTab_Sale foreign key([SaleId]) references [tbSale] ([SaleId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleTab] add constraint FK_SerialTab_ResourceSerial foreign key([ResourceSerialId]) references [tbResourceSerial] ([ResourceSerialId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleTab] add constraint FK_SaleTab_OpAreaAccount foreign key([OpAreaAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.824</SQLVERSION><RMTRACKLINK>SIT-1991</RMTRACKLINK><REASON>Add FK tbLedgerRuleDetail on LedgerRuleId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbLedgerRuleDetail
where LedgerRuleId not in (select LedgerRuleId from tbLedgerRule)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRuleDetail] add constraint FK_LedgerRuleDetail_LedgerRule foreign key([LedgerRuleId]) references [tbLedgerRule] ([LedgerRuleId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.823</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbWebAuth</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbWebAuth
drop column CustomData
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbWebAuth
add
  CreateOrderConfirmation bit not null,  
  SendOrderConfirmation bit not null,  
  IncludeTickets bit not null,  
  PreparePahDownload bit not null,  
  DocTemplateId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_WebAuth_DocTemplateId] ON [tbWebAuth] ([DocTemplateId] ) 
where DocTemplateId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbWebAuth] add constraint FK_WebAuth_DocTemplate foreign key([DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.822</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbPlugin.PluginCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPlugin
add PluginCode varchar(15) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Plugin_PluginCode] ON [tbPlugin] ([PluginCode] ) 
where PluginCode is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.821</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbWebAuth-PaymentMethodId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbWebAuth
add PaymentMethodId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_WebAuth_PaymentMethodId] ON [tbWebAuth] ([PaymentMethodId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbWebAuth] add constraint FK_WebAuth_PaymentMethod foreign key([PaymentMethodId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.820</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename tbWebAuth field WebAuthType into WebAuthStatus</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbWebAuth.WebAuthType',
    @newname = 'WebAuthStatus',
    @objtype = 'COLUMN'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.819</SQLVERSION><RMTRACKLINK>SIT-2035</RMTRACKLINK><REASON>New fields into tbDocTemplate:
SaleForApproval 
SaleOpen
SalePaid 
SaleConfirmed</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table 
  tbDoctemplate
add 
  SaleForApproval bit null, 
  SaleOpen bit null,  
  SalePaid bit null,  
  SaleCompleted bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbDoctemplate
set
  SaleForApproval=1, 
  SaleOpen=1,  
  SalePaid=1,  
  SaleCompleted=1  
where 
  DocTemplateType=4
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbDoctemplate
set
  SaleForApproval=0, 
  SaleOpen=0,  
  SalePaid=0,  
  SaleCompleted=0  
where 
  DocTemplateType&lt;&gt;4
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
alter column SaleForApproval bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
alter column SaleOpen bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
alter column SalePaid bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
alter column SaleCompleted bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.818</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTicketLocker</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTicketLocker]
(
	[TicketId] Uniqueidentifier NOT NULL,
	[LockerCode] Varchar(20) NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
	[LockerStatus] Smallint NOT NULL,
	[ExpirationDateTime] Smalldatetime NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketLocker] add constraint PK_TicketLocker Primary Key ([TicketId], [LockerCode])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketLocker_ProductId] ON [tbTicketLocker] ([ProductId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketLocker_Status] ON [tbTicketLocker] ([LockerStatus] ,[ExpirationDateTime] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketLocker] add constraint FK_TicketLocker_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketLocker] add constraint FK_TicketLocker_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.817</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbWebAuth</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbWebAuth]
(
	[WebAuthId] Uniqueidentifier NOT NULL,
	[WebAuthRef] Varchar(50) NOT NULL,
	[WebAuthType] Tinyint NOT NULL,
	[WebAuthAmount] Money NOT NULL,
	[CreateDateTime] Smalldatetime NOT NULL,
	[CloseDateTime] Smalldatetime NULL,
	[SaleId] Uniqueidentifier NOT NULL,
	[WorkstationId] Uniqueidentifier NOT NULL,
	[PluginId] Uniqueidentifier NOT NULL,
	[AuthorizationCode] Varchar(20) NULL,
	[CustomData] Ntext NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbWebAuth] add constraint PK_WebAuth Primary Key ([WebAuthId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_WebAuth_WebAuthRef] ON [tbWebAuth] ([WebAuthRef] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_WebAuth_CreateDateTime] ON [tbWebAuth] ([CreateDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_WebAuth_SaleId] ON [tbWebAuth] ([SaleId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_WebAuth_WorkstationId] ON [tbWebAuth] ([WorkstationId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_WebAuth_PluginId] ON [tbWebAuth] ([PluginId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_WebAuth_AuthorizationCode] ON [tbWebAuth] ([AuthorizationCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbWebAuth] add constraint FK_WebAuth_Sale foreign key([SaleId]) references [tbSale] ([SaleId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbWebAuth] add constraint FK_WebAuth_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbWebAuth] add constraint FK_WebAuth_Plugin foreign key([PluginId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.816</SQLVERSION><RMTRACKLINK>SIT-1795</RMTRACKLINK><REASON>Add tbPortfolioSlot.AmountOnHold</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlot
add AmountOnHold Money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPortfolioSlot
set AmountOnHold=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlot
alter column AmountOnHold Money not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.815</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Changed tbSaleApprove.UserAccountId from required to optional</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleApprove
alter column UserAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.814</SQLVERSION><RMTRACKLINK>SIT-1795</RMTRACKLINK><REASON>[0..2] New field tbPortfolioSlotHold.TransactionId
[3..7] New filed tbPortfolioSlotLog.PortfolioSlotLogType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotHold
add TransactionId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPortfolioSlotHold] add constraint FK_PortfolioSlotHold_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioSlotHold_TransactionId] ON [tbPortfolioSlotHold] ([TransactionId] ) where TransactionId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotLog
add PortfolioSlotLogType tinyint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPortfolioSlotLog
set PortfolioSlotLogType=4
where EntityType=58
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPortfolioSlotLog
set PortfolioSlotLogType=3
where MembershipPointId in (select MembershipPointId from tbMembershipPoint where MembershipPointCode&lt;&gt;'#WALLET')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPortfolioSlotLog
set PortfolioSlotLogType = 
  (case
    when LogAmount &gt;= 0 then 0
    else 1
   end)
where PortfolioSlotLogType is null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotLog
alter column PortfolioSlotLogType tinyint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.813</SQLVERSION><RMTRACKLINK>SIT-1795</RMTRACKLINK><REASON>[0..8] New table tbPortfolioSlotHold
[9..11] New tbPortfolioSlotLog.PortfolioSlotHoldId
[12..14] New tbPaymentWallet.PortfolioSlotHoldId
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbPortfolioSlotHold]
(
	[PortfolioSlotHoldId] Uniqueidentifier NOT NULL,
	[PortfolioId] Uniqueidentifier NOT NULL,
	[HoldDateTime] Smalldatetime NOT NULL,
	[HoldStatus] Tinyint NOT NULL,
	[WorkstationId] Uniqueidentifier NOT NULL,
	[UserAccountId] Uniqueidentifier NOT NULL
 )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPortfolioSlotHold] add constraint PK_PortfolioSlotHold Primary Key ([PortfolioSlotHoldId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioSlotHold_PortfolioId] ON [tbPortfolioSlotHold] ([PortfolioId] ) 
 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioSlotHold_HoldDateTime] ON [tbPortfolioSlotHold] ([HoldDateTime] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioSlotHold_WorkstationId] ON [tbPortfolioSlotHold] ([WorkstationId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioSlotHold_UserAccountId] ON [tbPortfolioSlotHold] ([UserAccountId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPortfolioSlotHold] add constraint FK_PortfolioSlotHold_Portfolio foreign key([PortfolioId]) references [tbTicketMediaMatch] ([TicketMediaMatchId])  on update no action on delete no action 

 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPortfolioSlotHold] add constraint FK_PortfolioSlotHold_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPortfolioSlotHold] add constraint FK_PortfolioSlotHold_UserAccount foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotLog
add PortfolioSlotHoldId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioSlotLog_PortfolioSlotHoldId] ON [tbPortfolioSlotLog] ([PortfolioSlotHoldId] ) where PortfolioSlotHoldId is not null 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPortfolioSlotLog] add constraint FK_PortfolioSlotLog_PortfolioSlotHold foreign key([PortfolioSlotHoldId]) references [tbPortfolioSlotHold] ([PortfolioSlotHoldId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentWallet
add PortfolioSlotHoldId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentWallet_PortfolioHoldId] ON [tbPaymentWallet] ([PortfolioSlotHoldId] ) where PortfolioSlotHoldId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentWallet] add constraint FK_PaymentWallet_PortfolioSlotHold foreign key([PortfolioSlotHoldId]) references [tbPortfolioSlotHold] ([PortfolioSlotHoldId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.812</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbAccountFinance.GracePeriodDays</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
add GracePeriodDays smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccountFinance
set GracePeriodDays=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
alter column GracePeriodDays smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccountFinance
set CreditDays=30000
where CreditDays&gt;30000

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccountFinance
set ItemsPerTransaction=30000
where ItemsPerTransaction&gt;30000

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
alter column CreditDays smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
alter column ItemsPerTransaction smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.811</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbDriver.LibraryName -&gt; NULLABLE</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDriver
alter column LibraryName varchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbDriver
set LibraryName=null
where LibraryName=''
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.810</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactoting B2B rights type ids</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRight
set RightType=2001
where RightType=253
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbRight
set RightType=2002
where RightType=254
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbRight
set RightType=2003
where RightType=255
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbRight
set RightType=2004
where RightType=256
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbRight
set RightType=2005
where RightType=257
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbRight
set RightType=2006
where RightType=258
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.809</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbProduct for media print templates</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add
  POS_AllowPrint bit null,  
  POS_DocTemplateId uniqueidentifier null,
  CLC_AllowPrint bit null,  
  CLC_DocTemplateId uniqueidentifier null,
  B2B_AllowPrint bit null,  
  B2B_DocTemplateId uniqueidentifier null,
  B2C_AllowPrint bit null,  
  B2C_DocTemplateId uniqueidentifier null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set
  POS_AllowPrint=(case when DocTemplateId is null then 0 else 1 end),
  POS_DocTemplateId=DocTemplateId,  
  CLC_AllowPrint=(case when PahTemplateId is null then 0 else 1 end),  
  CLC_DocTemplateId=PahTemplateId,  
  B2B_AllowPrint=(case when PahTemplateId is null then 0 else 1 end),  
  B2B_DocTemplateId=PahTemplateId,  
  B2C_AllowPrint=(case when PahTemplateId is null then 0 else 1 end),  
  B2C_DocTemplateId=PahTemplateId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column POS_AllowPrint bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column CLC_AllowPrint bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column B2B_AllowPrint bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column B2C_AllowPrint bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Product_DocTemplateId on tbProduct
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Product_PahTemplateId on tbProduct
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct drop constraint FK_Product_DocTemplate_DocTemplateId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct drop constraint FK_Product_DocTemplate_PahTemplateId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
drop column DocTemplateId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
drop column PahTemplateId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_POS_DocTemplateId] ON [tbProduct] ([POS_DocTemplateId] ) 
where POS_DocTemplateId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_CLC_DocTemplateId] ON [tbProduct] ([CLC_DocTemplateId] ) 
where CLC_DocTemplateId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_B2B_DocTemplateId] ON [tbProduct] ([B2B_DocTemplateId] ) 
where B2B_DocTemplateId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_B2C_DocTemplateId] ON [tbProduct] ([B2C_DocTemplateId] ) 
where B2C_DocTemplateId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_POS_DocTemplate foreign key([POS_DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_CLC_DocTemplate foreign key([CLC_DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_B2B_DocTemplate foreign key([B2B_DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_B2C_DocTemplate foreign key([B2C_DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbEntityChange
where EntityId in (select ProductId from tbProduct where ProductType&lt;&gt;5) /*PromoRule*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (
  EntityType,  
  EntityId,  
  InsertUpdate
)
select
  12, /*ProductType*/  
  ProductId,  
  1
from tbProduct
where ProductType&lt;&gt;5 /*PromoRule*/
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.808</SQLVERSION><RMTRACKLINK>SIT-2015</RMTRACKLINK><REASON>Increase tbAction.ActionName column size</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAction
alter column ActionName nvarchar(100) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.807</SQLVERSION><RMTRACKLINK>SIT-1795 SIT-1980</RMTRACKLINK><REASON>New table tbAccountUserLimit
Refactoring tbAccount
Refactoring tbLogin</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbAccountUserLimit]
(
	[AccountId] Uniqueidentifier NOT NULL,
	[RoleId] Uniqueidentifier NOT NULL,
	[Quantity] Integer NOT NULL
)
 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountUserLimit] add constraint PK_AccountUserLimit Primary Key ([AccountId], [RoleId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountUserLimit] add constraint FK_AccountUserLimit_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountUserLimit] add constraint FK_AccountUserLimit_Role foreign key([RoleId]) references [tbRole] ([RoleId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccountUserLimit_RoleId] ON [tbAccountUserLimit] ([RoleId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccount set AccountStatus=2
where AccountId in 
  (select 
     AccountId
   from
     tbLogin
   where
     LoginStatus&gt;1)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLogin
drop column LoginStatus
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccount
add LoginSNP bit null, LoginB2B bit null, LoginB2C bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccount
set LoginSNP=0, LoginB2B=0, LoginB2C=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbAccount
set 
  LoginB2B=1
where 
  EntityType=15 and
  AccountId in (select 
   	          A.AccountId
		from
		  tbAccount A inner join
		  tbLogin L on L.AccountId=A.AccountId inner join
		  tbAccount PA on PA.AccountId=A.ParentAccountId inner join
		  tbAccountFinance AF on AF.AccountId=PA.AccountId and AF.B2BWorkstationId is not null)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbAccount
set 
  LoginSNP=1
where 
  EntityType=15 and
  AccountId in (select 
      	          A.AccountId
		from
		  tbAccount A inner join
		  tbLogin L on L.AccountId=A.AccountId
		where
		  A.LoginB2B is null or A.LoginB2B = 0)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccount
alter column LoginSNP bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccount
alter column LoginB2B bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccount
alter column LoginB2C bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.806</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index UQ_MetaField_FieldType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_MetaField_FieldType] ON [tbMetaField] ([FieldType] ) 
where FieldType is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.805</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbPluginPaymentMethod.PaymentMethodCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPluginPaymentMethod
add PaymentMethodCode varchar(15) NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_PluginPaymentMethod_PaymentMethodCode] ON [tbPluginPaymentMethod] ([PaymentMethodCode] ) 
where PaymentMethodCode is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.804</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>change type of  tbTransactionWallet.WalletDeposit to money</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table [tbTransactionWallet]
alter column WalletDeposit Money NOT NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.803</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>change type of  tbSaleItemDatail.WalletDeposit to money</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItemDetail
alter column WalletDeposit Money NOT NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.802</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>refactortable tbTicketIncProd</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbTicketIncProd
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTicketIncProd]
(
	[TicketId] Uniqueidentifier NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
        [QuantityTotal] Smallint NULL,
	[QuantityUsed] Smallint NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbTicketIncProd add constraint PK_TicketIncProd Primary Key ([TicketId],[ProductId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketIncProduct_ProductId] ON [tbTicketIncProd] ([ProductId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketIncProd] add constraint FK_TicketIncProd_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 
Alter table [tbTicketIncProd] add constraint FK_TicketIncProd_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.801</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Patch to fix historic transaction data paid with payment type "ExtCCDevice" and "ManualCreditCard"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbPayment 
set PaymentType=2
where PaymentType in (18, 21)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.800</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop column LicenseId on tables:
- tbCategory</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCategory drop constraint FK_Category_License
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_Category_Code on tbCategory
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCategory
drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Category_Code] ON [tbCategory] ([CategoryCode] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.799</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0..2] New size for tbLoginAlias.VerifyCode
[3..6] New filed tbAction.DocTemplateType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index tbLoginAlias.IX_LoginAlias_VerifyCode
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLoginAlias
ALTER COLUMN VerifyCode varchar(32) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>create index IX_LoginAlias_VerifyCode on tbLoginAlias (VerifyCode) where VerifyCode is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAction
add DocTemplateType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAction
set DocTemplateType=4
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAction
alter column DocTemplateType smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.798</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTicketIncProd</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTicketIncProd]
(
	[TicketId] Uniqueidentifier NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
	[Quantity] Smallint NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbTicketIncProd add constraint PK_TicketIncProd Primary Key ([TicketId],[ProductId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketIncProduct_ProductId] ON [tbTicketIncProd] ([ProductId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketIncProd] add constraint FK_TicketIncProd_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 
Alter table [tbTicketIncProd] add constraint FK_TicketIncProd_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.797</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop tbLogin.VerifyCode column</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index tbLogin.IX_Login_VerifyCode
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLogin
drop column VerifyCode
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.796</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop column LicenseId on tables:
- tbTask
- tbCurrency
- tbRepository
- tbBox
- tbMask
- tbMetaField</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTask drop constraint FK_Task_License
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTask
drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCurrency drop constraint FK_Currency_License
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_Currency_ISOCode on tbCurrency
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCurrency
drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Currency_ISOCode] ON [tbCurrency] ([ISOCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbRepository drop constraint FK_Repository_License
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IDX_Repository on tbRepository
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbRepository
drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Repository_EntityId] ON [tbRepository] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBox drop constraint FK_Box_License
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_Box_Code on tbBox
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBox
drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Box_Code] ON [tbBox] ([BoxCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMask drop constraint FK_Mask_License
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_Mask_Code on tbMask
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMask
drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Mask_Code] ON [tbMask] ([MaskCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMetaField drop constraint FK_MetaField_License
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_MetaField_Code on tbMetaField
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMetaField
drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_MetaField_Code] ON [tbMetaField] ([MetaFieldCode] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.795</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor UQ_Transaction_TDSSN removing the "StationSerial&gt;0" filter</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE 
  @TransactionId uniqueidentifier, 
  @TransactionFiscalDate date, 
  @LicenseId smallint, 
  @TransactionSerial smallint;

DECLARE trn_cursor CURSOR FOR 
select TransactionId, TransactionFiscalDate, LicenseId from tbTransaction where StationSerial&lt;0;

OPEN trn_cursor

FETCH NEXT FROM trn_cursor 
INTO @TransactionId, @TransactionFiscalDate, @LicenseId 

WHILE @@FETCH_STATUS = 0
BEGIN
  select @TransactionSerial=Coalesce(MAX(TransactionSerial) + 1, 1)
  from tbTransaction
  where TransactionFiscalDate=@TransactionFiscalDate and LicenseId=@LicenseId and StationSerial=0

  update tbTransaction
  set StationSerial=0, TransactionSerial=@TransactionSerial
  where TransactionId=@TransactionId

  FETCH NEXT FROM trn_cursor 
  INTO @TransactionId, @TransactionFiscalDate, @LicenseId 
END 
CLOSE trn_cursor;
DEALLOCATE trn_cursor;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_Transaction_TDSSN on tbTransaction
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Transaction_TDSSN] ON [tbTransaction] ([TransactionFiscalDate] ,[LicenseId] ,[StationSerial] ,[TransactionSerial] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.794</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor UQ_Ticket_TDSSN removing the "TicketSerial&gt;0" filter</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE 
  @TicketId uniqueidentifier, 
  @EncodeFiscalDate date, 
  @LicenseId smallint, 
  @StationSerial smallint, 
  @TicketSerial smallint;

DECLARE ticket_cursor CURSOR FOR 
select TicketId, EncodeFiscalDate, LicenseId, StationSerial from tbTicket where TicketSerial=0;

OPEN ticket_cursor

FETCH NEXT FROM ticket_cursor 
INTO @TicketId, @EncodeFiscalDate, @LicenseId, @StationSerial

WHILE @@FETCH_STATUS = 0
BEGIN
  select @TicketSerial=Coalesce(MAX(TicketSerial) + 1, 1)
  from tbTicket
  where EncodeFiscalDate=@EncodeFiscalDate and LicenseId=@LicenseId and StationSerial=@StationSerial and TicketSerial&gt;0

  update tbTicket
  set TicketSerial=@TicketSerial
  where TicketId=@TicketId

  FETCH NEXT FROM ticket_cursor 
  INTO @TicketId, @EncodeFiscalDate, @LicenseId, @StationSerial
END 
CLOSE ticket_cursor;
DEALLOCATE ticket_cursor;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_Ticket_TDSSN on tbTicket
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Ticket_TDSSN] ON [tbTicket] ([EncodeFiscalDate] ,[LicenseId] ,[StationSerial] ,[TicketSerial] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.793</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop column LicenseId on tables:
- tbResourceType
- tbTimedTicketRule
- tbDocTemplate
- tbAttribute
- tbProduct</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_ResourceType_Code on tbResourceType


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceType
drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ResourceType_Code] ON [tbResourceType] ([ResourceTypeCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTimedTicketRule drop constraint FK_TimedTicketRule_License
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTimedTicketRule
drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_TimedTicketRuleItem_TimedTicketRuleId on tbTimedTicketRule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocTemplate drop constraint FK_DocTemplate_License
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_DocTemplate_SystemCode on tbDocTemplate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_DocTemplate_SystemCode] ON [tbDocTemplate] ([SystemCode] ) 
WHERE SystemCode IS NOT NULL

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAttribute drop constraint FK_Attribute_License
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_Attribute_Code on tbAttribute
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAttribute
drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Attribute_Code] ON [tbAttribute] ([AttributeCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct drop constraint FK_Product_License
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_Product_ProductCode on tbProduct
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Product_ProductCode] ON [tbProduct] ([ProductCode] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.792</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor UQ_Media_TDSSN removing the "MediaSerial&gt;0" filter</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE 
  @MediaId uniqueidentifier, 
  @EncodeFiscalDate date, 
  @LicenseId smallint, 
  @StationSerial smallint, 
  @MediaSerial smallint;

DECLARE media_cursor CURSOR FOR 
select MediaId, EncodeFiscalDate, LicenseId, StationSerial from tbMedia where MediaSerial=0;

OPEN media_cursor

FETCH NEXT FROM media_cursor 
INTO @MediaId, @EncodeFiscalDate, @LicenseId, @StationSerial

WHILE @@FETCH_STATUS = 0
BEGIN
  select @MediaSerial=Coalesce(MAX(MediaSerial) + 1, 1)
  from tbMedia 
  where EncodeFiscalDate=@EncodeFiscalDate and LicenseId=@LicenseId and StationSerial=@StationSerial and MediaSerial&gt;0

  update tbMedia
  set MediaSerial=@MediaSerial
  where MediaId=@MediaId

  FETCH NEXT FROM media_cursor 
  INTO @MediaId, @EncodeFiscalDate, @LicenseId, @StationSerial
END 
CLOSE media_cursor;
DEALLOCATE media_cursor;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_Media_TDSSN on tbMedia
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Media_TDSSN] ON [tbMedia] ([EncodeFiscalDate] ,[LicenseId] ,[StationSerial] ,[MediaSerial] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.791</SQLVERSION><RMTRACKLINK>SIT-1929</RMTRACKLINK><REASON>** Refactor Ledger rules
Create table tbLedgerRuleDetail
Modify some fileds into tbLedgerRule
Drop table tbLedgerRuleTarget</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbLedgerRuleDetail]
(
	[LedgerRuleId] Uniqueidentifier NOT NULL,
	[LedgerRuleDetailSerial] Smallint NOT NULL,
	[DebitLedgerAccountId] Uniqueidentifier NOT NULL,
	[DebitAccountType] Smallint NOT NULL,
	[DebitAccountId] Uniqueidentifier NULL,
	[CreditLedgerAccountId] Uniqueidentifier NOT NULL,
	[CreditAccountType] Smallint NOT NULL,
	[CreditAccountId] Uniqueidentifier NULL,
	[UsageFilterLocationId] Uniqueidentifier NULL,
	[Weight] Money NOT NULL,
	[WeightType] Tinyint NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbLedgerRuleDetail add constraint PK_LedgerRuleDetail Primary Key ([LedgerRuleId],[LedgerRuleDetailSerial])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerRuleDetail_DebitLedgerAccountId] ON [tbLedgerRuleDetail] ([DebitLedgerAccountId] ) 
Create Index [IX_LedgerRuleDetail_DebitAccountId] ON [tbLedgerRuleDetail] ([DebitAccountId] ) where DebitAccountId is not null
Create Index [IX_LedgerRuleDetail_CreditLedgerAccountId] ON [tbLedgerRuleDetail] ([CreditLedgerAccountId] ) 
Create Index [IX_LedgerRuleDetail_CreditAccountId] ON [tbLedgerRuleDetail] ([CreditAccountId] ) where CreditAccountId is not null
Create Index [IX_LedgerRuleDetail_UsageFilterLocationId] ON [tbLedgerRuleDetail] ([UsageFilterLocationId] ) where UsageFilterLocationId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRuleDetail] add constraint FK_LedgerRuleDetail_DebitLedgerAccountId foreign key([DebitLedgerAccountId]) references [tbLedgerAccount] ([LedgerAccountId])  on update no action on delete no action 
Alter table [tbLedgerRuleDetail] add constraint FK_LedgerRuleDetail_DebitAccountId foreign key([DebitAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
Alter table [tbLedgerRuleDetail] add constraint FK_LedgerRuleDetail_CreditLedgerAccountId foreign key([CreditLedgerAccountId]) references [tbLedgerAccount] ([LedgerAccountId])  on update no action on delete no action 
Alter table [tbLedgerRuleDetail] add constraint FK_LedgerRuleDetail_CreditAccountId foreign key([CreditAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
Alter table [tbLedgerRuleDetail] add constraint FK_LedgerRuleDetail_UsageFilterLocationId foreign key([UsageFilterLocationId]) references [tbAccount] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbLedgerRuleDetail 
select 
	LRT.LedgerRuleId,
	LRT.LedgerRuleTargetSerial,
	LR.SourceLedgerAccountId,
	LR.SourceAccountType,
	LR.SourceAccountId,
	LRT.TargetLedgerAccountId,
	LRT.TargetAccountType,
	LRT.TargetAccountId,
	LRT.UsageFilterLocationId,
	LRT.Weight,
	LRT.WeightType
from 
	tbLedgerRuleTarget LRT inner join
	tbLedgerRule LR on LR.LedgerRuleId = LRT.LedgerRuleId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX tbLedgerRule.IX_LedgerRule_SourceAccountId

DROP INDEX tbLedgerRule.IX_LedgerRule_SourceLedgerAccountId

ALTER TABLE tbLedgerRule
DROP CONSTRAINT FK_LedgerRule_Account_SourceAccountId

ALTER TABLE tbLedgerRule
DROP CONSTRAINT LK_LedgerRule_LedgerAccount_SourceLedgerAccountId

ALTER TABLE tbLedgerRule
DROP COLUMN SourceLedgerAccountId

ALTER TABLE tbLedgerRule
DROP COLUMN SourceAccountId

ALTER TABLE tbLedgerRule
DROP COLUMN SourceAccountType


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerRule
ADD UsedTicket bit null

ALTER TABLE tbLedgerRule
ADD UnusedTicket bit null

ALTER TABLE tbLedgerRule
ADD ValidOnlineOffline bit null

ALTER TABLE tbLedgerRule
ADD InvalidOffline bit null

ALTER TABLE tbLedgerRule
ADD MultiplyWeight bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerRule
set UsedTicket=0, Unusedticket=0

update tbLedgerRule
set UsedTicket = 
  (case LedgerUsageFilter
     when 2 then 0
	 else 1
	 end),
  UnusedTicket =
  (case LedgerUsageFilter
     when 1 then 0
	 else 1
	 end)
where LedgerTriggerType in (111, 112, 301)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerRule
set ValidOnlineOffline=0, InvalidOffline=0

update tbLedgerRule
set ValidOnlineOffline = 
  (case LedgerOfflineFilter
     when 3 then 0
	 else 1
	 end),
  InvalidOffline =
  (case LedgerOfflineFilter
     when 2 then 0
	 else 1
	 end)
where LedgerTriggerType in (201, 202, 203, 220, 221)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerRule
set MultiplyWeight = UsageRedeemTypeNEntries
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerRule
ALTER COLUMN UsedTicket bit not null

ALTER TABLE tbLedgerRule
ALTER COLUMN UnusedTicket bit not null

ALTER TABLE tbLedgerRule
ALTER COLUMN ValidOnlineOffline bit not null

ALTER TABLE tbLedgerRule
ALTER COLUMN InvalidOffline bit not null

ALTER TABLE tbLedgerRule
ALTER COLUMN MultiplyWeight bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerRule
DROP COLUMN LedgerUsageFilter

ALTER TABLE tbLedgerRule
DROP COLUMN LedgerOfflineFilter

ALTER TABLE tbLedgerRule
DROP COLUMN UsageRedeemTypeNEntries
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbLedgerRule where TriggerEntityType=6 or TriggerEntityId is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX tbLedgerRule.IX_LedgerRule_TriggerEntityId

ALTER TABLE tbLedgerRule
ALTER COLUMN TriggerEntityId Uniqueidentifier not null

ALTER TABLE tbLedgerRule
ALTER COLUMN TriggerEntityType int not null

Create Index [IX_LedgerRule_TriggerEntityId] ON [tbLedgerRule] ([TriggerEntityId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbLedgerRuleTarget
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.790</SQLVERSION><RMTRACKLINK>SIT-1920</RMTRACKLINK><REASON>Add tbLedgerRule.TriggerOnRefund
Add tbLedgerRule.TriggerOnUpgrade</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerRule
ADD TriggerOnRefund bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerRule
ADD TriggerOnUpgrade bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerRule
set TriggerOnRefund=1, TriggerOnUpgrade=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerRule
ALTER COLUMN TriggerOnRefund bit not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerRule
ALTER COLUMN TriggerOnUpgrade bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.789</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop column tbSaleChannel.LicenseId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_SaleChannelCode on tbSaleChannel
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleChannel drop constraint FK_SaleChannel_License
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleChannel
drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_SaleChannel_Code] ON [tbSaleChannel] ([SaleChannelCode] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.788</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop column tbPerformanceType.LicenseId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_PerformanceType_Code on tbPerformanceType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformanceType drop constraint FK_PerformanceType_License
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformanceType
drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_PerformanceType_Code] ON [tbPerformanceType] ([PerformanceTypeCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename N'tbPerformanceType.IDX_PerformanceType_ParentEntity', N'IX_PerformanceType_ParentEntity', N'INDEX'; 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename N'tbPerformanceType.IDX_PerformanceType_ParentEntityId', N'IX_PerformanceType_ParentEntityId', N'INDEX'; 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.787</SQLVERSION><RMTRACKLINK>SIT-1912</RMTRACKLINK><REASON>Add foreing key to tbLedgerRuleTarget</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbLedgerRuleTarget
where LedgerRuleId not in (select LedgerRuleId from tbLedgerRule)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRuleTarget] add constraint FK_LedgerRuleTarget_LedgerRule foreign key([LedgerRuleId]) references [tbLedgerRule] ([LedgerRuleId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.786</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add filed tbMedia.ExtSystemType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMedia
add ExtSystemType Tinyint NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.785</SQLVERSION><RMTRACKLINK>SIT-1857</RMTRACKLINK><REASON>Add new filed tbLogin.VerifyCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLogin
add VerifyCode Varchar(16) NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>create index IX_Login_VerifyCode on [tbLogin] ([VerifyCode])

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.784</SQLVERSION><RMTRACKLINK>SIT-1855</RMTRACKLINK><REASON>Drop tbRole.LicenceId
Refactor B2B users</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_Role_Code on tbRole
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbRole
DROP CONSTRAINT FK_Role_License
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbRole
drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Role_Code] ON [tbRole] ([RoleCode] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @RoleId Uniqueidentifier;
set @RoleId=NEWID();

insert into 
  tbRole
values
  (@RoleId,
  'B2BADM',
  'B2B Administrator',
  1);

insert into 
  tbRight
values
  (NEWID(),
  13,
  @RoleId,
  253,
  'true');

update tbLogin
set
  B2B_SessionPoolId=NULL,
  BKO_SessionPoolId=NULL,
  B2B_RoleId=@RoleId
where 
  AccountId in (select
	  A.AccountId
    from
	  tbAccount A inner join
	  tbAccount PA on PA.AccountId=A.ParentAccountId and PA.EntityType=1 inner join
	  tbAccountFinance AF on AF.AccountId=PA.AccountId and AF.B2BWorkstationId is not NULL);

delete 
  tbAccount2Role
where 
  AccountId in (select
	  A.AccountId
    from
	  tbAccount A inner join
	  tbAccount PA on PA.AccountId=A.ParentAccountId and PA.EntityType=1 inner join
	  tbAccountFinance AF on AF.AccountId=PA.AccountId and AF.B2BWorkstationId is not NULL);

delete 
  tbRight
where 
  EntityId in (select
	  A.AccountId
    from
	  tbAccount A inner join
	  tbAccount PA on PA.AccountId=A.ParentAccountId and PA.EntityType=1 inner join
	  tbAccountFinance AF on AF.AccountId=PA.AccountId and AF.B2BWorkstationId is not NULL);
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.783</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbSale indexes</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Sale_WorkstationId on tbSale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_WorkstationId] ON [tbSale] ([WorkstationId] ,[SaleDateTime] ) 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Sale_UserAccountId on tbSale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_UserAccountId] ON [tbSale] ([UserAccountId] ,[SaleDateTime] ) 
where UserAccountId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.782</SQLVERSION><RMTRACKLINK>SIT-1855</RMTRACKLINK><REASON>Add field tbRole.RoleType
Add field tbLogin.B2B_RoleId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbRole
add RoleType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbRole
set RoleType=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbRole
alter column RoleType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLogin
add B2B_RoleId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Login_B2B_RoleId] ON [tbLogin] ([B2B_RoleId] )
where B2B_RoleId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLogin] add constraint FK_Login_RoleId_B2B foreign key([B2B_RoleId]) references [tbRole] ([RoleId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.781</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbWorkstation.WorkstationURI</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbWorkstation
add WorkstationURI varchar(50) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Worstation_WorkstationURI] ON [tbWorkstation] ([WorkstationURI] ) 
where WorkstationURI is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.780</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbTranslate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTranslate
alter column LabelValue nvarchar(3900) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTranslate
alter column LabelKey varchar(100) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.779</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbConsAccess</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbConsAccess
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbConsAccess]
(
	[ConsAccessType] Smallint NOT NULL,
	[ConsolidateType] Smallint NOT NULL,
	[FiscalDate] date NOT NULL,
	[DateTime] Smalldatetime NOT NULL,
	[LocationAccountId] Uniqueidentifier NOT NULL,
	[OpAreaAccountId] Uniqueidentifier NOT NULL,
	[AccessAreaAccountId] Uniqueidentifier NOT NULL,
	[PerformanceId] Uniqueidentifier NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
	[OptionSetId] Uniqueidentifier NOT NULL,
	[QtyFirstUsage] Integer NOT NULL,
	[QtyEntry] Integer NOT NULL,
	[QtyReentry] Integer NOT NULL,
	[QtyExit] Integer NOT NULL,
	[QtyCrossover] Integer NOT NULL,
	[QtyOverride] Integer NOT NULL,
	[QtyTransit] Integer NOT NULL,
	[QtyOffEntry] Integer NOT NULL,
	[QtyOffReentry] Integer NOT NULL,
	[QtyOffCrossover] Integer NOT NULL,
	[FirstUsageRevenue] Money NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbConsAccess add constraint PK_ConsAccess Primary Key ([ConsAccessType],[ConsolidateType],[FiscalDate],[DateTime],[LocationAccountId],[OpAreaAccountId],[AccessAreaAccountId],[PerformanceId],[ProductId],[OptionSetId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAccess_LocationAccountId] ON [tbConsAccess] ([LocationAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAccess_OpAreaAccountId] ON [tbConsAccess] ([OpAreaAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAccess_PerformanceId] ON [tbConsAccess] ([PerformanceId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAccess_AccessAreaId] ON [tbConsAccess] ([AccessAreaAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAccess_ProductId] ON [tbConsAccess] ([ProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAccess_OptionSetId] ON [tbConsAccess] ([OptionSetId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsAccess] add constraint FK_ConsAccess_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsAccess] add constraint FK_ConsAccess_AcAreaAccount foreign key([AccessAreaAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsAccess] add constraint FK_ConsAccess_LocationAccount foreign key([LocationAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsAccess] add constraint FK_ConsAccess_OpAreaAccount foreign key([OpAreaAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsAccess] add constraint FK_ConsAccess_Performance foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketUsage
set ConsAccess=0
where UsageDateTime&gt;=DateAdd(month, -1, DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)) -- Current and Previous month
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.778</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbLedgerRule.UsageRedeemType into tbLedgerRule.UsageRedeemTypeNEntries</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerRule
Add UsageRedeemTypeNEntries bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerRule
set UsageRedeemTypeNEntries=UsageRedeemType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerRule
alter column UsageRedeemTypeNEntries bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
drop column UsageRedeemType
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.777</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create field tbTask.PurgeDays</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTask
add PurgeDays int null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.776</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename tbProduct field ExpiresOnFullUsage into ExpirationUsageType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbProduct.ExpiresOnFullUsage', 'ExpirationUsageType', 'COLUMN';
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.775</SQLVERSION><RMTRACKLINK>SIT-1845</RMTRACKLINK><REASON>Refactoring of tbLedgerRule and tbLedgerRuleTarget
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbLedgerRuleTargetLA
drop table tbLedgerRuleTarget
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbLedgerRuleTarget]
(
	[LedgerRuleId] Uniqueidentifier NOT NULL,
	[LedgerRuleTargetSerial] Smallint NOT NULL,
	[TargetLedgerAccountId] Uniqueidentifier NOT NULL,
	[TargetAccountType] Smallint NOT NULL,
	[TargetAccountId] Uniqueidentifier NULL,
	[Weight] Money NOT NULL,
	[WeightType] Tinyint NOT NULL,
	[UsageFilterLocationId] Uniqueidentifier NULL)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbLedgerRuleTarget add constraint PK_LedgerRuleTarget Primary Key ([LedgerRuleId],[LedgerRuleTargetSerial])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerRuleTarget_TargetLedgerAccountId] ON [tbLedgerRuleTarget] ([TargetLedgerAccountId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerRuleTarget_TargetAccountId] ON [tbLedgerRuleTarget] ([TargetAccountId] ) 
where TargetAccountId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerRuleTarget_UsageFilterLocationId] ON [tbLedgerRuleTarget] ([UsageFilterLocationId] ) 
where UsageFilterLocationId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRuleTarget] add constraint FK_LedgerRuleTarget_LedgerAccount_TargetLedgerAccountId foreign key([TargetLedgerAccountId]) references [tbLedgerAccount] ([LedgerAccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRuleTarget] add constraint FK_LedgerRuleTarget_Account_TargetAccountId foreign key([TargetAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRuleTarget] add constraint FK_LedgerRuleTarget_Account_UsageFilterLocationId foreign key([UsageFilterLocationId]) references [tbAccount] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbLedgerRuleTarget
  (LedgerRuleId, LedgerRuleTargetSerial, TargetLedgerAccountId, TargetAccountType, Weight, WeightType)
select 
  LedgerRuleId, 
  1 as LedgerRuleTargetSerial, 
  TargetLedgerAccountId, 
  TargetAccountType, 
  100 as Weight, 
  2 as WeightType
from 
  tbLedgerRule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerRule
DROP CONSTRAINT LK_LedgerRule_LedgerAccount_TargetLedgerAccountId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX tbLedgerRule.IX_LedgerRule_TargetLedgerAccountId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
drop column TargetLedgerAccountId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
drop column TargetAccountType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerRule
Add UsageRedeemType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerRule
set 
  UsageRedeemType=FixedTargetUsedLocationOnly,
  SourceAccountType=2,  
  SourceLedgerAccountId=(select top(1) LedgerAccountId from tbLedgerAccount where (LedgerAccountLevel=3) and (LedgerAccountId is not null))
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerRule
alter column UsageRedeemType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerRule
alter column SourceAccountType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX tbLedgerRule.IX_LedgerRule_SourceLedgerAccountId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerRule 
alter column SourceLedgerAccountId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerRule_SourceLedgerAccountId] ON [tbLedgerRule] ([SourceLedgerAccountId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
drop column FixedTargetUsedLocationOnly
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.774</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create field tbProduct.ExpiresOnFullUsage</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add ExpiresOnFullUsage smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set ExpiresOnFullUsage=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column ExpiresOnFullUsage smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.773</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop field tbProduct.ExpiresOnFullUsage</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
drop column ExpiresOnFullUsage
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.772</SQLVERSION><RMTRACKLINK>SIT-1840</RMTRACKLINK><REASON>Add new fields to tbLedgerRule
- TriggerSaleWorkstationType
- TriggerSaleLocationId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
add
  TriggerSaleWorkstationType Smallint NULL,
  TriggerSaleLocationId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRule] add constraint FK_LedgerRule_Account_TriggerSaleLocationId foreign key([TriggerSaleLocationId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerRule_TriggerSaleLocationId] ON [tbLedgerRule] ([TriggerSaleLocationId] )
where TriggerSaleLocationId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.771</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create field tbProduct.ExpiresOnFullUsage</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add ExpiresOnFullUsage bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set ExpiresOnFullUsage=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column ExpiresOnFullUsage bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.770</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbPaymentCard.AuthorizationCode from 10 to 20 chars</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentCard
alter column AuthorizationCode varchar(20) null 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.769</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create new table tbLedgerRuleTargetLA
Modify field tbLedgerRule.TargetLedgerAccountId to be null</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbLedgerRuleTargetLA]
(
	[LedgerRuleId] Uniqueidentifier NOT NULL,
	[LedgerAccountId] Uniqueidentifier NOT NULL,
	[PriorityOrder] Smallint NOT NULL,
	[Weight] Money NOT NULL,
        [WeightType] Tinyint NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbLedgerRuleTargetLA add constraint PK_LedgerRuleTargetLA Primary Key ([LedgerRuleId],[LedgerAccountId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_LedgerAccountTargetLA_LedgerAccountId ON [tbLedgerRuleTargetLA] ([LedgerAccountId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRuleTargetLA] add constraint FK_LedgerRuleTargetLA_LedgerRule foreign key([LedgerRuleId]) references [tbLedgerRule] ([LedgerRuleId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRuleTargetLA] add constraint FK_LedgerRuleTargetLA_LedgerAccount foreign key([LedgerAccountId]) references [tbLedgerAccount] ([LedgerAccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
alter column TargetLedgerAccountId Uniqueidentifier null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.768</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dummy patch... real is in java code</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.767</SQLVERSION><RMTRACKLINK>1822</RMTRACKLINK><REASON>Patch to fix new Credit Card parameters, ExtDevice and Manual Credit Card removed</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @DriverId uniqueidentifier;
set @DriverId=newID();

insert into tbDriver (DriverId, DriverType, DriverName, LibraryName, ClassAlias) values (@DriverId, 1002, '@Lookup.PaymentType.CreditCard', '', 'pay_creditcard');

update tbPlugin
set DriverId = @DriverId
where DriverId in (select DriverId from tbDriver where DriverType=1002);

delete from tbDriver where DriverType=1002 and DriverId&lt;&gt;@DriverId;    

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.766</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop field tbExtensionPackage.NeedRestart
Create field tbExtensionPackageStatus.NeedRestart</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbExtensionPackage
drop column NeedRestart
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtensionPackageStatus
add NeedRestart bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbExtensionPackageStatus
set NeedRestart=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtensionPackageStatus
alter column NeedRestart bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.765</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbExtensionPackage.NeedRestart</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbExtensionPackage
add NeedRestart bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbExtensionPackage
set NeedRestart=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtensionPackage
alter column NeedRestart bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.764</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Convert field tbPaymentCard.CardType to varchar(15)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentCard
alter column CardType varchar(15) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.763</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.ProductPriorityLevel</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add ProductPriorityLevel smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.762</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbLedgerAccount.LedgerAccountLevel</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerAccount
add LedgerAccountLevel smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerAccount
set LedgerAccountLevel=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerAccount
alter column LedgerAccountLevel smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.761</SQLVERSION><RMTRACKLINK>SIT-225</RMTRACKLINK><REASON>Patch to fix new Credit Card parameters, ExtDevice and Manual Credit Card removed</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbPlugin
set 
  PluginSettings = '{"Authorizer":"3","InputMode":"1"}'
from 
  tbPlugin P inner join
  tbDriver D on D.DriverId=P.DriverId and D.DriverType = 1002
where
  P.PluginSettings is NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPlugin
set 
  PluginSettings = '{"Authorizer":"1"}',
  PluginDefault = 0
from 
  tbPlugin P inner join
  tbDriver D on D.DriverId=P.DriverId and D.DriverType = 1021
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPlugin
set 
  PluginSettings = '{"Authorizer":"2"}',
  PluginDefault = 0
from 
  tbPlugin P inner join
  tbDriver D on D.DriverId=P.DriverId and D.DriverType = 1018
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbDriver
set 
  DriverType = 1002,
  ClassAlias = 'pay_creditcard'
where
  DriverType = 1018 or DriverType = 1021
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.760</SQLVERSION><RMTRACKLINK>SIT-225</RMTRACKLINK><REASON>Create table tbSignature</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSignature]
(
	[EntityId] Uniqueidentifier NOT NULL,
	[SignatureSerial] Tinyint NOT NULL,
	[EntityType] Smallint NOT NULL,
	[DocData] Image NOT NULL,
	[ImageFormat] Smallint NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSignature add constraint PK_Signature Primary Key ([EntityId],[SignatureSerial])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.759</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbBiometric
-EnrollmentDateTime
- UserAccountId
- WorkstationId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbBiometric
add
  EnrollmentDateTime Smalldatetime NULL,
  WorkstationId Uniqueidentifier NULL,  
  UserAccountId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBiometric] add constraint FK_Biometric_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBiometric] add constraint FK_Biometric_Account foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbBiometric
set 
  EnrollmentDateTime = DATEADD(year, 2016-1900, DATEADD(month, 0, DATEADD(day, 0, 0))),   
  WorkstationId=(select top 1 workstationId from tbWorkstation where WorkstationType=1)
 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBiometric
alter column WorkstationId Uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBiometric
alter column EnrollmentDateTime Smalldatetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Biometric_WorkstationId] ON [tbBiometric] ([WorkstationId] )

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Biometric_UserAccountId] ON [tbBiometric] ([UserAccountId] ) 
where UserAccountId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.758</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbPluginPaymentMethod
- DebitLedgerAccountId
- CreditLedgerAccountId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPluginPaymentMethod
add
  DebitLedgerAccountId uniqueidentifier null,  
  CreditLedgerAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PluginPaymentMethod_DebitLedgerAccountId] ON [tbPluginPaymentMethod] ([DebitLedgerAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PluginPaymentMethod_CreditLedgerAccountId] ON [tbPluginPaymentMethod] ([CreditLedgerAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPluginPaymentMethod] add constraint FK_PluginPaymentMethod_DebitLedgerAccount foreign key([DebitLedgerAccountId]) references [tbLedgerAccount] ([LedgerAccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPluginPaymentMethod] add constraint FK_PluginPaymentMethod_CreditLedgerAccount foreign key([CreditLedgerAccountId]) references [tbLedgerAccount] ([LedgerAccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.757</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Makes tbLedger.AccountId not nullable
- Recalculate ledger totals</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @MasterAccountId uniqueidentifier;
select @MasterAccountId=AccountId from tbLicense;

update tbLedger
set AccountId=@MasterAccountId
where AccountId is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Ledger_AccountId on tbLedger
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedger
alter column AccountId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbLedgerTotal
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbLedgerDateTotal
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbLedgerTotal (
  LedgerAccountId,
  AccountId,
  LedgerTotalBalance
)
select
  LedgerAccountId,  
  AccountId,  
  Sum(LedgerAmount)  
from tbLedger
group by
  LedgerAccountId,  
  AccountId  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbLedgerDateTotal (
  LedgerFiscalDate,
  LedgerAccountId,
  AccountId,
  LedgerTotalBalance
)
select
  LedgerFiscalDate,
  LedgerAccountId,  
  AccountId,  
  Sum(LedgerAmount)  
from tbLedger
group by
  LedgerFiscalDate,
  LedgerAccountId,  
  AccountId  
  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ledger_AccountId] ON [tbLedger] ([AccountId] ,[LedgerFiscalDate] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.756</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbLedgerManual</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbLedgerManual]
(
	[LedgerManualId] Uniqueidentifier NOT NULL,
	[LedgerManualDateTime] Smalldatetime NOT NULL,
	[WorkstationId] Uniqueidentifier NOT NULL,
	[UserAccountId] Uniqueidentifier NOT NULL,
	[LedgerManualNotes] Nvarchar(100) NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerManual add constraint PK_LedgerManual Primary Key ([LedgerManualId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerManual_WorstationId] ON [tbLedgerManual] ([WorkstationId] ,[LedgerManualDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerManual_UserAccountId] ON [tbLedgerManual] ([UserAccountId] ,[LedgerManualDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerManual_DateTime] ON [tbLedgerManual] ([LedgerManualDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerManual] add constraint FK_LedgerManual_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerManual] add constraint FK_LedgerManual_UserAccount foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.755</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbLedgerDateTotal</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbLedgerDateTotal]
(
	[LedgerFiscalDate] date NOT NULL,
	[LedgerAccountId] Uniqueidentifier NOT NULL,
	[AccountId] Uniqueidentifier NOT NULL,
	[LedgerTotalBalance] Money NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerDateTotal add constraint PK_LedgerDateTotal Primary Key ([LedgerFiscalDate],[LedgerAccountId],[AccountId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerDateTotal_LedgerAccountId] ON [tbLedgerDateTotal] ([LedgerAccountId] ,[LedgerFiscalDate] ,[AccountId] ) 
 INCLUDE (LedgerTotalBalance)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerDateTotal_AccountId] ON [tbLedgerDateTotal] ([AccountId] ,[LedgerFiscalDate] ,[LedgerAccountId] ) 
 INCLUDE (LedgerTotalBalance)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerDateTotal] add constraint FK_LedgerDateTotal_LedgerAccount foreign key([LedgerAccountId]) references [tbLedgerAccount] ([LedgerAccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerDateTotal] add constraint FK_LedgerDateTotal_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Ledger_LedgerAccountId on tbLedger
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT></SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ledger_LedgerAccountId] ON [tbLedger] ([LedgerAccountId] ,[LedgerFiscalDate] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbLedgerDateTotal (
  LedgerFiscalDate,  
  LedgerAccountId,  
  AccountId,  
  LedgerTotalBalance
)
select
  LedgerFiscalDate,  
  LedgerAccountId,  
  AccountId,  
  Sum(LedgerAmount) as LedgerTotalBalance 
from
  tbLedger     
where
  AccountId is not null
group by
  LedgerFiscalDate,  
  LedgerAccountId,  
  AccountId  

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.754</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add LastLogId to tbSiaeReport</REASON><TABLENAMES>- tbSiaeReport</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSiaeReport
add [LastLogId] Integer NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSiaeReport
set LastLogId = 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeReport
alter column [LastLogId] Integer NOT NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.753</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add Pin column to tbSiaeCard</REASON><TABLENAMES>- tbSiaeCard</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSiaeCard
add [Pin] Nvarchar(100) NULL;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.752</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tb_Biometric refactor</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Drop index tbBiometric.IX_Biometric_EntityId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbBiometric
ADD [BiometricSerial] Smallint NULL

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbBiometric
set BiometricSerial = ROW_NEXT
from (
  select 
    BiometricId as X_BiometricId,  
    Row_Number() OVER (partition by EntityId order by EntityId DESC) AS ROW_NEXT
  from 
    tbBiometric
) B
where 
  BiometricId=B.X_BiometricId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbBiometric
ALTER COLUMN [BiometricSerial] Smallint NOT NULL

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbBiometric
DROP CONSTRAINT PK_Biometric
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbBiometric
DROP COLUMN BiometricId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbBiometric ADD CONSTRAINT PK_Biometric Primary Key ([BiometricSerial], [EntityId])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.751</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSiaeLogAbbonamento</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSiaeLogAbbonamento]
(
	[LogId] Integer NOT NULL,
	[ProductCode] Varchar(8) NOT NULL,
	[SerialCode] Integer NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeLogAbbonamento add constraint PK_SiaeLogAbbonamento Primary Key ([LogId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLogAbbonamento] add constraint FK_SiaeLogAbbonamento_SiaeLog foreign key([LogId]) references [tbSiaeLog] ([LogId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.750</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field PartnerAccountId to tbSiaeLog
Add field PartitaIva to tbSiaeOrganizer
Modify field CodiceFiscale to tbSiaeOrganizer</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbSiaelog
ADD PartnerAccountId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_Account foreign key([PartnerAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_PartnerAccountId] ON [tbSiaeLog] ([PartnerAccountId] ) 
where PartnerAccountId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSiaeOrganizer
ADD PartitaIva Varchar(11) NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeOrganizer
alter column CodiceFiscale Varchar(16) NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.749</SQLVERSION><RMTRACKLINK>SIT-1725</RMTRACKLINK><REASON>Add new field WeightType to tbLedgerRuleTarget
Rename field Percentage to Weight</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerRuleTarget
add [WeightType] Smallint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerRuleTarget
set WeightType = 2
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRuleTarget
alter column [WeightType] Smallint NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_RENAME 'tbLedgerRuleTarget.Percentage', 'Weight', 'COLUMN'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.748</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbPluginPaymentMethod</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbPluginPaymentMethod]
(
  [PluginId] Uniqueidentifier NOT NULL,
  [PaymentGroupTagId] Uniqueidentifier NULL,
  [AutoFill] Bit NOT NULL,
  [IconName] Varchar(20) NULL,
  [PaymentCountMessage] Nvarchar(100) NULL
)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPluginPaymentMethod add constraint PK_PluginPaymentMethodn Primary Key ([PluginId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PluginPaymentMethod_PaymentGroupTagId] ON [tbPluginPaymentMethod] ([PaymentGroupTagId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPluginPaymentMethod] add constraint FK_PluginPaymentMethod_Plugin foreign key([PluginId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPluginPaymentMethod] add constraint FK_PluginPaymentMethod_Tag_PaymentGroupTagId foreign key([PaymentGroupTagId]) references [tbTag] ([TagId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.747</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Create table tbTransactionWarn
- Drop tbTransaction columns: Offline and Interrupted
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTransactionWarn]
(  
	[TransactionId] Uniqueidentifier NOT NULL,
	[TransactionWarn] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionWarn add constraint PK_TransactionWarn Primary Key ([TransactionId],[TransactionWarn])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionWarn_TransactionWarn] ON [tbTransactionWarn] ([TransactionWarn] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionWarn] add constraint FK_TransactionWarn_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbTransactionWarn (TransactionId, TransactionWarn)
select TransactionId, 1
from tbTransaction
where Interrupted=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbTransactionWarn (TransactionId, TransactionWarn)
select TransactionId, 2
from tbTransaction
where Offline=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
drop column Interrupted, Offline
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.746</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Remove column tbSiaeTax.TaxType
- Add tbProduct.PresaleValue, tbProduct.PresaleValueType</REASON><TABLENAMES>tbSiaeTax
tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSiaeTax
drop column TaxType

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add [PresaleValue] Money NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set PresaleValue = 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column [PresaleValue] Money NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add [PresaleValueType] Smallint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set PresaleValueType = 1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column [PresaleValueType] Smallint NOT NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.745</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Clean SIAE information
- Add column tbSiaeEvent.siaePrevenditaTaxId
- Add column tbSiaeProduct.siaePrevenditaTaxId</REASON><TABLENAMES>tbSiaePerformanceSector
tbSiaeLog
tbSiaePerformance
tbSiaeProduct
tbSiaeEvent
</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbSiaePerformanceSector
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbSiaeLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbSiaePerformance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbSiaeProduct
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbSiaeEvent
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index tbSiaeProduct.IX_SiaeProduct_SiaeTaxId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeProduct
alter column SiaeTaxId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeProduct
add [SiaePrevenditaTaxId] Uniqueidentifier NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeProduct_SiaeTaxId] ON [tbSiaeProduct] ([SiaeTaxId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeProduct_SiaePrevenditaTaxId] ON [tbSiaeProduct] ([SiaePrevenditaTaxId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeEvent
add [SiaePrevenditaTaxId] Uniqueidentifier NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeEvent_SiaePrevenditaTaxId] ON [tbSiaeEvent] ([SiaePrevenditaTaxId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeProduct] add constraint FK_SiaeProduct_SiaePrevenditaTax foreign key([SiaePrevenditaTaxId]) references [tbSiaeTax] ([SiaeTaxId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeEvent] add constraint FK_SiaeEvent_SiaePrevenditaTax foreign key([SiaePrevenditaTaxId]) references [tbSiaeTax] ([SiaeTaxId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.744</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add FK_SiaeProduct_SiaeTax
Add FK_SiaeEvent_SiaeTax</REASON><TABLENAMES>tbSiaeEventSector
tbSiaeEvent
tbSiaeProduct
tbSiaeTax</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbSiaeEventSector

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbSiaeEvent
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeProduct
add [SiaeTaxId] Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeProduct_SiaeTaxId] ON [tbSiaeProduct] ([SiaeTaxId] ) 
where SiaeTaxId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeProduct] add constraint FK_SiaeProduct_SiaeTax foreign key([SiaeTaxId]) references [tbSiaeTax] ([SiaeTaxId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeEvent
add [SiaeTaxId] Uniqueidentifier NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeEvent_SiaeTaxId] ON [tbSiaeEvent] ([SiaeTaxId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeEvent] add constraint FK_SiaeEvent_SiaeTax foreign key([SiaeTaxId]) references [tbSiaeTax] ([SiaeTaxId])  on update no action on delete no action  
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.743</SQLVERSION><RMTRACKLINK>SIT-1725-1601</RMTRACKLINK><REASON>1) Add new fields to tbTicket: ExpiredOnDateTime, ExpiredConsLedger
2) Patch to update different StatAmount from UnitAmount for DepositOnOrder sale items
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add ExpiredOnDateTime Datetime NULL,
	ExpiredConsLedger Bit NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicket
set ExpiredConsLedger=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
alter column ExpiredConsLedger bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_ValidDateToNotExpired] ON [tbTicket] ([ValidDateTo] ) 
where (ValidDateTo is not null) and (ExpiredOnDateTime is null)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_ExpiredConsLedger] ON [tbTicket] ([ExpiredConsLedger] ) 
where (ExpiredConsLedger=0) and (ExpiredOnDateTime is not null)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbSaleItem
set 
  StatAmount=UnitAmount
where
  ProductId=
    (select 
      ProductId 
    from 
      tbProduct 
    where 
      ProductCode='#RDEPOSIT') and
  (UnitAmount&lt;&gt;StatAmount)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.742</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add new field tbLedgerRule.FixedTargetUsedLocationOnly
Create new table tbLedgerRuleTarget
Remove field tbLedgerRule.TargetAccountId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Alter table tbLedgerRule 
add FixedTargetUsedLocationOnly bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerRule
set FixedTargetUsedLocationOnly=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
alter column FixedTargetUsedLocationOnly bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbLedgerRuleTarget]
(
	[LedgerRuleId] Uniqueidentifier NOT NULL,
	[TargetAccountId] Uniqueidentifier NOT NULL,
	[PriorityOrder] Smallint NOT NULL,
	[Percentage] Money NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbLedgerRuleTarget add constraint PK_LedgerRuleTarget Primary Key ([LedgerRuleId],[TargetAccountId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_LedgerAccountTarget_TargetAccountId ON [tbLedgerRuleTarget] ([TargetAccountId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRuleTarget] add constraint FK_LedgerRuleTarget_LedgerRule foreign key([LedgerRuleId]) references [tbLedgerRule] ([LedgerRuleId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRuleTarget] add constraint FK_LedgerRuleTarget_Account foreign key([TargetAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbLedgerRuleTarget (LedgerRuleId, TargetAccountId, PriorityOrder, Percentage)
select LedgerRuleId, TargetAccountId, 0, 100 from tbLedgerRule where TargetAccountType=1 and TargetAccountId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX IX_LedgerRule_TargetAccountId on tbLedgerRule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerRule
DROP CONSTRAINT FK_LedgerRule_Account_TargetAccountId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerRule
DROP COLUMN TargetAccountId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.741</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields:
- tbLookupTable.TableNameRaw
- tbLookupItem.ItemNameRaw</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLookupTable
add TableNameRaw nvarchar(50) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLookupTable
set TableNameRaw=TableName
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLookupTable
alter column TableNameRaw nvarchar(50) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLookupItem
add ItemNameRaw nvarchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLookupItem
set ItemNameRaw=ItemName
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLookupItem
alter column ItemNameRaw nvarchar(100) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.740</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change system product code from #ROUNDING to #CURROUND</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbProduct
set ProductCode='#CURROUND'
where ProductCode='#ROUNDING'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.739</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change Media unique index in tbSiaeLog</REASON><TABLENAMES>tbSiaeLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index [UQ_SiaeLog_Media] on tbSiaeLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_SiaeLog_Media] ON [tbSiaeLog] ([MediaId] ,[PerformanceId] ,[Operazione] ) 
where TitoloBase = 'T'
and MediaId is not null
and PerformanceId is not null
and CausaleAnnullamento is null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.738</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Delete tbEntityLink records for TicketUpgrade</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbEntityLink
where EntityLinkType=5 /* ticket upgrade */
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.737</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add unique index for MediaId and PerformanceId to tbSiaeLog</REASON><TABLENAMES>tbSiaeLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update log1
set
  log1.MediaId = null
from tbSiaeLog log1
join tbSiaeLog log2 on 
  log1.MediaId = log2.MediaId and
  log1.PerformanceId = log2.PerformanceId and  
  log1.MediaId is not null and  
  log1.PerformanceId is not null and
  log1.LogId &gt; log2.LogId and 
  log1.Operazione = log2.Operazione and
  log1.TitoloBase = 'T'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_SiaeLog_Media] ON [tbSiaeLog] ([MediaId] ,[PerformanceId] ,[Operazione] ) 
where TitoloBase = 'T'
and MediaId is not null
and PerformanceId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.736</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTicketUpgrade</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTicketUpgrade]
(
	[TicketId] Uniqueidentifier NOT NULL,
	[SourceTicketId] Uniqueidentifier NOT NULL,
	[RootTicketId] Uniqueidentifier NOT NULL,
	[Sequence] smallint NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUpgrade add constraint PK_TicketUpgrade Primary Key ([TicketId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_TicketUpgrade_SourceTicketId] ON [tbTicketUpgrade] ([SourceTicketId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUpgrade_RootTicketId] ON [tbTicketUpgrade] ([RootTicketId] ,[Sequence] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketUpgrade] add constraint FK_TicketUpgrade_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketUpgrade] add constraint FK_TicketUpgrade_SourceTicket foreign key([SourceTicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketUpgrade] add constraint FK_TicketUpgrade_RootTicket foreign key([RootTicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.735</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields ClearingLimit and ClearingUsed to tbTicket</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add
  ClearingLimit money null,  
  ClearingUsed money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicket
set
  ClearingLimit=UnitAmount-UnitTax,  
  ClearingUsed=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
alter column ClearingLimit money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
alter column ClearingUsed money not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.734</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Drop table tbSaleItemDetailUpgrade
- Create table tbTicketUpgradeTax</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbSaleItemDetailUpgrade
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTicketUpgradeTax]
(
	[TicketId] Uniqueidentifier NOT NULL,
	[TaxId] Uniqueidentifier NOT NULL,
	[TaxAmount] Money NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUpgradeTax add constraint PK_TicketUpgradeTax Primary Key ([TicketId],[TaxId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUpgradeTax_TaxId] ON [tbTicketUpgradeTax] ([TaxId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketUpgradeTax] add constraint FK_TicketUpgradeTax_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketUpgradeTax] add constraint FK_TicketUpgradeTax_Tax foreign key([TaxId]) references [tbTax] ([TaxId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.733</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields tb tbTicket
- UnitAmount
- UnitTax</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add
  UnitAmount money null,  
  UnitTax money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicket
set
  UnitAmount=SI.UnitAmount,  
  UnitTax=SI.UnitTax
from 
  tbSaleItemDetail SID inner join  
  tbSaleItem SI on SI.SaleItemId=SID.SaleItemId  
where tbTicket.SaleItemDetailId=SID.SaleItemDetailId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
alter column UnitAmount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
alter column UnitTax money not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.732</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSaleItemDetailUpgrade</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleItemDetailUpgrade]
(
	[SaleItemDetailId] Uniqueidentifier NOT NULL,
	[SrcSaleItemDetailId] Uniqueidentifier NOT NULL,
	[UnitAmount] Money NOT NULL,
	[UnitTax] Money NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemDetailUpgrade add constraint PK_SaleItemDetailUpgrade Primary Key ([SaleItemDetailId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemDetailUpgrade_SrcSaleItemDetailId] ON [tbSaleItemDetailUpgrade] ([SrcSaleItemDetailId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemDetailUpgrade] add constraint FK_SaleItemDetailUpgrade_SaleItemDetail foreign key([SaleItemDetailId]) references [tbSaleItemDetail] ([SaleItemDetailId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemDetailUpgrade] add constraint FK_SaleItemDetailUpgrade_SrcSaleItemDetail foreign key([SaleItemDetailId]) references [tbSaleItemDetail] ([SaleItemDetailId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.731</SQLVERSION><RMTRACKLINK>SIT-244</RMTRACKLINK><REASON>Add new table tbProductAccountRule </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProductAccountRule]
(
	[ProductId] Uniqueidentifier NOT NULL,
	[RuleProductId] Uniqueidentifier NOT NULL,
	[ExpToleranceDays] Smallint NULL)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductAccountRule add constraint PK_ProductAccountRule Primary Key ([ProductId],[RuleProductId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductAccountRule_RuleProductId] ON [tbProductAccountRule] ([RuleProductId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbProductAccountRule add constraint FK_ProductAccountRule_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbProductAccountRule add constraint FK_ProductAccountRule_RuleProduct foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.730</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Rename column tbLedgerRule.LedgerTriggerFilter into LedgerOfflineFilter
- Create column tbLedgerRule.LedgerUsageFilter</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbLedgerRule.LedgerTriggerFilter',
    @newname = 'LedgerOfflineFilter',
    @objtype = 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
add LedgerUsageFilter smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.729</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add field tbLog.Version</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLog
add Version Varchar(20) NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.728</SQLVERSION><RMTRACKLINK>SIT-341</RMTRACKLINK><REASON>Add fields HoldWorkstationId and HoldDateTime to tbExtMediaCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbExtMediaCode
add HoldWorkstationId Uniqueidentifier NULL, HoldDateTime Smalldatetime NULL

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.727</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Create table tbExtMediaCode
- Add field tbProduct.ExtMediaGroupTagId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbExtMediaCode]
(
	[ExtMediaCode] Varchar(50) NOT NULL,
	[AccountId] Uniqueidentifier NOT NULL,
	[ExtMediaGroupTagId] Uniqueidentifier NOT NULL,
	[ImportDateTime] Smalldatetime NOT NULL,
	[PerformanceDate] date NULL,
	[MediaId] Uniqueidentifier NULL,
	[EncodeFiscalDate] date NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtMediaCode add constraint PK_ExtMediaCode Primary Key ([ExtMediaCode])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ExtMediaCode_AccountId] ON [tbExtMediaCode] ([AccountId] ,[ImportDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ExtMediaCode_MediaId] ON [tbExtMediaCode] ([MediaId] ) 
where MediaId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ExtMediaCode_EncodeFiscalDate] ON [tbExtMediaCode] ([EncodeFiscalDate] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ExtMediaCode_ExtMediaGroupTagId] ON [tbExtMediaCode] ([ExtMediaGroupTagId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtMediaCode] add constraint FK_ExtMediaCode_Media foreign key([MediaId]) references [tbMedia] ([MediaId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtMediaCode] add constraint FK_ExtMediaCode_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtMediaCode] add constraint FK_ExtMediaCode_ExtMediaGroupTag foreign key([ExtMediaGroupTagId]) references [tbTag] ([TagId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add ExtMediaGroupTagId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_ExtMediaGroupTagId] ON [tbProduct] ([ExtMediaGroupTagId] ) 
where ExtMediaGroupTagId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_ExtMediaGroupTag foreign key([ExtMediaGroupTagId]) references [tbTag] ([TagId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.726</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column smaterializzato to table tbSiaeProduct</REASON><TABLENAMES>tbSiaeProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSiaeProduct
add Smaterializzato bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSiaeProduct
set Smaterializzato = 0
where Smaterializzato is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeProduct
alter column smaterializzato bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.725</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbProductPriceDate and refactor tbProductPrice</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProductPriceDate]
(
	[ProductId] Uniqueidentifier NOT NULL,
	[PriorityOrder] Smallint NOT NULL,
	[ValidDateFrom] date NULL,
	[ValidDateTo] date NULL,
	[ValidTimeFrom] Smalldatetime NULL,
	[ValidTimeTo] Smalldatetime NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceDate add constraint PK_ProductPriceDate Primary Key ([ProductId],[PriorityOrder])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [UQ_ProductPriceDate] ON [tbProductPriceDate] ([ProductId] ,[ValidDateFrom] ,[ValidDateTo] ,[ValidTimeFrom] ,[ValidTimeTo] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductPriceDate] add constraint FK_ProductPriceDate_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProductPriceDate (
  ProductId,  
  PriorityOrder
)
select
  ProductId,  
  0
from
  tbProduct   

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPrice drop FK_ProductPrice_Product
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_ProductPrice on tbProductPrice
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPrice add PriorityOrder smallint
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductPrice
set PriorityOrder=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPrice 
alter column PriorityOrder smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ProductPrice] ON [tbProductPrice] ([ProductId] ,[PriorityOrder] ,[SaleChannelId] ,[PerformanceTypeId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductPrice_ProductId] ON [tbProductPrice] ([ProductId] ,[PriorityOrder] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductPrice_SaleChannelId] ON [tbProductPrice] ([SaleChannelId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductPrice_PerformanceTypeId] ON [tbProductPrice] ([PerformanceTypeId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductPrice] add constraint FK_ProductPrice_ProductPriceDate foreign key([ProductId],[PriorityOrder]) references [tbProductPriceDate] ([ProductId],[PriorityOrder])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.724</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change type of DataScadenza</REASON><TABLENAMES>tbSiaeCard</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSiaeCard
drop column [DataScadenza];
alter table tbSiaeCard
add [DataScadenza] Date null;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.723</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add DataScadenza to tbSiaeCard</REASON><TABLENAMES>tbSiaeCard</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSiaeCard
add [DataScadenza] Binary(3) NULL;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.722</SQLVERSION><RMTRACKLINK>SIT-1601</RMTRACKLINK><REASON>Patch to update negative UnitAmount for DepositOnOrder sale items</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update
  tbSaleItem
set
  UnitRawPrice=-UnitRawPrice, UnitAmount=-UnitAmount
where
  ProductId=
    (select 
      ProductId 
    from 
      tbProduct 
    where 
      ProductCode='#RDEPOSIT') and 
  (Quantity &lt; 0) and 
  (UnitAmount &lt; 0)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.721</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Convert tbPaymentCard.CardLength from BIT to TINYINT</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentCard
alter column CardLength tinyint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.720</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New promo</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update 
  tbPromoRule
set 
  PromoActionTarget = 1 
where 
  PromoActionTarget = 3
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbPromoRule 
set 
  PromoRuleType = 2 
where 
  PromoRuleType in (6,7)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbProduct 
set 
  ProductStatus = 1 
where 
  ProductType = 5 and 
  ProductStatus = 10
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPromoRule
add HideOnPOS Bit NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPromoRule
set HideOnPOS = 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbPromoRule
set 
  HideOnPOS = 1 
where
  PromoRuleType = 5
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPromoRule
alter column HideOnPOS Bit NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPromoRule
add SelectableByCode Smallint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbPromoRule
set 
  SelectableByCode = 1 
where
  PromoRuleType = 5
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbPromoRule
set 
  SelectableByCode = 2 
where
  PromoRuleType = 4
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbPromoRule
set 
  PromoRuleType = 3 
where 
  PromoRuleType in (4,5)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbMedia
set 
  ExclusiveUse=1
where
  MediaId in (
	select M.MediaId
	from
		tbMedia M inner join
		tbTicket T on T.TicketMediaMatchId=M.TicketMediaMatchId inner join
		tbProduct P on P.ProductId=T.ProductId
	where 
		P.ProductType = 5
	)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPromoRule
add MaxRulePerTrans Integer NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPromoAction 
drop column QuantityMax
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbPromoRule
set 
  PromoRuleType = PromoRuleType*10 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbPromoRule
set 
  MaxRulePerTrans = 1
where 
  PromoActionTarget = 1
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.719</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add MainEventId to tbSiaeEvent</REASON><TABLENAMES>tbSiaeEvent</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Alter table [tbSiaeEvent] add [MainEventId] Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeEvent] add constraint FK_SiaeEvent_SiaeEvent foreign key([MainEventId]) references [tbSiaeEvent] ([EventId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeEvent_MainEventId] ON [tbSiaeEvent] ([MainEventId] ) 
where MainEventId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.718</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbDriver.ClassName</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDriver
add ClassName varchar(255) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.717</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbDriver</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDriver drop FK_Driver_License
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDriver drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDriver add ExtensionPackageId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDriver] add constraint FK_Driver_ExtensionPackage foreign key([ExtensionPackageId]) references [tbExtensionPackage] ([ExtensionPackageId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Driver_ExtensionPackageId] ON [tbDriver] ([ExtensionPackageId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.716</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Recreate tbSiaeTaxRate
  - to make binary(3) as Date</REASON><TABLENAMES>tbSiaeTaxRate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbSiaeTaxRate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSiaeTaxRate]
(
  [SiaeTaxId] Uniqueidentifier NOT NULL,
  [ValidDateFrom] Date NOT NULL,
  [ValidDateTo] Date NULL,
  [TaxValue] Money NOT NULL,

) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeTaxRate add constraint PK_SiaeTaxRate Primary Key ([SiaeTaxId],[ValidDateFrom])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeTaxRate] add constraint FK_SiaeTaxRate_SiaeTax foreign key([SiaeTaxId]) references [tbSiaeTax] ([SiaeTaxId])  on update no action on delete no action



</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.715</SQLVERSION><RMTRACKLINK>605</RMTRACKLINK><REASON>Add tbVoucherItem.Quantity and tbVoucher.TotalAmount fields</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbVoucherItem
add Quantity smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbVoucherItem
set Quantity=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbVoucherItem
alter column Quantity smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbVoucher
add TotalAmount Money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbVoucher
set TotalAmount=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbVoucher
alter column TotalAmount money not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.714</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tables
- tbSiaeTax
- tbSiaeTaxRate</REASON><TABLENAMES>tbSiaeTax
tbSiaeTaxRate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSiaeTax]
(
  [SiaeTaxId] Uniqueidentifier NOT NULL,
  [TaxType] Smallint NOT NULL,
  [TaxName] Nvarchar(50) NOT NULL

) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeTax add constraint PK_SiaeTax Primary Key ([SiaeTaxId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSiaeTaxRate]
(
  [SiaeTaxId] Uniqueidentifier NOT NULL,
  [ValidDateFrom] Binary(3) NOT NULL,
  [ValidDateTo] Binary(3) NULL,
  [TaxValue] Money NOT NULL,

) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeTaxRate add constraint PK_SiaeTaxRate Primary Key ([SiaeTaxId],[ValidDateFrom])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeTaxRate] add constraint FK_SiaeTaxRate_SiaeTax foreign key([SiaeTaxId]) references [tbSiaeTax] ([SiaeTaxId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.713</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename field tbExtensionPackage.Active -&gt; Enabled</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbExtensionPackage.Active',
    @newname = 'Enabled',
    @objtype = 'COLUMN'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.712</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbExtensionPackage.LastUpdate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbExtensionPackage
add LastUpdate datetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbExtensionPackage
set LastUpdate=GetDate()
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtensionPackage
alter column LastUpdate datetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ExtensionPackage_LastUpdate] ON [tbExtensionPackage] ([LastUpdate] ) 


</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.711</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbExtensionPackageStatus</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbExtensionPackageStatus]
(
	[ExtensionPackageId] Uniqueidentifier NOT NULL,
	[ServerId] Smallint NOT NULL,
	[ExtensionPackageStatus] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtensionPackageStatus add constraint PK_ExtensionPackageStatus primary key ([ExtensionPackageId],[ServerId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ExtensionPackageStatus_ServerId] ON [tbExtensionPackageStatus] ([ServerId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbExtensionPackageStatus] add constraint FK_ExtensionPackageStatus_ExtensionPackage foreign key([ExtensionPackageId]) references [tbExtensionPackage] ([ExtensionPackageId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtensionPackage
drop column ExtensionPackageStatus
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.710</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbServer</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbServer]
(
	[ServerId] Smallint NOT NULL,
	[ServerCode] Varchar(20) NOT NULL,
	[ServerName] Nvarchar(100) NULL,
	[CheckDateTime] Datetime NOT NULL,
	[StartupDateTime] Datetime NOT NULL,
	[ShutdownDateTime] Datetime NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbServer add constraint PK_Server primary key (ServerId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Server_Code] ON [tbServer] ([ServerCode] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.709</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column CausaleAnnullamento</REASON><TABLENAMES>tbSiaeLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSiaeLog
add [CausaleAnnullamento] Varchar(10) NULL;


</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.708</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Invalidates all product types because handling selling rights</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbEntityRight (
  DocEntityType,  
  DocEntityId,  
  UsrEntityType,  
  UsrEntityId,  
  RightLevel
)
select
  12, /*ProductType*/  
  ProductId,  
  15, /*Person*/  
  'A0000131-0000-0000-0000-000000000015',  
  2 /*read*/
from tbProduct
where ProductType&lt;&gt;5/*promo*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbEntityChange
where EntityId in (
  select ProductId 
  from tbProduct 
  where ProductType&lt;&gt;5/*promo*/
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (
  EntityType,  
  EntityId,  
  InsertUpdate
)
select
  12, /*ProductType*/  
  ProductId,  
  1  
from tbProduct
where ProductType&lt;&gt;5/*promo*/

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.707</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0..2] Create table tbTicketDescription
[3..5] Add field tbProduct.VariableDescription</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTicketDescription]
(
	[SaleItemDetailId] Uniqueidentifier NOT NULL,
	[TicketDescription] Nvarchar(100) NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketDescription add constraint PK_TicketDescription primary key (SaleItemDetailId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketDescription] add constraint FK_TicketDescription_SaleItemDetail foreign key([SaleItemDetailId]) references [tbSaleItemDetail] ([SaleItemDetailId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add VariableDescription bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set VariableDescription=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column VariableDescription bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.706</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor table tbExtensionPackage</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbExtensionPackage
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbExtensionPackage]
(
	[ExtensionPackageId] Uniqueidentifier NOT NULL,
	[ExtensionPackageCode] Varchar(15) NOT NULL,
	[ExtensionPackageName] Nvarchar(100) NULL,
	[ExtensionPackageVersion] Varchar(15) NOT NULL,
	[ExtensionPackageStatus] Smallint NOT NULL,
	[Active] Bit NOT NULL,
	[JarFile] Image NOT NULL,
	[InfoDoc] Ntext NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtensionPackage add constraint PK_ExtensionPackage primary key (ExtensionPackageId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_EstensionPackage_Code] ON [tbExtensionPackage] ([ExtensionPackageCode] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.705</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename PKs
- PK_SiaeBoxId
- PK_SiaeParamKey</REASON><TABLENAMES>tbSiaeBox
tbSiaeConfig</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>sp_rename 'tbSiaeBox.PK_SiaeBoxId', 'PK_SiaeBox'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbSiaeConfig.PK_ParamKey', 'PK_SiaeConfig'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.704</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbExtensionPackage.InfoDoc</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbExtensionPackage
add InfoDoc ntext not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.703</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbExtensionPackage</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbExtensionPackage]
(
	[ExtensionPackageId] Uniqueidentifier NOT NULL,
	[ExtensionPackageCode] Varchar(15) NOT NULL,
	[ExtensionPackageName] Nvarchar(50) NULL,
	[ExtensionPackageDescription] Nvarchar(100) NULL,
	[Active] Bit NOT NULL,
	[JarFile] Image NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbExtensionPackage add constraint PK_ExtensionPackage primary key (ExtensionPackageId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_EstensionPackage_Code] ON [tbExtensionPackage] ([ExtensionPackageCode] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.702</SQLVERSION><RMTRACKLINK>SIT-78</RMTRACKLINK><REASON>Refactoring LKSNVoucherStatus</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbVoucher
set VoucherStatus=101 where VoucherStatus=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbVoucher
set VoucherStatus=201 where VoucherStatus=2
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbVoucher
set VoucherStatus=301 where VoucherStatus=3
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.701</SQLVERSION><RMTRACKLINK>SIT-601</RMTRACKLINK><REASON>Add column Active to tbVoucher</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbVoucher
add Active bit NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbVoucher
set Active=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbVoucher
alter column Active Bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.700</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>rename column tbLoginAlias.IsPrimary into tbLoginAlias.Primary</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbLoginAlias.IsPrimary', 'PrimaryAlias', 'COLUMN'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.699</SQLVERSION><RMTRACKLINK>SIT-608</RMTRACKLINK><REASON>Add column VoucherDescription to tbVoucher</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbVoucher
add VoucherDescription Nvarchar(100) NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.698</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbEvent.SoldOutWarnLimit</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEvent
add SoldOutWarnLimit tinyint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.697</SQLVERSION><RMTRACKLINK>SIT-1505</RMTRACKLINK><REASON>Expand tbLookupItem.ItemName from 50 to 100 chars</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLookupItem
alter column ItemName nvarchar(100) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.696</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tbSiaeBox
Add NOT NULL column to tbSiaeBox
To add NOT NULL column delete data in tbSiaeCard, tbSiaeLog and tbSiaeSystem</REASON><TABLENAMES>tbSiaeBox
tbSiaeLog
tbSiaeCard
tbSiaeSystem
</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSiaeBox]
(
  [SiaeBoxId] Uniqueidentifier NOT NULL,
  [SiaeBoxName] Nvarchar(30) NOT NULL,
  [SiaeBoxUrl] Nvarchar(255) NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeBox add constraint PK_SiaeBoxId primary key (SiaeBoxId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbSiaeLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbSiaeCard
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbSiaeSystem
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeCard add [SiaeBoxId] Uniqueidentifier NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeCard] add constraint FK_SiaeCard_SiaeBox  foreign key([SiaeBoxId]) references [tbSiaeBox] ([SiaeBoxId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeCard_SiaeBoxId] ON [tbSiaeCard] ([SiaeBoxId] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.695</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbLoginAlias
Remove Username from tbLogin</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbLoginAlias
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbLoginAlias]
(
	[LoginAliasId] Uniqueidentifier NOT NULL,
	[AccountId] Uniqueidentifier NOT NULL,
	[UserName] Varchar(50) NOT NULL,
	[LoginAliasType] Smallint NOT NULL,
	[CreateDate] DateTime NOT NULL,
	[VerifyDate] DateTime NULL,
	[VerifyCode] Varchar(16) NULL,
	[IsPrimary] Bit NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLoginAlias ADD CONSTRAINT PK_LoginAlias Primary Key ([LoginAliasId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_LoginAlias_UserName] ON [tbLoginAlias] ([UserName] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LoginAlias_AccountId] ON [tbLoginAlias] ([AccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LoginAlias_VerifyCode] ON [tbLoginAlias] ([VerifyCode] ) 
where VerifyCode is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLoginAlias] add constraint FK_LoginAlias_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>INSERT INTO tbLoginAlias
SELECT DISTINCT 
  NEWID(),
  AccountId,
  UserName,
  0,
  GETDATE(),
  GETDATE(),
  NULL,
  1
FROM tbLogin

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX tbLogin.UQ_Login_UserName
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLogin
DROP COLUMN UserName
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.694</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor index IX_ResourceSchedule_ResourceSerialId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_ResourceSchedule_ResourceSerialId on tbResourceSchedule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_ResourceSerialId] ON [tbResourceSchedule] ([ResourceSerialId] ,[DateTimeFrom] ) 
 INCLUDE (DateTimeTo,ReturnTransactionId)

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.693</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSiaeConfig</REASON><TABLENAMES>tbSiaeConfig</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSiaeConfig]
(
	[ParamKey] Varchar(255) NOT NULL,
	[ParamValue] Varchar(255) NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeConfig add constraint PK_ParamKey primary key (ParamKey)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.692</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTask.TimeZone</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTask
add TimeZone tinyint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTask
set TimeZone=34
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTask
alter column TimeZone tinyint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.691</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0..3] Add fields CryptType and ForcePasswordChange to tbLogin
[4..] Add table tbLoginAlias</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLogin
add CryptType smallint NULL, ForcePasswordChange Bit NULL;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLogin
set CryptType=1, ForcePasswordChange=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLogin
alter column CryptType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLogin
alter column ForcePasswordChange Bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbLoginAlias]
(
	[UserName] Nvarchar(50) NOT NULL,
	[AccountId] Uniqueidentifier NOT NULL,
	[LoginAliasType] Smallint NOT NULL,
	[CreateDate] Binary(3) NOT NULL,
	[VerifyDate] Binary(3) NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLoginAlias ADD CONSTRAINT PK_LoginAlias Primary Key ([UserName])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LoginAlias_AccountId] ON [tbLoginAlias] ([AccountId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLoginAlias] add constraint FK_LoginAlias_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.690</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbSiaeLog.StatoCorrente
Clear tables tbSiaeProduct, tbSiaeLog, tbSiaePerformanceSector
Add field tbSiaeProduct.CodiceSupporto</REASON><TABLENAMES>tbSiaeLog
tbSiaeProduct
tbSiaePerformanceSector</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSiaeLog
add StatoCorrente varchar(10) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbSiaeLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbSiaePerformanceSector
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbSiaeProduct
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeProduct
add CodiceSupporto varchar(10) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.689</SQLVERSION><RMTRACKLINK>1208</RMTRACKLINK><REASON>drop tbTransaction2Survey and tbSale2Survey replaced using by tbEntityLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbTransaction2Survey
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbSale2Survey
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.688</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbSeatEnvelope.ExclusiveUse</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSeatEnvelope
add ExclusiveUse bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSeatEnvelope
set ExclusiveUse=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatEnvelope
alter column ExclusiveUse bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>VGS R&amp;D</ADDEDBY><SQLVERSION>1.687</SQLVERSION><RMTRACKLINK>SIT-1208</RMTRACKLINK><REASON>Add new table tbSale2Survey</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSale2Survey]
(
	[SaleId] Uniqueidentifier NOT NULL,
	[SurveyId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale2Survey ADD CONSTRAINT PK_Sale2Survey Primary Key ([SaleId],[SurveyId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale2Survey_SurveyId] ON [tbSale2Survey] ([SurveyId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSale2Survey] add constraint FK_Sale2Survey_Sale foreign key([SaleId]) references [tbSale] ([SaleId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSale2Survey] add constraint FK_Sale2Survey_Survey foreign key([SurveyId]) references [tbSurvey] ([SurveyId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.686</SQLVERSION><RMTRACKLINK>SIT-1208</RMTRACKLINK><REASON>Add new table tbTransaction2Survey</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTransaction2Survey]
(
	[TransactionId] Uniqueidentifier NOT NULL,
	[SurveyId] Uniqueidentifier NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction2Survey ADD CONSTRAINT PK_Transaction2Survey Primary Key ([TransactionId],[SurveyId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Transaction2Survey_SurveyId] ON [tbTransaction2Survey] ([SurveyId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransaction2Survey] add constraint FK_Transaction2Survey_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransaction2Survey] add constraint FK_Transaction2Survey_Survey foreign key([SurveyId]) references [tbSurvey] ([SurveyId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.685</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add default client category right to seat envelopes</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbEntityRight(
  DocEntityType,  
  DocEntityId,  
  UsrEntityType,  
  UsrEntityId,  
  RightLevel
)
select
  78, /*SeatEnvelope*/
  SeatEnvelopeId,  
  1, /*Organization*/  
  'A0000131-0000-0000-0000-000000000001',  
  2 /*read*/
from tbSeatEnvelope
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.684</SQLVERSION><RMTRACKLINK>SIT-1455</RMTRACKLINK><REASON>set default RoundingType value into tbCurrency</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbCurrency
set RoundingType=1
where RoundingType=0
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.683</SQLVERSION><RMTRACKLINK>SIT-1455</RMTRACKLINK><REASON>add new fields to tbCurrency
SmallesDenomination -&gt; Minimum value to round at (up, down or algebraic)
RoundingType
AlgebraicThreshold - &gt; Threshold when "rounding type=algebraic" to decide if up or down</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCurrency
add
SmallestDenomination Money NULL,
RoundingType Smallint NULL,
AlgebraicThreshold Money NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbCurrency
set
SmallestDenomination=0.01,
RoundingType=0,
AlgebraicThreshold=0.05
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCurrency
alter column
SmallestDenomination Money NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCurrency
alter column
RoundingType Smallint NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCurrency
alter column
AlgebraicThreshold Money NOT NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.682</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbSeat.SeatEnvelopeId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSeat
add SeatEnvelopeId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @defenv uniqueidentifier;
select @defenv=SeatEnvelopeId from tbSeatEnvelope where SeatEnvelopeCode='DEFAULT'

update tbSeat
set SeatEnvelopeId=@defenv
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeat
alter column SeatEnvelopeId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Seat_SeatEnvelopeId] ON [tbSeat] ([SeatEnvelopeId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeat] add constraint FK_Seat_SeatEnvelope foreign key([SeatEnvelopeId]) references [tbSeatEnvelope] ([SeatEnvelopeId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.681</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add default rights to envelopes</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbEntityRight (
  DocEntityId, 
  UsrEntityId, 
  DocEntityType, 
  UsrEntityType, 
  RightLevel
) 
select 
  SeatEnvelopeId,
  'A0000131-0000-0000-0000-000000000003',
  78/*envelope*/,
  3/*workstation*/,
  5/*delete*/
from 
  tbSeatEnvelope
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityRight (
  DocEntityId, 
  UsrEntityId, 
  DocEntityType, 
  UsrEntityType, 
  RightLevel
) 
select 
  SeatEnvelopeId,
  'A0000131-0000-0000-0000-000000000015',
  78/*envelope*/,
  15/*person*/,
  5/*delete*/
from 
  tbSeatEnvelope
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.680</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Seat Allocation Refactoring</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance
add
  SeatSectorId uniqueidentifier null,    
  AttributeItemId uniqueidentifier null,  
  SeatEnvelopeId uniqueidentifier null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_SeatPerformance_SeatId on tbSeatPerformance

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatPerformance_SeatId] ON [tbSeatPerformance] ([SeatId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSeatPerformance
set
  tbSeatPerformance.SeatSectorId=tbSeat.SeatSectorId,
  tbSeatPerformance.AttributeItemId=tbSeat.AttributeItemId,
  tbSeatPerformance.SeatEnvelopeId=tbSeat.SeatEnvelopeId
from tbSeat
where tbSeatPerformance.SeatId=tbSeat.SeatId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSeatPerformance
set
  tbSeatPerformance.SeatSectorId=tbSeat.SeatSectorId,
  tbSeatPerformance.AttributeItemId=tbSeat.AttributeItemId
from tbSeat
where
  tbSeatPerformance.SeatId=tbSeat.SeatId and
  tbSeatPerformance.PerformanceId=tbSeat.PerformanceId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance
alter column SeatSectorId uniqueidentifier not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance
alter column AttributeItemId uniqueidentifier not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance
alter column SeatEnvelopeId uniqueidentifier not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatPerformance_SeatSectorId] ON [tbSeatPerformance] ([SeatSectorId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatPerformance_AttributeItemId] ON [tbSeatPerformance] ([AttributeItemId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatPerformance_SeatEnvelopeId] ON [tbSeatPerformance] ([SeatEnvelopeId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatPerformance] add constraint FK_SeatPerformance_SeatSector foreign key([SeatSectorId]) references [tbSeatSector] ([SeatSectorId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatPerformance] add constraint FK_SeatPerformance_AttributeItem foreign key([AttributeItemId]) references [tbAttributeItem] ([AttributeItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatPerformance] add constraint FK_SeatPerformance_SeatEnvelope foreign key([SeatEnvelopeId]) references [tbSeatEnvelope] ([SeatEnvelopeId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeat drop FK_Seat_SeatEnvelope

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Seat_SeatEnvelopeId on tbSeat

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeat drop column SeatEnvelopeId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance
add
  QuantityMin int null,
  Weight int null,
  SeqNumber int null,
  BreakAfter bit null,
  AisleLeft bit null,
  AisleRight bit null,
  Available bit null,
  LastUpdate datetime null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSeatPerformance
set 
  QuantityMin=1,
  Weight=0,
  SeqNumber=0,
  BreakAfter=0,
  AisleLeft=0,
  AisleRight=0,
  Available=QuantityFree,
  LastUpdate=GetDate()

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance alter column QuantityMin int not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance alter column Weight int not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance alter column SeqNumber int not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance alter column BreakAfter bit not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance alter column AisleLeft bit not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance alter column AisleRight bit not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance alter column Available bit not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance alter column LastUpdate datetime not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatPerformance_LastUpdate] ON [tbSeatPerformance] ([PerformanceId] ,[LastUpdate] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSeatInfo]
(
	[SeatId] Uniqueidentifier NOT NULL,
	[ColLabel] Nvarchar(15) NULL,
	[RowLabel] Nvarchar(15) NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSeatInfo ADD CONSTRAINT PK_SeatInfo PRIMARY KEY (SeatId)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatInfo] add constraint FK_SeatInfo_Seat foreign key([SeatId]) references [tbSeat] ([SeatId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbSeatInfo (SeatId, ColLabel, RowLabel)
select SeatId, SeatCol, SeatRow
from tbSeat
where (SeatCol is not null) or (SeatRow is not null)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeat drop column SeatCol

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeat drop column SeatRow

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Seat_GraphicId on tbSeat

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeat drop column GraphicId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeat drop column SeatStatus

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeat add CustomPerf bit null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSeat set CustomPerf=(case when PerformanceId is null then 0 else 1 end)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeat alter column CustomPerf bit not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Seat_SeatSectorId on tbSeat

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Seat_SeatSectorId] ON [tbSeat] ([SeatSectorId] ,[CustomPerf] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Seat_PerformanceId on tbSeat

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeat drop FK_Seat_Performance

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeat drop column PerformanceId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_SeatPerformance_SeatSectorId on tbSeatPerformance

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_SeatPerformance_AttributeItemId on tbSeatPerformance

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatPerformance_SeatSectorId] ON [tbSeatPerformance] ([SeatSectorId] ,[AttributeItemId] ,[PerformanceId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatPerformance_AttributeItemId] ON [tbSeatPerformance] ([AttributeItemId] ,[SeatSectorId] ,[PerformanceId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_SeatSector_SeatMapId on tbSeatSector

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatSector drop FK_SeatSector_SeatMap

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatSector drop column SeatMapId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbSeatMap

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSeatMap]
(
	[SeatMapId] Uniqueidentifier NOT NULL,
	[SeatSectorId] Uniqueidentifier NOT NULL,
	[PerformanceId] Uniqueidentifier NULL,
	[NumSeats] Integer NOT NULL,
	[MapData] Ntext NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSeatMap ADD CONSTRAINT PK_SeatMap PRIMARY KEY (SeatMapId)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_SeatMap] ON [tbSeatMap] ([SeatSectorId] ,[PerformanceId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatMap_PerformanceId] ON [tbSeatMap] ([PerformanceId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatMap] add constraint FK_SeatMap_SeatSector foreign key([SeatSectorId]) references [tbSeatSector] ([SeatSectorId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatMap] add constraint FK_SeatMap_Performance foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatMap add BackgroundRepositoryId uniqueidentifier null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatMap_BackgroundRepositoryId] ON [tbSeatMap] ([BackgroundRepositoryId] ) 
where BackgroundRepositoryId is not null
                                          
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatMap] add constraint FK_SeatMap_BackgroundRepository foreign key([BackgroundRepositoryId]) references [tbRepository] ([RepositoryId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatPerformance_BestSeat] ON [tbSeatPerformance] ([PerformanceId] ,[SeatEnvelopeId] ,[AttributeItemId] ,[Available] ,[Weight] ,[SeqNumber] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSeatPerformanceSectorCategory]
(
	[PerformanceId] Uniqueidentifier NOT NULL,
	[SeatSectorId] Uniqueidentifier NOT NULL,
	[AttributeItemId] Uniqueidentifier NOT NULL,
	[QuantityHeld] Integer NOT NULL,
	[QuantityReserved] Integer NOT NULL,
	[QuantityPaid] Integer NOT NULL,
	[QuantityFree] Integer NOT NULL,
	[QuantityMax] Integer NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSeatPerformanceSectorCategory ADD CONSTRAINT PK_SeatPerformanceSectorCategory PRIMARY KEY ([PerformanceId],[SeatSectorId],[AttributeItemId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatPerformanceSectorCategory_SeatSectorId] ON [tbSeatPerformanceSectorCategory] ([SeatSectorId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatPerformanceSectorCategory_AttributeItemId] ON [tbSeatPerformanceSectorCategory] ([AttributeItemId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatPerformanceSectorCategory] add constraint FK_SeatPerformanceSectorCategory_Performance foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatPerformanceSectorCategory] add constraint FK_SeatPerformanceSectorCategory_AttributeItem foreign key([AttributeItemId]) references [tbAttributeItem] ([AttributeItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatPerformanceSectorCategory] add constraint FK_SeatPerformanceSectorCategory_SeatSector foreign key([SeatSectorId]) references [tbSeatSector] ([SeatSectorId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbSeatPerformanceSectorCategory (
  PerformanceId,
  SeatSectorId,
  AttributeItemId,
  QuantityHeld,
  QuantityReserved,
  QuantityPaid,
  QuantityFree,
  QuantityMax
)
select 
  PerformanceId,
  SeatSectorId,
  AttributeItemId,
  Sum(QuantityHeld),
  Sum(QuantityReserved),
  Sum(QuantityPaid),
  Sum(QuantityFree),
  Sum(QuantityMax)
from tbSeatPerformance
group by
  PerformanceId,
  SeatSectorId,
  AttributeItemId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatEnvelope add SeatEnvelopeColor varchar(7) null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
add 
  QuantityRedeemed int null,
  QuantityInside int null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPerformance
set
  QuantityRedeemed=0,
  QuantityInside=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance alter column QuantityRedeemed int not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance alter column QuantityInside int not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance
add
  QuantityRedeemed int null,
  QuantityInside int null,
  ManualPick bit null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSeatPerformance
set
  QuantityRedeemed=0,
  QuantityInside=0,
  ManualPick=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance alter column QuantityRedeemed int not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance alter column QuantityInside int not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance alter column ManualPick bit null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformanceCategory
add
  QuantityRedeemed int null,
  QuantityInside int null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSeatPerformanceCategory
set
  QuantityRedeemed=0,
  QuantityInside=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformanceCategory alter column QuantityRedeemed int not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformanceCategory alter column QuantityInside int not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformanceSectorCategory
add
  QuantityRedeemed int null,
  QuantityInside int null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSeatPerformanceSectorCategory
set
  QuantityRedeemed=0,
  QuantityInside=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformanceSectorCategory alter column QuantityRedeemed int not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformanceSectorCategory alter column QuantityInside int not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeat
add BreakType tinyint null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeat
drop column BreakAfter

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSeat
set BreakType=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeat
alter column BreakType tinyint not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance
add BreakType tinyint null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance
drop column BreakAfter

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSeatPerformance
set BreakType=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance
alter column BreakType tinyint not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.679</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbProductCodeExt</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProductCodeExt]
(
	[ProductCodeExt] Varchar(50) NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductCodeExt ADD CONSTRAINT PK_ProductCodeExt PRIMARY KEY ([ProductCodeExt])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductCodeExt_ProductId] ON [tbProductCodeExt] ([ProductId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductCodeExt] add constraint FK_ProductCodeExt_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.678</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop tbSiaeLog (to reoorder fields)
- Create tbSiaeLog with 3 new fields:
  LogId
  OriginalLogId
  IsOrphan

- add ProductType to tbSiaeProduct</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbSiaeLog



</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSiaeLog]
(
  [LogId] Integer Identity NOT NULL,
  [Sigillo] Varchar(16) NOT NULL,
  [WorkstationId] Uniqueidentifier NOT NULL,
  [EventId] Uniqueidentifier NULL,
  [PerformanceId] Uniqueidentifier NULL,
  [CodiceSistema] Varchar(8) NOT NULL,
  [CodiceCarta] Varchar(8) NOT NULL,
  [OrganizerId] Uniqueidentifier NOT NULL,
  [LocationId] Uniqueidentifier NULL,
  [ProductId] Uniqueidentifier NOT NULL,
  [TicketId] Uniqueidentifier NULL,
  [MediaId] Uniqueidentifier NULL,
  [SaleItemDetailId] Uniqueidentifier NULL,
  [Stato] Varchar(10) NOT NULL,
  [Operazione] Smallint NOT NULL,
  [OriginalLogId] Integer NULL,
  [DataOraEmissione] Smalldatetime NOT NULL,
  [OrdinePosto] Varchar(10) NOT NULL,
  [Posto] Varchar(6) NULL,
  [TitoloBase] Varchar(1) NOT NULL,
  [IvaPreassolta] Varchar(1) NOT NULL,
  [TipoTurno] Smallint NOT NULL,
  [ProgressivoCarta] Integer NOT NULL,
  [TipoTassazione] Varchar(1) NOT NULL,
  [PrezzoTitolo] Money NOT NULL,
  [IvaTitolo] Money NOT NULL,
  [PrezzoPrevendita] Money NOT NULL,
  [IvaPrevendita] Money NOT NULL,
  [Rateo] Money NOT NULL,
  [IvaRateo] Money NOT NULL,
  [TipoTitolo] Varchar(10) NULL,
  [RateoIntrattenimenti] Money NULL,
  [ImponibileIntrattenimenti] Money NULL,
  [IvaIntrattenimenti] Money NULL,
  [Smaterializzato] Bit NOT NULL,
  [IvaRateoIntrattenimenti] Money NULL,
  [DataOraEvento] Smalldatetime NULL,
  [Capienza] Integer Constraint [DF_SiaeLog_Capienza] Default 0 NOT NULL,
  [IsOrphan] Bit NOT NULL
) 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeLog ADD CONSTRAINT PK_SiaeLog PRIMARY KEY ([LogId])


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_WorkstationId] ON [tbSiaeLog] ([WorkstationId] ,[DataOraEmissione] ) 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_PerformanceId] ON [tbSiaeLog] ([PerformanceId] ,[DataOraEmissione] ) 
where PerformanceId is not null



</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_CodiceSistema] ON [tbSiaeLog] ([CodiceSistema] ,[DataOraEmissione] ) 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_CodiceCarta] ON [tbSiaeLog] ([CodiceCarta] ,[DataOraEmissione] ) 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_OrganizerId] ON [tbSiaeLog] ([OrganizerId] ,[DataOraEmissione] ) 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_LocationId] ON [tbSiaeLog] ([LocationId] ,[DataOraEmissione] ) 
where LocationId is not null



</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_TicketId] ON [tbSiaeLog] ([TicketId] ,[DataOraEmissione] ) 
where TicketId is not null



</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_MediaId] ON [tbSiaeLog] ([MediaId] ,[DataOraEmissione] ) 
where MediaId is not null



</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_ProductId] ON [tbSiaeLog] ([ProductId] ) 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_SaleItemDetailId] ON [tbSiaeLog] ([SaleItemDetailId] ) 
where SaleItemDetailId is not null


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_OriginalLogId] ON [tbSiaeLog] ([OriginalLogId] ) 
where OriginalLogId is not null


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_SiaeLog_Sigillo] ON [tbSiaeLog] ([Sigillo] ) 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SiaeEvent foreign key([EventId]) references [tbSiaeEvent] ([EventId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_Performance foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SiaeSystem foreign key([CodiceSistema]) references [tbSiaeSystem] ([CodiceSistema])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SiaeCard foreign key([CodiceCarta]) references [tbSiaeCard] ([CodiceCarta])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SiateOrganizer foreign key([OrganizerId]) references [tbSiaeOrganizer] ([OrganizerId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SiaeLocation foreign key([LocationId]) references [tbSiaeLocation] ([LocationId])  on update no action on delete no action

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_Media foreign key([MediaId]) references [tbMedia] ([MediaId])  on update no action on delete no action  

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SiaeProduct  foreign key([ProductId]) references [tbSiaeProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SaleItemDetail foreign key([SaleItemDetailId]) references [tbSaleItemDetail] ([SaleItemDetailId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_Original foreign key([OriginalLogId]) references [tbSiaeLog] ([LogId])  on update no action on delete no action 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeProduct add [ProductType] Smallint Constraint [DF_SiaeProduct_ProductType] Default 0 NOT NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.677</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add "Every workstation"  right to promotions</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbEntityRight (DocEntityId, UsrEntityId, DocEntityType, UsrEntityType, RightLevel) 
  select 
    ProductId,
    'A0000131-0000-0000-0000-000000000003',
    55,
    3,
    5
  from 
    tbPromoRule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbEntityChange where EntityId in (select ProductId from tbPromoRule)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (EntityType, EntityId, InsertUpdate)
  select 
    55,
    ProductId,
    1
  from 
    tbPromoRule
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.676</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field SaleItemDetailId</REASON><TABLENAMES>tbSiaeLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSiaeLog
add [SaleItemDetailId] Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SaleItemDetail foreign key([SaleItemDetailId]) references [tbSaleItemDetail] ([SaleItemDetailId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_SaleItemDetailId] ON [tbSiaeLog] ([SaleItemDetailId] ) 
where SaleItemDetailId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.675</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>refactor tbConsAccess</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbConsAccess
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbConsAccess]
(
	[ConsAccessType] Smallint NOT NULL,
	[ConsolidateType] Smallint NOT NULL,
	[FiscalDate] date NOT NULL,
	[DateTime] Smalldatetime NOT NULL,
	[AccessAreaAccountId] Uniqueidentifier NOT NULL,
	[PerformanceId] Uniqueidentifier NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
	[OptionSetId] Uniqueidentifier NOT NULL,
	[QtyFirstUsage] Integer NOT NULL,
	[QtyEntry] Integer NOT NULL,
	[QtyReentry] Integer NOT NULL,
	[QtyExit] Integer NOT NULL,
	[QtyCrossover] Integer NOT NULL,
	[QtyOverride] Integer NOT NULL,
	[QtyTransit] Integer NOT NULL,
	[QtyOffEntry] Integer NOT NULL,
	[QtyOffReentry] Integer NOT NULL,
	[QtyOffCrossover] Integer NOT NULL,
	[FirstUsageRevenue] Money NOT NULL
 ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbConsAccess ADD CONSTRAINT PK_ConsAccess PRIMARY KEY ([ConsAccessType],[ConsolidateType],[FiscalDate],[DateTime],[AccessAreaAccountId],[PerformanceId],[ProductId],[OptionSetId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAccess_PerformanceId] ON [tbConsAccess] ([PerformanceId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAccess_AccessAreaId] ON [tbConsAccess] ([AccessAreaAccountId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAccess_ProductId] ON [tbConsAccess] ([ProductId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAccess_OptionSetId] ON [tbConsAccess] ([OptionSetId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsAccess] add constraint FK_ConsAccess_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsAccess] add constraint FK_ConsAccess_AcAreaAccount foreign key([AccessAreaAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsAccess] add constraint FK_ConsAccess_Performance foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketUsage set ConsAccess=0 where UsageDateTime &gt;= DATEADD(month, -1, GETDATE())
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.674</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename foreign keys: tbPerformanceSetDetail</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPerformanceSetDetail' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PerformanceSetId'

exec ('sp_rename ''' + @oldname + ''',''FK_PerformanceSetDetail_PerformanceSet''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPerformanceSetDetail' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PerformanceId'

exec ('sp_rename ''' + @oldname + ''',''FK_PerformanceSetDetail_Performance''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.673</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>added new fields tbCatalog.CatalogCode, tbCatalog.TemplateCode, tbCatalog.FlowType
added new index IX_Catalog_CatalogCode
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCatalog
add CatalogCode Varchar(15) NULL, TemplateCode Varchar(15) NULL, FlowType smallint null;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbCatalog
set FlowType=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCatalog
alter column FlowType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Catalog_CatalogCode] ON [tbCatalog] ([CatalogCode] ) where CatalogCode is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.672</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add ProductId to tbSiaeLog</REASON><TABLENAMES>tbSiaeLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbSiaeLog -- because we insert not null field
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeLog add [ProductId] Uniqueidentifier NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SiaeProduct  foreign key([ProductId]) references [tbSiaeProduct] ([ProductId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_ProductId] ON [tbSiaeLog] ([ProductId] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.671</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename DF constraint in tbSiaeLog</REASON><TABLENAMES>tbSiaeLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @Cnstr nvarchar(256)
select @Cnstr = d.name 
from sys.tables t
join sys.default_constraints d on d.parent_object_id = t.object_id
join sys.columns c on c.object_id = t.object_id and c.column_id = d.parent_column_id
where t.name = 'tbSiaeLog'
and c.name = 'Capienza'
exec sp_rename @Cnstr, 'DF_SiaeLog_Capienza', 'object'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.670</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tables
  - tbSiaeEventSector
  - tbSiaePerformanceSector
Drop Capienza from
  - tbSiaeEvent
  - tbSiaePerformance</REASON><TABLENAMES>tbSiaeEvent
tbSiaePerformance</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSiaeEvent drop column Capienza
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSiaeEventSector]
(
  [EventId] Uniqueidentifier NOT NULL,
  [SectorCode] Varchar(10) NOT NULL,
  [ProductId] Uniqueidentifier NOT NULL,
  [Capienza] Integer CONSTRAINT DF_SiaeEventSector_Capienza Default 0 NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeEventSector_ProductId] ON [tbSiaeEventSector] ([ProductId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeEventSector] add constraint PK_SiaeEventSector Primary Key ([EventId],[SectorCode])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeEventSector] add constraint FK_SiaeEventSector_SiaeEvent  foreign key([EventId]) references [tbSiaeEvent] ([EventId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeEventSector] add constraint FK_SiaeEventSector_Product  foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @Cmd nvarchar(256)
select @Cmd = 'Alter table tbSiaePerformance drop constraint ' + d.name
from sys.tables t
join sys.default_constraints d on d.parent_object_id = t.object_id
join sys.columns c on c.object_id = t.object_id and c.column_id = d.parent_column_id
where t.name = 'tbSiaePerformance'
and c.name = 'Capienza'
execute (@Cmd)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaePerformance drop column Capienza
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSiaePerformanceSector]
(
  [PerformanceId] Uniqueidentifier NOT NULL,
  [SectorCode] Varchar(10) NOT NULL,
  [ProductId] Uniqueidentifier NOT NULL,
  [Prezzo] Money NOT NULL,
  [Capienza] Integer CONSTRAINT DF_SiaePerformanceSector_Capienza DEFAULT(0) NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaePerformanceSector_ProductId] ON [tbSiaePerformanceSector] ([ProductId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaePerformanceSector] add  constraint PK_SiaePerformanceSector Primary Key ([PerformanceId],[SectorCode])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaePerformanceSector] add constraint FK_SiaePerformanceSector_SiaePerformance  foreign key([PerformanceId]) references [tbSiaePerformance] ([PerformanceId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaePerformanceSector] add constraint FK_SiaePerformanceSector_SiaeProduct  foreign key([ProductId]) references [tbSiaeProduct] ([ProductId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.669</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add new field tbEntityTab.LangISO 
modify index EventId+LangISO</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP INDEX IX_EntityTab_EntityId ON tbEntityTab
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEntityTab
add LangISO Varchar(3) NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_EntityTab_EntityId_LangISO] ON [tbEntityTab] ([EntityId] ,[LangISO] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.668</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>refactoring tbEntityTab</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbEntityTab
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbEntityTab]
(
	[EntityTabId] Uniqueidentifier NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[EntityTabName] Nvarchar(50) NOT NULL,
	[EntityTabType] Smallint NOT NULL,
	[ExternalURL] Varchar(2000) NULL,
	[PriorityOrder] Smallint NOT NULL,
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEntityTab ADD CONSTRAINT PK_EntityTab PRIMARY KEY ([EntityTabId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_EntityTab_EntityId] ON [tbEntityTab] ([EntityId] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.667</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbProductFamily.ProductFamilyStatus</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductFamily
add ProductFamilyStatus smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductFamily
set ProductFamilyStatus=2
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductFamily
alter column ProductFamilyStatus smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.666</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbAccessPoint.CheckValidPerformance</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccessPoint
add CheckValidPerformance Bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccessPoint
set CheckValidPerformance=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccessPoint
alter column CheckValidPerformance Bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.665</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbEvent.PerfOnDemand</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEvent
add PerfOnDemand Bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbEvent
set PerfOnDemand=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
alter column PerfOnDemand Bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.664</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0..1] add tbEntityTab
[2..4] add field tbCatalog.ShowInFullMenu, tbCatalog.ShowInQuickMenu, tbCatalog.ShowInMainContent, tbCatalog.AuthNeeded</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbEntityTab]
(
	[EntityId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[EntityTabName] Nvarchar(50) NOT NULL,
	[EntityTabType] Smallint NOT NULL,
	[ExternalURL] Varchar(2000) NULL,
)


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEntityTab ADD CONSTRAINT PK_EntityTab PRIMARY KEY ([EntityId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCatalog
add
  ShowInFullMenu Bit null,  
  ShowInQuickMenu Bit null,  
  ShowInMainContent Bit null,
  AuthNeeded Bit null;  

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbCatalog
set ShowInFullMenu=0,  
  ShowInQuickMenu=0,  
  ShowInMainContent=0,
  AuthNeeded=0  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCatalog
alter column ShowInFullMenu Bit not null  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCatalog
alter column ShowInQuickMenu Bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCatalog
alter column ShowInMainContent Bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCatalog
alter column AuthNeeded Bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.663</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename column tbSiaeProduct.OrdineDiPosto
Drop column tbSiaeEvent.Stato</REASON><TABLENAMES>tbSiaeProduct
tbSiaeEvent</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>exec sp_rename 'tbSiaeProduct.OrdineDiPosto', 'OrdinePosto', 'COLUMN'

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeEvent drop column Stato
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>VGS R&amp;D</ADDEDBY><SQLVERSION>1.662</SQLVERSION><RMTRACKLINK>1171</RMTRACKLINK><REASON>remove tbProduct.ProductFamilyId
add tbProductFamily index on ParentEntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP INDEX tbProduct.IX_Product_ProductFamilyId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
drop FK_Product_ProductFamily
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
drop column ProductFamilyId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductFamily_ParentEntityId] ON [tbProductFamily] ([ParentEntityId] )
where ParentEntityId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.661</SQLVERSION><RMTRACKLINK>SIT-1171</RMTRACKLINK><REASON>Add columns tbProductFamily.ParentEntityType, tbProductFamily.ParentEntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductFamily
add ParentEntityType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductFamily
add ParentEntityId Uniqueidentifier null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.660</SQLVERSION><RMTRACKLINK>SIT-1171</RMTRACKLINK><REASON>Add column tbProduct.ProductFamilyId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add ProductFamilyId Uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_ProductFamily foreign key([ProductFamilyId]) references [tbProductFamily] ([ProductFamilyId])  on update no action on delete no action   
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_ProductFamilyId] ON [tbProduct] ([ProductFamilyId] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.659</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add Capienza to
  - tbSiaeLog
  - tbSiaePerformance
Rename tbSiaeProduct.EventiAbilitate
Drop tbSiaeLog.EventId</REASON><TABLENAMES>tbSiaeLog
tbSiaePerformance
tbSiaeProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>exec sp_rename 'tbSiaeProduct.EventiAbilitate', 'EventiAbilitati', 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaePerformance add [Capienza] Integer NOT NULL Default 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeLog add [Capienza] Integer NOT NULL Default 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_SiaeLog_EventId on tbSiaeLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeLog drop constraint FK_SiaeLog_SiaeEvent
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeLog drop column EventId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.658</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename in tbSiaeProduct:
  - OrdiniDiPosti
  - NumeroOpereAbilitate
  - Add OrganizerId</REASON><TABLENAMES>tbSiaeProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>exec sp_rename 'tbSiaeProduct.OrdiniDiPosto', 'OrdineDiPosto', 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>exec sp_rename 'tbSiaeProduct.NumeroOpereAbilitate', 'EventiAbilitate', 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbSiaeProduct -- we need it to set OrganizerId not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeProduct add [OrganizerId] Uniqueidentifier NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeProduct] add constraint FK_SiaeProduct_SiaeOrganizer foreign key([OrganizerId]) references [tbSiaeOrganizer] ([OrganizerId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeProduct_OrganizerId] ON [tbSiaeProduct] ([OrganizerId] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.657</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbProduct.BiometricEnrollOnPOS</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add BiometricEnrollOnPOS Bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set BiometricEnrollOnPOS=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column BiometricEnrollOnPOS Bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.656</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSiaeProduct</REASON><TABLENAMES>tbSiaeProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSiaeProduct]
(
	[ProductId] Uniqueidentifier NOT NULL,
	[OrdiniDiPosto] Varchar(10) NOT NULL,
	[TipoTitolo] Varchar(10) NOT NULL,
	[NumeroOpereAbilitate] Integer NOT NULL
)


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeProduct ADD CONSTRAINT PK_SiaeProduct PRIMARY KEY ([ProductId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeProduct] add  constraint FK_SiaeProduct_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.655</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbEntityChange indexes</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_EntityChange_Entity on tbEntityChange
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_EntityChange_Entity on tbEntityChange
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbEntityChange
from
  tbEntityChange EC inner join 
  (
    select EntityId, MAX(EntityChangeId) as MaxId
    from tbEntityChange
    group by EntityId
    having COUNT(*)&gt;1
  ) X on EC.EntityId=X.EntityId and EC.EntityChangeId&lt;&gt;MaxId



</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_EntityChange_EntityId] ON [tbEntityChange] ([EntityId] ) 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_EntityChange_EntityType] ON [tbEntityChange] ([EntityType] ,[EntityChangeId] ) 
include (InsertUpdate, EntityId)

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.654</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Drop field tbSurvey.ProductTrigger
- Add "all products" to tbEntityRight for surveys</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSurvey
drop column ProductTrigger
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityRight (
  DocEntityId,  
  DocEntityType,  
  UsrEntityId,  
  UsrEntityType,  
  RightLevel
)
select 
  SurveyId,  
  74, /*survey*/  
  'A0000131-0000-0000-0000-000000000012',  
  12, /*prod.type*/  
  2 /*read*/
from tbSurvey
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.653</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbSurvey.ProductTrigger</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSurvey
add ProductTrigger bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSurvey
set ProductTrigger=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSurvey
alter column ProductTrigger bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.652</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbProductGuest.AddToHostPortfolio </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductGuest
add AddToHostPortfolio Bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductGuest
set AddToHostPortfolio=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductGuest
alter column AddToHostPortfolio Bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.651</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add tbProductFamily</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProductFamily]
(
	[ProductFamilyId] Uniqueidentifier NOT NULL,
	[CategoryId] Uniqueidentifier NOT NULL,
	[ProductFamilyCode] Varchar(15) NOT NULL,
	[ProductFamilyName] Nvarchar(50) NOT NULL,
	[ProductFamilyNameExt] Nvarchar(50) NULL,
	[ShowNameExt] Bit NOT NULL,
	[TargetProductFamilyId] Uniqueidentifier NULL,
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductFamily ADD CONSTRAINT PK_ProductFamily PRIMARY KEY ([ProductFamilyId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductFamily_CategoryId] ON [tbProductFamily] ([CategoryId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductFamily_TargetProductFamilyId] ON [tbProductFamily] ([TargetProductFamilyId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductFamily] add constraint FK_ProductFamily_Category foreign key([CategoryId]) references [tbCategory] ([CategoryId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductFamily] add constraint FK_ProductFamily_TargetProductFamily foreign key([TargetProductFamilyId]) references [tbProductFamily] ([ProductFamilyId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.650</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbProduct.BiometricCheckLevel </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add BiometricCheckLevel Smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set BiometricCheckLevel=1

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column BiometricCheckLevel Smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.649</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change PK and column order in tbSiaeLog
Table is recreated</REASON><TABLENAMES>tbSiaeLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSiaeLogBak]
(
  [Sigillo] Varchar(16) NOT NULL,
  [WorkstationId] Uniqueidentifier NOT NULL,
  [EventId] Uniqueidentifier NULL,
  [PerformanceId] Uniqueidentifier NULL,
  [CodiceSistema] Varchar(8) NOT NULL,
  [CodiceCarta] Varchar(8) NOT NULL,
  [OrganizerId] Uniqueidentifier NOT NULL,
  [LocationId] Uniqueidentifier NULL,
  [TicketId] Uniqueidentifier NULL,
  [Stato] Varchar(10) NOT NULL,
  [Operazione] Smallint NOT NULL,
  [DataOraEmissione] Smalldatetime NOT NULL,
  [OrdinePosto] Varchar(10) NOT NULL,
  [Posto] Varchar(6) NULL,
  [TitoloBase] Varchar(1) NOT NULL,
  [IvaPreassolta] Varchar(1) NOT NULL,
  [TipoTurno] Smallint NOT NULL,
  [ProgressivoCarta] Integer NOT NULL,
  [TipoTassazione] Varchar(1) NOT NULL,
  [PrezzoTitolo] Money NOT NULL,
  [IvaTitolo] Money NOT NULL,
  [PrezzoPrevendita] Money NOT NULL,
  [IvaPrevendita] Money NOT NULL,
  [Rateo] Money NOT NULL,
  [IvaRateo] Money NOT NULL,
  [TipoTitolo] Varchar(10) NULL,
  [RateoIntrattenimenti] Money NULL,
  [ImponibileIntrattenimenti] Money NULL,
  [IvaIntrattenimenti] Money NULL,
  [Smaterializzato] Bit NOT NULL,
  [IvaRateoIntrattenimenti] Money NULL,
  [MediaId] Uniqueidentifier NULL,
  [DataOraEvento] Smalldatetime NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>INSERT INTO [dbo].[tbSiaeLogBak]
           ([Sigillo]
       ,[WorkstationId]
           ,[EventId]
           ,[PerformanceId]
           ,[CodiceSistema]
           ,[CodiceCarta]
           ,[OrganizerId]
           ,[LocationId]
           ,[TicketId]
           ,[Stato]
           ,[Operazione]
           ,[DataOraEmissione]
           ,[OrdinePosto]
           ,[Posto]
           ,[TitoloBase]
           ,[IvaPreassolta]
           ,[TipoTurno]
           ,[ProgressivoCarta]
           ,[TipoTassazione]
           ,[PrezzoTitolo]
           ,[IvaTitolo]
           ,[PrezzoPrevendita]
           ,[IvaPrevendita]
           ,[Rateo]
           ,[IvaRateo]
           ,[TipoTitolo]
           ,[RateoIntrattenimenti]
           ,[ImponibileIntrattenimenti]
           ,[IvaIntrattenimenti]
           ,[Smaterializzato]
           ,[IvaRateoIntrattenimenti]
           ,[MediaId]
           ,[DataOraEvento])
SELECT
  Sigillo
  ,WorkstationId
    ,EventId
    ,PerformanceId
    ,CodiceSistema
    ,CodiceCarta
    ,OrganizerId
    ,LocationId
    ,TicketId
    ,Stato
    ,Operazione
    ,DataOraEmissione
    ,OrdinePosto
    ,Posto
    ,TitoloBase
    ,IvaPreassolta
    ,TipoTurno
    ,ProgressivoCarta
    ,TipoTassazione
    ,PrezzoTitolo
    ,IvaTitolo
    ,PrezzoPrevendita
    ,IvaPrevendita
    ,Rateo
    ,IvaRateo
    ,TipoTitolo
    ,RateoIntrattenimenti
    ,ImponibileIntrattenimenti
    ,IvaIntrattenimenti
    ,Smaterializzato
    ,IvaRateoIntrattenimenti
    ,MediaId
    ,DataOraEvento
FROM tbSiaeLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbSiaeLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>exec sp_rename tbSiaeLogBak, tbSiaeLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeLog ADD CONSTRAINT PK_SiaeLog PRIMARY KEY ([Sigillo])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_WorkstationId] ON [tbSiaeLog] ([WorkstationId] ,[DataOraEmissione] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_EventId] ON [tbSiaeLog] ([EventId] ,[DataOraEmissione] ) 
where EventId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_PerformanceId] ON [tbSiaeLog] ([PerformanceId] ,[DataOraEmissione] ) 
where PerformanceId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_CodiceSistema] ON [tbSiaeLog] ([CodiceSistema] ,[DataOraEmissione] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_CodiceCarta] ON [tbSiaeLog] ([CodiceCarta] ,[DataOraEmissione] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_OrganizerId] ON [tbSiaeLog] ([OrganizerId] ,[DataOraEmissione] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_LocationId] ON [tbSiaeLog] ([LocationId] ,[DataOraEmissione] ) 
where LocationId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_TicketId] ON [tbSiaeLog] ([TicketId] ,[DataOraEmissione] ) 
where TicketId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_MediaId] ON [tbSiaeLog] ([MediaId] ,[DataOraEmissione] ) 
where MediaId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SiaeEvent foreign key([EventId]) references [tbSiaeEvent] ([EventId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_Performance foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SiaeSystem foreign key([CodiceSistema]) references [tbSiaeSystem] ([CodiceSistema])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SiaeCard foreign key([CodiceCarta]) references [tbSiaeCard] ([CodiceCarta])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SiateOrganizer foreign key([OrganizerId]) references [tbSiaeOrganizer] ([OrganizerId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SiaeLocation foreign key([LocationId]) references [tbSiaeLocation] ([LocationId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_Media foreign key([MediaId]) references [tbMedia] ([MediaId])  on update no action on delete no action  
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.648</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Convert tbSurvey.SurveyType to specific lk codes</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbSurvey
set SurveyType=1
where SurveyType=21
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSurvey
set SurveyType=2
where SurveyType=20
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.647</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Makes tbSurvey.Frequency nulalble
- Change tbEntityRight: replace licensee with 'all stations'</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSurvey
alter column Frequency smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSurvey
set Frequency=null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityRight (
  DocEntityId,  
  DocEntityType,  
  UsrEntityId,  
  UsrEntityType,  
  RightLevel
)
select 
  DocEntityId,  
  DocEntityType,  
  'A0000131-0000-0000-0000-000000000003',  
  3, /*workstation*/  
  RightLevel
from tbEntityRight
where UsrEntityType=17/*licensee*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbEntityRight 
where UsrEntityType=17/*licensee*/
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.646</SQLVERSION><RMTRACKLINK>344</RMTRACKLINK><REASON>refactoring of tbPaymentCard
[0..1] add "storage" clause to IX_PaymentCard_AuthId
[2] change CardType to nullable</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_PaymentCard_AuthId on tbPaymentCard
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentCard_AuthId] ON [tbPaymentCard] ([AuthId] ) 
where AuthId is not NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentCard
alter column CardType Tinyint NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.645</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbBiometric</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbBiometric]
(
	[BiometricId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
	[BiometricType] Smallint NOT NULL,
	[Template] Image NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBiometric ADD CONSTRAINT PK_Biometric PRIMARY KEY ([BiometricId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Biometric_EntityId] ON [tbBiometric] ([EntityId] ,[BiometricType] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.644</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbSurvey</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSurvey
add
  SurveyCode varchar(10) null,  
  SurveyName nvarchar(50) null,     
  Frequency smallint null,
  Enabled bit null, 
  Rules ntext null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSurvey
set
  SurveyCode=X_Code,  
  SurveyName=X_Code  
from (
  select 
    SurveyId as X_SurveyId, 
    Right('000'+Cast(ROW_NUMBER() OVER (ORDER BY SurveyId) as varchar(max)), 4) AS X_Code 
  from tbSurvey
) X
where SurveyId=X_SurveyId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSurvey
alter column SurveyCode varchar(10) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSurvey
alter column SurveyName nvarchar(50) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Survey_SurveyCode] ON [tbSurvey] ([SurveyCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityRight (
  DocEntityId,
  DocEntityType,
  UsrEntityId,
  UsrEntityType,
  RightLevel
)
select
  SurveyId,  
  74, /*survey*/ 
  EntityId,  
  EntityType,  
  2 /*read*/
from tbSurvey
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSurvey
drop column EntityType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSurvey
drop column EntityId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSurvey
drop column Inherit
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSurvey
set Rules=tbSurvey2Mask.Rules
from tbSurvey2Mask
where tbSurvey.SurveyId=tbSurvey2Mask.SurveyId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>select *
into tmpSurvey2Mask
from tbSurvey2Mask
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbSurvey2Mask
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSurvey2Mask]
(
	[SurveyId] Uniqueidentifier NOT NULL,
	[MaskId] Uniqueidentifier NOT NULL,
	[PriorityOrder] Integer NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSurvey2Mask ADD CONSTRAINT PK_Survey2Mask PRIMARY KEY ([SurveyId],[MaskId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Survey2Mask_MaskId] ON [tbSurvey2Mask] ([MaskId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSurvey2Mask] add constraint FK_Survey2Mask_Survey foreign key([SurveyId]) references [tbSurvey] ([SurveyId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSurvey2Mask] add constraint FK_Survey2Mask_Mask foreign key([MaskId]) references [tbMask] ([MaskId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbSurvey2Mask (
  SurveyId,  
  MaskId,  
  PriorityOrder
)
select distinct
  SurveyId,  
  MaskId,  
  Min(PriorityOrder)
from tmpSurvey2Mask
group by
  SurveyId,  
  MaskId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tmpSurvey2Mask
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSurvey
set
  Frequency=1,  
  Enabled=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSurvey
alter column Frequency smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSurvey
alter column Enabled bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.643</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTransactionStock.TransactionDateTime </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTransactionStock
add TransactionDateTime smalldatetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTransactionStock
set TransactionDateTime=tbTransaction.TransactionDateTime
from tbTransaction
where tbTransactionStock.TransactionId=tbTransaction.TransactionId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionStock
alter column TransactionDateTime smalldatetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_TransactionStock_ProductId on tbTransactionStock
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_TransactionStock_WarehouseId on tbTransactionStock
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionStock_ProductId] ON [tbTransactionStock] ([ProductId] ,[TransactionDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionStock_WarehouseId] ON [tbTransactionStock] ([WarehouseId] ,[TransactionDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionStock_ProductWarehouse] ON [tbTransactionStock] ([ProductId] ,[WarehouseId] ,[TransactionDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.642</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Force tbEntityChange for root category to refresh</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DELETE FROM tbEntityChange
WHERE EXISTS
  ( SELECT tbCategory.CategoryId
    FROM tbCategory
    WHERE tbCategory.CategoryId = tbEntityChange.EntityId
    AND tbCategory.ParentCategoryId is NULL);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange
(EntityType, EntityId, InsertUpdate)
select 28, CategoryId, 1 from tbCategory where ParentCategoryId is NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.641</SQLVERSION><RMTRACKLINK>SIT-303</RMTRACKLINK><REASON>Add new field "BonusEntry" to tbTicket</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add BonusEntry bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicket
set BonusEntry = 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
alter column BonusEntry bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.640</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add PerformanceId to primary key on tbPerformanceSet</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbPerformanceSetDetail] (
	[PerformanceSetId] Uniqueidentifier NOT NULL,
	[PerformanceId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPerformanceSetDetail 
ADD CONSTRAINT PK_PerformanceSetDetail PRIMARY KEY ([PerformanceSetId],[PerformanceId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PerformanceSetDetail_PerformanceId] ON [tbPerformanceSetDetail] ([PerformanceId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Insert into tbPerformanceSetDetail (PerformanceSetId, PerformanceId)
select
  PerformanceSetId, 
  PerformanceId
from 
  tbPerformanceSet
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformanceSet drop FK_PerformanceSet_Performance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_PerformanceSet_PerformanceId on tbPerformanceSet
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformanceSet
drop column PerformanceId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPerformanceSetDetail] add  foreign key([PerformanceSetId]) references [tbPerformanceSet] ([PerformanceSetId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPerformanceSetDetail] add  foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.639</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop fields LocationAccountId and OpAreaAccountId from tbMessage</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbEntityRight (
  DocEntityId,  
  DocEntityType,  
  UsrEntityId,  
  UsrEntityType,  
  RightLevel
)
select
  MessageId,  
  72, /*Message*/    
  'A0000131-0000-0000-0000-000000000015', /* All users */  
  15, /*Person*/    
  2 /*Read*/
from tbMessage
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityRight (
  DocEntityId,  
  DocEntityType,  
  UsrEntityId,  
  UsrEntityType,  
  RightLevel
)
select
  MessageId,  
  72, /*Message*/    
  'A0000131-0000-0000-0000-000000000003', /* All station */  
  3, /*Person*/    
  2 /*Read*/
from tbMessage
where 
  LocationAccountId is null and  
  OpAreaAccountId is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityRight (
  DocEntityId,  
  DocEntityType,  
  UsrEntityId,  
  UsrEntityType,  
  RightLevel
)
select
  MessageId,  
  72, /*Message*/    
  OpAreaAccountId,   
  14, /*OperatingArea*/    
  2 /*Read*/
from tbMessage
where 
  OpAreaAccountId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityRight (
  DocEntityId,  
  DocEntityType,  
  UsrEntityId,  
  UsrEntityType,  
  RightLevel
)
select
  MessageId,  
  72, /*Message*/    
  LocationAccountId,   
  6, /*Location*/    
  2 /*Read*/
from tbMessage
where 
  LocationAccountId is not null and
  OpAreaAccountId is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMessage drop FK_Message_LocationAccount
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMessage drop FK_Message_OpAreaAccount
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Message_LocationAccountId on tbMessage
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Message_OpAreaAccountId on tbMessage
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMessage
drop column LocationAccountId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMessage
drop column OpAreaAccountId

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.638</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Delete rights for RightType=172 (group level test)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbRight
where RightType=172
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.637</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSiaeReport</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSiaeReport]
(
	[RiepilogoId] Uniqueidentifier NOT NULL,
	[Nome] Nvarchar(30) NOT NULL,
	[DataRiferimento] Smalldatetime NULL,
	[Tipo] Char(1) NOT NULL,
	[Stato] Char(1) NOT NULL,
	[DataGenerazione] Smalldatetime NOT NULL,
	[DataSalvataggio] Smalldatetime NULL,
	[DataInvio] Smalldatetime NULL,
	[Progressivo] Integer NOT NULL,
	[Sostituzione] Bit NOT NULL,
	[Riepilogo] Ntext NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeReport ADD CONSTRAINT PK_SiaeReport PRIMARY KEY ([RiepilogoId])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.636</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename foreign keys</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbRole' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Role_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSaleChannel' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_SaleChannel_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSaleItem' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SaleId'

exec ('sp_rename ''' + @oldname + ''',''FK_SaleItem_Sale''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSaleItem' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PerformanceTypeId'

exec ('sp_rename ''' + @oldname + ''',''FK_SaleItem_PerformanceType''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSaleItem' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='OptionSetId'

exec ('sp_rename ''' + @oldname + ''',''FK_SaleItem_OptionSet''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSaleItem' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='ProductId'

exec ('sp_rename ''' + @oldname + ''',''FK_SaleItem_Product''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSaleItem2AttributeItem' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SaleItemId'

exec ('sp_rename ''' + @oldname + ''',''FK_SaleItem2AttributeItem_SaleItem''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSaleItem2AttributeItem' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AttributeItemId'

exec ('sp_rename ''' + @oldname + ''',''FK_SaleItem2AttributeItem_AttributeItem''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSaleItemDetail' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='TicketMediaMatchId'

exec ('sp_rename ''' + @oldname + ''',''FK_SaleItemDetail_Portfolio''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSaleItemDetail' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SeatHoldId'

exec ('sp_rename ''' + @oldname + ''',''FK_SaleItemDetail_SeatHold''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSaleItemDetail' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SaleItemId'

exec ('sp_rename ''' + @oldname + ''',''FK_SaleItemDetail_SaleItem''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSaleItemPromo' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SaleItemId'

exec ('sp_rename ''' + @oldname + ''',''FK_SaleItemPromo_SaleItem''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSaleItemPromo' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PromoProductId'

exec ('sp_rename ''' + @oldname + ''',''FK_SaleItemPromo_PromoProduct''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTask' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Task_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTask' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='NextTaskId'

exec ('sp_rename ''' + @oldname + ''',''FK_Task_NextTask''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTaskTrigger' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='TaskId'

exec ('sp_rename ''' + @oldname + ''',''FK_TaskTrigger_Task''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTaxBracket' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='TaxId'

exec ('sp_rename ''' + @oldname + ''',''FK_TaxBracket_Tax''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTicket' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='TicketMediaMatchId'

exec ('sp_rename ''' + @oldname + ''',''FK_Ticket_Portfolio''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTicket' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SeatHoldId'

exec ('sp_rename ''' + @oldname + ''',''FK_Ticket_SeatHold''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTicket' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Ticket_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTicket' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='ProductId'

exec ('sp_rename ''' + @oldname + ''',''FK_Ticket_Product''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTicket' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SaleItemDetailId'

exec ('sp_rename ''' + @oldname + ''',''FK_Ticket_SaleItemDetail''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTicket' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='TransactionId'

exec ('sp_rename ''' + @oldname + ''',''FK_Ticket_Transaction''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTicketMediaMatch' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Portfolio_Account''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTicketUsage' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='TicketId'

exec ('sp_rename ''' + @oldname + ''',''FK_TicketUsage_Ticket''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTicketUsage' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AptWorkstationId'

exec ('sp_rename ''' + @oldname + ''',''FK_TicketUsage_AptWorkstation''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTicketUsage' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='IncProductId'

exec ('sp_rename ''' + @oldname + ''',''FK_TicketUsage_IncProduct''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTicketUsage' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AccessAreaAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_TicketUsage_AcAreaAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTransaction' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SaleId'

exec ('sp_rename ''' + @oldname + ''',''FK_Transaction_Sale''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTransaction' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='BoxId'

exec ('sp_rename ''' + @oldname + ''',''FK_Transaction_Box''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTransaction' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='WorkstationId'

exec ('sp_rename ''' + @oldname + ''',''FK_Transaction_Workstation''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTransaction' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Transaction_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTransaction' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='UserAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Transaction_UserAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTransaction' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SupAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Transaction_SupAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTransactionItem' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='TransactionId'

exec ('sp_rename ''' + @oldname + ''',''FK_TransactionItem_Transaction''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTransactionItem' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SaleItemId'

exec ('sp_rename ''' + @oldname + ''',''FK_TransactionItem_SaleItem''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbUpload' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='WorkstationId'

exec ('sp_rename ''' + @oldname + ''',''FK_Upload_Workstation''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbWorkstation' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SaleChannelId'

exec ('sp_rename ''' + @oldname + ''',''FK_Workstation_SaleChannel''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbWorkstation' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LocationAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Workstation_LocationAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbWorkstation' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='OpAreaAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Workstation_OpAreaAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbWorkstation' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LastUserAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Workstation_LastUserAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbWorkstation' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LoggedUserAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Workstation_LoggedUserAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbWorkstation' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='CategoryId'

exec ('sp_rename ''' + @oldname + ''',''FK_Workstation_Category''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbWorkstation' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Workstation_License''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.635</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactoring tbPaymentCard</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentCard
alter column AuthId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentCard_AuthId] ON [tbPaymentCard] ([AuthId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbPaymentCard]
add [CardType] Tinyint NULL,
    [CardNumber] Varchar(4) NULL,
    [CardLength] Tinyint NULL,
    [CardHolderName] Varchar(20) NULL,
    [AuthorizationCode] Varchar(10) NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPaymentCard
set CardType = 0, CardLength = 0                              
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentCard
alter column CardType bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentCard
alter column CardLength bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.634</SQLVERSION><RMTRACKLINK>SIT-301</RMTRACKLINK><REASON>Add foreign key to tbSaleApprove</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Alter table [tbSaleApprove] add constraint FK_SaleApprove_Sale foreign key([SaleId]) references [tbSale] ([SaleId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSaleApprove' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='UserAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_SaleApprove_UserAccount''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.633</SQLVERSION><RMTRACKLINK>SIT-301</RMTRACKLINK><REASON>[1..3] Add new filed "ManualExpiration" to tbTicket
[4] Add foreing key to tbSaleApprove
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add ManualExpiration bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicket
set ManualExpiration = 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
alter column ManualExpiration bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleApprove] add constraint FK_SaleApprove_Account foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.632</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename foreign keys</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPortfolioShare' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='TicketMediaMatchId'

exec ('sp_rename ''' + @oldname + ''',''FK_PortfolioShare_Portfolio''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbProductLink' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='ProductId'

exec ('sp_rename ''' + @oldname + ''',''FK_ProductLink_Product''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbProductLink' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='ChildProductId'

exec ('sp_rename ''' + @oldname + ''',''FK_ProductLink_ChildProduct''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbProductPrice' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SaleChannelId'

exec ('sp_rename ''' + @oldname + ''',''FK_ProductPrice_SaleChannel''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbProductPrice' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='ProductId'

exec ('sp_rename ''' + @oldname + ''',''FK_ProductPrice_Product''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbProductPrice' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PerformanceTypeId'

exec ('sp_rename ''' + @oldname + ''',''FK_ProductPrice_PerformanceType''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPromoAction' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='ActionProductId'

exec ('sp_rename ''' + @oldname + ''',''FK_PromoAction_ActionProduct''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPromoAction' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='ProductId'

exec ('sp_rename ''' + @oldname + ''',''FK_PromoAction_Product''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPromoRule' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='ProductId'

exec ('sp_rename ''' + @oldname + ''',''FK_PromoRule_Product''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPromoTrigger' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='TriggerCategoryId'

exec ('sp_rename ''' + @oldname + ''',''FK_PromoTrigger_TriggerCategory''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPromoTrigger' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='TriggerProductId'

exec ('sp_rename ''' + @oldname + ''',''FK_PromoTrigger_TriggerProduct''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPromoTrigger' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='ProductId'

exec ('sp_rename ''' + @oldname + ''',''FK_PromoTrigger_Product''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbRepository' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Repository_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbRepositoryIndex' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='RepositoryId'

exec ('sp_rename ''' + @oldname + ''',''FK_RepositoryIndex_Repository''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.631</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop table tbLabel
Rename foreign keys</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbLabel
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbJob' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='TaskId'

exec ('sp_rename ''' + @oldname + ''',''FK_Job_Task''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbLock' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='UserAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Lock_UserAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbLock' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='WorkstationId'

exec ('sp_rename ''' + @oldname + ''',''FK_Lock_Workstation''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbLog' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='WorkstationId'

exec ('sp_rename ''' + @oldname + ''',''FK_Log_Workstation''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbLog' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SourceWorkstationId'

exec ('sp_rename ''' + @oldname + ''',''FK_Log_SourceWorkstation''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbLogin' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Login_Account''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbMask' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Mask_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbMaskItem' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='MaskId'

exec ('sp_rename ''' + @oldname + ''',''FK_MaskItem_Mask''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbMaskItem' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='MetaFieldId'

exec ('sp_rename ''' + @oldname + ''',''FK_MaskItem_MetaField''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbMedia' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='TicketMediaMatchId'

exec ('sp_rename ''' + @oldname + ''',''FK_Media_Portfolio''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbMedia' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='DocTemplateId'

exec ('sp_rename ''' + @oldname + ''',''FK_Media_DocTemplate''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbMedia' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Media_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbMediaCode' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='MediaId'

exec ('sp_rename ''' + @oldname + ''',''FK_MediaCode_Media''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbMembershipPointRule' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='MembershipPointId'

exec ('sp_rename ''' + @oldname + ''',''FK_MembershipPointRule_MembershipPoint''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbMembershipPointRule' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='EventId'

exec ('sp_rename ''' + @oldname + ''',''FK_MembershipPointRule_Event''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbMembershipPointRule' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AptWorkstationId'

exec ('sp_rename ''' + @oldname + ''',''FK_MembershipPointRule_AccessPoint''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbMetaData' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='MetaFieldId'

exec ('sp_rename ''' + @oldname + ''',''FK_MetaData_MetaField''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbMetaField' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_MetaField_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbMetaFieldItem' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='MetaFieldId'

exec ('sp_rename ''' + @oldname + ''',''FK_MetaFieldItem_MetaField''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbOptionSetDetail' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='OptionSetId'

exec ('sp_rename ''' + @oldname + ''',''FK_OptionSetDetail_OptionSet''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbOptionSetDetail' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AttributeItemId'

exec ('sp_rename ''' + @oldname + ''',''FK_OptionSetDetail_AttributeItem''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPayment' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='TransactionId'

exec ('sp_rename ''' + @oldname + ''',''FK_Payment_Transaction''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPayment' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Payment_Account''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPayment' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PluginId'

exec ('sp_rename ''' + @oldname + ''',''FK_Payment_Plugin''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPaymentCard' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AuthId'

exec ('sp_rename ''' + @oldname + ''',''FK_PaymentCard_Auth''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPaymentCard' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PaymentId'

if (@oldname is not null)
begin
  exec ('sp_rename ''' + @oldname + ''',''FK_PaymentCard_Payment''')    
end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPaymentCredit' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PaymentId'

exec ('sp_rename ''' + @oldname + ''',''FK_PaymentCredit_Payment''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPaymentCredit' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SettleTransactionId'

exec ('sp_rename ''' + @oldname + ''',''FK_PaymentCredit_SettleTransaction''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPaymentCredit' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='VoucherId'

exec ('sp_rename ''' + @oldname + ''',''FK_PaymentCredit_Voucher''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPaymentCredit' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_PaymentCredit_Account''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPaymentWallet' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PaymentId'

exec ('sp_rename ''' + @oldname + ''',''FK_PaymentWallet_Payment''')

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPaymentWallet' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='TicketMediaMatchId'

exec ('sp_rename ''' + @oldname + ''',''FK_PaymentWallet_Portfolio''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPaymentWallet' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='MediaId'

exec ('sp_rename ''' + @oldname + ''',''FK_PaymentWallet_Media''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPerformanceType' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_PerformanceType_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPlugin' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='WorkstationId'

exec ('sp_rename ''' + @oldname + ''',''FK_Plugin_Workstation''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPlugin' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PaymentMethodId'

exec ('sp_rename ''' + @oldname + ''',''FK_Plugin_PaymentMethod''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPlugin' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='DriverId'

exec ('sp_rename ''' + @oldname + ''',''FK_Plugin_Driver''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.630</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbWarehouse.LocationAccountId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbWarehouse
add LocationAccountId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Warehouse_LocationAccountId] ON [tbWarehouse] ([LocationAccountId] ,[WarehouseName] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbWarehouse] add constraint FK_Warehouse_LocationAccount foreign key([LocationAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.629</SQLVERSION><RMTRACKLINK>SIT-260</RMTRACKLINK><REASON>Add new field "TicketSubstatus" to tbTicket</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add TicketSubstatus Tinyint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.628</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename foreign keys:
- tbSeat
- tbSeatMap
- tbSeatSector
- tbSeatHold</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSeat' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AttributeItemId'

exec ('sp_rename ''' + @oldname + ''',''FK_Seat_AttributeItem''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSeat' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SeatSectorId'

exec ('sp_rename ''' + @oldname + ''',''FK_Seat_SeatSector''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSeatMap' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_SeatMap_Account''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSeatSector' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AcAreaAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_SeatSector_AcAreaAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSeatSector' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SeatMapId'

exec ('sp_rename ''' + @oldname + ''',''FK_SeatSector_SeatMap''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSeatSector' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='ParentSectorId'

exec ('sp_rename ''' + @oldname + ''',''FK_SeatSector_ParentSector''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSeatHold' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='WorkstationId'

exec ('sp_rename ''' + @oldname + ''',''FK_SeatHold_Workstation''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSeatHold' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='UserAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_SeatHold_UserAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSeatHold' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PerformanceSetId'

exec ('sp_rename ''' + @oldname + ''',''FK_SeatHold_PerformanceSet''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSeatHold' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AttributeItemId'

exec ('sp_rename ''' + @oldname + ''',''FK_SeatHold_AttributeItem''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSeatHold' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SeatSectorId'

exec ('sp_rename ''' + @oldname + ''',''FK_SeatHold_SeatSector''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.627</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename foreign keys: tbPerformance </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPerformance' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='EventId'

exec ('sp_rename ''' + @oldname + ''',''FK_Performance_Event''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPerformance' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PerformanceTypeId'

exec ('sp_rename ''' + @oldname + ''',''FK_Performance_PerformanceType''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPerformance' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LocationAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Performance_LocationAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPerformance' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AccessAreaAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Performance_AcAreaAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTicketUsage' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PerformanceId'

exec ('sp_rename ''' + @oldname + ''',''FK_TicketUsage_Performance''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTimedTicketStatement' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PerformanceId'

exec ('sp_rename ''' + @oldname + ''',''FK_TimedTicketStatement_Performance''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPerformanceSet' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PerformanceId'

exec ('sp_rename ''' + @oldname + ''',''FK_PerformanceSet_Performance''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSeat' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PerformanceId'

exec ('sp_rename ''' + @oldname + ''',''FK_Seat_Performance''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSaleItem' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PerformanceId'

exec ('sp_rename ''' + @oldname + ''',''FK_SaleItem_Performance''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.626</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0..2] Add field tbProduct.TrackInventory
[3..5] Create table tbWarehouse
[6..10] Create table tbWarehouseStock
[11..17] Create table tbTransactionStock</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add TrackInventory bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set TrackInventory=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column TrackInventory bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbWarehouse]
(
	[WarehouseId] Uniqueidentifier NOT NULL,
	[WarehouseCode] Varchar(15) NOT NULL,
	[WarehouseName] Nvarchar(50) NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbWarehouse ADD CONSTRAINT PK_Warehouse PRIMARY KEY ([WarehouseId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Warehouse_Code] ON [tbWarehouse] ([WarehouseCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbWarehouseStock]
(
	[WarehouseId] Uniqueidentifier NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
	[Quantity] Integer NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbWarehouseStock ADD CONSTRAINT PK_WarehouseStock PRIMARY KEY ([WarehouseId],[ProductId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_WarehouseStock_ProductId] ON [tbWarehouseStock] ([ProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbWarehouseStock] add constraint FK_WarehouseStock_Warehouse foreign key([WarehouseId]) references [tbWarehouse] ([WarehouseId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbWarehouseStock] add constraint FK_WarehouseStock_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTransactionStock]
(
	[TransactionId] Uniqueidentifier NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
	[WarehouseId] Uniqueidentifier NOT NULL,
	[Quantity] Integer NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionStock ADD CONSTRAINT PK_TransactionStock PRIMARY KEY ([TransactionId],[ProductId],[WarehouseId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionStock_ProductId] ON [tbTransactionStock] ([ProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionStock_WarehouseId] ON [tbTransactionStock] ([WarehouseId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionStock] add constraint FK_TransactionStock_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionStock] add constraint FK_TransactionStock_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionStock] add constraint FK_TransactionStock_Warehouse foreign key([WarehouseId]) references [tbWarehouse] ([WarehouseId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.625</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Make nullable in tbSiaeLog
- EventId
- TicketId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index [IX_SiaeLog_TicketId] on [tbSiaeLog]
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbSiaeLog] ALTER COLUMN [TicketId] Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_TicketId] ON [tbSiaeLog] ([TicketId] ,[DataOraEmissione] ) 
where TicketId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index [IX_SiaeLog_EventId] on [tbSiaeLog]
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbSiaeLog] ALTER COLUMN [EventId] Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_EventId] ON [tbSiaeLog] ([EventId] ,[DataOraEmissione] ) 
where EventId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.624</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tables
- tbMessage
- tbMessageRead</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbMessage]
(
	[MessageId] Uniqueidentifier NOT NULL,
	[MessageType] Smallint NOT NULL,
	[MessageName] Nvarchar(50) NOT NULL,
	[Enabled] Bit NOT NULL,
	[ForcePopupDialog] Bit NOT NULL,
	[DateTimeFrom] Smalldatetime NOT NULL,
	[DateTimeTo] Smalldatetime NULL,
	[LocationAccountId] Uniqueidentifier NULL,
	[OpAreaAccountId] Uniqueidentifier NULL,
	[Message] Ntext NULL,
	[LastUpdate] smalldatetime not null
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMessage ADD CONSTRAINT PK_Message PRIMARY KEY ([MessageId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Message_LocationAccountId] ON [tbMessage] ([LocationAccountId] ,[OpAreaAccountId] ,[DateTimeFrom] ) 
 INCLUDE (DateTimeTo)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Message_OpAreaAccountId] ON [tbMessage] ([OpAreaAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMessage] add constraint FK_Message_LocationAccount foreign key([LocationAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMessage] add constraint FK_Message_OpAreaAccount foreign key([OpAreaAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Message_DateTimeFrom] ON [tbMessage] ([DateTimeFrom] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbMessageRead]
(
	[MessageId] Uniqueidentifier NOT NULL,
	[UserAccountId] Uniqueidentifier NOT NULL,
	[WorkstationId] Uniqueidentifier NOT NULL,
	[ReadDateTime] Smalldatetime NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMessageRead ADD CONSTRAINT PK_MessageRead PRIMARY KEY ([MessageId],[UserAccountId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_MessageRead_UserAccountId] ON [tbMessageRead] ([UserAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_MessageRead_WorkstationId] ON [tbMessageRead] ([WorkstationId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMessageRead] add constraint FK_MessageRead_Message foreign key([MessageId]) references [tbMessage] ([MessageId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMessageRead] add constraint FK_MessageRead_UserAccount foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMessageRead] add constraint FK_MessageRead_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Message_LastUpdate] ON [tbMessage] ([LastUpdate] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.623</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add fields tbEvent.LastPerfAutoCreate
- Add field tbPerformance.AutoCreated</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEvent
add LastPerfAutoCreate smalldatetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Event_LastPerfAutoCreate] ON [tbEvent] ([EventType] ,[LastPerfAutoCreate] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
add AutoCreated bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPerformance
set AutoCreated=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
alter column AutoCreated bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.622</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change all events to "Performance event"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbEvent
set EventType=1/*perf*/
where EventType=2/*GAD*/
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.621</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor table tbEvent
- Drop field LicenseId and related FK
- Add field CalendarId and related FK
- Add field AutoCreatePerfDays
- Refactor all indexes</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEvent drop FK_Event_License
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_Event_EventCode on tbEvent
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Event_Location on tbEvent
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
add
  CalendarId uniqueidentifier null,  
  AutoCreatePerfDays smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbEvent
set AutoCreatePerfDays=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
alter column AutoCreatePerfDays smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbEvent] add constraint FK_Event_Calendar foreign key([CalendarId]) references [tbCalendar] ([CalendarId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Event_EventCode] ON [tbEvent] ([EventCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Event_AccountId] ON [tbEvent] ([AccountId] ) 
where AccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Event_CategoryId] ON [tbEvent] ([CategoryId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Event_ProducerAccountId] ON [tbEvent] ([ProducerAccountId] ) 
where ProducerAccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Event_LocationAccountId] ON [tbEvent] ([LocationAccountId] ) 
where LocationAccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Event_AccessAreaAccountId] ON [tbEvent] ([AccessAreaAccountId] ) 
where AccessAreaAccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Event_CalendarId] ON [tbEvent] ([CalendarId] ) 
where CalendarId is not null


</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.620</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbResourceType.AdvancedSaleQuantity</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceType
add AdvancedSaleQuantity smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.619</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Replace index IDX_Note_Entity with IX_Note_EntityId
- Renames tbNote foreign keys</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IDX_Note_Entity on tbNote
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Note_EntityId] ON [tbNote] ([EntityId] ,[NoteDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbNote' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='UserAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Note_UserAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbNote' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='WorkstationId'

exec ('sp_rename ''' + @oldname + ''',''FK_Note_Workstation''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.618</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbProduct
- VariablePrice
- VariablePriceMin
- VariablePriceMax</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add
  VariablePrice bit null,  
  VariablePriceMin money null,  
  VariablePriceMax money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set VariablePrice=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column VariablePrice bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.617</SQLVERSION><RMTRACKLINK>SIT-531</RMTRACKLINK><REASON>Removing AuditLocationIDs right and copying the values in GroupLocationIDs (tbRight)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbRight where RightType=171/*GroupLocationIDs*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbRight
set RightType=171/*GroupLocationIDs*/
where RightType=148/*AuditLocationIDs*/
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.616</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Update InstallmentContracts right merged with InstallmentContractVoid</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRight
set RightType=143
where RightType=167
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.615</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields "AdmissionBeforeMins" and "AdmissionAfterMins" to "tbEvent" and "tbPerformance"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEvent
add
  AdmissionOpenMins smallint null,  
  AdmissionCloseMins smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
add
  AdmissionOpenMins smallint null,  
  AdmissionCloseMins smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.614</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename system receipt template from 'TrnReceipt-50' to 'TrnRcp50-TaxExc'</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbDocTemplate
set SystemCode='TrnRcp50-TaxExc'
where
  SystemCode='TrnReceipt-50' and
  DocTemplateType=2
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.613</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add new field "InheritFromCat" to tbProductUpgrade</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductUpgrade
add InheritFromCat bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductUpgrade
set InheritFromCat = 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductUpgrade
alter column InheritFromCat bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.612</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add foreign keys to tbProductUpgrade2Location and  tbProductUpgrade2Product</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Alter table [tbProductUpgrade2Location] add constraint FK_ProductUpgrade2Location_ProductUpgrade foreign key([EntityId]) references [tbProductUpgrade] ([EntityId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>INSERT INTO tbProductUpgrade (EntityId, EntityType, FirstUsageUpgradeDays, AllowCrossLocationUpg)
select distinct
  PU.EntityId,
  12,
  null,
  0
from 
  tbProductUpgrade2Product PU inner join
  tbProduct P on P.ProductId=PU.EntityId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>INSERT INTO tbProductUpgrade (EntityId, EntityType, FirstUsageUpgradeDays, AllowCrossLocationUpg)
select distinct
  PU.EntityId,
  28,
  null,
  0
from 
  tbProductUpgrade2Product PU inner join
  tbCategory P on P.CategoryId=PU.EntityId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductUpgrade2Product] add constraint FK_ProductUpgrade2Product_ProductUpgrade foreign key([EntityId]) references [tbProductUpgrade] ([EntityId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.611</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Refactor &amp; rename tbProductUpgrade into tbProductUpgrade2Product
- Create tbProductUpgrade
- Create tbProductUpgrade2Location</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>select * into tmpProductUpgrade from tbProductUpgrade
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbProductUpgrade
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbProductUpgrade2Product]
( [EntityId] Uniqueidentifier NOT NULL,
  [ProductId] Uniqueidentifier NOT NULL,
  [UpgradePrice] Money NULL,
  [PriorityOrder] Smallint NOT NULL)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductUpgrade2Product ADD CONSTRAINT PK_ProductUpgrade2Product PRIMARY KEY ([EntityId],[ProductId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbProductUpgrade2Product] add constraint FK_ProductUpgrade2Product_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductUpgrade2Product_ProductId] ON [tbProductUpgrade2Product] ([ProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>INSERT INTO tbProductUpgrade2Product
(EntityId, ProductId, UpgradePrice, PriorityOrder)
SELECT EntityId, ProductId, UpgradePrice, PriorityOrder
FROM tmpProductUpgrade

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tmpProductUpgrade
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbProductUpgrade]
( [EntityId] Uniqueidentifier NOT NULL,
  [EntityType] Smallint NOT NULL,
  [FirstUsageUpgradeDays] Smallint NULL,
  [AllowCrossLocationUpg] Bit NOT NULL)  

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductUpgrade ADD CONSTRAINT PK_ProductUpgrade PRIMARY KEY ([EntityId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbProductUpgrade2Location]
(  [EntityId] Uniqueidentifier NOT NULL,
   [LocationAccountId] Uniqueidentifier NOT NULL)   

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductUpgrade2Location ADD CONSTRAINT PK_ProductUpgrade2Location PRIMARY KEY ([EntityId],[LocationAccountId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductUpgrade2Location_LocationAccountId] ON [tbProductUpgrade2Location] ([LocationAccountId] )

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductUpgrade2Location] add constraint FK_ProductUpgrade2Location_Account foreign key([LocationAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbProduct
DROP COLUMN FirstUsageUpgradeDays
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.610</SQLVERSION><RMTRACKLINK>SIT-252</RMTRACKLINK><REASON>Add field to tbProduct
- FirstUsageUpgradeDays</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add FirstUsageUpgradeDays smallint
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.609</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Drop tbTaxExeptCertificate
- Create tbAccoutnTaxExempt</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbTaxExemptCertificate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbAccountTaxExempt]
(
	[AccountId] Uniqueidentifier NOT NULL,
	[CertificateCode] Varchar(30) NULL,
	[ExpirationDate] date NULL,
	[Approved] Bit NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountTaxExempt ADD CONSTRAINT PK_AccountTaxExempt PRIMARY KEY ([AccountId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccountTaxExempt_CertificateCode] ON [tbAccountTaxExempt] ([CertificateCode] ) 
where CertificateCode is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountTaxExempt] add constraint FK_AccountTaxExempt_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.608</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- tbSaleApprove primary key rename
- tbBoxDepositDetail primary key rename</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

SELECT @oldname=i.name
FROM sys.indexes AS i
INNER JOIN sys.data_spaces AS ds ON i.data_space_id = ds.data_space_id
WHERE is_hypothetical = 0 AND i.index_id &lt;&gt; 0 AND is_primary_key = 1
AND i.object_id = OBJECT_ID('tbSaleApprove');

exec ('sp_rename ''' + @oldname + ''',''PK_SaleApprove''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

SELECT @oldname=i.name
FROM sys.indexes AS i
INNER JOIN sys.data_spaces AS ds ON i.data_space_id = ds.data_space_id
WHERE is_hypothetical = 0 AND i.index_id &lt;&gt; 0 AND is_primary_key = 1
AND i.object_id = OBJECT_ID('tbBoxDepositDetail');

exec ('sp_rename ''' + @oldname + ''',''PK_BoxDepositDetail''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.607</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTaxExemptCertificate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTaxExemptCertificate]
(
	[AccountId] Uniqueidentifier NOT NULL,
	[SeqNumber] Smallint NOT NULL,
	[CertificateCode] Varchar(30) NULL,
	[ExpirationDate] date NULL,
	[Approved] Bit NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTaxExemptCertificate ADD CONSTRAINT PK_TaxExemptCertificate PRIMARY KEY ([AccountId],[SeqNumber])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TaxExemptCertificate_Code] ON [tbTaxExemptCertificate] ([CertificateCode] ) 
where CertificateCode is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTaxExemptCertificate] add constraint FK_TaxExemptCertificate_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.606</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change "Ledger Rule Target" lookup value from 4 to 10</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbLedgerRule
set TargetAccountType=10
where TargetAccountType=4
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.605</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop tbCategory.MaskNames</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCategory
drop column MaskNames
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.604</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbCategory:
- InheritMask
- InheritLocation</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCategory
add
  InheritMask bit null,  
  InheritLocation bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbCategory
set InheritMask=0, InheritLocation=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCategory
alter column InheritMask bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCategory
alter column InheritLocation bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.603</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbCategory2Location</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbCategory2Location]
(
	[CategoryId] Uniqueidentifier NOT NULL,
	[LocationAccountId] Uniqueidentifier NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCategory2Location ADD CONSTRAINT PK_Category2Location PRIMARY KEY ([CategoryId],[LocationAccountId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Category2Location_LocationAccountId] ON [tbCategory2Location] ([LocationAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCategory2Location] add constraint FK_Category2Location_Category foreign key([CategoryId]) references [tbCategory] ([CategoryId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCategory2Location] add constraint FK_Category2Location_LocationAccount foreign key([LocationAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.602</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbAccountFinance:
- Drop field ModuleB2B
- Add field B2BWorkstationId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
add B2BWorkstationId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccountFinance_B2BWorkstationId] ON [tbAccountFinance] ([B2BWorkstationId] ) 
where B2BWorkstationId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountFinance] add constraint FK_AccountFinance_B2BWorkstation foreign key([B2BWorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccountFinance
set B2BWorkstationId = (select WorkstationId from tbWorkstation where WorkstationType=6/*B2B*/)
where ModuleB2B=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
drop column ModuleB2B
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.601</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add default "every-user" to order conf templates</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbEntityRight (
  DocEntityId,
  DocEntityType,
  UsrEntityId,
  UsrEntityType,
  RightLevel
)
select 
  DocTemplateId,
  37/*DocTemplate*/,
  'A0000131-0000-0000-0000-000000000015',
  15/*Workstation*/,
  5/*Delete*/
from tbDocTemplate
where DocTemplateType=4/*OrderConf*/
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.600</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbEntity2Operator into tbEntityRight</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbEntityRight]
(
	[DocEntityId] Uniqueidentifier NOT NULL,
	[UsrEntityId] Uniqueidentifier NOT NULL,
	[DocEntityType] Smallint NOT NULL,
	[UsrEntityType] Smallint NOT NULL,
	[RightLevel] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEntityRight ADD CONSTRAINT PK_EntityRight PRIMARY KEY ([DocEntityId],[UsrEntityId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_EntityRight_UsrEntityId] ON [tbEntityRight] ([UsrEntityId] ,[DocEntityType] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityRight (
  DocEntityId,
  UsrEntityId,
  DocEntityType,
  UsrEntityType,
  RightLevel
)
select
  EntityId,  
  OperatorId,  
  EntityType,  
  OperatorType,  
  RightLevel  
from tbEntity2Operator
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbEntity2Operator
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityRight (
  DocEntityId,
  DocEntityType,
  UsrEntityId,
  UsrEntityType,
  RightLevel
)
select 
  DocTemplateId,
  37/*DocTemplate*/,
  'A0000131-0000-0000-0000-000000000003',
  3/*Workstation*/,
  5/*Delete*/
from tbDocTemplate
where DocTemplateType=5/*StatReport*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityRight (
  DocEntityId,
  DocEntityType,
  UsrEntityId,
  UsrEntityType,
  RightLevel
)
select 
  DocTemplateId,
  37/*DocTemplate*/,
  'A0000131-0000-0000-0000-000000000003',
  3/*Workstation*/,
  5/*Delete*/
from tbDocTemplate
where DocTemplateType=4/*OrderConf*/
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.599</SQLVERSION><RMTRACKLINK>149</RMTRACKLINK><REASON>Redesign tbSaleApprove</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP TABLE tbSaleApprove
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSaleApprove]
(
	[SaleId] Uniqueidentifier NOT NULL,
	[UserAccountId] Uniqueidentifier NOT NULL,
	[MinQty] Integer NOT NULL,
	[MaxQty] Integer NOT NULL,
	[MinAmount] Money NOT NULL,
	[MaxAmount] Money NOT NULL,
	[DateTime] Smalldatetime NOT NULL,
Primary Key ([SaleId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleApprove_UserAccountId] ON [tbSaleApprove] ([UserAccountId] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.598</SQLVERSION><RMTRACKLINK>149</RMTRACKLINK><REASON>- [0..1] Create table tbSaleApprove
- [2..4] tbSale foreing keys rename
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleApprove]
(
	[SaleId] Uniqueidentifier NOT NULL,
	[UserAccountId] Uniqueidentifier NOT NULL,
	[Amount] Money NOT NULL,
	[DateTime] Smalldatetime NOT NULL,
Primary Key ([SaleId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleApprove_UserAccountId] ON [tbSaleApprove] ([UserAccountId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSale' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Sale_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSale' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='UserAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Sale_Account''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSale' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='WorkstationId'

exec ('sp_rename ''' + @oldname + ''',''FK_Sale_Workstation''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.597</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbBoxDepositDetail</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP TABLE tbBoxDepositDetail
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbBoxDepositDetail]
(
	[BoxDepositId] Uniqueidentifier NOT NULL,
	[PluginId] Uniqueidentifier NOT NULL,
	[CurrencyISO] Varchar(3) NOT NULL,
	[Quantity] Integer NOT NULL,
	[TotalAmount] Money NOT NULL,
Primary Key ([BoxDepositId],[PluginId],[CurrencyISO])
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_BoxDepositDetail_PluginId] ON [tbBoxDepositDetail] ([PluginId] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.596</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbLog
- SourceUserAccountId
- LogSubType

Create indexes:
- IX_Log_WorkstationId
- IX_Log_SourceWorkstationId
- IX_Log_SourceUserAccountId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLog
add
  LogSubType smallint null,
  SourceUserAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLog
set LogSubType=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLog
alter column LogSubType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLog] add constraint FK_Log_SourceUserAccount foreign key([SourceUserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Log_WorkstationId] ON [tbLog] ([WorkstationId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Log_SourceWorkstationId] ON [tbLog] ([SourceWorkstationId] ) 
where SourceWorkstationId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Log_SourceUserAccountId] ON [tbLog] ([SourceUserAccountId] ) 
where SourceUserAccountId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.595</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add field tbProduct.AreaGroupTagId
- Refactor index IX_Product_PrintGroupTagId
- Refactor index IX_Product_FinanceGroupTagId
- Create index IX_Product_AdmGroupTagId
- Create index IX_Product_AreaGroupTagId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add AreaGroupTagId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_Tag_AreaGroupTagId foreign key([AreaGroupTagId]) references [tbTag] ([TagId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Product_PrintGroupTagId on tbProduct
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Product_FinanceGroupTagId on tbProduct
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_PrintGroupTagId] ON [tbProduct] ([PrintGroupTagId] ) 
where PrintGroupTagId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_FinanceGroupTagId] ON [tbProduct] ([FinanceGroupTagId] ) 
where FinanceGroupTagId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_AdmGroupTagId] ON [tbProduct] ([AdmGroupTagId] ) 
where AdmGroupTagId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_AreaGroupTagId] ON [tbProduct] ([AreaGroupTagId] ) 
where AreaGroupTagId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.594</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbTagLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTagLink' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='TagId'

exec ('sp_rename ''' + @oldname + ''',''FK_TagLink_Tag''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTagLink DROP CONSTRAINT PK_TagLink 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTagLink
drop column TagLinkId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_TagLink on tbTagLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_TagLink_TagEntityType on tbTagLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTagLink ADD CONSTRAINT PK_TagLink PRIMARY KEY ([TagId],[EntityId])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.593</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbTag</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbTag' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Tag_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTag drop FK_Tag_License
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Tag_EntityType on tbTag
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Tag_EntityTypeAndName on tbTag
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTag drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Tag_TagCode] ON [tbTag] ([EntityType] ,[TagCode] ) 
where TagCode is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Tag_EntityType] ON [tbTag] ([EntityType] ,[TagName] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.592</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Invalidate cache for all products and taxes</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbEntityChange
where InsertUpdate=1 and EntityType in (12,48) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (EntityType, EntityId, InsertUpdate)
select 12, ProductId, 1
from tbProduct
where ProductStatus in (2,3,4)  

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (EntityType, EntityId, InsertUpdate)
select 48, TaxId, 1
from tbTax
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.591</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Move column TaxType from tbTaxRate to tbTax</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTax
add TaxType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTax
set TaxType=X_TaxType
from (
  select   
    TaxId as X_TaxId,    
    TaxType as X_TaxType    
  from tbTaxRate
) X
where TaxId=X_TaxId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTax
set TaxType=1/*perc*/
where TaxType is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTax
alter column TaxType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTaxRate
drop column TaxType
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.590</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbProduct2Tax</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>select *
into tmpProduct2Tax
from tbProduct2Tax
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbProduct2Tax
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbProduct2Tax]
(
	[ProductId] Uniqueidentifier NOT NULL,
	[TaxId] Uniqueidentifier NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct2Tax ADD CONSTRAINT PK_Product2Tax PRIMARY KEY ([ProductId],[TaxId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product2Tax_TaxId] ON [tbProduct2Tax] ([TaxId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct2Tax] add constraint FK_Product2Tax_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct2Tax] add constraint FK_Product2Tax_Tax foreign key([TaxId]) references [tbTax] ([TaxId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProduct2Tax (
  ProductId,  
  TaxId
)
select
  ProductId,  
  TaxId    
from tmpProduct2Tax
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tmpProduct2Tax
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.589</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTaxRate and drop columns tbTax.TaxType/TaxValue</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTaxRate]
(
	[TaxId] Uniqueidentifier NOT NULL,
	[ValidDateFrom] date NOT NULL,
	[ValidDateTo] date NULL,
	[TaxType] Smallint NOT NULL,
	[TaxValue] Money NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTaxRate ADD CONSTRAINT PK_TaxRate PRIMARY KEY ([TaxId],[ValidDateFrom])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbTaxRate (
  TaxId,  
  ValidDateFrom,  
  TaxType,  
  TaxValue
)
select
  TaxId,    
  Convert(date, '2011-09-01', 120),
  TaxType,  
  TaxValue
from tbTax
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTax
drop column TaxType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTax
drop column TaxValue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTaxRate] add constraint FK_TaxRate_Tax foreign key([TaxId]) references [tbTax] ([TaxId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.588</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbLedgerRule
- Add field LedgerRuleAmountType
- Remove field LedgerRulePercentage
- Create index IX_LedgerRule_TargetLedgerAccountId
- Create index IX_LedgerRule_SourceLedgerAccountId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
add LedgerRuleAmountType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerRule
set LedgerRuleAmountType=(case LedgerRulePercentage when 1 then 20 else 10 end)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
alter column LedgerRuleAmountType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
drop column LedgerRulePercentage
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerRule_TargetLedgerAccountId] ON [tbLedgerRule] ([TargetLedgerAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerRule_SourceLedgerAccountId] ON [tbLedgerRule] ([SourceLedgerAccountId] ) 
where SourceLedgerAccountId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.587</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbSale.TaxExempt</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSale
add TaxExempt bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSale
set TaxExempt=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale
alter column TaxExempt bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.586</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename tbTax Exemptable -&gt; Exemptible</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbTax.Exemptable', 'Exemptible';
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.585</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>IX_InstallmentContract2Ticket_TicketId -&gt; UQ_InstallmentContract2Ticket_TicketId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_InstallmentContract2Ticket_TicketId on tbInstallmentContract2Ticket
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_InstallmentContract2Ticket_TicketId] ON [tbInstallmentContract2Ticket] ([TicketId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.584</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbInstallmentContract
- FeeAmount 
- TotalAmount</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
add 
  FeeAmount money null, 
  TotalAmount money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbInstallmentContract
set FeeAmount=X_Amount
from (
  select
    PI.InstallmentContractId as X_ID, 
    Sum(SI.TotalAmount) as X_Amount  
  from                      
    tbPaymentInstallment PI inner join    
    tbPayment Pay on Pay.PaymentId=PI.PaymentId inner join    
    tbTransaction T on T.TransactionId=Pay.TransactionId inner join    
    tbSaleItem SI on SI.SaleId=T.SaleId inner join    
    tbProduct Prd on Prd.ProductId=SI.ProductId and Prd.ProductType=8/*fee*/     
  group by PI.InstallmentContractId
) X
where InstallmentContractId = X_ID
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbInstallmentContract
set TotalAmount=X_Amount
from (
  select                                           
    IC.InstallmentContractId as X_ID,    
    Sum(Coalesce(SI.TotalAmount, 0)) as X_Amount
  from  
    tbInstallmentContract IC inner join    
    tbInstallmentContract2Ticket IC2T on IC2T.InstallmentContractId=IC.InstallmentContractId inner join    
    tbTicket Tck on Tck.TicketId=IC2T.TicketId inner join    
    tbSaleItemDetail SID on SID.SaleItemDetailId=Tck.SaleItemDetailId inner join    
    tbSaleItem SI on SI.SaleItemId=SID.SaleItemId      
  group by IC.InstallmentContractId
) X
where InstallmentContractId=X_ID
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbInstallmentContract
set FeeAmount=0
where FeeAmount is null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbInstallmentContract
set TotalAmount=0
where TotalAmount is null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
alter column FeeAmount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
alter column TotalAmount money not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.583</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- [0..4] Create table tbPaymentInstallment
- [5..8] Drop tbInstallmentContract.PaymentId
- [9..12] Create tbInstallmentContract.IssueTransactionId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbPaymentInstallment]
(
	[PaymentId] Uniqueidentifier NOT NULL,
	[InstallmentContractId] Uniqueidentifier NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentInstallment ADD CONSTRAINT PK_PaymentInstallment PRIMARY KEY ([PaymentId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentInstallment_InstallmentContractId] ON [tbPaymentInstallment] ([InstallmentContractId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentInstallment] add constraint FK_PaymentInstallment_Payment foreign key([PaymentId]) references [tbPayment] ([PaymentId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentInstallment] add constraint FK_PaymentInstallment_InstallmentContract foreign key([InstallmentContractId]) references [tbInstallmentContract] ([InstallmentContractId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbPaymentInstallment (
  PaymentId,  
  InstallmentContractId
)
select
  PaymentId,  
  InstallmentContractId
from tbInstallmentContract
where PaymentId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract drop FK_InstallmentContract_Payment
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_InstallmentContract_PaymentId on tbInstallmentContract


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract drop column PaymentId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
add IssueTransactionId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContract_IssueTransactionId] ON [tbInstallmentContract] ([IssueTransactionId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentContract] add constraint FK_InstallmentContract_IssueTransaction foreign key([IssueTransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbInstallmentContract
set IssueTransactionId=X_TransactionId
from (
  select
    PIC.InstallmentContractId as X_InstallmentContractId,
	P.TransactionId as X_TransactionId
  from
    tbPaymentInstallment PIC inner join
	tbPayment P on P.PaymentId=PIC.PaymentId
) X
where InstallmentContractId=X_InstallmentContractId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.582</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename autogenerate FK for tbSiaeEvent</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @FkName varchar(56);
select @FkName=a.name 
from sysobjects a, sysobjects b 
where a.xtype in ('C','D','F','PK')
and b.id = a.parent_obj and a.name like 'Fk%'
and b.name = 'tbSiaeEvent';
EXEC sp_rename @FkName, 
                'FK_SiaeEvent_SiaeOrganizer', 
                'OBJECT';                
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.581</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index [IX_MetaField_FieldDataType]</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_MetaField_FieldDataType] ON [tbMetaField] ([FieldDataType] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.580</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Adding FK to tbSiaeLog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SiaeEvent foreign key([EventId]) references [tbSiaeEvent] ([EventId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_Performance foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SiaeSystem foreign key([CodiceSistema]) references [tbSiaeSystem] ([CodiceSistema])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SiaeCard foreign key([CodiceCarta]) references [tbSiaeCard] ([CodiceCarta])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SiateOrganizer foreign key([OrganizerId]) references [tbSiaeOrganizer] ([OrganizerId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_SiaeLocation foreign key([LocationId]) references [tbSiaeLocation] ([LocationId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLog] add constraint FK_SiaeLog_Media foreign key([MediaId]) references [tbMedia] ([MediaId])  on update no action on delete no action  
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.579</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Update tbSiaeLog
- IvaPreassolta NOT NULL
- Rename IvaIntrattenmenti</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbSiaeLog
set IvaPreassolta = ''
where IvaPreassolta is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbSiaeLog]
alter column [IvaPreassolta] Varchar(1) NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_RENAME 'tbSiaeLog.IvaIntrattenmenti' , 'IvaIntrattenimenti', 'COLUMN'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.578</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSiaeLog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSiaeLog]
(
	[LogId] Integer Identity(1,1) NOT NULL,
	[WorkstationId] Uniqueidentifier NOT NULL,
	[EventId] Uniqueidentifier NOT NULL,
	[PerformanceId] Uniqueidentifier NULL,
	[CodiceSistema] Varchar(8) NOT NULL,
	[CodiceCarta] Varchar(8) NOT NULL,
	[OrganizerId] Uniqueidentifier NOT NULL,
	[LocationId] Uniqueidentifier NULL,
	[TicketId] Uniqueidentifier NOT NULL,
	[Stato] Varchar(10) NOT NULL,
	[Operazione] Smallint NOT NULL,
	[DataOraEmissione] Smalldatetime NOT NULL,
	[OrdinePosto] Varchar(10) NOT NULL,
	[Posto] Varchar(6) NULL,
	[TitoloBase] Varchar(1) NOT NULL,
	[IvaPreassolta] Varchar(1) NULL,
	[TipoTurno] Smallint NOT NULL,
	[ProgressivoCarta] Integer NOT NULL,
	[Sigillo] Varchar(16) NOT NULL,
	[TipoTassazione] Varchar(1) NOT NULL,
	[PrezzoTitolo] Money NOT NULL,
	[IvaTitolo] Money NOT NULL,
	[PrezzoPrevendita] Money NOT NULL,
	[IvaPrevendita] Money NOT NULL,
	[Rateo] Money NOT NULL,
	[IvaRateo] Money NOT NULL,
	[TipoTitolo] Varchar(10) NULL,
	[RateoIntrattenimenti] Money NULL,
	[ImponibileIntrattenimenti] Money NULL,
	[IvaIntrattenmenti] Money NULL,
	[Smaterializzato] Bit NOT NULL,
	[IvaRateoIntrattenimenti] Money NULL,
	[MediaId] Uniqueidentifier NULL,
	[DataOraEvento] Smalldatetime NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeLog ADD CONSTRAINT PK_SiaeLog PRIMARY KEY ([LogId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_WorkstationId] ON [tbSiaeLog] ([WorkstationId] ,[DataOraEmissione] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_EventId] ON [tbSiaeLog] ([EventId] ,[DataOraEmissione] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_PerformanceId] ON [tbSiaeLog] ([PerformanceId] ,[DataOraEmissione] ) 
where PerformanceId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_CodiceSistema] ON [tbSiaeLog] ([CodiceSistema] ,[DataOraEmissione] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_CodiceCarta] ON [tbSiaeLog] ([CodiceCarta] ,[DataOraEmissione] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_OrganizerId] ON [tbSiaeLog] ([OrganizerId] ,[DataOraEmissione] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_LocationId] ON [tbSiaeLog] ([LocationId] ,[DataOraEmissione] ) 
where LocationId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_TicketId] ON [tbSiaeLog] ([TicketId] ,[DataOraEmissione] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_MediaId] ON [tbSiaeLog] ([MediaId] ,[DataOraEmissione] ) 
where MediaId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.577</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Fix tbProduct.GroupTicketOption.... 0 values</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbProduct
set GroupTicketOption=1
where GroupTicketOption=0
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.576</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Update TicketVoid right value.... 'ALL' was '3' and becomes 'USED FULL=9' </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRight
set RightValue='9'
where RightType=19 and Cast(RightValue as varchar(max))='3'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.575</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbProductRefund</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProductRefund]
(
	[ProductRefundId] Uniqueidentifier NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
	[EventId] Uniqueidentifier NULL,
	[EntryAmountType] Smallint NOT NULL,
	[EntryAmountValue] Money NOT NULL,
	[GuestEntryAmountType] Smallint NOT NULL,
	[GuestEntryAmountValue] Money NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRefund ADD CONSTRAINT PK_ProductRefund PRIMARY KEY ([ProductRefundId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ProductRefund_ProductId] ON [tbProductRefund] ([ProductId] ,[EventId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductRefund_EventId] ON [tbProductRefund] ([EventId] ) 
where EventId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductRefund] add constraint FK_ProductRefund_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductRefund] add constraint FK_ProductRefund_Event foreign key([EventId]) references [tbEvent] ([EventId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.574</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor indexes:
- UQ_Media_TDSSN
- IX_Media_PortfolioId
- IX_Media_TransactionId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_Media_TDSSN on tbMedia
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Media_TDSSN] ON [tbMedia] ([EncodeFiscalDate] ,[LicenseId] ,[StationSerial] ,[MediaSerial] ) 
where MediaSerial &gt; 0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Media_PortfolioId on tbMedia
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Media_PortfolioId] ON [tbMedia] ([TicketMediaMatchId] ,[EncodeFiscalDate] ,[PrintDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Media_TransactionId on tbMedia
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Media_TransactionId] ON [tbMedia] ([TransactionId] ,[EncodeFiscalDate] ,[PrintDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.573</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_EntityLink_DstEntityId_SrcEntityType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_EntityLink_DstEntityId_SrcEntityType] ON [tbEntityLink] ([DstEntityId] ,[SrcEntityType] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.572</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Update "unknown" EntityLinkType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>  update tbEntityLink
  set EntityLinkType=4 /*Transaction2Media*/  
  where                                      
    EntityLinkType=0 and    
    SrcEntityType=20 /*Transaction*/ and    
    DstEntityType=23 /*Media*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>  update tbEntityLink
  set EntityLinkType=5 /*TicketUpgrade*/  
  where                                      
    EntityLinkType=0 and    
    SrcEntityType=22 /*Ticket*/ and    
    DstEntityType=22 /*Ticket*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>  update tbEntityLink
  set EntityLinkType=6 /*SaleSplit*/  
  where                                      
    EntityLinkType=0 and    
    SrcEntityType=21 /*Sale*/ and    
    DstEntityType=21 /*Sale*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>  update tbEntityLink
  set EntityLinkType=7 /*Transaction2Portfolio*/  
  where                                      
    EntityLinkType=0 and    
    SrcEntityType=20 /*Transaction*/ and    
    DstEntityType=24 /*Portfolio*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>  update tbEntityLink
  set EntityLinkType=8 /*Transaction2Ticket*/  
  where                                      
    EntityLinkType=0 and    
    SrcEntityType=20 /*Transaction*/ and    
    DstEntityType=22 /*Ticket*/
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.571</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor table tbProductGuest</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbProductGuest
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbProductGuest]
(
	[ProductId] Uniqueidentifier NOT NULL,
	[GuestProductId] Uniqueidentifier NOT NULL,
	[Quantity] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductGuest ADD CONSTRAINT PK_ProductGuest PRIMARY KEY ([ProductId],[GuestProductId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductGuest_GuestProductId] ON [tbProductGuest] ([GuestProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductGuest] add constraint FK_ProductGuest_HostProduct foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductGuest] add constraint FK_ProductGuest_GuestProduct foreign key([GuestProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.570</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTicketGuest</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTicketGuest]
(
	[TicketId] Uniqueidentifier NOT NULL,
	[GuestProductId] Uniqueidentifier NOT NULL,
	[QtyTotal] Smallint NOT NULL,
	[QtyEncoded] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketGuest ADD CONSTRAINT PK_TicketGuest PRIMARY KEY ([TicketId],[GuestProductId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketGuest_GuestProductId] ON [tbTicketGuest] ([GuestProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketGuest] add constraint FK_TicketGuest_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketGuest] add constraint FK_TicketGuest_Product foreign key([GuestProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.569</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbProductGuest</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProductGuest]
(
	[PrimaryProductId] Uniqueidentifier NOT NULL,
	[GuestProductId] Uniqueidentifier NOT NULL,
	[Quantity] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductGuest ADD CONSTRAINT PK_ProductGuest PRIMARY KEY ([PrimaryProductId],[GuestProductId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductGuest_GuestProductId] ON [tbProductGuest] ([GuestProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductGuest] add constraint FK_ProductGuest_PrimaryProduct foreign key([PrimaryProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductGuest] add constraint FK_ProductGuest_GuestProduct foreign key([GuestProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.568</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop table tbProductGuest</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Drop table tbProductGuest
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>1.567</SQLVERSION><RMTRACKLINK>SIT-159</RMTRACKLINK><REASON>- Add field tbBox.OverShortFlag</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbBox
add OverShortFlag bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbBox
set OverShortFlag = 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBox
alter column OverShortFlag bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.566</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbEntityLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbEntityLink
DROP CONSTRAINT PK_EntityLink 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEntityLink ADD CONSTRAINT PK_EntityLink PRIMARY KEY ([SrcEntityId],[DstEntityId],[EntityLinkType])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_EntityLink_DstEntityId on tbEntityLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_EntityLink_SrcEntityId_EntityLinkType] ON [tbEntityLink] ([SrcEntityId] ,[EntityLinkType] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.565</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbProductGuest</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProductGuest]
(
	[PrimaryProductId] Uniqueidentifier NOT NULL,
	[GuestProductId] Uniqueidentifier NOT NULL,
	[Quantity] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductGuest ADD CONSTRAINT PK_ProductGuest PRIMARY KEY ([PrimaryProductId],[GuestProductId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductGuest_GuestProductId] ON [tbProductGuest] ([GuestProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductGuest] add constraint FK_ProductGuest_PrimaryProduct foreign key([PrimaryProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductGuest] add constraint FK_ProductGuest_GuestProduct foreign key([GuestProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.564</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbInstallmentPlan.FeeProductId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
add FeeProductId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentPlan_FeeProductId] ON [tbInstallmentPlan] ([FeeProductId] ) 
where FeeProductId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentPlan] add constraint FK_InstallmentPlan_FeeProduct foreign key([FeeProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.563</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tbPlugin indexes:
- IX_Plugin_DriverId
- IX_Plugin_WorkstationId
- IX_Plugin_PaymentMethodId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Plugin_DriverId] ON [tbPlugin] ([DriverId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Plugin_WorkstationId] ON [tbPlugin] ([WorkstationId] ) 
where WorkstationId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Plugin_PaymentMethodId] ON [tbPlugin] ([PaymentMethodId] ) 
where PaymentMethodId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.562</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields tbProduct.Downgradable</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add Downgradable bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set Downgradable=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column Downgradable bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.561</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Makes tbInstallmentContract.PaymentId NULLABLE
- Shifts existing InstallmentContractStatus values (DRAFT is now code 1)
- Create index IX_InstallmentContract_CreateFiscalDate
- Create index IX_InstallmentContract_CreateDateTime
- Create index IX_InstallmentContract_InstallmentContractStatus</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
alter column PaymentId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbInstallmentContract
set InstallmentContractStatus=InstallmentContractStatus+1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContract_CreateFiscalDate] ON [tbInstallmentContract] ([CreateFiscalDate] ,[CreateDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContract_CreateDateTime] ON [tbInstallmentContract] ([CreateDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContract_InstallmentContractStatus] ON [tbInstallmentContract] ([InstallmentContractStatus] ,[CreateDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dmitrii</ADDEDBY><SQLVERSION>1.560</SQLVERSION><RMTRACKLINK>SIT-412</RMTRACKLINK><REASON>- Create table tbSiaeEvent
- Crate table tbSiaePerformance</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSiaeEvent]
(
	[EventId] Uniqueidentifier NOT NULL,
	[OrganizerId] Uniqueidentifier NOT NULL,
	[TipoGenere] Varchar(10) NOT NULL,
	[EventType] Varchar(10) NOT NULL,
	[TitoloEvento] Varchar(40) NOT NULL,
	[Incidenza] Money NOT NULL,
	[Autore] Varchar(30) NULL,
	[Esecutore] Varchar(80) NULL,
	[NazionalitaFilm] Varchar(4) NULL,
	[Stato] Bit NOT NULL,
	[NumeroOpere] Integer NOT NULL,
	[DataInizio] Datetime NULL,
	[DataFine] Datetime NULL,
	[Capienza] Integer NULL,
	[IvaOmaggioTitolo] Money NOT NULL,
	[IvaOmaggioAbbFisso] Money NOT NULL,
	[IvaOmaggioAbbLibero] Money NOT NULL,
	[Distributore] Varchar(80) NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeEvent ADD CONSTRAINT PK_SiaeEvent PRIMARY KEY ([EventId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeEvent_OrganizerId] ON [tbSiaeEvent] ([OrganizerId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeEvent] add  foreign key([OrganizerId]) references [tbSiaeOrganizer] ([OrganizerId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSiaePerformance]
(
	[PerformanceId] Uniqueidentifier NOT NULL,
	[NumeroOpere] Integer NOT NULL,
	[IvaOmaggioTitolo] Money NOT NULL,
	[IvaOmaggioAbbFisso] Money NOT NULL,
	[IvaOmaggioAbbLibero] Money NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaePerformance ADD CONSTRAINT PK_SiaePerformance PRIMARY KEY ([PerformanceId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSiaeOrganizer
set Denominazione=''
where Denominazione is null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeOrganizer
alter column Denominazione Nvarchar(30) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSiaeOrganizer
set CodiceFiscale=''
where CodiceFiscale is null


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeOrganizer
alter column CodiceFiscale Varchar(16) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSiaeOrganizer
set TipoOrganizzatore=''
where TipoOrganizzatore is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeOrganizer
alter column TipoOrganizzatore Varchar(1) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSiaeLocation
set Denominazione=''
where Denominazione is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeLocation
alter column Denominazione Nvarchar(30) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.559</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbInstallmentPlan.ContractDocTemplateId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
add ContractDocTemplateId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentPlan_ContractDocTemplateId] ON [tbInstallmentPlan] ([ContractDocTemplateId] ) 
where ContractDocTemplateId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentPlan] add constraint FK_InstallmentPlan_ContractDocTemplate foreign key([ContractDocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.558</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tbInstallmentPlan fields:
- EnabledPOS
- EnabledCLC
- EnabledB2C
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
add
  EnabledPOS bit null,  
  EnabledB2C bit null,  
  EnabledCLC bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbInstallmentPlan
set
  EnabledPOS=1,
  EnabledB2C=1,  
  EnabledCLC=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
alter column EnabledPOS bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
alter column EnabledB2C bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
alter column EnabledCLC bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.557</SQLVERSION><RMTRACKLINK>SIT-297</RMTRACKLINK><REASON>- Add field tbProduct.HidePriceVisibility</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add HidePriceVisibility bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set HidePriceVisibility = 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column HidePriceVisibility bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.556</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON></REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
add BlockDate date null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContract_BlockDate] ON [tbInstallmentContract] ([BlockDate] ,[CreateDateTime] ) 
where BlockDate is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.555</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add tbSaleItemFields: MainSaleItemId, StatAmount
- Add field tbAttributeItem.StatProductId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItem
add
  MainSaleItemId uniqueidentifier null,  
  StatAmount money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSaleItem
set StatAmount=UnitAmount
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItem
alter column StatAmount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItem_MainSaleItemId] ON [tbSaleItem] ([MainSaleItemId] ) 
where MainSaleItemId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItem] add constraint FK_SaleItem_MainSaleItem foreign key([MainSaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAttributeItem
add StatProductId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AttributeItem_StatProductId] ON [tbAttributeItem] ([StatProductId] ) 
where StatProductId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAttributeItem] add constraint FK_AttributeItem_StatProduct foreign key([StatProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.554</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename tbSurvey2Mask foreign keys</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSurvey2Mask' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='MaskId'

exec ('sp_rename ''' + @oldname + ''',''FK_Survey2Mask_Mask''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSurvey2Mask' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SurveyId'

exec ('sp_rename ''' + @oldname + ''',''FK_Survey2Mask_Survey''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.553</SQLVERSION><RMTRACKLINK>207</RMTRACKLINK><REASON>tbUserActivity:
Rename field
- TotalTransactionTime to TotalPaymentTime
Add fields
- TotalSelectionTime
- TotalPrintTime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbUserActivity.TotalTransactionTime',
    @newname = 'TotalPaymentTime',
    @objtype = 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbUserActivity
set TotalPaymentTime =  case  
                        when TotalPaymentTime &lt; 0 then 0 
                        when TotalPaymentTime &gt; 214748364 then 2147483647 
                        else TotalPaymentTime * 10
                        end

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbUserActivity
add
  TotalSelectionTime integer null,  
  TotalPrintTime integer null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbUserActivity
set
  TotalSelectionTime=0,  
  TotalPrintTime=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbUserActivity
alter column TotalSelectionTime integer not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbUserActivity
alter column TotalPrintTime integer not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.552</SQLVERSION><RMTRACKLINK>207</RMTRACKLINK><REASON>Add fields to tbTransaction:
- DurationSelection
- DurationPayment
- DurationPrint</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTransaction
add
  DurationSelection smallint null,  
  DurationPayment smallint null,  
  DurationPrint smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTransaction
set
  DurationSelection=0,  
  DurationPayment=0,  
  DurationPrint=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column DurationSelection smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column DurationPayment smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column DurationPrint smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.551</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSaleItemInstallment</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleItemInstallment]
(
	[SaleItemId] Uniqueidentifier NOT NULL,
	[InstallmentContractId] Uniqueidentifier NOT NULL,
	[InstallmentNumber] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemInstallment ADD CONSTRAINT PK_SaleItemInstallment PRIMARY KEY ([SaleItemId],[InstallmentContractId],[InstallmentNumber])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemInstallment_Installment] ON [tbSaleItemInstallment] ([InstallmentContractId] ,[InstallmentNumber] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemInstallment] add constraint FK_SaleItemInstallment_SaleItem foreign key([SaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemInstallment] add constraint FK_SaleItemInstallment_InstallmentContractDetail foreign key([InstallmentContractId],[InstallmentNumber]) references [tbInstallmentContractDetail] ([InstallmentContractId],[InstallmentNumber])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.550</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add field tbInstallmentPlan.CalendarId
- Add field tbProduct2InstallmentPlan.CalendarId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
add CalendarId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentPlan_CalendarId] ON [tbInstallmentPlan] ([CalendarId] ) 
where CalendarId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentPlan] add constraint FK_InstallmentPlan_CalendarId foreign key([CalendarId]) references [tbCalendar] ([CalendarId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct2InstallmentPlan
add CalendarId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product2InstallmentPlan_CalendarId] ON [tbProduct2InstallmentPlan] ([CalendarId] ) 
where CalendarId is not null


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct2InstallmentPlan] add constraint FK_Product2InstallmentPlan_Calendar foreign key([CalendarId]) references [tbCalendar] ([CalendarId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.549</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field FinancedAmount and SettledAmount to tbInstallmentContract</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
add
  FinancedAmount money null,  
  SettledAmount money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbInstallmentContract
set
  FinancedAmount=0,  
  SettledAmount=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbInstallmentContract
set
  FinancedAmount=X_FinancedAmount,  
  SettledAmount=X_SettledAmount  
from (
  select
    InstallmentContractId as X_InstallmentContractId,
    Sum(InstallmentAmount) as X_FinancedAmount,
    Sum(case when InstallmentStatus=2 then InstallmentAmount else 0 end) as X_SettledAmount  
  from tbInstallmentContractDetail  
  group by InstallmentContractId
) X
where 
  InstallmentContractId=X_InstallmentContractId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
alter column FinancedAmount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
alter column SettledAmount money not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.548</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop tbInstallmentPlan fields: ChargeOnMonday...ChargeOnSunday</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
drop column ChargeOnMonday
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
drop column ChargeOnTuesday
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
drop column ChargeOnWednesday
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
drop column ChargeOnThursday
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
drop column ChargeOnFriday
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
drop column ChargeOnSaturday
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
drop column ChargeOnSunday
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.547</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Modify tbProductUpgrade UpgradePrice column to allow null values</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE [tbProductUpgrade] ALTER COLUMN [UpgradePrice] Money NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.546</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add DocTemplateId foreign keys indexes</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_DocParam_DocTemplateId') 
  DROP INDEX IX_DocParam_DocTemplateId on tbDocParam
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_DocParam_DocTemplateId] ON [tbDocParam] ([DocTemplateId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_DocTemplate_ParentTemplateId') 
  DROP INDEX IX_DocTemplate_ParentTemplateId on tbDocTemplate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_DocTemplate_ParentTemplateId] ON [tbDocTemplate] ([ParentTemplateId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_Media_DocTemplateId') 
  DROP INDEX IX_Media_DocTemplateId on tbMedia
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Media_DocTemplateId] ON [tbMedia] ([DocTemplateId] ) 
where DocTemplateId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.545</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tbInstallmentContract2Ticket</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbInstallmentContract2Ticket]
(
	[InstallmentContractId] Uniqueidentifier NOT NULL,
	[TicketId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract2Ticket ADD CONSTRAINT PK_InstallmentContract2Ticket PRIMARY KEY ([InstallmentContractId],[TicketId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContract2Ticket_TicketId] ON [tbInstallmentContract2Ticket] ([TicketId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentContract2Ticket] add constraint FK_InstallmentContract2Ticket_InstallmentContract foreign key([InstallmentContractId]) references [tbInstallmentContract] ([InstallmentContractId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentContract2Ticket] add constraint FK_InstallmentContract2Ticket_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.544</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor index [IX_InstallmentContractDetail_Active]</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_InstallmentContractDetail_Active on tbInstallmentContractDetail
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContractDetail_Active] ON [tbInstallmentContractDetail] ([Active] ,[NextAttemptDate] ,[InstallmentNumber] ) 
where Active&lt;&gt;0


</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.543</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbInstallmentContractDetail.Active</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentContractDetail
add Active bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbInstallmentContractDetail
set Active=1                   
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContractDetail
alter column Active bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContractDetail_Active] ON [tbInstallmentContractDetail] ([Active] ,[NextAttemptDate] ) 
where Active&lt;&gt;0

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.542</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbPaymentToken</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbPaymentToken]
(
	[PaymentTokenId] Uniqueidentifier NOT NULL,
	[PaymentTokenCode] Varchar(32) NOT NULL,
	[PaymentTokenType] Smallint NOT NULL,
	[CreateDate] date NOT NULL,
	[ExpirationDate] date NOT NULL,
	[AccountId] Uniqueidentifier NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentToken ADD CONSTRAINT PK_PaymentToken PRIMARY KEY ([PaymentTokenId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_PaymentToken_Code] ON [tbPaymentToken] ([PaymentTokenCode] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentToken_AccountId] ON [tbPaymentToken] ([AccountId] ) 
where AccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentToken] add constraint FK_PaymentToken_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.541</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename tbInstallmentContract.DocNumber into InstallmentContractCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_InstallmentContract_DocNumber on tbInstallmentContract
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
drop column DocNumber                    
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
add InstallmentContractCode varchar(10) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_InstallmentContract_InstallmentContractCode] ON [tbInstallmentContract] ([InstallmentContractCode] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.540</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbInstallmentContract.DocNumber -&gt; NOT NULLABLE</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_InstallmentContract_DocNumber on tbInstallmentContract
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
alter column DocNumber varchar(10) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_InstallmentContract_DocNumber] ON [tbInstallmentContract] ([DocNumber] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.539</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields tb tbInstallmentContract:
- CreateFiscalDate
- CreateDateTime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
add
  CreateFiscalDate date not null,  
  CreateDateTime smalldatetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_InstallmentContract_AccountId on tbInstallmentContract
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_InstallmentContract_InstallmentPlanId on tbInstallmentContract
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContract_InstallmentPlanId] ON [tbInstallmentContract] ([InstallmentPlanId] ,[CreateDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContract_AccountId] ON [tbInstallmentContract] ([AccountId] ,[CreateDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.538</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tables
- tbInstallmentContract
- tbInstallmentContractDetail</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbInstallmentContract]
(
	[InstallmentContractId] Uniqueidentifier NOT NULL,
	[PaymentId] Uniqueidentifier NOT NULL,
	[InstallmentPlanId] Uniqueidentifier NOT NULL,
	[AccountId] Uniqueidentifier NOT NULL,
	[InstallmentContractStatus] Smallint NOT NULL,
	[DocNumber] Varchar(10) NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract ADD CONSTRAINT PK_InstallmentContract PRIMARY KEY ([InstallmentContractId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContract_PaymentId] ON [tbInstallmentContract] ([PaymentId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContract_InstallmentPlanId] ON [tbInstallmentContract] ([InstallmentPlanId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContract_AccountId] ON [tbInstallmentContract] ([AccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_InstallmentContract_DocNumber] ON [tbInstallmentContract] ([DocNumber] ) 
where DocNumber is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentContract] add constraint FK_InstallmentContract_Payment foreign key([PaymentId]) references [tbPayment] ([PaymentId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentContract] add constraint FK_InstallmentContract_InstallmentPlan foreign key([InstallmentPlanId]) references [tbInstallmentPlan] ([InstallmentPlanId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentContract] add constraint FK_InstallmentContract_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbInstallmentContractDetail]
(
	[InstallmentContractId] Uniqueidentifier NOT NULL,
	[InstallmentNumber] Smallint NOT NULL,
	[ScheduledDate] date NOT NULL,
	[NextAttemptDate] date NOT NULL,
	[AttemptCount] Smallint NOT NULL,
	[InstallmentAmount] Money NOT NULL,
	[InstallmentStatus] Smallint NOT NULL,
	[SettleTransactionId] Uniqueidentifier NULL,
	[SettleDate] date NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContractDetail ADD CONSTRAINT PK_InstallmentContractDetail PRIMARY KEY ([InstallmentContractId],[InstallmentNumber])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContractDetail_SettleTransactionId] ON [tbInstallmentContractDetail] ([SettleTransactionId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentContractDetail] add constraint FK_InstallmentContractDetail_InstallmentContract foreign key([InstallmentContractId]) references [tbInstallmentContract] ([InstallmentContractId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.537</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field to tbInstallmentPlan:  ChargeOnMonday....ChargeOnSunday</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
add
  ChargeOnMonday bit null,  
  ChargeOnTuesday bit null,  
  ChargeOnWednesday bit null,  
  ChargeOnThursday bit null,  
  ChargeOnFriday bit null,  
  ChargeOnSaturday bit null,  
  ChargeOnSunday bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbInstallmentPlan
set
  ChargeOnMonday=1,  
  ChargeOnTuesday=1,  
  ChargeOnWednesday=1,  
  ChargeOnThursday=1,  
  ChargeOnFriday=1,  
  ChargeOnSaturday=1,  
  ChargeOnSunday=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
alter column ChargeOnMonday bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
alter column ChargeOnTuesday bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
alter column ChargeOnWednesday bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
alter column ChargeOnThursday bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
alter column ChargeOnFriday bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
alter column ChargeOnSaturday bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
alter column ChargeOnSunday bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.536</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbProductUpgrade</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProductUpgrade]
(
	[EntityId] Uniqueidentifier NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[UpgradePrice] Money NOT NULL,
	[PriorityOrder] Smallint NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductUpgrade ADD CONSTRAINT PK_ProductUpgrade PRIMARY KEY ([EntityId],[ProductId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductUpgrade_ProductId] ON [tbProductUpgrade] ([ProductId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductUpgrade] add constraint FK_ProductUpgrade_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea Martinotti</ADDEDBY><SQLVERSION>1.535</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add filed tbTransaction.Offline</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTransaction
add Offline bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTransaction
set Offline = 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column Offline bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.534</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbLookupItem.ItemCode from smallint to int</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbLookupItem
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IDX_LookupItem on tbLookupItem
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLookupItem
alter column ItemCode int not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLookupItem ADD CONSTRAINT PK_LookpuItem PRIMARY KEY ([TableCode],[ItemCode])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbLookupItem' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='TableCode'

exec ('sp_rename ''' + @oldname + ''',''FK_LookupItem_TableCode''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.533</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tbJob.ServerId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbJob
add ServerId smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.532</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbWalletLog2SaleItem
- LogSerial cange type to Smallint</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbWalletLog2SaleItem
DROP CONSTRAINT PK_WalletLog2SaleItem
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbWalletLog2SaleItem
ALTER COLUMN LogSerial Smallint NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbWalletLog2SaleItem ADD CONSTRAINT PK_WalletLog2SaleItem PRIMARY KEY ([PortfolioId],[LogFiscalDate],[LogSerial],[SaleItemId])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.531</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tbLedgerRule.TriggerWorkstationType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
add TriggerWorkstationType smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.530</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbProduct2InstallmentPlan</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProduct2InstallmentPlan]
(
	[ProductId] Uniqueidentifier NOT NULL,
	[InstallmentPlanId] Uniqueidentifier NOT NULL,
	[DownPaymentType] Smallint NULL,
	[DownPaymentValue] Money NULL,
	[ProductFeeType] Smallint NULL,
	[ProductFeeValue] Money NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct2InstallmentPlan ADD CONSTRAINT PK_Product2InstallmentPlan PRIMARY KEY ([ProductId],[InstallmentPlanId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product2InstallmentPlan_InstallmentPlanId] ON [tbProduct2InstallmentPlan] ([InstallmentPlanId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct2InstallmentPlan] add constraint FK_Product2InstallmentPlan_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct2InstallmentPlan] add constraint FK_Product2InstallmentPlan_InstallmentPlan foreign key([InstallmentPlanId]) references [tbInstallmentPlan] ([InstallmentPlanId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.529</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tbInstallmentPlan fields:
- ContractFeeType
- ContractFeeValue
- ProductFeeType
- ProductFeeValue</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbInstallmentPlanComm
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbInstallmentPlan
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
add
  ContractFeeType smallint not null,  
  ContractFeeValue money not null,  
  ProductFeeType smallint not null,  
  ProductFeeValue money not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.528</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Rename field tbInstallmentPlan.Duration -&gt; PaymentCount
- Add field tbInstallmentPlan.DurationDays</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbInstallmentPlan.Duration',
    @newname = 'PaymentCount',
    @objtype = 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
add DurationDays smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbInstallmentPlan
set DurationDays=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
alter column DurationDays smallint not null 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.527</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Makes tbInstallmentPlan.RenewInstallmentPlanId NULLABLE</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
alter column RenewInstallmentPlanId uniqueidentifier null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.526</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tables:
- tbInstallmentPlan
- tbInstallmentPlanComm</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbInstallmentPlan]
(
	[InstallmentPlanId] Uniqueidentifier NOT NULL,
	[InstallmentPlanCode] Varchar(10) NOT NULL,
	[InstallmentPlanName] Nvarchar(100) NOT NULL,
	[Enabled] Bit NOT NULL,
	[ValidDateFrom] date NOT NULL,
	[ValidDateTo] date NULL,
	[Duration] Smallint NOT NULL,
	[PaymentCycleType] Smallint NOT NULL,
	[PaymentCycleValue] Smallint NOT NULL,
	[DownPaymentType] Smallint NOT NULL,
	[DownPaymentValue] Money NOT NULL,
	[MaxAttempts] Smallint NOT NULL,
	[RetryAfterDays] Smallint NOT NULL,
	[FirstInstallmentOffset] Smallint NOT NULL,
	[RenewInstallmentPlanId] Uniqueidentifier NOT NULL,
	[AutoRenewCommDays] Smallint NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan ADD CONSTRAINT PK_InstallmentPlan PRIMARY KEY ([InstallmentPlanId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_InstallmentPlan_Code] ON [tbInstallmentPlan] ([InstallmentPlanCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentPlan_RenewInstallmentPlanId] ON [tbInstallmentPlan] ([RenewInstallmentPlanId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentPlan] add constraint FK_InstallmentPlan_RenewInstallmentPlan foreign key([RenewInstallmentPlanId]) references [tbInstallmentPlan] ([InstallmentPlanId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbInstallmentPlanComm]
(
	[InstallmentPlanId] Uniqueidentifier NOT NULL,
	[InstallmentCommType] Smallint NOT NULL,
	[DocTemplateId] Uniqueidentifier NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlanComm ADD CONSTRAINT PK_InstallmentPlanComm PRIMARY KEY ([InstallmentPlanId],[InstallmentCommType])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentPlanComm_DocTemplate] ON [tbInstallmentPlanComm] ([DocTemplateId] ,[InstallmentCommType] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentPlanComm] add constraint FK_InstallmentPlanComm_InstallmentPlan foreign key([InstallmentPlanId]) references [tbInstallmentPlan] ([InstallmentPlanId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentPlanComm] add constraint FK_InstallmentPlanComm_DocTemplate foreign key([DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.525</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbSiaeCard.DataDelibera from "varbinary(3)" to "date"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSiaeCard
drop column DataDelibera
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeCard
add DataDelibera date null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.524</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create IX_Upload_ServerAndStatus</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Upload_ServerAndStatus] ON [tbUpload] ([ServerId] ,[UploadStatus] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.523</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Alter tbAsyncProcess.ServerId =&gt; from UUID to  SMALLINT
- Add tbUpload.ServerId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbAsyncProcess
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_AsyncProcess_ServerAndStatus on tbAsyncProcess
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAsyncProcess drop column ServerId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAsyncProcess
add ServerId smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AsyncProcess_ServerAndStatus] ON [tbAsyncProcess] ([ServerId] ,[AsyncProcessStatus] ,[StartDateTime] Desc) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbUpload
add ServerId smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.522</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tables:
- tbSiaeSystem
- tbSiaeCard</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSiaeSystem]
(
	[CodiceSistema] Varchar(8) NOT NULL,
	[MainSystem] Bit NOT NULL,
	[Denominazione] Nvarchar(100) NOT NULL,
	[CodiceFiscale] Varchar(16) NOT NULL,
	[Ubicazione] Nvarchar(100) NULL,
	[EmailMittente] Nvarchar(50) NULL,
	[EmailDestinazione] Nvarchar(50) NULL,
	[REA] Varchar(18) NULL,
	[Nazione] Varchar(3) NULL,
	[CodiceProvvedimento] Varchar(20) NULL,
	[DataProvvedimento] date NULL,
	[SiaeCompetenza] Nvarchar(100) NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeSystem ADD CONSTRAINT PK_SiaeSystem PRIMARY KEY ([CodiceSistema])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSiaeCard]
(
	[CodiceCarta] Varchar(8) NOT NULL,
	[CardStatus] smallint NOT NULL,
	[LoginDateTime] Smalldatetime NULL,
	[CodiceSistema] Varchar(8) NOT NULL,
	[Contatore] Integer NOT NULL,
	[Balance] Money NOT NULL,
	[Titolare] Nvarchar(50) NULL,
	[Firmatario] Nvarchar(50) NULL,
	[CodiceFiscale] Varchar(16) NULL,
	[Indirizzo] Nvarchar(100) NULL,
	[EmailMittente] Nvarchar(50) NULL,
	[EmailDestinazione] Nvarchar(50) NULL,
	[NomeSistema] Nvarchar(100) NULL,
	[CodiceFiscaleSistema] Varchar(16) NULL,
	[REA] Varchar(18) NULL,
	[Nazione] Varchar(3) NULL,
	[NumeroDelibera] Varchar(20) NULL,
	[DataDelibera] Binary(3) NULL,
	[ContactType] Varchar(1) NULL,
	[FileSystemVer] Varchar(5) NULL,
	[Pool] Varchar(8) NULL,
	[IP] Varchar(15) NULL,
	[Port] Integer NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeCard ADD CONSTRAINT PK_SiaeCard PRIMARY KEY ([CodiceCarta])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeCard_CodiceSystema] ON [tbSiaeCard] ([CodiceSistema] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeCard] add constraint FK_SiaeCard_SiaeSystem foreign key([CodiceSistema]) references [tbSiaeSystem] ([CodiceSistema])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.521</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbDocTemplate.LastUpdate and related index</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
add LastUpdate datetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbDocTemplate
set LastUpdate=LogDateTime
from (
  select HL.EntityId, Max(HL.LogDateTime) as LogDateTime              
  from  
    tbDocTemplate DT inner join    
    tbHistoryLog HL on HL.EntityId=DT.DocTemplateId         
  group by HL.EntityId
) X
where DocTemplateId=EntityId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbDocTemplate
set LastUpdate=GetDate()
where LastUpdate is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
alter column LastUpdate datetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_DocTemplate_DocTemplateType_LastUpdate] ON [tbDocTemplate] ([DocTemplateType] ,[LastUpdate] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.520</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add/refactor indexes on tbJob</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Job_TaskIdChecked on tbJob
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Job_TaskIdChecked] ON [tbJob] ([TaskId] ,[Checked] ,[StartDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Job_StartDateTime] ON [tbJob] ([StartDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Job_TaskId] ON [tbJob] ([TaskId] ,[StartDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.519</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbTranslate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>select LangISO, LabelKey, LabelValue
into tmpTranslate
from tbTranslate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbTranslate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tmpTranslate', 'tbTranslate';
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTranslate ADD CONSTRAINT PK_Translate PRIMARY KEY ([LangISO],[LabelKey])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.518</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbHistoryLog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbHistoryLog
add HistoryLogType tinyint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbHistoryLog
set HistoryLogType=10


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbHistoryLog
set HistoryLogType=1
where HistoryLogId = (select top 1 HL.HistoryLogId from tbHistoryLog HL where HL.EntityId=tbHistoryLog.EntityId order by HL.LogDateTime)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbHistoryLog
set HistoryLogType=2
where HistoryLogId = (select top 1 HL.HistoryLogId from tbHistoryLog HL where HL.EntityId=tbHistoryLog.EntityId order by HL.LogDateTime desc)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbHistoryLog
alter column HistoryLogType tinyint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>select
  EntityId,  
  LogDateTime,  
  EntityType,  
  UserAccountId,  
  WorkstationId,  
  HistoryLogType
into tmpHistoryLog
from tbHistoryLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbHistoryLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tmpHistoryLog', 'tbHistoryLog';
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_HistoryLog_EntityId_LogType] ON [tbHistoryLog] ([EntityId] ,[HistoryLogType] ) 
where HistoryLogType in (1,2) /*Create/LastUpdate*/

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_HistoryLog_WorkstationId] ON [tbHistoryLog] ([WorkstationId] ,[LogDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_HistoryLog_UserAccountId] ON [tbHistoryLog] ([UserAccountId] ,[LogDateTime] ) 
where UserAccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_HistoryLog_LogType_DateTime] ON [tbHistoryLog] ([HistoryLogType] ,[LogDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbHistoryLog] add constraint FK_HistoryLog_UserAccount foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbHistoryLog] add constraint FK_HistoryLog_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>WITH cte AS (
  SELECT EntityId, LogDateTime, 
     row_number() OVER(PARTITION BY EntityId, LogDateTime ORDER BY LogDateTime) AS [rn]
  FROM tbHistoryLog
)
DELETE cte WHERE [rn] &gt; 1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbHistoryLog ADD CONSTRAINT PK_HistoryLog PRIMARY KEY ([EntityId],[LogDateTime])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.517</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Create IX_EntityLink_SrcEntityId_DstEntityType
- Create IX_EntityLink_DstEntityId_EntityLinkType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_EntityLink_SrcEntityId_DstEntityType] ON [tbEntityLink] ([SrcEntityId] ,[DstEntityType] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_EntityLink_DstEntityId_EntityLinkType] ON [tbEntityLink] ([DstEntityId] ,[EntityLinkType] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.516</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbEntityLink.EntityLinkType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEntityLink
add EntityLinkType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbEntityLink
set EntityLinkType=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEntityLink
alter column EntityLinkType smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.515</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index UQ_SiaeLocation_CodiceLocale</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_SiaeLocation_CodiceLocale] ON [tbSiaeLocation] ([CodiceLocale] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.514</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbSiaeLookup</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbSiaeLookup
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSiaeLookup]
(
	[LookupTableId] Smallint NOT NULL,
	[LookupItemCode] Varchar(10) NOT NULL,
	[LookupItemName] Nvarchar(100) NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeLookup ADD CONSTRAINT PK_SiaeLookup PRIMARY KEY ([LookupTableId],[LookupItemCode])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.513</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Sets READ_COMMITTED_SNAPSHOT = ON

UGO: Script removed on 06/09/2017 because it fails on Microsoft Azure</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.512</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change RightType 134-&gt;135</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRight
set RightType=135
where RightType=134
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.511</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbVoucher.DocTemplateId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbVoucher
add DocTemplateId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Voucher_DocTemplateId] ON [tbVoucher] ([DocTemplateId] ) 
where DocTemplateId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbVoucher] add constraint FK_Voucher_DocTemplate foreign key([DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.510</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbVoucher.Printed</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbVoucher
add Printed bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbVoucher
set Printed=1

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbVoucher
alter column Printed bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.509</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Clear "fake" CatalogIDs from tbEntityChange</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbEntityChange
where EntityId in (select CatalogId from tbCatalog where ParentCatalogId is not null)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.508</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tables
- tbSiaeLookup
- tbSiaeOrganizer
- tbSiaeLocation</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSiaeLookup]
(
	[LookupTableId] Smallint NOT NULL,
	[LookupItemId] Smallint NOT NULL,
	[LookupItemCode] Varchar(10) NULL,
	[LookupItemName] Nvarchar(100) NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeLookup ADD CONSTRAINT PK_SiaeLookup PRIMARY KEY ([LookupTableId],[LookupItemId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSiaeOrganizer]
(
	[OrganizerId] Uniqueidentifier NOT NULL,
	[Denominazione] Nvarchar(30) NULL,
	[CodiceFiscale] Varchar(16) NULL,
	[TipoOrganizzatore] Varchar(1) NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeOrganizer ADD CONSTRAINT PK_SiaeOrganizer PRIMARY KEY ([OrganizerId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeOrganizer] add constraint FK_SiaeOrganizer_Account foreign key([OrganizerId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSiaeLocation]
(
	[LocationId] Uniqueidentifier NOT NULL,
	[CodiceLocale] Varchar(13) NOT NULL,
	[Denominazione] Nvarchar(30) NULL,
	[Indirizzo] Nvarchar(100) NULL,
	[Citta] Nvarchar(30) NULL,
	[Provincia] Varchar(2) NULL,
	[Capienza] Integer NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSiaeLocation ADD CONSTRAINT PK_SiaeLocation PRIMARY KEY ([LocationId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSiaeLocation] add constraint FK_SiaeLocation_Account foreign key([LocationId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.507</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor PK_SaleItemVoucher</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleItemVoucher
DROP CONSTRAINT PK_SaleItemVoucher
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemVoucher ADD CONSTRAINT PK_SaleItemVoucher PRIMARY KEY ([SaleItemId],[VoucherId])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.506</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSaleItemVoucher</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleItemVoucher]
(
	[SaleItemId] Uniqueidentifier NOT NULL,
	[VoucherId] Uniqueidentifier NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemVoucher ADD CONSTRAINT PK_SaleItemVoucher PRIMARY KEY ([SaleItemId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemVoucher_VoucherId] ON [tbSaleItemVoucher] ([VoucherId]) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemVoucher] add constraint FK_SaleItemVoucher_SaleItem foreign key([SaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemVoucher] add constraint FK_SaleItemVoucher_Voucher foreign key([VoucherId]) references [tbVoucher] ([VoucherId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.505</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbVoucher.AmountMax</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbVoucher
add AmountMax money null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.504</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add field tbVoucherItem.UnitPrice
- Rename tbVoucherItem.MinQuantity -&gt; QuantityMin
- Rename tbVoucherItem.MaxQuantity -&gt; QuantityMax</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbVoucherItem
add UnitPrice money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbVoucherItem
set UnitPrice=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbVoucherItem
alter column UnitPrice money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbVoucherItem.MinQuantity',
    @newname = 'QuantityMin',
    @objtype = 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbVoucherItem.MaxQuantity',
    @newname = 'QuantityMax',
    @objtype = 'COLUMN'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.503</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add field tbVoucher.TransactionId
- Rename tbVoucher.StartDate -&gt; ValidDateFrom
- Rename tbVoucher.EndDate -&gt; ValidDateTo
- Rename tbVoucher.MaxItems -&gt; QuantityMax</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbVoucher
add TransactionId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Voucher_TransactionId] ON [tbVoucher] ([TransactionId] ) 
where TransactionId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbVoucher] add constraint FK_Voucher_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbVoucher.StartDate',
    @newname = 'ValidDateFrom',
    @objtype = 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbVoucher.EndDate',
    @newname = 'ValidDateTo',
    @objtype = 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbVoucher.MaxItems',
    @newname = 'QuantityMax',
    @objtype = 'COLUMN'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.502</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbSaleMembership refactoring</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbSaleMembership
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSaleMembership]
(
	[SaleId] Uniqueidentifier NOT NULL,
	[TicketId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleMembership ADD CONSTRAINT PK_SaleMembership PRIMARY KEY ([SaleId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleMembership_TicketId] ON [tbSaleMembership] ([TicketId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleMembership] add constraint FK_SaleMembership_Sale foreign key([SaleId]) references [tbSale] ([SaleId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleMembership] add constraint FK_SaleMembership_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.501</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename foreign keys:
- tbCurrency
- tbCurrencyDetail
- tbDocParam
- tbDocTemplate
- tbDocTemplate2Driver
- tbDriver
- tbEvent
- tbEventCategory
- tbEventCategoryLink
- tbEventItinerary</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbCurrency' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Currency_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbCurrencyDetail' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='CurrencyId'

exec ('sp_rename ''' + @oldname + ''',''FK_CurrencyDetail_Currency''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbDocParam' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='DocTemplateId'

exec ('sp_rename ''' + @oldname + ''',''FK_DocParam_DocTemplate''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbDocTemplate' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_DocTemplate_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbDocTemplate' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='ParentTemplateId'

exec ('sp_rename ''' + @oldname + ''',''FK_DocTemplate_Parent''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbDocTemplate' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='MediaGroupTagId'

exec ('sp_rename ''' + @oldname + ''',''FK_DocTemplate_Tag_MediaGroupTagId''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbDocTemplate2Driver' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='DocTemplateId'

exec ('sp_rename ''' + @oldname + ''',''FK_DocTemplate2Driver_DocTemplate''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbDocTemplate2Driver' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='DriverId'

exec ('sp_rename ''' + @oldname + ''',''FK_DocTemplate2Driver_Driver''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbDriver' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Driver_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbEvent' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='ProducerAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Event_ProducerAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbEvent' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AccessAreaAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Event_AcAreaAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbEvent' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='CategoryId'

exec ('sp_rename ''' + @oldname + ''',''FK_Event_Category''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbEvent' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Event_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbEvent' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LocationAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Event_LocationAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbEventCategory' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_EventCategory_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbEventCategoryLink' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='EventCategoryId'

exec ('sp_rename ''' + @oldname + ''',''FK_EventCategoryLink_EventCategory''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbEventItinerary' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='EventId'

exec ('sp_rename ''' + @oldname + ''',''FK_EventCategoryLink_Event''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbEventItinerary' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='ChildEventId'

exec ('sp_rename ''' + @oldname + ''',''FK_EventCategoryLink_ChildEvent''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.500</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTicketUsageUser</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTicketUsageUser]
(
	[TicketUsageId] Uniqueidentifier NOT NULL,
	[UserAccountId] Uniqueidentifier NOT NULL,
	[TicketUsageUserType] Smallint NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsageUser ADD CONSTRAINT PK_TicketUsageUser PRIMARY KEY ([TicketUsageId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsageUser_Account] ON [tbTicketUsageUser] ([UserAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketUsageUser] add constraint FK_TicketUsageUser_TicketUsage foreign key([TicketUsageId]) references [tbTicketUsage] ([TicketUsageId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketUsageUser] add constraint FK_TicketUsageUser_Account foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.499</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename tbLogin.PasswordExpirationDate in PasswordChangeDate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLogin
add PasswordChangeDate date null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLogin
set PasswordChangeDate=GetDate()
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLogin
alter column PasswordChangeDate date not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLogin
drop column PasswordExpirationDate
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.498</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor index IX_Media_TransactionId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Media_TransactionId on tbMedia
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Media_TransactionId] ON [tbMedia] ([TransactionId], [PrintDateTime]) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.497</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbMedia.PrintAtHome</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMedia 
add PrintAtHome bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbMedia
set PrintAtHome=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMedia
alter column PrintAtHome bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.496</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.PahTemplateId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add PahTemplateId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_PahTemplateId] ON [tbProduct] ([PahTemplateId] ) 
where PahTemplateId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_DocTemplate_PahTemplateId foreign key([PahTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IDX_Product_ParentEntity on tbProduct
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IDX_Product_ParentEntityId on tbProduct
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_ParentEntityId] ON [tbProduct] ([ParentEntityId]) 
where ParentEntityId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.495</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Renames tbProduct foreign keys</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbProduct' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PrintGroupTagId'

exec ('sp_rename ''' + @oldname + ''',''FK_Product_Tag_PrintGroupTagId''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbProduct' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AdmGroupTagId'

exec ('sp_rename ''' + @oldname + ''',''FK_Product_Tag_AdmGroupTagId''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbProduct' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AccountCategoryId'

exec ('sp_rename ''' + @oldname + ''',''FK_Product_Category_AccountCategoryId''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbProduct' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='CategoryId'

exec ('sp_rename ''' + @oldname + ''',''FK_Product_Category''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbProduct' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Product_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbProduct' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='DocTemplateId'

exec ('sp_rename ''' + @oldname + ''',''FK_Product_DocTemplate_DocTemplateId''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbProduct' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AutoGenDocTemplateId'

exec ('sp_rename ''' + @oldname + ''',''FK_Product_DocTemplate_AutoGenDocTemplateId''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.494</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Force promo rule cache change</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbEntityChange
where EntityType=55/*PromoRule*/ and InsertUpdate=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (
  EntityType,  
  EntityId,  
  InsertUpdate
)
select
  55/*PromoRule*/,  
  ProductId,  
  1  
from tbPromoRule
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.493</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbTimedTicketRuleItem refactoring</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTimedTicketRuleItem
add ApplyFromMinute Smallint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTimedTicketRuleItem
add ApplyToMinute Smallint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTimedTicketRuleItem
set ApplyFromMinute = ApplyFromHour*60
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTimedTicketRuleItem
set ApplyToMinute = ApplyToHour*60
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTimedTicketRuleItem
DROP COLUMN ApplyFromHour
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTimedTicketRuleItem
DROP COLUMN ApplyToHour
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.492</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Changes LkSNSaleAccountType numeration</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbSale2Account
set SaleAccountType=(case SaleAccountType when 2 then 20 when 3 then 30 when 4 then 2 else SaleAccountType end)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT></SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.491</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop tbSale.AccountId and move its data into tbSale2Account</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSale2Account
add SaleDateTime smalldatetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSale2Account
set SaleDateTime=X_SaleDateTime
from (
  select                             
    S.SaleId as X_SaleId,    
    S.SaleDateTime as X_SaleDateTime
  from  
    tbSale2Account S2A inner join    
    tbSale S on S.SaleId=S2A.SaleId
) X
where SaleId=X_SaleId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale2Account
alter column SaleDateTime smalldatetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbSale2Account (
  SaleId,  
  SaleAccountType,  
  AccountId,
  SaleDateTime  
)
select
  SaleId,  
  1/*owner*/,  
  AccountId,  
  SaleDateTime
from tbSale
where AccountId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Sale2Account_AccountId on tbSale2Account
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale2Account_AccountId] ON [tbSale2Account] ([AccountId] ,[SaleDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbSale' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Sale_Account''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSale DROP CONSTRAINT FK_Sale_Account
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Sale_AccountId on tbSale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale drop column AccountId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.490</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbSale2Account</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>sp_rename 'tbSale2Account', 'tmpSale2Account'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSale2Account]
(
	[SaleId] Uniqueidentifier NOT NULL,
	[SaleAccountType] Smallint NOT NULL,
	[AccountId] Uniqueidentifier NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbSale2Account (
  SaleId,  
  SaleAccountType,  
  AccountId    
)
select
  SaleId,  
  SaleAccountType,  
  AccountId    
from tmpSale2Account
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tmpSale2Account
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale2Account ADD CONSTRAINT PK_Sale2Account PRIMARY KEY ([SaleId],[SaleAccountType],[AccountId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale2Account_AccountId] ON [tbSale2Account] ([AccountId] ,[SaleAccountType] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSale2Account] add constraint FK_Sale2Account_Sale foreign key([SaleId]) references [tbSale] ([SaleId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSale2Account] add constraint FK_Sale2Account_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.489</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbLoginStats</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbLoginStats]
(
	[LoginStatsId] Uniqueidentifier NOT NULL,
	[DateTime] Smalldatetime NOT NULL,
	[WorkstationType] Smallint NOT NULL,
	[SessionPoolId] Uniqueidentifier NULL,
	[QuantityMax] Integer NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLoginStats ADD CONSTRAINT PK_LoginStats PRIMARY KEY ([LoginStatsId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_LoginStats] ON [tbLoginStats] ([WorkstationType] ,[SessionPoolId] ,[DateTime] ) 
 INCLUDE (QuantityMax)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LoginStats_WorkstationType] ON [tbLoginStats] ([WorkstationType] ,[DateTime] ) 
 INCLUDE (QuantityMax)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LoginStats_SessionPoolId] ON [tbLoginStats] ([SessionPoolId] ,[DateTime] ) 
 INCLUDE (QuantityMax)
where SessionPoolId is not null


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLoginStats] add constraint FK_LoginStats_SessionPool foreign key([SessionPoolId]) references [tbSessionPool] ([SessionPoolId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.488</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbUserActivity</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_UserActivity_WorkstationId on tbUserActivity
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbUserActivity
alter column LoginDateTime datetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbUserActivity
alter column LogoutDateTime datetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_UserActivity_WorkstationId] ON [tbUserActivity] ([WorkstationId] ,[FiscalDate] ,[LoginDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.487</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbUserActivity</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>sp_rename 'tbUserActivity', 'tmpUserActivity'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbUserActivity]
(
	[FiscalDate] date NOT NULL,
	[UserAccountId] Uniqueidentifier NOT NULL,
	[UserActivitySerial] Integer NOT NULL,
	[WorkstationId] Uniqueidentifier NOT NULL,
	[LoginDateTime] Smalldatetime NOT NULL,
	[LogoutDateTime] Smalldatetime NULL,
	[ProductCount] Integer NOT NULL,
	[TransactionCount] Integer NOT NULL,
	[TotalTransactionTime] Integer NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbUserActivity (
  FiscalDate,
  UserAccountId,
  UserActivitySerial,
  WorkstationId,
  LoginDateTime,
  LogoutDateTime,
  ProductCount,
  TransactionCount,
  TotalTransactionTime
)
select
  FiscalDate,
  AccountId,
  ROW_NUMBER() over (partition by FiscalDate, AccountId order by LoginDateTime),
  WorkstationId,
  LoginDateTime,
  LogoutDateTime,
  ProductCount,
  TransactionCount,
  TotalTransactionTime
from tmpUserActivity
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tmpUserActivity
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbUserActivity ADD CONSTRAINT PK_UserActivity PRIMARY KEY ([FiscalDate],[UserAccountId],[UserActivitySerial])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_UserActivity_AccountId] ON [tbUserActivity] ([UserAccountId] ,[FiscalDate] ,[UserActivitySerial] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_UserActivity_WorkstationId] ON [tbUserActivity] ([WorkstationId] ,[FiscalDate] ,[LoginDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbUserActivity] add constraint FK_UserActivity_Account foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbUserActivity] add constraint FK_UserActivity_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.486</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbUserActivity</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>sp_rename 'tbUserActivity', 'tmpUserActivity'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbUserActivity]
(
	[UserActivityId] Uniqueidentifier NOT NULL,
	[AccountId] Uniqueidentifier NOT NULL,
	[WorkstationId] Uniqueidentifier NOT NULL,
	[FiscalDate] date NOT NULL,
	[LoginDateTime] smalldatetime NOT NULL,
	[LogoutDateTime] smalldatetime NULL,
	[ProductCount] Integer NOT NULL,
	[TransactionCount] Integer NOT NULL,
	[TotalTransactionTime] Integer NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbUserActivity (
  UserActivityId,
  AccountId,
  WorkstationId,    
  FiscalDate,
  LoginDateTime,
  LogoutDateTime,
  ProductCount,
  TransactionCount,
  TotalTransactionTime
)
select
  newid(),
  LoginAccountId,
  WorkstationId,
  LoginDateTime,
  LoginDateTime,
  LogoutDateTime,
  ProductCounter,
  TransactionCounter,
  TotalTransactionTime
from tmpUserActivity
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tmpUserActivity
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbUserActivity ADD CONSTRAINT PK_UserActivity PRIMARY KEY ([UserActivityId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_UserActivity_WorkstationId] ON [tbUserActivity] ([WorkstationId] ,[FiscalDate] ,[LoginDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_UserActivity_AccountId] ON [tbUserActivity] ([AccountId] ,[FiscalDate] ,[LoginDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_UserActivity_FiscalDate] ON [tbUserActivity] ([FiscalDate] ,[AccountId] ,[LoginDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbUserActivity] add constraint FK_UserActivity_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbUserActivity] add constraint FK_UserActivity_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.485</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>refactor index IX_PortfolioSlotLog_EntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_PortfolioSlotLog_EntityId on tbPortfolioSlotLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioSlotLog_EntityId] ON [tbPortfolioSlotLog] ([EntityId] ,[MembershipPointId] ,[PortfolioSlotType] ) 
where EntityId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.484</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Refactor UQ_Media_TDSSN</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_Media_TDSSN on tbMedia
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Media_TDSSN] ON [tbMedia] ([LicenseId] ,[StationSerial] ,[EncodeFiscalDate] ,[MediaSerial] ) 
where MediaSerial &gt; 0

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.483</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add fields FailedLoginAttempts, PasswordExpirationDate to tbLogin
- Add table tbPasswordHistory
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLogin
add
  FailedLoginAttempts tinyint null,
  PasswordExpirationDate date null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPasswordHistory]
(
	[AccountId] Uniqueidentifier NOT NULL,
	[ChangeDateTime] Datetime NOT NULL,
	[Password] Varchar(100) NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPasswordHistory ADD CONSTRAINT PK_PasswordHistory PRIMARY KEY ([AccountId],[ChangeDateTime])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPasswordHistory] add constraint FK_PasswordHistory_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.482</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Refactor IX_MembershipPointRule_EventId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_MembershipPointRule_EventId on tbMembershipPointRule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_MembershipPointRule_EventId] ON [tbMembershipPointRule] ([EventId] ) 
where EventId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.481</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSaleItemDepositAccount</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleItemDepositAccount]
(
	[SaleItemId] Uniqueidentifier NOT NULL,
	[AccountId] Uniqueidentifier NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemDepositAccount ADD CONSTRAINT PK_SaleItemDepositAccount PRIMARY KEY ([SaleItemId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemDepositAccount_AccountId] ON [tbSaleItemDepositAccount] ([AccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemDepositAccount] add constraint FK_SaleItemDepositAccount_SaleItem foreign key([SaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemDepositAccount] add constraint FK_SaleItemDepositAccount_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.480</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Refactor IX_MembershipPointRule_AptWorkstationId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_MembershipPointRule_AptWorkstationId on tbMembershipPointRule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_MembershipPointRule_AptWorkstationId] ON [tbMembershipPointRule] ([AptWorkstationId] ,[EventId] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.479</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- tbMembershipPointRule rename column Points to RewardingPoints
- tbAccessPoint drop column RewardingPoints</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbMembershipPointRule
  DROP COLUMN Points;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMembershipPointRule
add RewardingPoints Integer NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbMembershipPointRule
set RewardingPoints = 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMembershipPointRule
alter column RewardingPoints Integer NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAccessPoint
  DROP COLUMN RewardingPoints;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.478</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Drop IDX_HistoryLog_Entity
- Refactor IX_HistoryLog_EntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IDX_HistoryLog_Entity on tbHistoryLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_HistoryLog_EntityId on tbHistoryLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_HistoryLog_EntityId] ON [tbHistoryLog] ([EntityId] ,[LogDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.477</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbMembershipPointRule</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbMembershipPointRule]
(
	[MembershipPointRuleId] Uniqueidentifier NOT NULL,
	[MembershipPointId] Uniqueidentifier NOT NULL,
	[Points] Integer NOT NULL,
	[AptWorkstationId] Uniqueidentifier NULL,
	[EventId] Uniqueidentifier NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMembershipPointRule ADD CONSTRAINT PK_MembershipPointRule PRIMARY KEY ([MembershipPointRuleId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_MembershipPointRule_MembershipPointId] ON [tbMembershipPointRule] ([MembershipPointId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_MembershipPointRule_EventId] ON [tbMembershipPointRule] ([EventId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_MembershipPointRule_AptWorkstationId] ON [tbMembershipPointRule] ([AptWorkstationId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMembershipPointRule] add  foreign key([MembershipPointId]) references [tbMembershipPoint] ([MembershipPointId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMembershipPointRule] add  foreign key([EventId]) references [tbEvent] ([EventId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMembershipPointRule] add  foreign key([AptWorkstationId]) references [tbAccessPoint] ([AptWorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.476</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbPaymentCredit.DueDate -&gt; not nullable
tbAccountFinance.CreditDays -&gt; not nullable</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbPaymentCredit
set DueDate=CreateDateTime
where DueDate is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_PaymentCredit_AccountId on tbPaymentCredit
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentCredit
alter column DueDate date not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentCredit_AccountId] ON [tbPaymentCredit] ([AccountId] ,[CreditStatus] ,[DueDate] ,[CreateDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccountFinance
set CreditDays=0
where CreditDays is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
alter column CreditDays int not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.475</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbPaymentCredit.CreateDateTime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentCredit
add CreateDateTime smalldatetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPaymentCredit
set CreateDateTime=X_TransactionDateTime
from (
  select
    PC.PaymentId as X_PaymentId,
    T.TransactionDateTime as X_TransactionDateTime  
  from  
    tbPaymentCredit PC inner join
    tbPayment P on P.PaymentId=PC.PaymentId inner join    
    tbTransaction T on T.TransactionId=P.TransactionId
) X
where PaymentId=X_PaymentId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentCredit
alter column CreateDateTime smalldatetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_PaymentCredit_AccountId on tbPaymentCredit
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentCredit_AccountId] ON [tbPaymentCredit] ([AccountId] ,[CreditStatus] ,[DueDate] ,[CreateDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.474</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index IX_AttributeItem_Attribute</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_AttributeItem_Attribute] ON [tbAttributeItem] ([AttributeId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.473</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbProduct2AttributeItem</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbProduct2AttributeItem
DROP CONSTRAINT PK_Product2AttributeItem
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct2AttributeItem
drop column Product2AttributeItemId 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Product2AttributeItem_ProductId on tbProduct2AttributeItem
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbProduct2AttributeItem
ADD CONSTRAINT PK_Product2AttributeItem PRIMARY KEY ([ProductId], [AttributeItemId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product2AttributeItem_AttributeItemId] ON [tbProduct2AttributeItem] ([AttributeItemId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbProduct2AttributeItem' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='ProductId'

exec ('sp_rename ''' + @oldname + ''',''FK_Product2AttributeItem_Product''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbProduct2AttributeItem' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AttributeItemId'

exec ('sp_rename ''' + @oldname + ''',''FK_Product2AttributeItem_AttributeItem''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.472</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbEntitlement2Event</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbEntitlement2Event 
DROP CONSTRAINT PK_Entitlement2Event
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEntitlement2Event
drop column Entitlement2EventId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>select distinct EntitlementId, EventId
into tmpE2E
from tbEntitlement2Event








</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbEntitlement2Event

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntitlement2Event (EntitlementId, EventId)
select EntitlementId, EventId from tmpE2E
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tmpE2E
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbEntitlement2Event
ADD CONSTRAINT PK_Entitlement2Event PRIMARY KEY ([EntitlementId], [EventId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Entitlement2Event_EventId] ON [tbEntitlement2Event] ([EventId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbEntitlement2Event' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='EntitlementId'

exec ('sp_rename ''' + @oldname + ''',''FK_Entitlement2Event_Entitlement''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbEntitlement2Event' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='EventId'

exec ('sp_rename ''' + @oldname + ''',''FK_Entitlement2Event_Event''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.471</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Update promo rules entityChange</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete 
tbEntityChange 
where
	EntityId in (
	select ProductId 
	from tbProduct
	where ProductType = 5);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (
  EntityType, 
  EntityId, 
  InsertUpdate
)
select
  55,
  ProductId,
  1
from tbProduct
where ProductType = 5
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.470</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor IX_Session_WorkstationType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Session_WorkstationType on tbSession
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Session_WorkstationType] ON [tbSession] ([WorkstationType] ,[SessionPoolId] ,[SuperUser] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.469</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbSession.CreateDateTime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbSession
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSession
add CreateDateTime smalldatetime not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.468</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add foreign keys and indexes to tbConsSale</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_ConsSale_LocationId] ON [tbConsSale] ([LocationAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsSale_OpAreaId] ON [tbConsSale] ([OpAreaAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsSale_ProductId] ON [tbConsSale] ([ProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsSale_OptionSetId] ON [tbConsSale] ([OptionSetId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsSale] add constraint FK_ConsSale_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsSale] add constraint FK_ConsSale_OpAreaAccount foreign key([OpAreaAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsSale] add constraint FK_ConsSale_LocationAccount foreign key([LocationAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.467</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add foreign keys and indexes to tbConsRotation</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_ConsRotation_LocationId] ON [tbConsRotation] ([LocationAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsRotation_AptWorkstationId] ON [tbConsRotation] ([AptWorkstationId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbConsRotation' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LocationAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_ConsRotation_LocationAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbConsRotation' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AptWorkstationId'

exec ('sp_rename ''' + @oldname + ''',''FK_ConsRotation_Workstation''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.466</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add foreign keys and indexes to tbConsAccess</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAccess_LocationtId] ON [tbConsAccess] ([LocationAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAccess_EventId] ON [tbConsAccess] ([EventId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAccess_AccessAreaId] ON [tbConsAccess] ([AccessAreaAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAccess_ProductId] ON [tbConsAccess] ([ProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsAccess_OptionSetId] ON [tbConsAccess] ([OptionSetId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsAccess] add constraint FK_ConsAccess_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsAccess] add constraint FK_ConsAccess_LocationAccount foreign key([LocationAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsAccess] add constraint FK_ConsAccess_AcAreaAccount foreign key([AccessAreaAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsAccess] add constraint FK_ConsAccess_Event foreign key([EventId]) references [tbEvent] ([EventId])  on update no action on delete no action 
             
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.465</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbCategory2Mask</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>select CategoryId, MaskId, PriorityOrder 
into tmpCat2Mask
from tbCategory2Mask
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbCategory2Mask
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbCategory2Mask]
(
	[CategoryId] Uniqueidentifier NOT NULL,
	[MaskId] Uniqueidentifier NOT NULL,
	[PriorityOrder] Integer NOT NULL
) 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCategory2Mask ADD CONSTRAINT PK_Category2Mask PRIMARY KEY ([CategoryId],[MaskId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Category2Mask_MaskId] ON [tbCategory2Mask] ([MaskId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCategory2Mask] add constraint FK_Category2Mask_Mask foreign key([MaskId]) references [tbMask] ([MaskId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCategory2Mask] add constraint FK_Category2Mask_Category foreign key([CategoryId]) references [tbCategory] ([CategoryId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbCategory2Mask (
  CategoryId,  
  MaskId,  
  PriorityOrder    
)
select
  CategoryId,  
  MaskId,  
  PriorityOrder  
from tmpCat2Mask
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tmpCat2Mask
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.464</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Fix foreign key names:
- tbAccountLink
- tbActionLink
- tbAsyncProcess
- tbAttribute
- tbAttributeItem
- tbAuth
- tbBox
- tbBoxDeposit
- tbBoxDepositDetail
- tbCatalog
- tbCategory</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbAccountLink' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_AccountLink_Account''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbActionLink' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='ActionId'

exec ('sp_rename ''' + @oldname + ''',''FK_ActionLink_Action''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbAsyncProcess' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='WorkstationId'

exec ('sp_rename ''' + @oldname + ''',''FK_AsyncProcess_Workstation''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbAsyncProcess' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='UserAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_AsyncProcess_UserAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbAttribute' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Attribute_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbAttributeItem' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AttributeId'

exec ('sp_rename ''' + @oldname + ''',''FK_AttributeItem_Attribute''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbAuth' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Auth_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbAuth' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='WorkstationId'

exec ('sp_rename ''' + @oldname + ''',''FK_Auth_Workstation''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbAuth' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='UserAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Auth_UserAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbBox' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LocationAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Box_LocationAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbBox' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='UserAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Box_UserAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbBox' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Box_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbBoxDeposit' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='BoxId'

exec ('sp_rename ''' + @oldname + ''',''FK_BoxDeposit_Box''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbBoxDeposit' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='WorkstationId'

exec ('sp_rename ''' + @oldname + ''',''FK_BoxDeposit_Workstation''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbBoxDeposit' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='UserAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_BoxDeposit_UserAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbBoxDepositDetail' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='BoxDepositId'

exec ('sp_rename ''' + @oldname + ''',''FK_BoxDepositDetail_BoxDeposit''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbBoxDepositDetail' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='PluginId'

exec ('sp_rename ''' + @oldname + ''',''FK_BoxDepositDetail_Plugin''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbCatalog' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='ParentCatalogId'

exec ('sp_rename ''' + @oldname + ''',''FK_Catalog_ParentCatalog''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbCategory' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='ParentCategoryId'

exec ('sp_rename ''' + @oldname + ''',''FK_Category_ParentCategory''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbCategory' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Category_License''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.463</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbSession</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbSession
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSession
add
  WorkstationType smallint not null,  
  SuperUser bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Session_WorkstationType] ON [tbSession] ([WorkstationType] ,[SuperUser] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.462</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Drop tbLogin.SessionPoolId
- Add tbLogin.BKO_SessionPoolId
- Add tbLogin.B2B_SessionPoolId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Login_SessionPoolId on tbLogin
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLogin
drop constraint FK_Login_SessionPool
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLogin
drop column SessionPoolId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLogin
add
  BKO_SessionPoolId uniqueidentifier null,    
  B2B_SessionPoolId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Login_BKO_SessionPoolId] ON [tbLogin] ([BKO_SessionPoolId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Login_B2B_SessionPoolId] ON [tbLogin] ([B2B_SessionPoolId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLogin] add constraint FK_Login_SessionPool_BKO foreign key([BKO_SessionPoolId]) references [tbSessionPool] ([SessionPoolId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLogin] add constraint FK_Login_SessionPool_B2B foreign key([B2B_SessionPoolId]) references [tbSessionPool] ([SessionPoolId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.461</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Fix foreign key names:
- tbAccount
- tbAccount2Role
- tbAccountDetail
- tbAccountFinance</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbAccount' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='LicenseId'

exec ('sp_rename ''' + @oldname + ''',''FK_Account_License''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbAccount2Role' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Account2Role_Account''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbAccount2Role' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='RoleId'

exec ('sp_rename ''' + @oldname + ''',''FK_Account2Role_Role''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbAccountDetail' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_AccountDetail_Account''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbAccountFinance' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_AccountFinance_Account''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbAccountFinance' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='SaleChannelId'

exec ('sp_rename ''' + @oldname + ''',''FK_AccountFinance_SaleChannel''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.460</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Fix tbAccessPoint foreign key names:
- Refactor tbAccessPoint2Area</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbAccessPoint' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='DriverId'

exec ('sp_rename ''' + @oldname + ''',''FK_AccessPoint_Driver''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbAccessPoint2Area' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AptWorkstationId'

exec ('sp_rename ''' + @oldname + ''',''FK_AccessPoint2Area_AccessPoint''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbAccessPoint2Area' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AccessAreaAccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_AccessPoint2Area_AccessAreaAccount''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAccessPoint2Area DROP CONSTRAINT PK_AccessPoint2Area
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccessPoint2Area ADD CONSTRAINT PK_AccessPoint2Area PRIMARY KEY ([AptWorkstationId], [AccessAreaAccountId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccessPoint2Area
drop column AccessPoint2AreaId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccessPoint2Area_AccessAreaAccountId] ON [tbAccessPoint2Area] ([AccessAreaAccountId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.459</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbLogin.SessionPoolId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLogin
add SessionPoolId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Login_SessionPoolId] ON [tbLogin] ([SessionPoolId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLogin] add constraint FK_Login_SessionPool foreign key([SessionPoolId]) references [tbSessionPool] ([SessionPoolId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.458</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Makes tbSession.SessionPoolId nullable</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSession
alter column SessionPoolId uniqueidentifier null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.457</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSession</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSession]
(
	[SessionId] Varchar(40) NOT NULL,
	[SessionPoolId] Uniqueidentifier NOT NULL,
	[WorkstationId] Uniqueidentifier NOT NULL,
	[UserAccountId] Uniqueidentifier NOT NULL,
	[ExpireDateTime] Smalldatetime NOT NULL,
	[IPAddress] Varchar(40) NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSession ADD CONSTRAINT PK_Session PRIMARY KEY ([SessionId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Session_SessionPoolId] ON [tbSession] ([SessionPoolId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Session_WorkstationId] ON [tbSession] ([WorkstationId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Session_UserAccountId] ON [tbSession] ([UserAccountId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Session_ExpireDateTime] ON [tbSession] ([ExpireDateTime] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSession] add constraint FK_Session_SessionPool foreign key([SessionPoolId]) references [tbSessionPool] ([SessionPoolId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSession] add constraint FK_Session_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSession] add constraint FK_Session_Account foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.456</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSessionPool</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSessionPool]
(
	[SessionPoolId] Uniqueidentifier NOT NULL,
	[SessionPoolName] Nvarchar(50) NOT NULL,
	[Quantity] Smallint NOT NULL,
	[WorkstationType] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSessionPool ADD CONSTRAINT PK_SessionPool PRIMARY KEY ([SessionPoolId])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.455</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbAccountFinance.ModuleB2B</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
add ModuleB2B bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccountFinance
set ModuleB2B=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
alter column ModuleB2B bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.454</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbVoucher</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbVoucher
alter column VoucherCode varchar(15) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Voucher_TemplateVoucherId] ON [tbVoucher] ([TemplateVoucherId] ) 
where TemplateVoucherId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Voucher_AccountId] ON [tbVoucher] ([AccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Voucher_VoucherCode] ON [tbVoucher] ([VoucherCode] ,[AccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbVoucher' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AccountId'

exec ('sp_rename ''' + @oldname + ''',''FK_Voucher_Account''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbVoucher' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='TemplateVoucherId'

exec ('sp_rename ''' + @oldname + ''',''FK_Voucher_Voucher''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbVoucherItem' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='VoucherId'

exec ('sp_rename ''' + @oldname + ''',''FK_VoucherItem_Voucher''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbVoucherItem' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='ProductId'

exec ('sp_rename ''' + @oldname + ''',''FK_VoucherItem_Product''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbPaymentCredit' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='VoucherId'

exec ('sp_rename ''' + @oldname + ''',''FK_PaymentCredit_Voucher''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.453</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbWalletLog2SaleItem</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbWalletLog2SaleItem]
(
	[PortfolioId] Uniqueidentifier NOT NULL,
	[LogFiscalDate] date NOT NULL,
	[LogSerial] Tinyint NOT NULL,
	[SaleItemId] Uniqueidentifier NOT NULL,
	[Quantity] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbWalletLog2SaleItem ADD CONSTRAINT PK_WalletLog2SaleItem PRIMARY KEY ([PortfolioId],[LogFiscalDate],[LogSerial],[SaleItemId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_WalletLog2SaleItem] ON [tbWalletLog2SaleItem] ([SaleItemId]) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbWalletLog2SaleItem] add constraint FK_WalletLog2SaleItem_SaleItem foreign key([SaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.452</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.ChargeToWallet</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add ChargeToWallet bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set ChargeToWallet=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column ChargeToWallet bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.451</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index IX_PortfolioSlotLog_EntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioSlotLog_EntityId] ON [tbPortfolioSlotLog] ([EntityId] ) 
where EntityId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.450</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tRewardPoints and DoubleReadDelay to tbAccessPoint </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccessPoint
add RewardingPoints Integer NULL

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccessPoint
add DoubleReadDelay Integer NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.449</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbUserActivity</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbUserActivity]
(
	[LoginAccountId] Uniqueidentifier NOT NULL,
	[LoginDateTime] Datetime NOT NULL,
        [WorkstationId] Uniqueidentifier NOT NULL,
	[LogoutDateTime] Datetime NULL,
	[ProductCounter] Integer NOT NULL,
	[TransactionCounter] Integer NOT NULL,
	[TotalTransactionTime] Integer NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbUserActivity ADD CONSTRAINT PK_UserActivity PRIMARY KEY ([LoginAccountId],[LoginDateTime])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbUserActivity] add constraint FK_UserActivity_Login foreign key([LoginAccountId]) references [tbLogin] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbUserActivity] add constraint FK_UserActivity_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_UserActivity_WorkstationId] ON [tbUserActivity] ([WorkstationId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.448</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbPlugin.PaymentGroupTagId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPlugin
add PaymentGroupTagId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Plugin_PaymentGroupTagId] ON [tbPlugin] ([PaymentGroupTagId] ) 
where PaymentGroupTagId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPlugin] add constraint FK_Plugin_Tag_PaymentGroupTagId foreign key([PaymentGroupTagId]) references [tbTag] ([TagId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.447</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbAccountFinance.AgentAccountId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
add AgentAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccountFinance_AgentAccountId] ON [tbAccountFinance] ([AgentAccountId] ) 
where AgentAccountId is not null


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountFinance] add constraint FK_AccountFinance_Account_Agent foreign key([AgentAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.446</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbTicket:
- ValidDateFrom
- ValidDateTo</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add
  ValidDateFrom date null,  
  ValidDateTo date null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.445</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>set tbMetaFieldItem.MetaFieldItemCode nullable</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMetaFieldItem
alter column [MetaFieldItemCode] Varchar(15) NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index tbMetaFieldItem.UQ_MetaFieldItem_Code
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_MetaFieldItem_Code] ON [tbMetaFieldItem] ([MetaFieldId] ,[MetaFieldItemCode] ) 
where MetaFieldItemCode is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.444</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbAccount2Plugin</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbAccount2Plugin]
(
	[AccountId] Uniqueidentifier NOT NULL,
	[PluginId] Uniqueidentifier NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccount2Plugin ADD CONSTRAINT PK_Account2Plugin PRIMARY KEY ([AccountId],[PluginId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Account2Plugin_PluginId] ON [tbAccount2Plugin] ([PluginId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccount2Plugin] add constraint FK_Account2Plugin_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccount2Plugin] add constraint FK_Account2Plugin_Plugin foreign key([PluginId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.443</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Create table tbEntityLink
- Drop tables tbTransactionLink and tbSaleLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbEntityLink]
(
	[SrcEntityId] Uniqueidentifier NOT NULL,
	[DstEntityId] Uniqueidentifier NOT NULL,
	[SrcEntityType] Smallint NOT NULL,
	[DstEntityType] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEntityLink ADD CONSTRAINT PK_EntityLink PRIMARY KEY ([SrcEntityId],[DstEntityId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_EntityLink_DstEntityId] ON [tbEntityLink] ([DstEntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityLink (
  SrcEntityId,  
  DstEntityId,  
  SrcEntityType,  
  DstEntityType
)
select
  TransactionId,  
  EntityId, 
  20, /*transaction*/ 
  EntityType         
from tbTransactionLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbTransactionLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityLink (
  SrcEntityId,  
  DstEntityId,  
  SrcEntityType,  
  DstEntityType
)
select
  SaleId,  
  EntityId, 
  21, /*sale*/ 
  EntityType         
from tbSaleLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbSaleLink
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.442</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSaleItemTax</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleItemTax]
(
	[SaleItemId] Uniqueidentifier NOT NULL,
	[TaxId] Uniqueidentifier NOT NULL,
	[TaxAmount] Money NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemTax ADD CONSTRAINT PK_SaleItemTax PRIMARY KEY ([SaleItemId],[TaxId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemTax_TaxId] ON [tbSaleItemTax] ([TaxId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemTax] add constraint FK_SaleItemTax_SaleItem foreign key([SaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemTax] add constraint FK_SaleItemTax_Tax foreign key([TaxId]) references [tbTax] ([TaxId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.441</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>table tbMetaField
add fields UniqueIndex and RandomCombine</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMetaField
add
  [UniqueIndex] Bit NULL,
  [RandomCombine] Tinyint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbMetaField
set [UniqueIndex] = 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMetaField
alter column [UniqueIndex] Bit NOT NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.440</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbMetaField
- add column Unique
- add column RandomCombine

tbAccountDetail
-add column NickName
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
add [NickName] Nvarchar(50) NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccountDetail_NickName] ON [tbAccountDetail] ([NickName] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.439</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create indexes:
- IX_Seat_GraphicId
- IX_SeatSector_AcAreaAccountId
- IX_SeatSector_ParentSectorId
- IX_SeatSector_SeatMapId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Seat_GraphicId] ON [tbSeat] ([GraphicId] ) 
where GraphicId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatSector_AcAreaAccountId] ON [tbSeatSector] ([AcAreaAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatSector_ParentSectorId] ON [tbSeatSector] ([ParentSectorId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatSector_SeatMapId] ON [tbSeatSector] ([SeatMapId] ) 
where SeatMapId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.438</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSaleItem2TimedTicketStatement</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleItem2TimedTicketStatement]
(
  [SaleItemId] Uniqueidentifier NOT NULL,
  [TimedTicketStatementId] Uniqueidentifier NOT NULL,
  [StatementAmount] Money NOT NULL
)  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItem2TimedTicketStatement ADD CONSTRAINT PK_SaleItem2TimedTicketStatement PRIMARY KEY ([SaleItemId],[TimedTicketStatementId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItem2TimedTicketStatement_TimedTicketStatementId] ON [tbSaleItem2TimedTicketStatement] ([TimedTicketStatementId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItem2TimedTicketStatement] add constraint FK_SaleItem2TimedTicketStatement_SaleItem foreign key([SaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItem2TimedTicketStatement] add constraint FK_SaleItem2TimedTicketStatement_TimedTicketStatementId foreign key([TimedTicketStatementId]) references [tbTimedTicketStatement] ([TimedTicketStatementId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.437</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop fields from tbTimedTicketStatement:
- SettleSaleItemId
- SettleAmount</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP INDEX tbTimedTicketStatement.IX_TimedTicketStatement_SettleSaleItemId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTimedTicketStatement
DROP CONSTRAINT FK_TimedTicketStatement_SaleItem
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTimedTicketStatement
DROP COLUMN SettleAmount
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTimedTicketStatement
DROP COLUMN SettleSaleItemId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.436</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.OnSaleDateFrom</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add OnSaleDateFrom date null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.435</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor IX_Sale_Batch</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Sale_Batch on tbSale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_Batch] ON [tbSale] ([BatchDate] ,[BatchNumber] ,[Printed] ,[SaleDateTime] ) 
where BatchDate is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.434</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbTimedTicketStatement:
- SettleSaleItemId
- SettleAmount</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTimedTicketStatement
add
  SettleSaleItemId Uniqueidentifier NULL,
  SettleAmount Money NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTimedTicketStatement] add constraint FK_TimedTicketStatement_SaleItem foreign key([SettleSaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TimedTicketStatement_SettleSaleItemId] ON [tbTimedTicketStatement] ([SettleSaleItemId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.433</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields:
- BatchDate
- BatchNumber

Create index IX_Sale_Batch</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSale
add
  BatchDate date null,  
  BatchNumber tinyint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_Batch] ON [tbSale] ([BatchDate] ,[BatchNumber] ,[Printed] ) 
where BatchDate is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.432</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.Upgradable</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add Upgradable bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set Upgradable=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column Upgradable bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.431</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbProduct:
- OnSaleTimeFrom
- OnSaleTimeTo
- Refundable</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add
  OnSaleTimeFrom smallint null,  
  OnSaleTimeTo smallint null,  
  Refundable bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set Refundable=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column Refundable bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.430</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.CalendarId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add CalendarId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_CalendarId] ON [tbProduct] ([CalendarId] ) 
where CalendarId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_Calendar foreign key([CalendarId]) references [tbCalendar] ([CalendarId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.429</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tables:
- tbCalendar
- tbCalendarDetail</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbCalendar]
(
	[CalendarId] Uniqueidentifier NOT NULL,
	[CalendarCode] Varchar(15) NOT NULL,
	[CalendarName] Nvarchar(100) NOT NULL,
	[Enabled] bit NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCalendar ADD CONSTRAINT PK_Calendar PRIMARY KEY ([CalendarId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Calendar_CalendarCode] ON [tbCalendar] ([CalendarCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbCalendarDetail]
(
	[CalendarId] Uniqueidentifier NOT NULL,
	[Year] Smallint NOT NULL,
	[Month] Tinyint NOT NULL,
	[DayMask] Integer NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCalendarDetail ADD CONSTRAINT PK_CalendarDetail PRIMARY KEY ([CalendarId],[Year],[Month])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCalendarDetail] add constraint FK_CalendarDetail_Calendar foreign key([CalendarId]) references [tbCalendar] ([CalendarId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.428</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add AdmGroupTagId field to tbProduct</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add
  AdmGroupTagId Uniqueidentifier null 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add  foreign key([AdmGroupTagId]) references [tbTag] ([TagId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.427</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbPromo rule drop field  AutoApplyOnTrigger</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbPromoRule 
set PromoRuleType = (PromoRuleType +1)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPromoRule 
set PromoRuleType = 1
where (PromoRuleType = 2) and (AutoApplyOnTrigger = 0)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPromoRule
drop column AutoApplyOnTrigger</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE>
		<SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.426</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop field tbBox.OverShortFlag</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbBox
set BoxStatus=8/*over-short*/
where BoxStatus=1 and OverShortFlag=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBox
drop column OverShortFlag
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.425</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Renames tbSeatTemplate into tbSeat</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>sp_rename 'tbSeatTemplate', 'tbSeat'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'PK_SeatTemplate', 'PK_Seat'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'FK_SeatTemplate_SeatEnvelope', 'FK_Seat_SeatEnvelope'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbSeat.IX_SeatTemplate_AttributeItemId', 'IX_Seat_AttributeItemId', 'INDEX'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbSeat.IX_SeatTemplate_PerformanceId', 'IX_Seat_PerformanceId', 'INDEX'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbSeat.IX_SeatTemplate_SeatEnvelopeId', 'IX_Seat_SeatEnvelopeId', 'INDEX'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbSeat.IX_SeatTemplate_SeatSectorId', 'IX_Seat_SeatSectorId', 'INDEX'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbSeat.SeatTemplateId', 'SeatId', 'COLUMN'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.424</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop tables
- tbSeatLink
- tbSeat</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbSeatLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbSeat
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.423</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbSeatLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSeatPerformanceLink]
(
	[PerformanceId] Uniqueidentifier NOT NULL,
	[SeatId] Uniqueidentifier NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[Quantity] Integer NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformanceLink ADD CONSTRAINT PK_SeatPerformanceLink PRIMARY KEY ([PerformanceId],[SeatId],[EntityId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatPerformanceLink_EntityId] ON [tbSeatPerformanceLink] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatPerformanceLink_SeatId] ON [tbSeatPerformanceLink] ([SeatId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatPerformanceLink] add constraint FK_SeatPerformanceLink_SeatPerformance foreign key([PerformanceId],[SeatId]) references [tbSeatPerformance] ([PerformanceId],[SeatId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbSeatPerformanceLink (
  PerformanceId,
  SeatId,
  EntityId,
  EntityType,
  Quantity  
)
select distinct
  S.PerformanceId,  
  S.SeatTemplateId,  
  SL.EntityId,  
  Max(SL.EntityType),  
  Max(SL.Quantity)
from
  tbSeatLink SL inner join  
  tbSeat S on S.SeatId=SL.SeatId  
group by
  S.PerformanceId,  
  S.SeatTemplateId,  
  SL.EntityId  
  

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.422</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSeatPerformance</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSeatPerformance]
(
	[PerformanceId] Uniqueidentifier NOT NULL,
	[SeatId] Uniqueidentifier NOT NULL,
	[QuantityHeld] Integer NOT NULL,
	[QuantityReserved] Integer NOT NULL,
	[QuantityPaid] Integer NOT NULL,
	[QuantityFree] Integer NOT NULL,
	[QuantityMax] Integer NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformance ADD CONSTRAINT PK_SeatPerformance PRIMARY KEY ([PerformanceId],[SeatId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatPerformance_SeatId] ON [tbSeatPerformance] ([PerformanceId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatPerformance] add constraint FK_SeatPerformance_Performance foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT></SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatPerformance] add constraint FK_SeatPerformance_Seat foreign key([SeatId]) references [tbSeatTemplate] ([SeatTemplateId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbSeatPerformance (
  PerformanceId,  
  SeatId,  
  QuantityHeld,  
  QuantityReserved,  
  QuantityPaid,  
  QuantityFree,  
  QuantityMax
)
select
  PerformanceId,  
  SeatTemplateId,
  QuantityHeld,  
  QuantityReserved,  
  QuantityPaid,  
  QuantityFree,  
  QuantityMax
from tbSeat
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.421</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add seat quantity fields to tbPerformance</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPerformance
add
  QuantityHeld int null,  
  QuantityReserved int null,  
  QuantityPaid int null,  
  QuantityFree int null,  
  QuantityMax int null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPerformance 
set
  QuantityHeld=0,  
  QuantityReserved=0,  
  QuantityPaid=0,  
  QuantityFree=0,  
  QuantityMax=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPerformance
set
  QuantityHeld=X_QuantityHeld,  
  QuantityReserved=X_QuantityReserved,  
  QuantityPaid=X_QuantityPaid,  
  QuantityFree=X_QuantityFree,  
  QuantityMax=X_QuantityMax
from (
  select
    PerformanceId as X_PerformanceId,
    Sum(QuantityHeld) as X_QuantityHeld,  
    Sum(QuantityReserved) as X_QuantityReserved,  
    Sum(QuantityPaid) as X_QuantityPaid,  
    Sum(QuantityFree) as X_QuantityFree,  
    Sum(QuantityMax) as X_QuantityMax    
  from tbSeatPerformanceCategory  
  group by PerformanceId
) X
where PerformanceId=X_PerformanceId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
alter column QuantityHeld int not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
alter column QuantityReserved int not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
alter column QuantityPaid int not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
alter column QuantityFree int not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
alter column QuantityMax int not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.420</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbSeatTemplate.SeatEnvelopeId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSeatTemplate
add SeatEnvelopeId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSeatTemplate
set SeatEnvelopeId=X_SeatEnvelopeId
from (
  select SeatEnvelopeId as X_SeatEnvelopeId  
  from tbSeatEnvelope  
  where SeatEnvelopeCode='DEFAULT'
) X
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatTemplate
alter column SeatEnvelopeId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatTemplate_SeatEnvelopeId] ON [tbSeatTemplate] ([SeatEnvelopeId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatTemplate] add constraint FK_SeatTemplate_SeatEnvelope foreign key([SeatEnvelopeId]) references [tbSeatEnvelope] ([SeatEnvelopeId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.419</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSeatPerformanceCategory</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSeatPerformanceCategory]
(
	[PerformanceId] Uniqueidentifier NOT NULL,
	[SeatEnvelopeId] Uniqueidentifier NOT NULL,
	[AttributeItemId] Uniqueidentifier NOT NULL,
	[QuantityHeld] Integer NOT NULL,
	[QuantityReserved] Integer NOT NULL,
	[QuantityPaid] Integer NOT NULL,
	[QuantityFree] Integer NOT NULL,
	[QuantityMax] Integer NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatPerformanceCategory ADD CONSTRAINT PK_SeatPerformanceCategory PRIMARY KEY ([PerformanceId],[SeatEnvelopeId],[AttributeItemId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatPerformanceCategory_AttributeItemId] ON [tbSeatPerformanceCategory] ([AttributeItemId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatPerformanceCategory_SeatEnvelopeId] ON [tbSeatPerformanceCategory] ([SeatEnvelopeId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatPerformanceCategory] add constraint FK_SeatPerformanceCategory_Performance foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatPerformanceCategory] add constraint FK_SeatPerformanceCategory_SeatEnvelope foreign key([SeatEnvelopeId]) references [tbSeatEnvelope] ([SeatEnvelopeId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatPerformanceCategory] add constraint FK_SeatPerformanceCategory_AttributeItem foreign key([AttributeItemId]) references [tbAttributeItem] ([AttributeItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbSeatPerformanceCategory (
  PerformanceId,
  SeatEnvelopeId,
  AttributeItemId,
  QuantityHeld,
  QuantityReserved,
  QuantityPaid,
  QuantityFree,
  QuantityMax  
)
select
  S.PerformanceId,  
  SE.SeatEnvelopeId,  
  ST.AttributeItemId,  
  Sum(S.QuantityHeld),      
  Sum(S.QuantityReserved),  
  Sum(S.QuantityPaid),  
  Sum(S.QuantityFree),  
  Sum(S.QuantityMax)
from
  tbSeat S inner join  
  tbSeatTemplate ST on ST.SeatTemplateId=S.SeatTemplateId inner join  
  tbSeatEnvelope SE on SE.SeatEnvelopeCode='DEFAULT'  
group by
  S.PerformanceId,  
  SE.SeatEnvelopeId,  
  ST.AttributeItemId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.418</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSeatEnvelope</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSeatEnvelope]
(
	[SeatEnvelopeId] Uniqueidentifier NOT NULL,
	[SeatEnvelopeCode] Varchar(15) NOT NULL,
	[SeatEnvelopeName] Nvarchar(50) NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatEnvelope ADD CONSTRAINT PK_SeatEnvelope PRIMARY KEY ([SeatEnvelopeId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_SeatEnvelope_SeatEnvelopeCode] ON [tbSeatEnvelope] ([SeatEnvelopeCode] ) 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbSeatEnvelope (
  SeatEnvelopeId,  
  SeatEnvelopeCode,  
  SeatEnvelopeName  
)
values (
  newid(),  
  'DEFAULT',  
  'Default'
)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.417</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbSeat:
- QuantityFree
- QuantityTotal</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSeat
add
  QuantityFree int null,  
  QuantityMax int null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSeat
set QuantityMax=X_QuantityMax
from (
  select  
    SeatTemplateId as X_SeatTemplateId,    
    QuantityMax as X_QuantityMax   
  from tbSeatTemplate
) X
where SeatTemplateId=X_SeatTemplateId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSeat
set QuantityFree=QuantityMax-QuantityHeld-QuantityReserved

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeat
alter column QuantityFree int not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeat
alter column QuantityMax int not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.416</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create indexes:
- IX_SeatTemplate_SeatCategoryId
- IX_SeatTemplate_AttributeItemId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_SeatTemplate_SeatSectorId] ON [tbSeatTemplate] ([SeatSectorId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatTemplate_AttributeItemId] ON [tbSeatTemplate] ([AttributeItemId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.415</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor table tbSaleItemPackage</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbSaleItemPackage
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSaleItemPackage]
(
	[SaleItemId] Uniqueidentifier NOT NULL,
	[PackageProductId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemPackage ADD CONSTRAINT PK_SaleItemPackage PRIMARY KEY ([SaleItemId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemPackage_PackageProductId] ON [tbSaleItemPackage] ([PackageProductId]) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemPackage] add constraint FK_SaleItemPackage_SaleItem foreign key([SaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemPackage] add constraint FK_SaleItemPackage_Product foreign key([PackageProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.414</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbProductLinkOption</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProductLinkOption]
(
	[ProductId] Uniqueidentifier NOT NULL,
	[ChildProductId] Uniqueidentifier NOT NULL,
	[AttributeItemId] Uniqueidentifier NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductLinkOption ADD CONSTRAINT PK_ProductLinkOption PRIMARY KEY ([ProductId], [ChildProductId], [AttributeItemId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductLinkOption_ChildProductId] ON [tbProductLinkOption] ([ChildProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductLinkOption_AttributeItemId] ON [tbProductLinkOption] ([AttributeItemId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductLinkOption] add constraint FK_ProductLinkOption_ProductLink foreign key([ProductId],[ChildProductId]) references [tbProductLink] ([ProductId],[ChildProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductLinkOption] add constraint FK_ProductLinkOption_AttributeItem foreign key([AttributeItemId]) references [tbAttributeItem] ([AttributeItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.413</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbProductLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbProductLink
DROP CONSTRAINT PK_ProductLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_ProductLink_ProductId on tbProductLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductLink
drop column ProductLinkId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductLink
add PriorityOrder smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductLink
set PriorityOrder=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductLink
alter column PriorityOrder smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductLink ADD CONSTRAINT PK_ProductLink PRIMARY KEY ([ProductId], [ChildProductId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductLink_ChildProductId] ON [tbProductLink] ([ChildProductId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.412</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index [IX_PortfolioSlotLog_MembershipPointId]</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioSlotLog_MembershipPointId] ON [tbPortfolioSlotLog] ([MembershipPointId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.411</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tbSaleItemDiscount</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT> Create table [tbSaleItemDiscount]
(
	[SaleItemId] Uniqueidentifier NOT NULL,
	[PromoProductId] Uniqueidentifier NOT NULL,
	[DiscountAmount] Money NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemDiscount ADD CONSTRAINT PK_SaleItemDiscount PRIMARY KEY ([SaleItemId], [PromoProductId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemDiscount_PromoProductId] ON [tbSaleItemDiscount] ([PromoProductId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemDiscount] add constraint FK_SaleItemDiscount_SaleItem foreign key([SaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemDiscount] add constraint FK_SaleItemDiscount_Product foreign key([PromoProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.410</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tbResourceSchedule.DurationMins</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule
add DurationMins int null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbResourceSchedule
set DurationMins=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule
alter column DurationMins int not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.409</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add tbProduct.ResourceEndOfDay</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add ResourceEndOfDay bit null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.408</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add tbResourceSerial.HandOverScheduleId
- Refactor IX_ResourceSerial_PortfolioId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceSerial
add HandOverScheduleId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSerial_HandOverScheduleId] ON [tbResourceSerial] ([HandOverScheduleId] ) 
where HandOverScheduleId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSerial] add constraint FK_ResourceSerial_ResourceSchedule_HandOverScheduleId foreign key([HandOverScheduleId]) references [tbResourceSchedule] ([ResourceScheduleId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_ResourceSerial_PortfolioId on tbResourceSerial
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSerial_PortfolioId] ON [tbResourceSerial] ([PortfolioId] ) 
where PortfolioId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.407</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tbResourceSerial.PortfolioId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceSerial
add PortfolioId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSerial_PortfolioId] ON [tbResourceSerial] ([PortfolioId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSerial] add constraint FK_ResourceSerial_Portfolio foreign key([PortfolioId]) references [tbTicketMediaMatch] ([TicketMediaMatchId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.406</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add ResourceHoldId to PK_ResourceSchedule</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbResourceSchedule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule 
add ResourceScheduleId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbResourceSchedule DROP CONSTRAINT PK_ResourceSchedule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule ADD CONSTRAINT PK_ResourceSchedule PRIMARY KEY ([ResourceScheduleId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_ResourceSerialId] ON [tbResourceSchedule] ([ResourceSerialId] ,[DateTimeFrom] ,[DateTimeTo] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.405</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field to tbResourceSchedule
- HandOverTransactionId
- ReturnTransactionId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule
add
  HandOverTransactionId uniqueidentifier null,  
  ReturnTransactionId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_HandOverTransactionId] ON [tbResourceSchedule] ([HandOverTransactionId] ) 
where HandOverTransactionId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_ReturnTransactionId] ON [tbResourceSchedule] ([ReturnTransactionId] ) 
where ReturnTransactionId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add constraint FK_ResourceSchedule_Transaction_HandOverTransactionId foreign key([HandOverTransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add constraint FK_ResourceSchedule_Transaction_ReturnTransactionId foreign key([ReturnTransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.404</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>refactor tbResourceSchedule
- drop SaleId
- add SaleItemDetailId
- add TicketId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule drop FK_ResourceSchedule_Sale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_ResourceSchedule_SaleId on tbResourceSchedule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule
drop column SaleId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule
add
  SaleItemDetailId uniqueidentifier null,  
  TicketId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_SaleItemDetailId] ON [tbResourceSchedule] ([SaleItemDetailId] ) 
where SaleItemDetailId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_TicketId] ON [tbResourceSchedule] ([TicketId] ) 
where TicketId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add constraint FK_ResourceSchedule_SaleItemDetail foreign key([SaleItemDetailId]) references [tbSaleItemDetail] ([SaleItemDetailId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add constraint FK_ResourceSchedule_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.403</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbResourceSerial drops SaleItemDetailId and TicketId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceSerial drop FK_ResourceSerial_SaleItemDetail
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSerial drop FK_ResourceSerial_Ticket
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_ResourceSerial_SaleItemDetailId on tbResourceSerial
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_ResourceSerial_TicketId on tbResourceSerial
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSerial drop column SaleItemDetailId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSerial drop column TicketId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.402</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor index:
- IX_ResourceSerial_SaleItemDetailId
- IX_ResourceSerial_TicketId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_ResourceSerial_SaleItemDetail on tbResourceSerial
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_ResourceSerial_TicketId on tbResourceSerial
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSerial_SaleItemDetailId] ON [tbResourceSerial] ([SaleItemDetailId] ) 
where SaleItemDetailId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSerial_TicketId] ON [tbResourceSerial] ([TicketId] ) 
where TicketId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.401</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbResourceSerial.Enabled</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbResourceSerial
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSerial
add Enabled bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_ResourceSerial_ResourceTypeId on tbResourceSerial
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSerial_ResourceTypeId] ON [tbResourceSerial] ([ResourceTypeId] ,[Enabled] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.400</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbResourceSchedule</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbResourceSchedule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbResourceSchedule]
(
	[ResourceSerialId] Uniqueidentifier NOT NULL,
	[DateTimeFrom] Smalldatetime NOT NULL,
	[DateTimeTo] Smalldatetime NOT NULL,
	[ScheduleStatus] Smallint NOT NULL,
	[MainResource] Bit NOT NULL,
	[ResourceHoldId] Uniqueidentifier NOT NULL,
	[PerformanceId] Uniqueidentifier NULL,
	[ProductId] Uniqueidentifier NULL,
	[SaleId] Uniqueidentifier NULL,
	[HoldExpire] Smalldatetime NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule ADD CONSTRAINT PK_ResourceSchedule PRIMARY KEY ([ResourceSerialId],[DateTimeFrom],[DateTimeTo])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_PerformanceId] ON [tbResourceSchedule] ([PerformanceId] ) 
where PerformanceId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_ProductId] ON [tbResourceSchedule] ([ProductId] ) 
where ProductId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_SaleId] ON [tbResourceSchedule] ([SaleId] ) 
where SaleId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_ResourceHoldId] ON [tbResourceSchedule] ([ResourceHoldId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_HoldExpire] ON [tbResourceSchedule] ([HoldExpire] ) 
where HoldExpire is not null


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add constraint FK_ResourceSchedule_Sale foreign key([SaleId]) references [tbSale] ([SaleId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add constraint FK_ResourceSchedule_ResourceSerial foreign key([ResourceSerialId]) references [tbResourceSerial] ([ResourceSerialId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add constraint FK_ResourceSchedule_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add constraint FK_ResourceSchedule_Performance foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.399</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbResourceSerial</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbResourceSerial
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbResourceSerial]
(
	[ResourceSerialId] Uniqueidentifier NOT NULL,
	[ResourceTypeId] Uniqueidentifier NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[ResourceSerialCode] Varchar(50) NULL,
	[SaleItemDetailId] Uniqueidentifier NULL,
	[TicketId] Uniqueidentifier NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSerial ADD CONSTRAINT PK_ResourceSerial PRIMARY KEY ([ResourceSerialId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ResourceSerial_ResourceSerialCode] ON [tbResourceSerial] ([ResourceTypeId] ,[ResourceSerialCode] ) 
where ResourceSerialCode is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSerial_EntityId] ON [tbResourceSerial] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSerial_ResourceTypeId] ON [tbResourceSerial] ([ResourceTypeId]) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSerial_SaleItemDetail] ON [tbResourceSerial] ([SaleItemDetailId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSerial_TicketId] ON [tbResourceSerial] ([TicketId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSerial] add constraint FK_ResourceSerial_ResourceType foreign key([ResourceTypeId]) references [tbResourceType] ([ResourceTypeId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSerial] add constraint FK_ResourceSerial_SaleItemDetail foreign key([SaleItemDetailId]) references [tbSaleItemDetail] ([SaleItemDetailId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSerial] add constraint FK_ResourceSerial_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.398</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor index IX_ResourceSchedule_ResourceTypeId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_ResourceSchedule_ResourceTypeId on tbResourceSchedule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_ResourceTypeId] ON [tbResourceSchedule] ([ResourceTypeId] ,[DateTimeFrom] ,[DateTimeTo] ) 
 INCLUDE (EntityId,Quantity)

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.397</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop tbResourceType.AutoSelect
Create tbResourceConfig.AutoSelect</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceType
drop column AutoSelect
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceConfig
add AutoSelect bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbResourceConfig
set AutoSelect=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceConfig
alter column AutoSelect bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.396</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tbResourceSerial</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbResourceSerial]
(
	[ResourceSerialCode] Varchar(50) NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSerial ADD CONSTRAINT PK_ResourceSerial PRIMARY KEY ([ResourceSerialCode])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSerial_EntityId] ON [tbResourceSerial] ([EntityId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.395</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tbResourceType.SerialTrack</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceType
add SerialTrack smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbResourceType
set SerialTrack=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceType
alter column SerialTrack smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.394</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbSaleItem.QuantityUnit</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItem
add QuantityUnit smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSaleItem
set QuantityUnit=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItem
alter column QuantityUnit smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.393</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tbSaleItemResourceHold</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleItemResourceHold]
(
	[SaleItemId] Uniqueidentifier NOT NULL,
	[ResourceHoldId] Uniqueidentifier NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemResourceHold ADD CONSTRAINT PK_SaleItemResourceHold PRIMARY KEY ([SaleItemId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemResourceHold_ResourceHoldId] ON [tbSaleItemResourceHold] ([ResourceHoldId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemResourceHold] add constraint FK_SaleItemResourceSchedule_SaleItem foreign key([SaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.392</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Replace tbResourceSchedule.HoldId with ResourceHoldId (mandatory)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbResourceSchedule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_ResourceSchedule_HoldId on tbResourceSchedule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule
drop column HoldId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule
add ResourceHoldId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_ResourceHoldId] ON [tbResourceSchedule] ([ResourceHoldId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.391</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create IX_SaleItemDetail_PortfolioId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemDetail_PortfolioId] ON [tbSaleItemDetail] ([TicketMediaMatchId] ) 
where TicketMediaMatchId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.390</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbResourceSchedule</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbResourceSchedule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbResourceSchedule]
(
	[EntityId] Uniqueidentifier NOT NULL,
	[DateTimeFrom] Smalldatetime NOT NULL,
	[DateTimeTo] Smalldatetime NOT NULL,
	[ScheduleSerial] Smallint NOT NULL,
	[EntityType] Smallint NOT NULL,
	[ScheduleStatus] Smallint NOT NULL,
	[Quantity] Smallint NOT NULL,
	[MainResource] Bit NOT NULL,
	[ResourceTypeId] Uniqueidentifier NOT NULL,
	[PerformanceId] Uniqueidentifier NULL,
	[ProductId] Uniqueidentifier NULL,
	[SaleId] Uniqueidentifier NULL,
	[PortfolioId] Uniqueidentifier NULL,
	[HoldId] Uniqueidentifier NULL,
	[HoldExpire] Smalldatetime NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule ADD CONSTRAINT PK_ResourceSchedule PRIMARY KEY ([EntityId],[DateTimeFrom],[DateTimeTo],[ScheduleSerial])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_ResourceTypeId] ON [tbResourceSchedule] ([ResourceTypeId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_PerformanceId] ON [tbResourceSchedule] ([PerformanceId] ) 
where PerformanceId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_ProductId] ON [tbResourceSchedule] ([ProductId] ) 
where ProductId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_SaleId] ON [tbResourceSchedule] ([SaleId] ) 
where SaleId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_PortfolioId] ON [tbResourceSchedule] ([PortfolioId] ) 
where PortfolioId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_HoldId] ON [tbResourceSchedule] ([HoldId] ) 
where HoldId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_HoldExpire] ON [tbResourceSchedule] ([HoldExpire] ) 
where HoldExpire is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add constraint FK_ResourceSchedule_ResourceType foreign key([ResourceTypeId]) references [tbResourceType] ([ResourceTypeId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add constraint FK_ResourceSchedule_Performance foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add constraint FK_ResourceSchedule_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add constraint FK_ResourceSchedule_Sale foreign key([SaleId]) references [tbSale] ([SaleId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add constraint FK_ResourceSchedule_Portfolio foreign key([PortfolioId]) references [tbTicketMediaMatch] ([TicketMediaMatchId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.389</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbResourceSchedule add:
- HoldId
- HoldExpire</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule
add
  HoldId uniqueidentifier null,  
  HoldExpire smalldatetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_HoldId] ON [tbResourceSchedule] ([HoldId] ) 
where HoldId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_HoldExpire] ON [tbResourceSchedule] ([HoldExpire] ) 
where HoldExpire is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.388</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbProduct2DocTemplate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProduct2DocTemplate]
(
	[ProductId] Uniqueidentifier NOT NULL,
	[DocTemplateId] Uniqueidentifier NOT NULL,
	[DocTemplateType] Smallint NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct2DocTemplate ADD CONSTRAINT PK_Product2DocTemplate PRIMARY KEY ([ProductId],[DocTemplateId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product2DocTemplate_DocTemplateId] ON [tbProduct2DocTemplate] ([DocTemplateId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct2DocTemplate] add constraint FK_Porduct2DocTemplate_DocTemplate foreign key([DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct2DocTemplate] add constraint FK_Porduct2DocTemplate_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.387</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbProduct

drop:
- StartMinStepValue
- StartMinStepType

add:
- MinStepQuantity
- TimeRounding</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
drop column StartMinStepValue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
drop column StartMinStepType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add
  MinStepQuantity smallint null,  
  TimeRounding smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.386</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbProduct:
- PriceStepValue
- PriceStepType
- DefaultStepQuantity
- StartMinStepValue
- StartMinStepType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add
  PriceStepValue smallint null,
  PriceStepType smallint null,
  DefaultStepQuantity smallint null,
  StartMinStepValue smallint null,
  StartMinStepType smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.385</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drops tbEvent2ResourceType and creates tbResourceConfig</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbEvent2ResourceType 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbResourceConfig]
(
	[EntityId] Uniqueidentifier NOT NULL,
	[ResourceTypeId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[Quantity] Smallint NOT NULL,
	[Mandatory] Bit NOT NULL,
	[Main] Bit NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceConfig ADD CONSTRAINT PK_ResourceConfig PRIMARY KEY ([EntityId],[ResourceTypeId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceConfig_ResourceTypeId] ON [tbResourceConfig] ([ResourceTypeId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceConfig] add constraint FK_ResourceConfig_ResourceType foreign key([ResourceTypeId]) references [tbResourceType] ([ResourceTypeId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.384</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbResourceSkillLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbResourceSkillLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbResourceSkillLink]
(
	[ResourceSkillId] Uniqueidentifier NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSkillLink ADD CONSTRAINT PK_ResourceSkillLink PRIMARY KEY ([ResourceSkillId],[EntityId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSkillLink_EntityId] ON [tbResourceSkillLink] ([EntityId] ) 
 INCLUDE (EntityType)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSkillLink] add constraint FK_ResourceSkillLink_ResourceSkill foreign key([ResourceSkillId]) references [tbResourceSkill] ([ResourceSkillId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.383</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor table tbResourceSchedule</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbResourceSchedule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbResourceSchedule]
(
	[EntityId] Uniqueidentifier NOT NULL,
	[DateTimeFrom] Smalldatetime NOT NULL,
	[DateTimeTo] Smalldatetime NOT NULL,
	[EntityType] Smallint NOT NULL,
	[ScheduleStatus] Smallint NOT NULL,
	[Quantity] Smallint NOT NULL,
	[MainResource] Bit NOT NULL,
	[ResourceTypeId] Uniqueidentifier NOT NULL,
	[PerformanceId] Uniqueidentifier NULL,
	[ProductId] Uniqueidentifier NULL,
	[SaleId] Uniqueidentifier NULL,
	[PortfolioId] Uniqueidentifier NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule ADD CONSTRAINT PK_ResourceSchedule PRIMARY KEY ([EntityId],[DateTimeFrom],[DateTimeTo])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_ResourceTypeId] ON [tbResourceSchedule] ([ResourceTypeId] ) 

                           
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_PerformanceId] ON [tbResourceSchedule] ([PerformanceId] ) 
where PerformanceId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_ProductId] ON [tbResourceSchedule] ([ProductId] ) 
where ProductId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_SaleId] ON [tbResourceSchedule] ([SaleId] ) 
where SaleId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_PortfolioId] ON [tbResourceSchedule] ([PortfolioId] ) 
where PortfolioId is not null


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add constraint FK_ResourceSchedule_ResourceType foreign key([ResourceTypeId]) references [tbResourceType] ([ResourceTypeId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add constraint FK_ResourceSchedule_Portfolio foreign key([PortfolioId]) references [tbTicketMediaMatch] ([TicketMediaMatchId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add constraint FK_ResourceSchedule_Sale foreign key([SaleId]) references [tbSale] ([SaleId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add constraint FK_ResourceSchedule_Performance foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add constraint FK_ResourceSchedule_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.382</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbProduct
-add field AutoGenDocStep
-add field AutoGenDocActivation</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add AutoGenDocStep Smallint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add AutoGenDocActivation Smallint NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.381</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbProduct
-rename column WaitherTemplateId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Product_WaiverTemplateId ON tbProduct

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct drop constraint FK_Product_DocTemplate_WaiverTemplateId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct drop column WaiverTemplateId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add AutoGenDocTemplateId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_DocTemplate_AutoGenDocTemplateId foreign key([AutoGenDocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_AutoGenDocTemplateId] ON [tbProduct] ([AutoGenDocTemplateId] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.380</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Makes UserAccountId and BoxId nullable on many tables</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSale
alter column UserAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Sale_UserAccountId on tbSale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_UserAccountId] ON [tbSale] ([UserAccountId] ) 
where UserAccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column UserAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index [IX_Transaction_UserAccountId] on tbTransaction
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Transaction_UserAccountId] ON [tbTransaction] ([UserAccountId] ) 
where UserAccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column BoxId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Transaction_BoxId on tbTransaction
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Transaction_BoxId] ON [tbTransaction] ([BoxId] ) 
where BoxId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLock
alter column UserAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Lock_WorkstationId] ON [tbLock] ([WorkstationId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Lock_UserAccountId] ON [tbLock] ([UserAccountId] ) 
where UserAccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbHistoryLog
alter column UserAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_HistoryLog_WorkstationId] ON [tbHistoryLog] ([WorkstationId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_HistoryLog_UserAccountId] ON [tbHistoryLog] ([UserAccountId] ) 
where UserAccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbNote
alter column UserAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Note_WorkstationId] ON [tbNote] ([WorkstationId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Note_UserAccountId] ON [tbNote] ([UserAccountId] ) 
where UserAccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAsyncProcess
alter column UserAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_AsyncProcess_UserAccountId on tbAsyncProcess
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AsyncProcess_UserAccountId] ON [tbAsyncProcess] ([UserAccountId] ) 
where UserAccountId is not null


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatHold
alter column UserAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatHold_UserAccountId] ON [tbSeatHold] ([UserAccountId] ) 
where UserAccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatHold_PerformanceSetId] ON [tbSeatHold] ([PerformanceSetId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatHold_SeatSectorId] ON [tbSeatHold] ([SeatSectorId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatHold_AttributeItemId] ON [tbSeatHold] ([AttributeItemId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.379</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Drop column tbAccountDetail.ResourceQuantity
- Create table tbAccountResource
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
drop column ResourceQuantity
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbAccountResource]
(
	[AccountId] Uniqueidentifier NOT NULL,
	[ResourceTypeId] Uniqueidentifier NOT NULL,
	[ResourceQuantity] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountResource ADD CONSTRAINT PK_AccountResource PRIMARY KEY ([AccountId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccountResource_ResourceTypeId] ON [tbAccountResource] ([ResourceTypeId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountResource] add constraint FK_AccountResource_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountResource] add constraint FK_AccountResource_ResourceType foreign key([ResourceTypeId]) references [tbResourceType] ([ResourceTypeId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.378</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbDocContext</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbDocContext]
(
	[DocTemplateId] Uniqueidentifier NOT NULL,
	[ContextType] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocContext ADD CONSTRAINT PK_DocContext PRIMARY KEY ([DocTemplateId],[ContextType])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_DocContext_ContextType] ON [tbDocContext] ([ContextType] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDocContext] add constraint FK_DocContext_DocTemplate foreign key([DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.377</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields:
- tbTicket.Settled
- tbProduct.FinanceGroupTagId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add Settled bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicket
set Settled=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
alter column Settled bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add FinanceGroupTagId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_FinanceGroupTagId] ON [tbProduct] ([FinanceGroupTagId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_Tag_FinanceGroupTagId foreign key([FinanceGroupTagId]) references [tbTag] ([TagId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.376</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>initialize tbPlugin.PluginDefault (default payment methods)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbPlugin
set PluginDefault=1
from (
  select 
    P.PluginId as X_PluginId,
    D.ClassAlias as X_ClassAlias,
    (
      select top 1 XP.PluginId
      from tbPlugin XP
      where XP.DriverId=P.DriverId
      order by
        XP.PluginEnabled desc,
        XP.PriorityOrder
    ) as X_DefaultPluginId
  from 
    tbPlugin P inner join
    tbDriver D on D.DriverId=P.DriverId
  where
    D.DriverType&gt;1000 and 
	D.DriverType&lt;2000
) X
where
  PluginId=X_DefaultPluginId 
  

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.375</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbProduct
- WaiverFormDocTempId

Add missing indexes on tbProduct</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add WaiverTemplateId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_DocTemplate_WaiverTemplateId foreign key([WaiverTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_CategoryId] ON [tbProduct] ([CategoryId]) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_DocTemplateId] ON [tbProduct] ([DocTemplateId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_PrintGroupTagId] ON [tbProduct] ([PrintGroupTagId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_AccountCategoryId] ON [tbProduct] ([AccountCategoryId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_WaiverTemplateId] ON [tbProduct] ([WaiverTemplateId] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.374</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Reset tbAccountFinance totals</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbPaymentCredit
set CreditStatus=3/*paid*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccountFinance
set
  TotalOpen=0,
  TotalPaid=(
    select Coalesce(Sum(P.PaymentAmount), 0)
    from    
      tbPaymentCredit PC inner join      
      tbPayment P on P.PaymentId=PC.PaymentId
    where
	  PC.AccountId=tbAccountFinance.AccountId and
	  PC.CreditStatus=3
  ),  
  AutoPayCredits=1

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.373</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbSaleItemPackage</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleItemPackage]
(
	[SaleItemId] Uniqueidentifier NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemPackage ADD CONSTRAINT PK_SaleItemPackage PRIMARY KEY ([SaleItemId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemPackage_ProductId] ON [tbSaleItemPackage] ([ProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemPackage] add constraint FK_SaleItemPackage_SaleItem foreign key([SaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemPackage] add constraint FK_SaleItemPackage_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.372</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.PackageExplode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add PackageExplode bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set PackageExplode=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column PackageExplode bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.371</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create missing indexes on tbPayment</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Payment_PluginId] ON [tbPayment] ([PluginId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Payment_AccountId] ON [tbPayment] ([AccountId] ) 
where AccountId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.370</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add fiield tbProduct.WritePerformanceAccountId
- Create table tbPerformanceDetail</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add WritePerformanceAccountId bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set WritePerformanceAccountId=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column WritePerformanceAccountId bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPerformanceDetail]
(
	[PerformanceId] Uniqueidentifier NOT NULL,
	[AccountId] Uniqueidentifier NULL,
	[PerformanceName] Nvarchar(50) NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformanceDetail ADD CONSTRAINT PK_PerformanceDetail PRIMARY KEY ([PerformanceId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PerformanceDetail_AccountId] ON [tbPerformanceDetail] ([AccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPerformanceDetail] add constraint FK_PerformanceDetail_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPerformanceDetail] add constraint FK_PerformanceDetail_Performance foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 


</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.369</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor table tbAccount2Role</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccount2Role drop constraint PK_Account2Role
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccount2Role drop column Account2RoleId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccount2Role ADD CONSTRAINT PK_Account2Role PRIMARY KEY ([AccountId],[RoleId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Accounnt2Role_RoleId] ON [tbAccount2Role] ([RoleId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.368</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop tbAccountFinance.LicenseId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountFinance drop constraint PK_AccountFinance


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance ADD CONSTRAINT PK_AccountFinance PRIMARY KEY ([AccountId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @foreign_key_name nvarchar(max);
DECLARE @dropstmt nvarchar(max);

SELECT @foreign_key_name = f.name
  FROM sys.foreign_keys AS f
 INNER JOIN sys.foreign_key_columns AS fc 
    ON f.object_id = fc.constraint_object_id 
 WHERE f.parent_object_id = object_id(N'[dbo].[tbAccountFinance]')
   AND f.referenced_object_id = object_id(N'[dbo].[tbLicense]')
   AND COL_NAME(fc.referenced_object_id, fc.referenced_column_id) = 'LicenseId';

if (len(@foreign_key_name) &gt; 0) 
begin
  select @dropstmt = 'ALTER TABLE [dbo].[tbAccountFinance] DROP CONSTRAINT [' + @foreign_key_name + ']';
  execute sp_executesql @dropstmt
end;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccountFinance_SaleChannelId] ON [tbAccountFinance] ([SaleChannelId] ) 
where SaleChannelId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.367</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor table tbPaymentCredit</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE @foreign_key_name nvarchar(max);
DECLARE @dropstmt nvarchar(max);

SELECT @foreign_key_name = f.name
  FROM sys.foreign_keys AS f
 INNER JOIN sys.foreign_key_columns AS fc 
    ON f.object_id = fc.constraint_object_id 
 WHERE f.parent_object_id = object_id(N'[dbo].[tbPaymentCredit]')
   AND f.referenced_object_id = object_id(N'[dbo].[tbLicense]')
   AND COL_NAME(fc.referenced_object_id, fc.referenced_column_id) = 'LicenseId';

if (len(@foreign_key_name) &gt; 0) 
begin
  select @dropstmt = 'ALTER TABLE [dbo].[tbPaymentCredit] DROP CONSTRAINT [' + @foreign_key_name + ']';
  execute sp_executesql @dropstmt
end;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentCredit
drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentCredit_AccountId] ON [tbPaymentCredit] ([AccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentCredit_VoucherId] ON [tbPaymentCredit] ([VoucherId] ) 
where VoucherId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentCredit_SettleTransactionId] ON [tbPaymentCredit] ([SettleTransactionId] ) 
where SettleTransactionId is not null


</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.366</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Recalc tbAccountFinance.AdvancedPayment</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbAccountFinance
set AdvancedPayment=0
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.365</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbAccountDepositLog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbAccountDepositLog]
(
	[AccountId] Uniqueidentifier NOT NULL,
	[LogFiscalDate] date NOT NULL,
	[LogSerial] Smallint NOT NULL,
	[LogAmount] Money NOT NULL,
	[DepositBalance] Money NOT NULL,
	[TransactionId] Uniqueidentifier NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDepositLog ADD CONSTRAINT PK_AccountDepositLog PRIMARY KEY ([AccountId],[LogFiscalDate],[LogSerial])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccountDepositLog_TransactionId] ON [tbAccountDepositLog] ([TransactionId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountDepositLog] add constraint FK_AccountDepositLog_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountDepositLog] add constraint FK_AccountDepositLog_TransactionId foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.364</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor table tbDocTemplate2Driver</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDocTemplate2Driver
drop constraint PK_DocTemplate2Driver
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocTemplate2Driver
drop column DocTemplate2DriverId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocTemplate2Driver ADD CONSTRAINT PK_DocTemplate2Driver PRIMARY KEY ([DocTemplateId],[PriorityOrder],[DriverId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_DocTemplate2Driver_DriverId] ON [tbDocTemplate2Driver] ([DriverId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.363</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields:
- tbPlugin.DeviceAlias
- tbDocTemplate2Driver.DeviceAlias</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPlugin
add DeviceAlias varchar(15) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocTemplate2Driver
add DeviceAlias varchar(15) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.362</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbPayment.PaymentCount</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>if not exists(select * from sys.columns where Name = N'PaymentCount' and Object_ID = Object_ID(N'tbPayment'))
begin
  exec sp_executesql N'alter table tbPayment add PaymentCount smallint null';

  exec sp_executesql N'update tbPayment set PaymentCount=1';

  exec sp_executesql N'alter table tbPayment alter column PaymentCount smallint not null';
end




</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.361</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTransactionItem.QtyPaid</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>if not exists(select * from sys.columns where Name = N'QtyPaid' and Object_ID = Object_ID(N'tbTransactionItem'))
begin
  exec sp_executesql N'alter table tbTransactionItem add QtyPaid smallint null';

  exec sp_executesql N'update tbTransactionItem set QtyPaid=0';

  exec sp_executesql N'alter table tbTransactionItem alter column QtyPaid smallint not null';
end


</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.360</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbMetaField.MetaFieldCode from 10 to 15</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMetaField
alter column MetaFieldCode varchar(15) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.359</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbOwner</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbOwner]
(
	[OwnerId] Smallint NOT NULL,
	[ParentOwnerId] Smallint NULL,
	[OwnerCode] Varchar(3) NOT NULL,
	[OwnerName] Nvarchar(50) NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbOwner ADD CONSTRAINT PK_Owner PRIMARY KEY ([OwnerId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Owner_Code] ON [tbOwner] ([OwnerCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOwner] add constraint FK_Owner_Parent foreign key([ParentOwnerId]) references [tbOwner] ([OwnerId])  on update no action on delete no action 


</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.358</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Recfactor tbActionLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbActionLink
drop constraint PK_ActionLink

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbActionLink
drop column ActionLinkId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbActionLink ADD CONSTRAINT PK_ActionLink PRIMARY KEY ([ActionId],[ActionLinkType],[EntityId])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.357</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop table tbAccountTree</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbAccountTree
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.356</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbAccount
- CategoryId
- ParentAccountId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccount
add CategoryId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccount
add ParentAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccount
set
  CategoryId=X_CategoryId,  
  ParentAccountId=X_ParentAccountId    
from (
  select  
    LicenseId as X_LicenseId,
    AccountId as X_AccountId,    
    CategoryId as X_CategoryId,    
    ParentAccountId as X_ParentAccountId    
  from  
    tbAccountTree
) X
where
  LicenseId=X_LicenseId and  
  AccountId=X_AccountId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccount
set
  CategoryId=X_CategoryId    
from (
  select distinct 
    CategoryId as X_CategoryId,    
    EntityType as X_EntityType    
  from  
    tbCategory    
  where  
    ParentCategoryId is null
) X
where
  CategoryId is null and  
  EntityType=X_EntityType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccount] add constraint FK_Account_Category foreign key([CategoryId]) references [tbCategory] ([CategoryId])  on update no action on delete no action 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccount] add constraint FK_Account_Parent foreign key([ParentAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Account_CategoryId] ON [tbAccount] ([CategoryId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Account_Parent] ON [tbAccount] ([ParentAccountId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.355</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbEvent.TracePortfolioInPerformance
Create table tbPortfolioInPerformance</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEvent
add TracePortfolioInPerformance bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbEvent
set TracePortfolioInPerformance=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
alter column TracePortfolioInPerformance bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPortfolioInPerformance]
(
	[PortfolioId] Uniqueidentifier NOT NULL,
	[PerformanceId] Uniqueidentifier NOT NULL,
	[Inside] Bit NOT NULL,
	[FirstEntryTime] Smalldatetime NOT NULL,
	[LastEntryTime] Smalldatetime NOT NULL,
	[LastExitTime] Smalldatetime NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioInPerformance ADD CONSTRAINT PK_PortfolioInPerformance PRIMARY KEY ([PortfolioId],[PerformanceId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioInPerformance_PerformanceId] ON [tbPortfolioInPerformance] ([PortfolioId] ,[PerformanceId] ,[Inside]) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPortfolioInPerformance] add constraint FK_PortfolioInPerformance_Portfolio foreign key([PortfolioId]) references [tbTicketMediaMatch] ([TicketMediaMatchId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPortfolioInPerformance] add constraint FK_PortfolioInPerformance_Performance foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.354</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbMembershipPoint.MembershipPointCode from 10 to 15</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMembershipPoint
alter column MembershipPointCode varchar(15) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.353</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields:
  - tbTicketMediaMatch.Settled
  - tbPortfolioSlotLog.SettleTransactionId

Add indexes:
  - IX_PortfolioSlotLog_SettleTransactionId
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketMediaMatch
add Settled bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketMediaMatch
set Settled=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketMediaMatch
alter column Settled bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotLog
add SettleTransactionId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPortfolioSlotLog] add constraint FK_PortfolioSlotLog_SettleTransactionId foreign key([SettleTransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioSlotLog_SettleTransactionId] ON [tbPortfolioSlotLog] ([SettleTransactionId] ,[PortfolioId] ,[MembershipPointId] ) 
where SettleTransactionId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.352</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbSale.SaleFlowType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSale
add SaleFlowType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSale
set SaleFlowType=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale
alter column SaleFlowType smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.351</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Convert tbTicket.EntitlementData from 'ntext' to 'text' if needed</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @dt varchar(max);
select @dt=DATA_TYPE from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME='tbTicket' AND COLUMN_NAME='EntitlementData';

if (@dt = 'ntext') 
begin
  alter table tbTicket drop column EntitlementData;
  alter table tbTicket add EntitlementData text null;
end
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.350</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbTicketMediaMatch
- PortfolioGroupId
- MainPortfolio</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Portfolio_AccountId on tbTicketMediaMatch
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketMediaMatch
add PortfolioGroupId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketMediaMatch
add MainPortfolio bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketMediaMatch
set MainPortfolio=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketMediaMatch
alter column MainPortfolio bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Portfolio_AccountId] ON [tbTicketMediaMatch] ([AccountId] ,[MainPortfolio] ) 
where AccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Portfolio_PortfolioGroupId] ON [tbTicketMediaMatch] ([PortfolioGroupId] ) 
where PortfolioGroupId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.349</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbMedia.PrintDateTime: datetime -&gt; smalldatetime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMedia
alter column PrintDateTime smalldatetime null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.348</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename #EXTRATIME</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbProduct
set ProductName='Time Based Charges'
where ProductCode='#EXTRATIME'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.347</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop tbTicket fields:
- SaleChannelId
- PerformanceTypeId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE @foreign_key_name nvarchar(max);
DECLARE @dropstmt nvarchar(max);

SELECT @foreign_key_name = f.name
  FROM sys.foreign_keys AS f
 INNER JOIN sys.foreign_key_columns AS fc 
    ON f.object_id = fc.constraint_object_id 
 WHERE f.parent_object_id = object_id(N'[dbo].[tbTicket]')
   AND f.referenced_object_id = object_id(N'[dbo].[tbSaleChannel]')
   AND COL_NAME(fc.referenced_object_id, fc.referenced_column_id) = 'SaleChannelId';

if (len(@foreign_key_name) &gt; 0) 
begin
  select @dropstmt = 'ALTER TABLE [dbo].[tbTicket] DROP CONSTRAINT [' + @foreign_key_name + ']';
  execute sp_executesql @dropstmt
end;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
drop column SaleChannelId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @foreign_key_name nvarchar(max);
DECLARE @dropstmt nvarchar(max);

SELECT @foreign_key_name = f.name
  FROM sys.foreign_keys AS f
 INNER JOIN sys.foreign_key_columns AS fc 
    ON f.object_id = fc.constraint_object_id 
 WHERE f.parent_object_id = object_id(N'[dbo].[tbTicket]')
   AND f.referenced_object_id = object_id(N'[dbo].[tbPerformanceType]')
   AND COL_NAME(fc.referenced_object_id, fc.referenced_column_id) = 'PerformanceTypeId';

if (len(@foreign_key_name) &gt; 0) 
begin
  select @dropstmt = 'ALTER TABLE [dbo].[tbTicket] DROP CONSTRAINT [' + @foreign_key_name + ']';
  execute sp_executesql @dropstmt
end;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
drop column PerformanceTypeId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.346</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop column tbSaleItem.OptionsHash</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItem
drop column OptionsHash
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.345</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop field tbSaleItem.SaleChannelId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE @foreign_key_name nvarchar(max);
DECLARE @dropstmt nvarchar(max);

SELECT @foreign_key_name = f.name
  FROM sys.foreign_keys AS f
 INNER JOIN sys.foreign_key_columns AS fc 
    ON f.object_id = fc.constraint_object_id 
 WHERE f.parent_object_id = object_id(N'[dbo].[tbSaleItem]')
   AND f.referenced_object_id = object_id(N'[dbo].[tbSaleChannel]')
   AND COL_NAME(fc.referenced_object_id, fc.referenced_column_id) = 'SaleChannelId';

if (len(@foreign_key_name) &gt; 0) 
begin
  select @dropstmt = 'ALTER TABLE [dbo].[tbSaleItem] DROP CONSTRAINT [' + @foreign_key_name + ']';
  execute sp_executesql @dropstmt
end;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItem
drop column SaleChannelId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.344</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add field tbSale.SaleChannelId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSale
add SaleChannelId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSale] add constraint FK_Sale_SaleChannel foreign key([SaleChannelId]) references [tbSaleChannel] ([SaleChannelId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_SaleChannelId] ON [tbSale] ([SaleChannelId] ) 
where SaleChannelId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.343</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields:
- tbMetaField.SearchWeight
- tbFullText.SearchWeight</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMetaField
add SearchWeight tinyint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbFullText
add SearchWeight tinyint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbFullText
set SearchWeight=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbFullText
alter column SearchWeight tinyint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.342</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop field tbTicketUsage.ValueProQuota</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
drop column ValueProQuota
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.341</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tables:
- tbPortfolioSlot
- tbPortfolioSlotLog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbPortfolioSlotLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbPortfolioSlot
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPortfolioSlot]
(
	[PortfolioId] Uniqueidentifier NOT NULL,
	[MembershipPointId] Uniqueidentifier NOT NULL,
	[PortfolioSlotType] Tinyint NOT NULL,
	[SlotBalance] Money NOT NULL,
	[SlotCreditLimit] Money NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlot ADD CONSTRAINT PK_PortfolioSlot PRIMARY KEY ([PortfolioId],[MembershipPointId],[PortfolioSlotType])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioSlot_MembershipPointId] ON [tbPortfolioSlot] ([MembershipPointId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPortfolioSlot] add constraint FK_PortfolioSlot_MembershipPoint foreign key([MembershipPointId]) references [tbMembershipPoint] ([MembershipPointId])  on update no action on delete no action 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPortfolioSlotLog]
(
	[PortfolioId] Uniqueidentifier NOT NULL,
	[MembershipPointId] Uniqueidentifier NOT NULL,
	[PortfolioSlotType] Tinyint NOT NULL,
	[LogFiscalDate] date NOT NULL,
	[LogSerial] Smallint NOT NULL,
	[LogDateTime] Smalldatetime NOT NULL,
	[LogAmount] Money NOT NULL,
	[EntityType] Smallint NULL,
	[EntityId] Uniqueidentifier NULL,
	[LogNote] ntext
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotLog ADD CONSTRAINT PK_PortfolioSlotLog PRIMARY KEY ([PortfolioId],[MembershipPointId],[PortfolioSlotType],[LogFiscalDate],[LogSerial])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPortfolioSlotLog] add constraint FK_PortfolioSlotLog_PortfolioSlot foreign key([PortfolioId],[MembershipPointId],[PortfolioSlotType]) references [tbPortfolioSlot] ([PortfolioId],[MembershipPointId],[PortfolioSlotType])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.340</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop table tbPortfolioLedger</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbPortfolioLedger
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.339</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop fields WalletBalance and PointsBalance from tbTicketMediaMatch</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketMediaMatch
drop column WalletBalance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketMediaMatch
drop column PointsBalance
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.338</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbPortfolioSlotLot</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbPortfolioSlotLog]
(
	[PortfolioId] Uniqueidentifier NOT NULL,
	[MembershipPointId] Uniqueidentifier NOT NULL,
	[LogFiscalDate] date NOT NULL,
	[LogSerial] Smallint NOT NULL,
	[LogDateTime] Smalldatetime NOT NULL,
	[LogAmount] Money NOT NULL,
	[EntityType] Smallint NULL,
	[EntityId] Uniqueidentifier NULL,
	[LogNote] ntext
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotLog ADD CONSTRAINT PK_PortfolioSlotLog PRIMARY KEY ([PortfolioId],[MembershipPointId],[LogFiscalDate],[LogSerial])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPortfolioSlotLog] add constraint FK_PortfolioSlotLog_PortfolioSlot foreign key([PortfolioId],[MembershipPointId]) references [tbPortfolioSlot] ([PortfolioId],[MembershipPointId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.337</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbPortfolioSlot</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbPortfolioSlot]
(
	[PortfolioId] Uniqueidentifier NOT NULL,
	[MembershipPointId] Uniqueidentifier NOT NULL,
	[SlotBalance] Money NOT NULL,
	[SlotCreditLimit] Money NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlot ADD CONSTRAINT PK_PortfolioSlot PRIMARY KEY ([PortfolioId],[MembershipPointId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioSlot_MembershipPointId] ON [tbPortfolioSlot] ([MembershipPointId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPortfolioSlot] add constraint FK_PortfolioSlot_MembershipPoint foreign key([MembershipPointId]) references [tbMembershipPoint] ([MembershipPointId])  on update no action on delete no action 


</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.336</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbMembershipPoint</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbMembershipPoint]
(
	[MembershipPointId] Uniqueidentifier NOT NULL,
	[ParentMembershipPointId] Uniqueidentifier NULL,
	[MembershipPointCode] Varchar(10) NOT NULL,
	[MembershipPointName] Nvarchar(50) NOT NULL,
	[Active] Bit NOT NULL,
	[SystemCode] Bit NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMembershipPoint ADD CONSTRAINT PK_MembershipPoint PRIMARY KEY ([MembershipPointId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_MembershipPoint_Code] ON [tbMembershipPoint] ([MembershipPointCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMembershipPoint] add constraint FK_MembershipPoint_Parent foreign key([ParentMembershipPointId]) references [tbMembershipPoint] ([MembershipPointId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.335</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>alter tbTicketUsage
- Remove FK AccessPoint
-Add FK Workstation</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE @foreign_key_name nvarchar(max);
DECLARE @dropstmt nvarchar(max);

SELECT @foreign_key_name = f.name
  FROM sys.foreign_keys AS f
 INNER JOIN sys.foreign_key_columns AS fc 
    ON f.object_id = fc.constraint_object_id 
 WHERE f.parent_object_id = object_id(N'[dbo].[tbTicketUsage]')
   AND f.referenced_object_id = object_id(N'[dbo].[tbAccessPoint]')
   AND COL_NAME(fc.referenced_object_id, fc.referenced_column_id) = 'AptWorkstationId';

if (len(@foreign_key_name) &gt; 0) 
begin
  select @dropstmt = 'ALTER TABLE [dbo].[tbTicketUsage] DROP CONSTRAINT [' + @foreign_key_name + ']';
  execute sp_executesql @dropstmt
end;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbTicketUsage] add constraint FK_TicketUsage_Workstation foreign key([AptWorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.334</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTimedTicketStatement.TicketId
Add field tbTimedTicketStatement.MediaId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbTimedTicketStatement
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTimedTicketStatement
add TicketId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTimedTicketStatement
add MediaId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbTimedTicketStatement] add constraint FK_TimedTicketStatement_TicketId foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbTimedTicketStatement] add constraint FK_TimedTicketStatement_MediaId foreign key([MediaId]) references [tbMedia] ([MediaId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TimedTicketStatement_TicketId] ON [tbTimedTicketStatement] ([TicketId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TimedTicketStatement_MediaId] ON [tbTimedTicketStatement] ([MediaId])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.333</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop table tbTimedTicketSettlement
create table tbTimedTicketStatement</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_TimedTicketSettlement_SettleTransactionId on tbTimedTicketSettlement
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_TimedTicketSettlement_TicketUsageExitId on tbTimedTicketSettlement
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_TimedTicketSettlement_TicketUsageEntryd on tbTimedTicketSettlement
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_TimedTicketSettlement_PerformanceId on tbTimedTicketSettlement
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_TimedTicketSettlement_TicketMediaMatch on tbTimedTicketSettlement
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_TimedTicketSettlement_TimedTicketRuleId on tbTimedTicketSettlement
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTimedTicketSettlement drop constraint FK_TimedTicketSettlement_Transaction
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTimedTicketSettlement drop constraint FK_TimedTicketSettlement_TicketUsage_Exit
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTimedTicketSettlement drop constraint FK_TimedTicketSettlement_TicketUsage_Entry
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTimedTicketSettlement drop constraint FK_TimedTicketSettlement_Performance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTimedTicketSettlement drop constraint FK_TimedTicketSettlement_TicketMediaMatch
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTimedTicketSettlement drop constraint FK_TimedTicketSettlement_TimedTicketRule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTimedTicketSettlement drop constraint PK_TimedTicketSettlement
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbTimedTicketSettlement
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTimedTicketStatement]
(
	[TimedTicketStatementId] Uniqueidentifier NOT NULL,
	[StatementStatus] Smallint NOT NULL,
	[TimedTicketRuleId] Uniqueidentifier NOT NULL,
	[TicketMediaMatchId] Uniqueidentifier NOT NULL,
	[PerformanceId] Uniqueidentifier NOT NULL,
	[TicketUsageEntryId] Uniqueidentifier NOT NULL,
	[TicketUsageExitId] Uniqueidentifier NULL,
	[SettleTransactionId] Uniqueidentifier NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTimedTicketStatement ADD CONSTRAINT PK_TimedTicketStatement PRIMARY KEY ([TimedTicketStatementId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbTimedTicketStatement] add constraint FK_TimedTicketStatement_TimedTicketRule foreign key([TimedTicketRuleId]) references [tbTimedTicketRule] ([TimedTicketRuleId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbTimedTicketStatement] add constraint FK_TimedTicketStatement_TicketMediaMatch foreign key([TicketMediaMatchId]) references [tbTicketMediaMatch] ([TicketMediaMatchId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbTimedTicketStatement] add constraint FK_TimedTicketStatement_Performance foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbTimedTicketStatement] add constraint FK_TimedTicketStatement_TicketUsage_Entry foreign key([TicketUsageEntryId]) references [tbTicketUsage] ([TicketUsageId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbTimedTicketStatement] add constraint FK_TimedTicketStatement_TicketUsage_Exit foreign key([TicketUsageExitId]) references [tbTicketUsage] ([TicketUsageId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbTimedTicketStatement] add constraint FK_TimedTicketStatement_Transaction foreign key([SettleTransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TimedTicketStatement_TimedTicketRuleId] ON [tbTimedTicketStatement] ([TimedTicketRuleId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TimedTicketStatement_TicketMediaMatch] ON [tbTimedTicketStatement] ([TicketMediaMatchId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TimedTicketStatement_PerformanceId] ON [tbTimedTicketStatement] ([PerformanceId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TimedTicketStatement_TicketUsageEntryId] ON [tbTimedTicketStatement] ([TicketUsageEntryId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TimedTicketStatement_TicketUsageExitId] ON [tbTimedTicketStatement] ([TicketUsageExitId] ) 
where TicketUsageExitId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TimedTicketStetement_SettleTransactionId] ON [tbTimedTicketStatement] ([SettleTransactionId] ) 
where SettleTransactionId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.332</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop table tbEventTimePrice
create table tbTimedTicketRule
create table tbTimedTicketRuleItem
create table tbTimedTicketStatement</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbEventTimePrice
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_EventTimePrice_EntityId on tbEventTimePrice
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEventTimePrice drop constraint [FK_EventTimePrice_Event]
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEventTimePrice drop constraint [PK_EventTimePrice]
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbEventTimePrice
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTimedTicketRule]
(
  [TimedTicketRuleId] Uniqueidentifier NOT NULL,  
  [LicenseId] Smallint NOT NULL,
  [RuleName] Nvarchar(30) NOT NULL,
  [ValidFromDate] date NULL,
  [ValidToDate] date NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTimedTicketRule ADD CONSTRAINT PK_TimedTicketRule PRIMARY KEY ([TimedTicketRuleId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTimedTicketRuleItem] (
	[TimedTicketRuleItemId] Uniqueidentifier NOT NULL,
	[TimedTicketRuleId] Uniqueidentifier NOT NULL,
	[ItemName] Nvarchar(30) NULL,
	[ApplyFromHour] Smallint NULL,
	[ApplyToHour] Smallint NULL,
	[Optional] Bit NOT NULL,
	[StepType] Smallint NOT NULL,
	[StepValue] Smallint NOT NULL,
	[StepAmount] Money NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTimedTicketRuleItem ADD CONSTRAINT PK_TimedTicketRuleItem PRIMARY KEY ([TimedTicketRuleItemId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbTimedTicketRuleItem] add constraint FK_TimedTicketRuleItem_TimedTicketRule foreign key([TimedTicketRuleId]) references [tbTimedTicketRule] ([TimedTicketRuleId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TimedTicketRuleItem_TimedTicketRuleId] ON [tbTimedTicketRule] ([TimedTicketRuleId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTimedTicketSettlement]
(
	[TimedTicketSettlementId] Uniqueidentifier NOT NULL,
	[SettlementStatus] Smallint NOT NULL,
	[TimedTicketRuleId] Uniqueidentifier NOT NULL,
	[TicketMediaMatchId] Uniqueidentifier NOT NULL,
	[PerformanceId] Uniqueidentifier NOT NULL,
	[TicketUsageEntryId] Uniqueidentifier NOT NULL,
	[TicketUsageExitId] Uniqueidentifier NULL,
	[SettleTransactionId] Uniqueidentifier NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTimedTicketSettlement ADD CONSTRAINT PK_TimedTicketSettlement PRIMARY KEY ([TimedTicketSettlementId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbTimedTicketSettlement] add constraint FK_TimedTicketSettlement_TimedTicketRule foreign key([TimedTicketRuleId]) references [tbTimedTicketRule] ([TimedTicketRuleId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbTimedTicketSettlement] add constraint FK_TimedTicketSettlement_TicketMediaMatch foreign key([TicketMediaMatchId]) references [tbTicketMediaMatch] ([TicketMediaMatchId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbTimedTicketSettlement] add constraint FK_TimedTicketSettlement_Performance foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbTimedTicketSettlement] add constraint FK_TimedTicketSettlement_TicketUsage_Entry foreign key([TicketUsageEntryId]) references [tbTicketUsage] ([TicketUsageId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbTimedTicketSettlement] add constraint FK_TimedTicketSettlement_TicketUsage_Exit foreign key([TicketUsageExitId]) references [tbTicketUsage] ([TicketUsageId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbTimedTicketSettlement] add constraint FK_TimedTicketSettlement_Transaction foreign key([SettleTransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TimedTicketSettlement_TimedTicketRuleId] ON [tbTimedTicketSettlement] ([TimedTicketRuleId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TimedTicketSettlement_TicketMediaMatch] ON [tbTimedTicketSettlement] ([TicketMediaMatchId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TimedTicketSettlement_PerformanceId] ON [tbTimedTicketSettlement] ([PerformanceId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TimedTicketSettlement_TicketUsageEntryd] ON [tbTimedTicketSettlement] ([TicketUsageEntryId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TimedTicketSettlement_TicketUsageExitId] ON [tbTimedTicketSettlement] ([TicketUsageExitId] ) 
where TicketUsageExitId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TimedTicketSettlement_SettleTransactionId] ON [tbTimedTicketSettlement] ([SettleTransactionId] ) 
where SettleTransactionId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table [tbTimedTicketRule] add constraint FK_TimedTicketRule_License foreign key([LicenseId]) references [tbLicense] ([LicenseId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.331</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop table tbEventTimePrice
create table tbEventTimePrice</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_EventTimePrice_EntityId on tbEventTimePrice
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEventTimePrice drop constraint [FK_EventTimePrice_Event]
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEventTimePrice drop constraint [PK_EventTimePrice]
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbEventTimePrice
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbEventTimePrice]
(
  [EventId] Uniqueidentifier NOT NULL,
  [PriorityOrder] Smallint NOT NULL,
  [EntityId] Uniqueidentifier NOT NULL,
  [EntityType] Smallint NOT NULL,
  [ApplyFromHour] Smallint NULL,
  [ApplyToHour] Smallint NULL,
  [StepType] Smallint NOT NULL,
  [StepValue] Smallint NOT NULL,
  [StepAmount] Money NOT NULL,
  [ValidFromDate] date NULL,
  [ValidToDate] date NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEventTimePrice ADD CONSTRAINT PK_EventTimePrice PRIMARY KEY ([EventId], [EntityId], [PriorityOrder])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_EventTimePrice_EntityId] ON [tbEventTimePrice] ([EntityId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbEventTimePrice] add constraint FK_EventTimePrice_Event foreign key([EventId]) references [tbEvent] ([EventId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.330</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change data type tbEventTimePrice.ValidFromDate
Change data type tbEventTimePrice.ValidToDate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEventTimePrice
drop column ValidFromDate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEventTimePrice
drop column ValidToDate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEventTimePrice
add ValidFromDate date null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEventTimePrice
add ValidToDate date null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.329</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.PriorityOrder</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add PriorityOrder smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.328</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbDocTemplate.CategoryId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
add CategoryId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbDocTemplate
set CategoryId=X_CategoryId
from (
  select CategoryId as X_CategoryId  
  from tbCategory  
  where   
    EntityType=37 and    
    ParentCategoryId is null
) X
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
alter column CategoryId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDocTemplate] add constraint FK_DocTemplate_Category foreign key([CategoryId]) references [tbCategory] ([CategoryId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.327</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbEventTimePrice</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbEventTimePrice]
(
  [EventId] Uniqueidentifier NOT NULL,
  [EntityId] Uniqueidentifier NOT NULL,
  [EntityType] Smallint NOT NULL,
  [ApplyFromHour] Smallint NULL,
  [ApplyToHour] Smallint NULL,
  [StepType] Smallint NOT NULL,
  [StepValue] Smallint NOT NULL,
  [StepAmount] Money NOT NULL,
  [ValidFromDate] Binary(3) NULL,
  [ValidToDate] Binary(3) NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT> alter table tbEventTimePrice ADD CONSTRAINT PK_EventTimePrice PRIMARY KEY ([EventId], [EntityId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_EventTimePrice_EntityId] ON [tbEventTimePrice] ([EntityId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbEventTimePrice] add constraint FK_EventTimePrice_Event foreign key([EventId]) references [tbEvent] ([EventId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.326</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Update right values for TicketRedemption and Offline</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbRight
where RightType in (11,12,53) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.325</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Update right values for TicketVoid and UsedTicketVoid</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbRight
where RightType in (19,59)

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.324</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index UQ_Currency_ISOCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Currency_ISOCode] ON [tbCurrency] ([LicenseId] ,[ISOCode] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.323</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Move tbPayment currency fields to a new table (tbPaymentCurrency)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPayment
drop column CurrencyISO
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPayment
drop column CurrencyAmount
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPayment
drop column ExchangeRate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPaymentCurrency]
(
	[PaymentId] Uniqueidentifier NOT NULL,
	[CurrencyISO] Varchar(3) NOT NULL,
	[CurrencyAmount] Money NOT NULL,
	[ExchangeRate] Money NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentCurrency ADD CONSTRAINT PK_PaymentCurrency PRIMARY KEY ([PaymentId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentCurrency] add constraint FK_PaymentCurrency_Payment foreign key([PaymentId]) references [tbPayment] ([PaymentId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.322</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>update tbRepository, moving all EntityTypes "AttributeItem" to "Attribute"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRepository
set EntityType=10/*Attribute*/
where EntityType=11/*AttributeItem*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbRepository
set EntityId=AttributeId
from tbAttributeItem
where EntityId=AttributeItemId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.321</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>alter tbDocTemplate
- Add MediaCashoutOption</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
add MediaCashoutOption Smallint NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.320</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbLangConfig</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbConfigLang]
(
	[EntityId] Uniqueidentifier NOT NULL,
	[LangField] Smallint NOT NULL,
	[LangISO] Varchar(3) NOT NULL,
	[EntityType] Smallint NOT NULL,
	[Translation] Nvarchar(100) NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbConfigLang ADD CONSTRAINT PK_ConfigLang PRIMARY KEY ([EntityId],[LangField],[LangISO])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.319</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>alter tbMedia
- Add DocTemplateId

alter tbProduct
- Add RequireAccount

alter tbPayment
- Add CurrencyISO</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMedia
add DocTemplateId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMedia] add constraint FK_Media_DocTemplate foreign key([DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add RequireAccount bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set RequireAccount = 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column RequireAccount bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPayment
add CurrencyISO Varchar(3) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPayment
set tbPayment.CurrencyISO = C.ISOCode
from tbCurrency C
where C.CurrencyType = 1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPayment
alter column CurrencyISO Varchar(3) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.318</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSaleMembership
alter tbSale
- Drop MembershipAccountId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleMembership]
(
  [SaleId] Uniqueidentifier NOT NULL,
  [PortfolioId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleMembership ADD CONSTRAINT PK_SaleMembership PRIMARY KEY ([SaleId], [PortfolioId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleMembership_PortfolioId] ON [tbSaleMembership] ([PortfolioId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleMembership] add constraint FK_SaleMembership_Sale foreign key([SaleId]) references [tbSale] ([SaleId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleMembership] add constraint FK_SaleMembership_Portfolio foreign key([PortfolioId]) references [tbTicketMediaMatch] ([TicketMediaMatchId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if exists (select 1 from sys.objects where name = 'FK_Sale_Account_MembershipAccountId' and type='F')
begin
alter table tbSale drop constraint FK_Sale_Account_MembershipAccountId
end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale drop column MembershipAccountId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.317</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSaleLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleLink]
(
	[SaleId] Uniqueidentifier NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleLink ADD CONSTRAINT PK_SaleLink PRIMARY KEY ([SaleId], [EntityId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleLink_EntityId] ON [tbSaleLink] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleLink] add constraint FK_SaleLink_Sale foreign key([SaleId]) references [tbSale] ([SaleId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.316</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>alter tbPromoRule
- Add AutoApplyOnTrigger</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPromoRule
add AutoApplyOnTrigger bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPromoRule
set AutoApplyOnTrigger = 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPromoRule
alter column AutoApplyOnTrigger bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.315</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSale2Account</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSale2Account]
(
	[SaleId] Uniqueidentifier NOT NULL,
	[AccountId] Uniqueidentifier NOT NULL,
	[SaleAccountType] Smallint NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale2Account ADD CONSTRAINT PK_Sale2Account PRIMARY KEY ([SaleId], [AccountId], [SaleAccountType])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale2Account_AccountId] ON [tbSale2Account] ([AccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSale2Account] add constraint FK_Sale2Account_Sale foreign key([SaleId]) references [tbSale] ([SaleId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSale2Account] add constraint FK_Sale2Account_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.314</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>alter tbPromoRule
- Add PrdLimit
- Add PrdMaxItemCount

alter tbPromoAction
- alter column ActionProductId null</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPromoRule
add PrdLimit integer null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPromoRule
add PrdMaxItemCount integer null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPromoAction
alter column ActionProductId Uniqueidentifier null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.313</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>alter tbPromoTrigger
- Add TriggerType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPromoTrigger
add TriggerType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPromoTrigger
set TriggerType=1/*RuleTrigger*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPromoTrigger
alter column TriggerType smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.312</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>alter tbSale
- Add MembershipAccountId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSale
add MembershipAccountId Uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSale] add constraint FK_Sale_Account_MembershipAccountId foreign key([MembershipAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.311</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>alter tbPortfolioLedger
- Remove FK Transaction
- Rename TransactionId into EntityId
- Add EntityType

Create indexes
- IX_PortfolioLedger_EntityId
- IX_PortfolioLedger_PortfolioId
- IX_PortfolioLedger_MediaId
- IX_PortfolioLedger_PaymentId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE @foreign_key_name nvarchar(max);
DECLARE @dropstmt nvarchar(max);

SELECT @foreign_key_name = f.name
  FROM sys.foreign_keys AS f
 INNER JOIN sys.foreign_key_columns AS fc 
    ON f.object_id = fc.constraint_object_id 
 WHERE f.parent_object_id = object_id(N'[dbo].[tbPortfolioLedger]')
   AND f.referenced_object_id = object_id(N'[dbo].[tbTransaction]')
   AND COL_NAME(fc.referenced_object_id, fc.referenced_column_id) = 'TransactionId';

if (len(@foreign_key_name) &gt; 0) 
begin
  select @dropstmt = 'ALTER TABLE [dbo].[tbPortfolioLedger] DROP CONSTRAINT [' + @foreign_key_name + ']';
  execute sp_executesql @dropstmt
end;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbPortfolioLedger.TransactionId',
    @newname = 'EntityId',
    @objtype = 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioLedger
add EntityType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPortfolioLedger
set EntityType=20/*transaction*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioLedger
alter column EntityType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioLedger_EntityId] ON [tbPortfolioLedger] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioLedger_PortfolioId] ON [tbPortfolioLedger] ([TicketMediaMatchId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioLedger_MediaId] ON [tbPortfolioLedger] ([MediaId] ) 
where MediaId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioLedger_PaymentId] ON [tbPortfolioLedger] ([PaymentId] ) 
where PaymentId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.310</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTransactionWallet</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTransactionWallet]
(
	[TransactionId] Uniqueidentifier NOT NULL,
	[SaleItemDetailId] Uniqueidentifier NOT NULL,
	[WalletDeposit] Smallmoney NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionWallet ADD CONSTRAINT PK_TransactionWallet PRIMARY KEY ([TransactionId], [SaleItemDetailId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionWallet] add constraint FK_TransactionWallet_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionWallet] add constraint FK_TransactionWallet_SaleItemDetail foreign key([SaleItemDetailId]) references [tbSaleItemDetail] ([SaleItemDetailId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionWallet_SaleItemDetailId] ON [tbTransactionWallet] ([SaleItemDetailId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.309</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbSaleItemDetail.Position</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItemDetail
add Position smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSaleItemDetail
set Position=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemDetail
alter column Position smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.308</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop index IX_Ticket_SaleItemDetailId
create index UQ_Ticket_SaleItemDetailId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Ticket_SaleItemDetailId on tbTicket
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Ticket_SaleItemDetailId] ON [tbTicket] ([SaleItemDetailId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.307</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbSaleItemDetail.WalletDeposit</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItemDetail
add WalletDeposit smallmoney null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSaleItemDetail
set WalletDeposit=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItemDetail
alter column WalletDeposit smallmoney not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.306</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.WalletCreditLimit</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add WalletCreditLimit money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set WalletCreditLimit=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column WalletCreditLimit money not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.305</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbAuht.CardType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAuth
add CardType varchar(15) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.304</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tables:
- tbRelation
- tbAccountRelation</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbRelation]
(
	[RelationId] Uniqueidentifier NOT NULL,
	[RelationName] Nvarchar(50) NOT NULL,
	[ReverseRelationId] Uniqueidentifier NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbRelation ADD CONSTRAINT PK_Relation PRIMARY KEY ([RelationId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Relation_ReverseRelationId] ON [tbRelation] ([ReverseRelationId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbAccountRelation]
(
	[AccountId] Uniqueidentifier NOT NULL,
	[ChildAccountId] Uniqueidentifier NOT NULL,
	[RelationId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountRelation ADD CONSTRAINT PK_AccountRelation PRIMARY KEY ([AccountId],[ChildAccountId])


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccountRelation_ChildAccountId] ON [tbAccountRelation] ([ChildAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AccountRelation_RelationId] ON [tbAccountRelation] ([RelationId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountRelation] add constraint FK_AccountRelation_Account_AccountId foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountRelation] add constraint FK_AccountRelation_Account_ChildAccountId foreign key([ChildAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAccountRelation] add constraint FK_AccountRelation_Relation foreign key([RelationId]) references [tbRelation] ([RelationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.303</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Remove tasks 4 (option set initializer) and 5 (full-text reindex) and all related data</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbTaskTrigger
where TaskId in (
  select TaskId  
  from tbTask  
  where TaskType in (4,5)
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbJob
where TaskId in (
  select TaskId  
  from tbTask  
  where TaskType in (4,5)
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbTask  
where TaskType in (4,5)

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.302</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbAsyncProcess.ReportEmailAddress</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAsyncProcess
add ReportEmailAddress varchar(50) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.301</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbAsyncProcess.ConfigData</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAsyncProcess
add ConfigData ntext null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.300</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename tbSale.SaleCodeExt into SaleCode
Reduce length from 20 to 15 and makes not nullable</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Sale_SaleCodeExt on tbSale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbSale.SaleCodeExt',
    @newname = 'SaleCode',
    @objtype = 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSale
set SaleCode=''
where SaleCode is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale
alter column SaleCode varchar(15) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_SaleCode] ON [tbSale] ([SaleCode] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.299</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop field tbSale.SaleCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_Sale_SaleCode on tbSale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale
drop column SaleCode
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>1.298</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbLog.LogType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLog 
add LogType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLog
set LogType=1/*software*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLog
alter column LogType smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.297</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbAsyncProcessItem</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbAsyncProcessItem]
(
	[AsyncProcessId] Uniqueidentifier NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAsyncProcessItem ADD CONSTRAINT PK_AsyncProcessItem PRIMARY KEY ([AsyncProcessId],[EntityId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AsyncProcess_EntityId] ON [tbAsyncProcessItem] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAsyncProcessItem] add constraint FK_AsyncProcessItem_AsyncProcess foreign key([AsyncProcessId]) references [tbAsyncProcess] ([AsyncProcessId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.296</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add field tbLedgerRule.LedgerTriggerFilter</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
add LedgerTriggerFilter smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerRule
set LedgerTriggerFilter=1
where LedgerTriggerType&gt;200
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.295</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbLedgerAccount.LedgerAccountType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerAccount
add LedgerAccountType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerAccount
set LedgerAccountType=1/*asset*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerAccount
alter column LedgerAccountType smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.294</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbLedgerRef.LedgerRefSerial from tinyint to smallint</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbLedgerRef DROP CONSTRAINT PK_LedgerRef
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRef
alter column LedgerRefSerial smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRef ADD CONSTRAINT PK_LedgerRef PRIMARY KEY ([GroupEntityId],[LedgerSerial],[LedgerRefSerial])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.293</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbLedgerRef</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbLedgerRef
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbLedgerRef]
(
	[GroupEntityId] Uniqueidentifier NOT NULL,
	[LedgerSerial] Tinyint NOT NULL,
	[LedgerRefSerial] Tinyint NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[LedgerRefAmount] Money NOT NULL,
	[AffectClearingLimit] Bit NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRef ADD CONSTRAINT PK_LedgerRef PRIMARY KEY ([GroupEntityId],[LedgerSerial],[LedgerRefSerial])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerRef_EntityId] ON [tbLedgerRef] ([EntityId] ,[AffectClearingLimit] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRef] add constraint FK_LedgerRef_Ledger foreign key([GroupEntityId],[LedgerSerial]) references [tbLedger] ([GroupEntityId],[LedgerSerial])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.292</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Split tbLedger creating tbLedgerRef</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbLedger
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Ledger_RefEntityId on tbLedger
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedger
drop column RefEntityType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedger
drop column RefEntityId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedger
drop column AffectClearingLimit
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbLedgerRef]
(
	[GroupEntityId] Uniqueidentifier NOT NULL,
	[LedgerSerial] Tinyint NOT NULL,
	[EntityType] Smallint NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
	[LedgerRefAmount] Money NOT NULL,
	[AffectClearingLimit] Bit NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRef ADD CONSTRAINT PK_LedgerRef PRIMARY KEY ([GroupEntityId],[LedgerSerial])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerRef_EntityId] ON [tbLedgerRef] ([EntityId] ,[AffectClearingLimit] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.291</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbTicketUsage: 
- rename "Consolidated" in "ConsAccess"
- add "ConsLedger"
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_TicketUsage_Consolidated on tbTicketUsage
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbTicketUsage.Consolidated',
    @newname = 'ConsAccess',
    @objtype = 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add ConsLedger bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketUsage
set ConsLedger=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
alter column ConsLedger bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsage_ConsAccess] ON [tbTicketUsage] ([ConsAccess] ,[UsageDateTime] ) 
where ConsAccess=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsage_ConsLedger] ON [tbTicketUsage] ([ConsLedger] ,[UsageDateTime] ) 
where ConsLedger=0

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.290</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbTransaction: 
- rename "Consolidated" in "ConsSale"
- add "ConsLedger"
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Transaction_Consolidated on tbTransaction
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbTransaction.Consolidated',
    @newname = 'ConsSale',
    @objtype = 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
add ConsLedger bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTransaction
set ConsLedger=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column ConsLedger bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Transaction_ConsSale] ON [tbTransaction] ([ConsSale] ,[TransactionDateTime] ) 
where ConsSale=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Transaction_ConsLedger] ON [tbTransaction] ([ConsLedger] ,[TransactionDateTime] ) 
where ConsLedger=0

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.289</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Change tbTicket fields (ValidateDateTime ans FirstUsageDateTime) form "datetime" to "smalldatetime"
- Change tbTicketUsage.UsageDateTime from "smalldatetime" to "datetime"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
alter column ValidateDateTime smalldatetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Ticket_PerformanceSetId on tbTicket
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
alter column FirstUsageDateTime smalldatetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_PerformanceSetId] ON [tbTicket] ([PerformanceSetId] ,[FirstUsageDateTime] ) 
where PerformanceSetId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_TicketUsage_Consolidated on tbTicketUsage
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_TicketUsage_UsageDateTime on tbTicketUsage
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
alter column UsageDateTime datetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsage_Consolidated] ON [tbTicketUsage] ([Consolidated] ,[UsageDateTime] ) 
where Consolidated=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsage_UsageDateTime] ON [tbTicketUsage] ([UsageDateTime] Desc) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.288</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.IgnoreEncodedEntitlements</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add IgnoreEncodedEntitlements bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set IgnoreEncodedEntitlements=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column IgnoreEncodedEntitlements bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.287</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor IX_Ledger_RefEntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index [IX_Ledger_RefEntityId] on tbLedger

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ledger_RefEntityId] ON [tbLedger] ([RefEntityId] ,[AffectClearingLimit] ) 
include (LedgerAmount)
where RefEntityId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.286</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop tbLedger.LedgerRuleId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedger drop FK_Ledger_LedgerRule_LedgerRuleId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Ledger_LedgerRuleId on tbLedger

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedger drop column LedgerRuleId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.285</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename "tbLedgerRule" field "TicketValueLimit" into "AffectClearingLimit"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbLedgerRule.TicketValueLimit',
    @newname = 'AffectClearingLimit',
    @objtype = 'COLUMN'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.284</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbLedger.AffectClearingLimit</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedger
add AffectClearingLimit bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedger
set AffectClearingLimit=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedger
alter column AffectClearingLimit bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Ledger_RefEntityId on tbLedger
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ledger_RefEntityId] ON [tbLedger] ([RefEntityId] ,[AffectClearingLimit] ) 
where RefEntityId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.283</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tbProduct.ClearingLimitPerc</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add ClearingLimitPerc money null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.282</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields:
- tbLedger.LedgerType
- tbLedger.Active
- tbLedgerRule.LedgerRulePercentage
- tbLedgerRule.TicketValueLimit</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedger
add LedgerType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
add
  Active bit null,  
  LedgerRulePercentage bit null,  
  TicketValueLimit bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerRule
set
  Active=0,  
  LedgerRulePercentage=0,  
  TicketValueLimit=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
alter column Active bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
alter column LedgerRulePercentage bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
alter column TicketValueLimit bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.281</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbLedger.LedgerDateTime from smalldatetime to datetime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Ledger_FiscalDate on tbLedger
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedger
alter column LedgerDateTime datetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ledger_FiscalDate] ON [tbLedger] ([LedgerFiscalDate] Desc,[LedgerDateTime] Desc) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.280</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbLedgerTotal</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbLedgerTotal]
(
	[LedgerAccountId] Uniqueidentifier NOT NULL,
	[AccountId] Uniqueidentifier NOT NULL,
	[LedgerTotalBalance] Money NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerTotal ADD CONSTRAINT PK_LedgerTotal PRIMARY KEY ([LedgerAccountId],[AccountId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerTotal_AccountId] ON [tbLedgerTotal] ([AccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerTotal] add constraint FK_LedgerTotal_LedgerAccount_LedgerAccountId foreign key([LedgerAccountId]) references [tbLedgerAccount] ([LedgerAccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerTotal] add constraint FK_LedgerTotal_Account_AccountId foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.279</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbLedger</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbLedger]
(
	[GroupEntityId] Uniqueidentifier NOT NULL,
	[LedgerSerial] Tinyint NOT NULL,
	[GroupEntityType] Smallint NOT NULL,
	[LedgerFiscalDate] date NOT NULL,
	[LedgerDateTime] smalldatetime NOT NULL,
	[LedgerRuleId] Uniqueidentifier NULL,
	[LedgerAccountId] Uniqueidentifier NOT NULL,
	[AccountId] Uniqueidentifier NULL,
	[LedgerAmount] Money NOT NULL,
	[RefEntityType] Smallint NULL,
	[RefEntityId] Uniqueidentifier NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedger ADD CONSTRAINT PK_Ledger PRIMARY KEY (GroupEntityId, LedgerSerial)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ledger_LedgerAccountId] ON [tbLedger] ([LedgerFiscalDate] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ledger_AccountId] ON [tbLedger] ([AccountId] ,[LedgerFiscalDate] ) 
where AccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ledger_FiscalDate] ON [tbLedger] ([LedgerFiscalDate] Desc,[LedgerDateTime] Desc) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ledger_RefEntityId] ON [tbLedger] ([RefEntityId] ) 
where RefEntityId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedger] add constraint FK_Ledger_Account_AccountId foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedger] add constraint FK_Ledger_LedgerAccount_LedgerAccountId foreign key([LedgerAccountId]) references [tbLedgerAccount] ([LedgerAccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedger] add constraint FK_Ledger_LedgerRule_LedgerRuleId foreign key([LedgerRuleId]) references [tbLedgerRule] ([LedgerRuleId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ledger_LedgerRuleId] ON [tbLedger] ([LedgerRuleId] ) 
where LedgerRuleId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.278</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbLedgerRule</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbLedgerRule]
(
	[LedgerRuleId] Uniqueidentifier NOT NULL,
	[LedgerTriggerType] Smallint NOT NULL,
	[TriggerLocationId] Uniqueidentifier NULL,
	[TriggerEntityType] Smallint NULL,
	[TriggerEntityId] Uniqueidentifier NULL,
	[TargetLedgerAccountId] Uniqueidentifier NOT NULL,
	[TargetAccountType] Smallint NOT NULL,
	[TargetAccountId] Uniqueidentifier NULL,
	[SourceLedgerAccountId] Uniqueidentifier NULL,
	[SourceAccountType] Smallint NULL,
	[SourceAccountId] Uniqueidentifier NULL,
	[LedgerRuleAmount] Money NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule ADD CONSTRAINT PK_LedgerRule PRIMARY KEY (LedgerRuleId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerRule_TriggerLocationId] ON [tbLedgerRule] ([TriggerLocationId] ) 
where TriggerLocationId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerRule_TriggerEntityId] ON [tbLedgerRule] ([TriggerEntityId] ) 
where TriggerEntityId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerRule_TargetAccountId] ON [tbLedgerRule] ([TargetAccountId] ) 
where TargetAccountId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerRule_SourceAccountId] ON [tbLedgerRule] ([SourceAccountId] ) 
where SourceAccountId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRule] add constraint FK_LedgerRule_Account_TriggerLocationId foreign key([TriggerLocationId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRule] add constraint FK_LedgerRule_Account_TargetAccountId foreign key([TargetAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRule] add constraint FK_LedgerRule_Account_SourceAccountId foreign key([SourceAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRule] add constraint LK_LedgerRule_LedgerAccount_TargetLedgerAccountId foreign key([TargetLedgerAccountId]) references [tbLedgerAccount] ([LedgerAccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRule] add constraint LK_LedgerRule_LedgerAccount_SourceLedgerAccountId foreign key([SourceLedgerAccountId]) references [tbLedgerAccount] ([LedgerAccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.277</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbLedgerAccount</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbLedgerAccount]
(
	[LedgerAccountId] Uniqueidentifier NOT NULL,
	[LedgerAccountCode] Varchar(15) NOT NULL,
	[LedgerAccountName] Nvarchar(50) NULL,
	[LedgerAccountBalance] Money NOT NULL,
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerAccount ADD CONSTRAINT PK_LedgerAccount PRIMARY KEY (LedgerAccountId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_LedgerAccount_Code] ON [tbLedgerAccount] ([LedgerAccountCode] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.276</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Remove field tbLog.LogPurgeDate
- Refactor index IX_Log_LogLevel</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Log_PurgeDate on tbLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLog
drop column LogPurgeDate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Log_LogLevel on tbLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Log_LogLevel] ON [tbLog] ([LogLevel] ,[LogDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.275</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Renames all primary key to convention: PK_TableName</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @TableName varchar(max);
declare @IndexName varchar(max);
declare @stmt nvarchar(max);
declare @MyCursor as cursor;

set @MyCursor = cursor for
select 
  t.name as TableName,
  i.name as IndexName
from
  sys.tables t inner join
  sys.indexes i on i.object_id=t.object_id
where 
  i.is_primary_key&lt;&gt;0 and
  CHARINDEX('PK__', i.name)=1;  
  
OPEN @MyCursor; 
FETCH NEXT FROM @MyCursor INTO @TableName, @IndexName;

WHILE @@FETCH_STATUS = 0
BEGIN
 set @stmt = 'sp_rename ''' + @IndexName + ''', ''PK_' + SubString(@TableName, 3, LEN(@TableName)) + '''';
 execute sp_executesql @stmt;
 
 FETCH NEXT FROM @MyCursor INTO @TableName, @IndexName;
END

CLOSE @MyCursor;   
DEALLOCATE @MyCursor;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.274</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop tbSale2Location
drop tbSale.PerformanceId
drop tbSale.MultiPerformance
drop tbSale.LocationAccountId
drop tbSale.MultiLocation</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbSale2Location
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @foreign_key_name nvarchar(max);
DECLARE @dropstmt nvarchar(max);

SELECT @foreign_key_name = f.name
  FROM sys.foreign_keys AS f
 INNER JOIN sys.foreign_key_columns AS fc 
    ON f.object_id = fc.constraint_object_id 
 WHERE f.parent_object_id = object_id(N'[dbo].[tbSale]')
   AND f.referenced_object_id = object_id(N'[dbo].[tbPerformance]')
   AND COL_NAME(fc.referenced_object_id, fc.referenced_column_id) = 'PerformanceId';

if (len(@foreign_key_name) &gt; 0) 
begin
  select @dropstmt = 'ALTER TABLE [dbo].[tbSale] DROP CONSTRAINT [' + @foreign_key_name + ']';
  execute sp_executesql @dropstmt
end;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @foreign_key_name nvarchar(max);
DECLARE @dropstmt nvarchar(max);

SELECT @foreign_key_name = f.name
  FROM sys.foreign_keys AS f
 INNER JOIN sys.foreign_key_columns AS fc 
    ON f.object_id = fc.constraint_object_id 
 WHERE f.parent_object_id = object_id(N'[dbo].[tbSale]')
   AND f.referenced_object_id = object_id(N'[dbo].[tbAccount]')
   AND COL_NAME(fc.parent_object_id, fc.parent_column_id) = 'LocationAccountId';
if (len(@foreign_key_name) &gt; 0) 
begin
  select @dropstmt = 'ALTER TABLE [dbo].[tbSale] DROP CONSTRAINT [' + @foreign_key_name + ']';
  execute sp_executesql @dropstmt
end;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Sale_PerformanceId on tbSale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale 
drop column PerformanceId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale 
drop column MultiPerformance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale 
drop column LocationAccountId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale 
drop column MultiLocation
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.273</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create and populate tbSale2Performance</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSale2Performance]
(
	[SaleId] Uniqueidentifier NOT NULL,
	[PerformanceId] Uniqueidentifier NOT NULL,
	[MainPerformance] Bit NOT NULL,
Primary Key ([SaleId],[PerformanceId],[MainPerformance])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @constraint_name nvarchar(max);
DECLARE @stmt nvarchar(max);

SELECT @constraint_name=CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE 
  OBJECTPROPERTY(OBJECT_ID(constraint_name), 'IsPrimaryKey') = 1 and
  table_name = 'tbSale2Performance';

set @stmt = 'sp_rename ''' + @constraint_name + ''', ''PK_Sale2Performance''';
execute sp_executesql @stmt;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale2Performance_PerformanceId] ON [tbSale2Performance] ([PerformanceId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSale2Performance] add constraint FK_Sale2Performance_SaleId foreign key([SaleId]) references [tbSale] ([SaleId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSale2Performance] add constraint FK_Sale2Performance_PerformanceId foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbSale2Performance (
  SaleId,  
  PerformanceId,  
  MainPerformance
)
select distinct
  SI.SaleId,  
  PS.PerformanceId,  
  0
from
  tbSaleItem SI inner join  
  tbPerformanceSet PS on PS.PerformanceSetId=SI.PerformanceSetId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSale2Performance
set MainPerformance=1
from (
  select                                                            
    SI.SaleId as X_SaleId,    
    Max(Cast(PS.PerformanceId as varchar(max))) as X_PerformanceId
  from  
    tbSaleItem SI inner join    
    tbPerformanceSet PS on PS.PerformanceSetId=SI.PerformanceSetId    
  group by  
    SI.SaleId
) X
where
  SaleId=X_SaleId and  
  PerformanceId=X_PerformanceId

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.272</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbMediaCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE @constraint_name nvarchar(max);
DECLARE @stmt nvarchar(max);

SELECT @constraint_name=CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE 
  OBJECTPROPERTY(OBJECT_ID(constraint_name), 'IsPrimaryKey') = 1 and
  table_name = 'tbMediaCode';

set @stmt = 'alter table tbMediaCode drop constraint ' + @constraint_name;
execute sp_executesql @stmt;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMediaCode
drop column MediaCodeId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_MediaCode on tbMediaCode

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMediaCode ADD CONSTRAINT PK_MediaCode PRIMARY KEY (MediaCode)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.271</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbPaymentWallet (replace MediaCodeId with MediaId)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentWallet
add MediaId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPaymentWallet
set MediaId=tbMediaCode.MediaId
from tbMediaCode
where tbPaymentWallet.MediaCodeId=tbMediaCode.MediaCodeId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentWallet
alter column MediaId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentWallet] add constraint FK_PaymentWallet_MediaId foreign key([MediaId]) references [tbMedia] ([MediaId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @foreign_key_name nvarchar(max);
DECLARE @dropstmt nvarchar(max);

SELECT @foreign_key_name = f.name
  FROM sys.foreign_keys AS f
 INNER JOIN sys.foreign_key_columns AS fc 
    ON f.object_id = fc.constraint_object_id 
 WHERE f.parent_object_id = object_id(N'[dbo].[tbPaymentWallet]')
   AND f.referenced_object_id = object_id(N'[dbo].[tbMediaCode]')
   AND COL_NAME(fc.referenced_object_id, fc.referenced_column_id) = 'MediaCodeId';

if (len(@foreign_key_name) &gt; 0) 
begin
  select @dropstmt = 'ALTER TABLE [dbo].[tbPaymentWallet] DROP CONSTRAINT [' + @foreign_key_name + ']';
  execute sp_executesql @dropstmt
end;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentWallet
drop column MediaCodeId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.270</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbPortfolioLedger (replace MediaCodeId with MediaId)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPortfolioLedger
add MediaId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPortfolioLedger
set MediaId=tbMediaCode.MediaId
from tbMediaCode
where tbPortfolioLedger.MediaCodeId=tbMediaCode.MediaCodeId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPortfolioLedger] add constraint FK_PortfolioLedger_MediaId foreign key([MediaId]) references [tbMedia] ([MediaId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @foreign_key_name nvarchar(max);
DECLARE @dropstmt nvarchar(max);

SELECT @foreign_key_name = f.name
  FROM sys.foreign_keys AS f
 INNER JOIN sys.foreign_key_columns AS fc 
    ON f.object_id = fc.constraint_object_id 
 WHERE f.parent_object_id = object_id(N'[dbo].[tbPortfolioLedger]')
   AND f.referenced_object_id = object_id(N'[dbo].[tbMediaCode]')
   AND COL_NAME(fc.referenced_object_id, fc.referenced_column_id) = 'MediaCodeId';

if (len(@foreign_key_name) &gt; 0) 
begin
  select @dropstmt = 'ALTER TABLE [dbo].[tbPortfolioLedger] DROP CONSTRAINT [' + @foreign_key_name + ']';
  execute sp_executesql @dropstmt
end;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioLedger
drop column MediaCodeId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.269</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbTicketUsage (replace MediaCodeId with MediaId)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add MediaId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketUsage
set MediaId=tbMediaCode.MediaId
from tbMediaCode
where tbTicketUsage.MediaCodeId=tbMediaCode.MediaCodeId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
alter column MediaId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketUsage] add constraint FK_TicketUsage_MediaId foreign key([MediaId]) references [tbMedia] ([MediaId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @foreign_key_name nvarchar(max);
DECLARE @dropstmt nvarchar(max);

SELECT @foreign_key_name = f.name
  FROM sys.foreign_keys AS f
 INNER JOIN sys.foreign_key_columns AS fc 
    ON f.object_id = fc.constraint_object_id 
 WHERE f.parent_object_id = object_id(N'[dbo].[tbTicketUsage]')
   AND f.referenced_object_id = object_id(N'[dbo].[tbMediaCode]')
   AND COL_NAME(fc.referenced_object_id, fc.referenced_column_id) = 'MediaCodeId';

if (len(@foreign_key_name) &gt; 0) 
begin
  select @dropstmt = 'ALTER TABLE [dbo].[tbTicketUsage] DROP CONSTRAINT [' + @foreign_key_name + ']';
  execute sp_executesql @dropstmt
end;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_TicketUsage_MediaCodeId on tbTicketUsage

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
drop column MediaCodeId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsage_MediaId] ON [tbTicketUsage] ([MediaId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.268</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbSaleItem2AttributeItem</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSI2AI]
(
	[SaleItemId] Uniqueidentifier NOT NULL,
	[AttributeItemId] Uniqueidentifier NOT NULL,
	[OptionalPrice] Money NOT NULL,
	[Optional] Bit NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSI2AI ADD CONSTRAINT PK_SaleItem2AttributeItem PRIMARY KEY (SaleItemId, AttributeItemId)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbSI2AI (SaleItemId, AttributeItemId, OptionalPrice, Optional)
select SaleItemId, AttributeItemId, MAX(OptionalPrice), Cast(MAX(Cast(Optional as int)) as bit)
from tbSaleItem2AttributeItem
group by SaleItemId, AttributeItemId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbSaleItem2AttributeItem
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbSI2AI', 'tbSaleItem2AttributeItem'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItem2AttributeItem_AttributeItemId] ON [tbSaleItem2AttributeItem] ([AttributeItemId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItem2AttributeItem] add  foreign key([SaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItem2AttributeItem] add  foreign key([AttributeItemId]) references [tbAttributeItem] ([AttributeItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.267</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename PK_Ticket
Rename PK_TicketUsage
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE @constraint_name nvarchar(max);
DECLARE @stmt nvarchar(max);

SELECT @constraint_name=CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE 
  OBJECTPROPERTY(OBJECT_ID(constraint_name), 'IsPrimaryKey') = 1 and
  table_name = 'tbTicket';

set @stmt = 'sp_rename ''' + @constraint_name + ''', ''PK_Ticket''';
execute sp_executesql @stmt;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @constraint_name nvarchar(max);
DECLARE @stmt nvarchar(max);

SELECT @constraint_name=CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE 
  OBJECTPROPERTY(OBJECT_ID(constraint_name), 'IsPrimaryKey') = 1 and
  table_name = 'tbTicketUsage';

set @stmt = 'sp_rename ''' + @constraint_name + ''', ''PK_TicketUsage''';
execute sp_executesql @stmt;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.266</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename PK_AccessPoint
Rename PK_AccessPoint2Area
Rename PK_Account2Role
Rename PK_AccountDetail
Rename PK_AccountLink
Rename PK_Action
Rename PK_ActionLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE @constraint_name nvarchar(max);
DECLARE @stmt nvarchar(max);

SELECT @constraint_name=CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE 
  OBJECTPROPERTY(OBJECT_ID(constraint_name), 'IsPrimaryKey') = 1 and
  table_name = 'tbAccessPoint';

set @stmt = 'sp_rename ''' + @constraint_name + ''', ''PK_AccessPoint''';
execute sp_executesql @stmt;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @constraint_name nvarchar(max);
DECLARE @stmt nvarchar(max);

SELECT @constraint_name=CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE 
  OBJECTPROPERTY(OBJECT_ID(constraint_name), 'IsPrimaryKey') = 1 and
  table_name = 'tbAccessPoint2Area';

set @stmt = 'sp_rename ''' + @constraint_name + ''', ''PK_AccessPoint2Area''';
execute sp_executesql @stmt;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @constraint_name nvarchar(max);
DECLARE @stmt nvarchar(max);

SELECT @constraint_name=CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE 
  OBJECTPROPERTY(OBJECT_ID(constraint_name), 'IsPrimaryKey') = 1 and
  table_name = 'tbAccount2Role';

set @stmt = 'sp_rename ''' + @constraint_name + ''', ''PK_Account2Role''';
execute sp_executesql @stmt;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @constraint_name nvarchar(max);
DECLARE @stmt nvarchar(max);

SELECT @constraint_name=CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE 
  OBJECTPROPERTY(OBJECT_ID(constraint_name), 'IsPrimaryKey') = 1 and
  table_name = 'tbAccountDetail';

set @stmt = 'sp_rename ''' + @constraint_name + ''', ''PK_AccountDetail''';
execute sp_executesql @stmt;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @constraint_name nvarchar(max);
DECLARE @stmt nvarchar(max);

SELECT @constraint_name=CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE 
  OBJECTPROPERTY(OBJECT_ID(constraint_name), 'IsPrimaryKey') = 1 and
  table_name = 'tbAccountLink';

set @stmt = 'sp_rename ''' + @constraint_name + ''', ''PK_AccountLink''';
execute sp_executesql @stmt;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @constraint_name nvarchar(max);
DECLARE @stmt nvarchar(max);

SELECT @constraint_name=CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE 
  OBJECTPROPERTY(OBJECT_ID(constraint_name), 'IsPrimaryKey') = 1 and
  table_name = 'tbAction';

set @stmt = 'sp_rename ''' + @constraint_name + ''', ''PK_Action''';
execute sp_executesql @stmt;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @constraint_name nvarchar(max);
DECLARE @stmt nvarchar(max);

SELECT @constraint_name=CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE 
  OBJECTPROPERTY(OBJECT_ID(constraint_name), 'IsPrimaryKey') = 1 and
  table_name = 'tbActionLink';

set @stmt = 'sp_rename ''' + @constraint_name + ''', ''PK_ActionLink''';
execute sp_executesql @stmt;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.265</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbAccountFinance</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountFinance drop constraint PK_AccountFinance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_AccountFinance on tbAccountFinance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance ADD CONSTRAINT PK_AccountFinance PRIMARY KEY (AccountId, LicenseId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance drop column AccountFinanceId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.264</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename tbAccount unique index on AccountCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE @constraint_name nvarchar(max);
DECLARE @stmt nvarchar(max);

SELECT @constraint_name=CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE 
  table_name = 'tbAccount' and
  constraint_name like 'UQ__tbAccoun%';

set @stmt = 'sp_rename ''' + @constraint_name + ''', ''UQ_Account_AccountCode''';
execute sp_executesql @stmt;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.263</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename index PK_Account
Rename index PK_AccountTree
Rename index PK_AccountFinance</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE @constraint_name nvarchar(max);
DECLARE @stmt nvarchar(max);

SELECT @constraint_name=CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE 
  OBJECTPROPERTY(OBJECT_ID(constraint_name), 'IsPrimaryKey') = 1 and
  table_name = 'tbAccount';

set @stmt = 'sp_rename ''' + @constraint_name + ''', ''PK_Account''';
execute sp_executesql @stmt;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @constraint_name nvarchar(max);
DECLARE @stmt nvarchar(max);

SELECT @constraint_name=CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE 
  OBJECTPROPERTY(OBJECT_ID(constraint_name), 'IsPrimaryKey') = 1 and
  table_name = 'tbAccountTree';

set @stmt = 'sp_rename ''' + @constraint_name + ''', ''PK_AccountTree''';
execute sp_executesql @stmt;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @constraint_name nvarchar(max);
DECLARE @stmt nvarchar(max);

SELECT @constraint_name=CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE 
  OBJECTPROPERTY(OBJECT_ID(constraint_name), 'IsPrimaryKey') = 1 and
  table_name = 'tbAccountFinance';

set @stmt = 'sp_rename ''' + @constraint_name + ''', ''PK_AccountFinance''';
execute sp_executesql @stmt;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.262</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop column tbConsRotation.QtyInside</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbConsRotation
drop column QtyInside
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.261</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename index PK_Sale</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE @constraint_name nvarchar(max);
DECLARE @stmt nvarchar(max);

SELECT @constraint_name=CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE 
  OBJECTPROPERTY(OBJECT_ID(constraint_name), 'IsPrimaryKey') = 1 and
  table_name = 'tbSale';

set @stmt = 'sp_rename ''' + @constraint_name + ''', ''PK_Sale''';
execute sp_executesql @stmt;

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.260</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbTransactionItem </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_TransactionItem_TransactionId on tbTransactionItem
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @constraint_name nvarchar(max);
DECLARE @dropstmt nvarchar(max);

SELECT @constraint_name=CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE 
  OBJECTPROPERTY(OBJECT_ID(constraint_name), 'IsPrimaryKey') = 1 and
  table_name = 'tbTransactionItem'

select @dropstmt = 'alter table tbTransactionItem drop constraint ' + @constraint_name;
execute sp_executesql @dropstmt;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionItem ADD CONSTRAINT PK_TransactionItem PRIMARY KEY (TransactionId, SaleItemId)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransactionItem drop column TransactionItemId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionItem_SaleItemId] ON [tbTransactionItem] ([SaleItemId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.259</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>replace IX_Ticket_TDSSN with UQ_Ticket_TDSSN</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbTicket
set TicketSerial=0
from (
  select
    LicenseId as X_LicenseId,
    StationSerial as X_StationSerial,
    EncodeFiscalDate as X_EncodeFiscalDate,
    TicketSerial as X_TicketSerial
  from tbTicket
  group by
    LicenseId,
    StationSerial,
    EncodeFiscalDate,
    TicketSerial
  having COUNT(*) &gt; 1
) X
where 
  LicenseId=X_LicenseId and
  StationSerial=X_StationSerial and
  EncodeFiscalDate=X_EncodeFiscalDate and
  TicketSerial=X_TicketSerial
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Ticket_TDSSN on tbTicket
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Ticket_TDSSN] ON [tbTicket] ([EncodeFiscalDate] ,[LicenseId] ,[StationSerial] ,[TicketSerial] ) 
where TicketSerial&gt;0

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.258</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- drop index IX_Media_TDSSN
- refactor index UQ_Media_TDSSN</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Media_TDSSN on tbMedia
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_Media_TDSSN on tbMedia
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Media_TDSSN] ON [tbMedia] ([EncodeFiscalDate] ,[LicenseId] ,[StationSerial] ,[MediaSerial] ) 
where MediaSerial &gt; 0

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.257</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change tbTicketUsage.UsageDateTime/ValidateDateTime as smalldatetime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_TicketUsage_Consolidated on tbTicketUsage
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_TicketUsage_UsageDateTime on tbTicketUsage
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
alter column UsageDateTime smalldatetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
alter column ValidateDateTime smalldatetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsage_Consolidated] ON [tbTicketUsage] ([Consolidated] ,[UsageDateTime] ) 
where Consolidated=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsage_UsageDateTime] ON [tbTicketUsage] ([UsageDateTime] Desc) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.256</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor index IX_Transaction_SupAccountId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Transaction_SupAccountId on tbTransaction
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Transaction_SupAccountId] ON [tbTransaction] ([SupAccountId] ) 
where SupAccountId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.255</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor index IX_SaleItemDetail_SeatHoldId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_SaleItemDetail_SeatHoldId on tbSaleItemDetail
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemDetail_SeatHoldId] ON [tbSaleItemDetail] ([SeatHoldId] ) 
where SeatHoldId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.254</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor index IX_Sale_HoldId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Sale_HoldId on tbSale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_HoldId] ON [tbSale] ([HoldId] ) 
where HoldId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.253</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add fields QtyEntryFree and QtyExitFree to tbConsRotation
- Recalculate quantities</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbConsRotation
drop column QtyInside
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbConsRotation
add
  QtyEntryFree int null,  
  QtyExitFree int null,  
  QtyInside int null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbConsRotation
set
  QtyEntryFree=QtyEntry,  
  QtyExitFree=QtyExit
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbConsRotation
set
  QtyEntry=QtyEntryControlled+QtyEntryFree,  
  QtyExit=QtyExitControlled+QtyExitFree
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbConsRotation
set QtyInside=QtyEntry-QtyExit
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbConsRotation
alter column QtyEntryFree int not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbConsRotation
alter column QtyExitFree int not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbConsRotation
alter column QtyInside int not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.252</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor index IX_Portfolio_AccountId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Portfolio_AccountId on tbTicketMediaMatch
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Portfolio_AccountId] ON [tbTicketMediaMatch] ([AccountId] ) 
where AccountId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.251</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor index IX_Sale_PerformanceId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Sale_PerformanceId on tbSale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_PerformanceId] ON [tbSale] ([PerformanceId] ) 
where PerformanceId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.250</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor indexes:
- IX_SaleItem_PerformanceSetId
- IX_SaleItem_PerformanceId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_SaleItem_PerformanceSetId on tbSaleItem

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_SaleItem_PerformanceId on tbSaleItem

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItem_PerformanceSetId] ON [tbSaleItem] ([PerformanceSetId] ) 
include(SaleId)
where PerformanceSetId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItem_PerformanceId] ON [tbSaleItem] ([PerformanceId] ) 
where PerformanceId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.249</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Alter tbTicket.EncodeDateTime from "datetime" to "smalldatetime"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Ticket_EncodeFiscalDate on tbTicket
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
alter column EncodeDateTime smalldatetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_EncodeFiscalDate] ON [tbTicket] ([EncodeFiscalDate] Desc,[EncodeDateTime] Desc,[TicketSerial] Desc) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.248</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop index UQ_TransactionSerial because redoundant to UQ_Transaction_TDSSN</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_TransactionSerial on tbTransaction       
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.247</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Alter tbSale.SaleDateTime from "datetime" to "smalldatetime"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Sale_AccountId on tbSale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Sale_SaleDateTime on tbSale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale
alter column SaleDateTime smalldatetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_AccountId] ON [tbSale] ([AccountId] ,[SaleDateTime] Desc) 
where AccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_SaleDateTime] ON [tbSale] ([SaleDateTime] Desc) 


</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.246</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbAccessPoint.QueueControl</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccessPoint
add QueueControl bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccessPoint
set QueueControl=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccessPoint
alter column QueueControl bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.245</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbEvent:
- QueueControl
- QueueSlotFrequency
- QueueSlotCapacity</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEvent
add
  QueueControl bit null,  
  QueueSlotFrequency smallint null,  
  QueueSlotCapacity smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbEvent
set
  QueueControl=0,  
  QueueSlotFrequency=0,  
  QueueSlotCapacity=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
alter column QueueControl bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
alter column QueueSlotFrequency smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
alter column QueueSlotCapacity smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.244</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop field AllowQueueControl and QueuePaxPerHour from tbAccountDetail</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
drop column AllowQueueControl
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
drop column QueuePaxPerHour
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.243</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index IX_Ticket_PerformanceSetId

</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_PerformanceSetId] ON [tbTicket] ([PerformanceSetId] ,[FirstUsageDateTime] ) 
where PerformanceSetId is not null


</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.242</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbAccountDetail:
- AllowQueueControl
- QueuePaxPerHour</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
add 
  AllowQueueControl bit null,  
  QueuePaxPerHour int null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccountDetail
set
  AllowQueueControl=0,  
  QueuePaxPerHour=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column AllowQueueControl bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column QueuePaxPerHour int not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.241</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor index IX_SeatLink_EntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_SeatLink_EntityId on tbSeatLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatLink_EntityId] ON [tbSeatLink] ([EntityId] ) 
include (SeatId)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.240</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add itinerary fields to tbEvent</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEvent
add
  PositionLat Float NULL,
  PositionLong Float NULL,
  Weight Integer NULL,
  ActiveDateFrom date NULL,
  ActiveDateTo date NULL,
  ActiveTimeFrom smalldatetime NULL,
  ActiveTimeTo smalldatetime NULL,
  ActiveMON Bit NULL,
  ActiveTUE Bit NULL,
  ActiveWED Bit NULL,
  ActiveTHU Bit NULL,
  ActiveFRI Bit NULL,
  ActiveSAT Bit NULL,
  ActiveSUN Bit NULL,
  AverageVisitTime Integer NULL,
  ReferencePrice Money NULL,
  PerformanceSelection Bit NULL

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbEvent
set
  ActiveMON=0,
  ActiveTUE=0,
  ActiveWED=0,
  ActiveTHU=0,
  ActiveFRI=0,
  ActiveSAT=0,
  ActiveSUN=0,
  PerformanceSelection=0
  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
alter column ActiveMON bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
alter column ActiveTUE bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
alter column ActiveWED bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
alter column ActiveTHU bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
alter column ActiveFRI bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
alter column ActiveSAT bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
alter column ActiveSUN bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
alter column PerformanceSelection bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.239</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor index IX_Ticket_SeatHoldId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Ticket_SeatHoldId on tbTicket
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_SeatHoldId] ON [tbTicket] ([SeatHoldId] ) 
where SeatHoldId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.238</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop index IX_Ticket_FirstUsageDateTime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Ticket_FirstUsageDateTime on tbTicket
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.237</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add field tbResourceSchedule.ResourceTypeId
- Add index IX_ResourceSchedule_ResourceTypeId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbResourceSchedule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule
add ResourceTypeId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSchedule] add  foreign key([ResourceTypeId]) references [tbResourceType] ([ResourceTypeId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_ResourceTypeId] ON [tbResourceSchedule] ([ResourceTypeId] ) 
include (PerformanceId, EntityId)

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.236</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Refactor index IX_TicketUsage_TicketId
- Create index IX_Ticket_EncodeFiscalDate
- Create index IX_Transaction_FiscalDate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_TicketUsage_TicketId on tbTicketUsage
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsage_TicketId] ON [tbTicketUsage] ([TicketId] ,[UsageType] ,[ValidateResult] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_EncodeFiscalDate] ON [tbTicket] ([EncodeFiscalDate] Desc,[EncodeDateTime] Desc,[TicketSerial] Desc) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Transaction_FiscalDate] ON [tbTransaction] ([TransactionFiscalDate] Desc,[TransactionDateTime] Desc,[TransactionSerial] Desc) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.235</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor index IX_ResourceSchedule_PerformanceId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_ResourceSchedule_PerformanceId on tbResourceSchedule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_PerformanceId] ON [tbResourceSchedule] ([PerformanceId] ,[MainResource] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.234</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_Performance_Event_Status_DateTimeTo</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Performance_Event_Status_DateTimeTo] ON [tbPerformance] ([EventId] ,[PerformanceStatus] ,[DateTimeTo] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.233</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_EntityChange_Entity</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_EntityChange_Entity] ON [tbEntityChange] ([EntityType] ,[EntityChangeId] ) 
include (InsertUpdate,EntityId)

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.232</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbResourceType.PersonOnly</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceType
add PersonOnly bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbResourceType
set PersonOnly=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceType
alter column PersonOnly bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.231</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor indexes:
- UQ_MediaCode
- IDX_RepositoryIndex_EntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_MediaCode on tbMediaCode
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_MediaCode] ON [tbMediaCode] ([MediaCode] ) 
include (MediaId)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IDX_RepositoryIndex_EntityId on tbRepositoryIndex
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_RepositoryIndex_EntityId] ON [tbRepositoryIndex] ([EntityId] ,[RepositoryIndexType] ) 
include (RepositoryId)

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.230</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor indexes:
-  IX_ResourceSkillLink_ResourceSkillId
-  IX_ResourceSkillLink_EntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_ResourceSkillLink_ResourceSkillId on tbResourceSkillLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSkillLink_ResourceSkillId] ON [tbResourceSkillLink] ([ResourceSkillId] ) 
include (EntityId)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_ResourceSkillLink_EntityId on tbResourceSkillLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSkillLink_EntityId] ON [tbResourceSkillLink] ([EntityId] ) 
include (ResourceSkillId)

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.229</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor indexes:
-  IX_Event2ResourceType_EventId
-  IX_Event2ResourceType_ResourceTypeId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Event2ResourceType_EventId on tbEvent2ResourceType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Event2ResourceType_EventId] ON [tbEvent2ResourceType] ([EventId] ) 
include (ResourceTypeId)


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Event2ResourceType_ResourceTypeId on tbEvent2ResourceType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Event2ResourceType_ResourceTypeId] ON [tbEvent2ResourceType] ([ResourceTypeId] ) 
include (EventId)

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.228</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Refactor index IX_Sale_AccountId
- Drop table tbResourceTypeLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index [IX_Sale_AccountId] ON [tbSale]  

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_AccountId] ON [tbSale] ([AccountId] ,[SaleDateTime] Desc) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbResourceTypeLink
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.227</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor indexes
- IX_SaleItem_PerformanceSetId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_SaleItem_PerformanceSetId on tbSaleItem
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItem_PerformanceSetId] ON [tbSaleItem] ([PerformanceSetId] ) 
include(SaleId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Performance_DateTimeFromTo on tbPerformance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Performance_DateTimeFromTo] ON [tbPerformance] ([DateTimeFrom] ,[DateTimeTo] ) 
include (EventId)

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.226</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create indexes:
- IX_SaleItem_PerformanceSetId
- IX_Sale_SaleDateTime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItem_PerformanceSetId] ON [tbSaleItem] ([PerformanceSetId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_SaleDateTime] ON [tbSale] ([SaleDateTime] Desc) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.225</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>convert tbResourceTypeLink into tbResouceSkillLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbResourceSkillLink (
  ResourceSkillLinkId,  
  ResourceSkillId,  
  EntityType,  
  EntityId
)
select
  newid(),  
  RS.ResourceSkillId,  
  RTL.EntityType,  
  RTL.EntityId
from 
  tbResourceTypeLink RTL inner join  
  tbResourceSkill RS on RS.ResourceTypeId=RTL.ResourceTypeId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.224</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbResourceSkillLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbResourceSkillLink]
(
	[ResourceSkillLinkId] Uniqueidentifier NOT NULL,
	[ResourceSkillId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
Primary Key ([ResourceSkillLinkId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ResourceSkillLink] ON [tbResourceSkillLink] ([ResourceSkillId] ,[EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSkillLink_ResourceSkillId] ON [tbResourceSkillLink] ([ResourceSkillId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSkillLink_EntityId] ON [tbResourceSkillLink] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSkillLink] add  foreign key([ResourceSkillId]) references [tbResourceSkill] ([ResourceSkillId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbResourceSkill (
  ResourceSkillId,
  ResourceTypeId,  
  ResourceSkillName,    
  PriorityOrder,
  Enabled
)
select
  newid(),  
  ResourceTypeId,  
  'Default',  
  0,  
  1
from tbResourceType
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.223</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Replace table tbResourceProperty with tbResourceSkill</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbResourceProperty
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbResourceSkill]
(
	[ResourceSkillId] Uniqueidentifier NOT NULL,
	[ResourceTypeId] Uniqueidentifier NOT NULL,
	[ResourceSkillName] Nvarchar(50) NOT NULL,
	[PriorityOrder] int not null,
	[Enabled] Bit NOT NULL,
Primary Key ([ResourceSkillId])
)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSkill_ResourceTypeId] ON [tbResourceSkill] ([ResourceTypeId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceSkill] add  foreign key([ResourceTypeId]) references [tbResourceType] ([ResourceTypeId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.222</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add performance indexes on foreign keys</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsage_PerformanceId] ON [tbTicketUsage] ([PerformanceId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatTemplate_PerformanceId] ON [tbSeatTemplate] ([PerformanceId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItem_PerformanceId] ON [tbSaleItem] ([PerformanceId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_PerformanceId] ON [tbSale] ([PerformanceId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PerformanceSet_PerformanceId] ON [tbPerformanceSet] ([PerformanceId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.221</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbConsRotation</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbConsRotation]
(
	[ConsolidateType] Smallint NOT NULL,
	[FiscalDate] date NOT NULL,
	[DateTime] smalldatetime NOT NULL,
	[LocationAccountId] Uniqueidentifier NOT NULL,
	[AptWorkstationId] Uniqueidentifier NOT NULL,
	[QtyEntry] Integer NOT NULL,
	[QtyExit] Integer NOT NULL,
	[QtyEntryControlled] Integer NOT NULL,
	[QtyExitControlled] Integer NOT NULL,
	[QtyInside] Integer NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbConsRotation add constraint PK_ConsRotation primary key ([ConsolidateType],[FiscalDate],[DateTime],[LocationAccountId],[AptWorkstationId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsRotation] add  foreign key([LocationAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsRotation] add  foreign key([AptWorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.220</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_TicketUsage_UsageDateTime </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsage_UsageDateTime] ON [tbTicketUsage] ([UsageDateTime] Desc) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.219</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor indexes:
- IX_Transaction_Consolidated
- IX_TicketUsage_Consolidated</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Transaction_Consolidated on tbTransaction
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_TicketUsage_Consolidated on tbTicketUsage
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Transaction_Consolidated] ON [tbTransaction] ([Consolidated] ,[TransactionDateTime] ) 
where Consolidated=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsage_Consolidated] ON [tbTicketUsage] ([Consolidated] ,[UsageDateTime] ) 
where Consolidated=0

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.218</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbEventItinerary</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbEventItinerary]
(
	[EventItineraryId] Uniqueidentifier NOT NULL,
	[EventId] Uniqueidentifier NOT NULL,
	[ChildEventId] Uniqueidentifier NOT NULL,
	[PriorityOrder] Integer NOT NULL,
Primary Key ([EventItineraryId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_EventItinerary_EventId] ON [tbEventItinerary] ([EventId] ,[PriorityOrder] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_EventItinerary_ChildEventId] ON [tbEventItinerary] ([ChildEventId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbEventItinerary] add  foreign key([EventId]) references [tbEvent] ([EventId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbEventItinerary] add  foreign key([ChildEventId]) references [tbEvent] ([EventId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.217</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tables tbEventCategory and tbEventCategoryLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbEventCategory]
(
	[EventCategoryId] Uniqueidentifier NOT NULL,
	[LicenseId] Smallint NOT NULL,
	[EventCategoryType] Smallint NOT NULL,
	[EventCategoryCode] Varchar(15) NOT NULL,
	[EventCategoryName] Nvarchar(50) NOT NULL,
	[Enabled] bit NOT NULL,
Primary Key ([EventCategoryId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_EventCategory_Code] ON [tbEventCategory] ([LicenseId] ,[EventCategoryCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbEventCategory] add  foreign key([LicenseId]) references [tbLicense] ([LicenseId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbEventCategoryLink]
(
	[EventCategoryLinkId] Uniqueidentifier NOT NULL,
	[EventCategoryId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
Primary Key ([EventCategoryLinkId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_EventCategoryLink_EventCategoryId] ON [tbEventCategoryLink] ([EventCategoryId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_EventCategoryLink_EntityId] ON [tbEventCategoryLink] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbEventCategoryLink] add  foreign key([EventCategoryId]) references [tbEventCategory] ([EventCategoryId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.216</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_TagLink_EntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_TagLink_EntityId] ON [tbTagLink] ([EntityId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.215</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_Ticket_FirstUsageDateTime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_FirstUsageDateTime] ON [tbTicket] ([FirstUsageDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.214</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbAsyncProcess</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbAsyncProcess]
(
	[AsyncProcessId] Uniqueidentifier NOT NULL,
	[ServerId] Uniqueidentifier NOT NULL,
	[AsyncProcessType] Smallint NOT NULL,
	[AsyncProcessStatus] Smallint NOT NULL,
	[WorkstationId] Uniqueidentifier NOT NULL,
	[UserAccountId] Uniqueidentifier NOT NULL,
	[QuantityTot] Integer NOT NULL,
	[QuantityPos] Integer NOT NULL,
	[QuantitySkip] Integer NOT NULL,
	[StartDateTime] Datetime NOT NULL,
	[EndDateTime] Datetime NULL,
Primary Key ([AsyncProcessId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AsyncProcess_ServerAndStatus] ON [tbAsyncProcess] ([ServerId] ,[AsyncProcessStatus] ,[StartDateTime] Desc) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AsyncProcess_StartEnd] ON [tbAsyncProcess] ([StartDateTime] Desc,[EndDateTime] Desc) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AsyncProcess_WorkstationId] ON [tbAsyncProcess] ([WorkstationId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AsyncProcess_UserAccountId] ON [tbAsyncProcess] ([UserAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAsyncProcess] add  foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAsyncProcess] add  foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.213</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbDocTemplate.ExecRequireLogin</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
add ExecRequireLogin bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbDocTemplate
set ExecRequireLogin=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
alter column ExecRequireLogin bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.212</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbPromoRule:
- PromoActionTarget
- PromoDiscountType
- PromoDiscountValue</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPromoRule
add PromoActionTarget smallint null, PromoDiscountType smallint null, PromoDiscountValue money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPromoRule
set
  PromoActionTarget=2, --Item  
  PromoDiscountType=1,  
  PromoDiscountValue=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPromoRule
alter column PromoActionTarget smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPromoRule
alter column PromoDiscountType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPromoRule
alter column PromoDiscountValue money not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.211</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbSaleItemPromo</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleItemPromo]
(
	[SaleItemId] Uniqueidentifier NOT NULL,
	[PromoProductId] Uniqueidentifier NOT NULL,
Primary Key ([SaleItemId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemPromo_PromoProductId] ON [tbSaleItemPromo] ([PromoProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemPromo] add  foreign key([SaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemPromo] add  foreign key([PromoProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.210</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbPromoAction</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbPromoAction]
(
	[PromoActionId] Uniqueidentifier NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
	[ActionProductId] Uniqueidentifier NOT NULL,
	[ActionType] Smallint NOT NULL,
	[ActionValue] Money NOT NULL,
	[QuantityMax] int null,
Primary Key ([PromoActionId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PromoAction_ProductId] ON [tbPromoAction] ([ActionProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPromoAction] add  foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPromoAction] add  foreign key([ActionProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.209</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbPromoTrigger</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbPromoTrigger]
(
	[PromoTriggerId] Uniqueidentifier NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
	[TriggerCategoryId] Uniqueidentifier NULL,
	[TriggerProductId] Uniqueidentifier NULL,
	[QuantityMin] Integer NOT NULL,
	[QuantityStep] Integer NOT NULL,
Primary Key ([PromoTriggerId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PromoTrigger_ProductId] ON [tbPromoTrigger] ([ProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPromoTrigger] add  foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPromoTrigger] add  foreign key([TriggerProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPromoTrigger] add  foreign key([TriggerCategoryId]) references [tbCategory] ([CategoryId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.208</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbPromoRule</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbPromoRule]
(
	[ProductId] Uniqueidentifier NOT NULL,
	[Combinable] Bit NOT NULL,
	[PromoRuleType] Smallint NOT NULL,
	[ValidityDateFrom] date NULL,
	[ValidityDateTo] date NULL,
	[MinTrnAmount] Money NULL,
	[MinItemCount] Integer NULL,
	[MinItemAmount] Money NULL,
Primary Key ([ProductId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPromoRule] add  foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.207</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add field tbEvent.DefaultPerformanceDuration
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEvent
add DefaultPerformanceDuration int null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.206</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fiel tbResourceSchedule.MainResource</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule
add MainResource bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbResourceSchedule
set MainResource=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule
alter column MainResource bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.205</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbEvent2ResourceType.Main</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEvent2ResourceType
add Main bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbEvent2ResourceType
set Main=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent2ResourceType
alter column Main bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.204</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Regenerate index IX_Performance_LocationDateTime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Performance_LocationDateTime on tbPerformance
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Performance_LocationDateTime] ON [tbPerformance] ([LocationAccountId] ,[DateTimeFrom] ) 
include ([EventId])

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.203</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field to tbEvent:
- LocationAccountId
- AccessAreaAccountId

Create index IX_Event_Location</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEvent
add LocationAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
add AccessAreaAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbEvent] add  foreign key([LocationAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbEvent] add  foreign key([AccessAreaAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Event_Location] ON [tbEvent] ([LocationAccountId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.202</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0] Rename IDX_Performance_EventDateTime to IX_Performance_EventDateTime
[1] Create index IX_Performance_LocationDateTime
[2] Create index IX_Performance_AcAreaDateTime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbPerformance.IDX_Performance_EventDateTime', 'IX_Performance_EventDateTime', 'INDEX'; 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Performance_LocationDateTime] ON [tbPerformance] ([LocationAccountId] ,[DateTimeFrom] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Performance_AcAreaDateTime] ON [tbPerformance] ([AccessAreaAccountId] ,[DateTimeFrom] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.201</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbAccountDetail.ResourceQuantity</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
add ResourceQuantity int null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccountDetail
set ResourceQuantity=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column ResourceQuantity int not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.200</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop table tbResource2ResourceProperty and tbResource</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbResource2ResourceProperty

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbResource
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.199</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbResourceType.Enabled</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceType
add Enabled bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbResourceType
set Enabled=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceType
alter column Enabled bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.198</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbResourceTypeLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbResourceTypeLink]
(
	[ResourceTypeLinkId] Uniqueidentifier NOT NULL,
	[ResourceTypeId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
Primary Key ([ResourceTypeLinkId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceTypeLink_ResourceTypeId] ON [tbResourceTypeLink] ([ResourceTypeId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceTypeLink_EntityId] ON [tbResourceTypeLink] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ResourceTypeLink] ON [tbResourceTypeLink] ([ResourceTypeId] ,[EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResourceTypeLink] add  foreign key([ResourceTypeId]) references [tbResourceType] ([ResourceTypeId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.197</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbResourceSchedule</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_ResourceSchedule_ResourceId on tbResourceSchedule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @foreign_key_name nvarchar(max);
DECLARE @dropstmt nvarchar(max);

SELECT @foreign_key_name = f.name
  FROM sys.foreign_keys AS f
 INNER JOIN sys.foreign_key_columns AS fc 
    ON f.object_id = fc.constraint_object_id 
 WHERE f.parent_object_id = object_id(N'[dbo].[tbResourceSchedule]')
   AND f.referenced_object_id = object_id(N'[dbo].[tbResource]')
   AND COL_NAME(fc.referenced_object_id, fc.referenced_column_id) = 'ResourceId';

if (len(@foreign_key_name) &gt; 0) 
begin
  select @dropstmt = 'ALTER TABLE [dbo].[tbResourceSchedule] DROP CONSTRAINT [' + @foreign_key_name + ']';
  execute sp_executesql @dropstmt
end;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule
drop column ResourceId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbResourceSchedule
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule
add EntityType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule
add EntityId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_EntityId] ON [tbResourceSchedule] ([EntityId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.196</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to table tbResourceType
- VisibleInRecap
- AutoSelect</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceType
add VisibleInRecap bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceType
add AutoSelect bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbResourceType
set
  VisibleInRecap=0,  
  AutoSelect=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceType
alter column VisibleInRecap bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceType
alter column AutoSelect bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.195</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_Resource_ResourceTypeId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Resource_ResourceTypeId] ON [tbResource] ([ResourceTypeId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.194</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Create index UQ_Resource_EntityId
- Create index UQ_Resource_ResourceCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Resource_EntityId] ON [tbResource] ([EntityId] ) 
where EntityId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Resource_ResourceCode] ON [tbResource] ([LicenseId] ,[ResourceCode] ) 
where ResourceCode is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.193</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0..2] Add field tbResource.Quantity
[3] Change tbResourceSchedule.Quantity as smallint not null
[4] Create index IX_ResourceSchedule_ResourceId
[5] Create index IX_ResourceSchedule_PerformanceId
[6] Create index IX_Event2ResourceType_EventId
[7] Create index IX_Event2ResourceType_ResourceTypeId
[8] Drop table tbPerformance2Resource
[9] Create index IX_Resource_EntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResource
add Quantity smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbResource
set Quantity=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResource
alter column Quantity smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceSchedule
alter column Quantity smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_ResourceId] ON [tbResourceSchedule] ([ResourceId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ResourceSchedule_PerformanceId] ON [tbResourceSchedule] ([PerformanceId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Event2ResourceType_EventId] ON [tbEvent2ResourceType] ([EventId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Event2ResourceType_ResourceTypeId] ON [tbEvent2ResourceType] ([ResourceTypeId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbPerformance2Resource
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Resource_EntityId] ON [tbResource] ([EntityId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.192</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbResourceType.PriorityOrder</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbResourceType
add PriorityOrder smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.191</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- drop table tbEvent2ResourceProperty
- create table tbEvent2ResourceType
- create table tbPerformance2Resource</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbEvent2ResourceProperty
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbEvent2ResourceType]
(
	[Event2ResourceTypeId] Uniqueidentifier NOT NULL,
	[EventId] Uniqueidentifier NOT NULL,
	[ResourceTypeId] Uniqueidentifier NOT NULL,
	[Quantity] Smallint NOT NULL,
	[Mandatory] Bit NOT NULL,
Primary Key ([Event2ResourceTypeId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbEvent2ResourceType] add  foreign key([EventId]) references [tbEvent] ([EventId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbEvent2ResourceType] add  foreign key([ResourceTypeId]) references [tbResourceType] ([ResourceTypeId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPerformance2Resource]
(
	[Performance2ResourceId] Uniqueidentifier NOT NULL,
	[PerformanceId] Uniqueidentifier NOT NULL,
	[ResourceId] Uniqueidentifier NOT NULL,
	[Quantity] Smallint NOT NULL,
Primary Key ([Performance2ResourceId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPerformance2Resource] add  foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPerformance2Resource] add  foreign key([ResourceId]) references [tbResource] ([ResourceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.190</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbResourceType.ResourceTypeCode -&gt; not nullable</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_ResourceType_Code on tbResourceType

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResourceType
alter column ResourceTypeCode varchar(10) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ResourceType_Code] ON [tbResourceType] ([LicenseId] ,[ResourceTypeCode] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.189</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add table tbResourceType
- Replace tbResource.ResourceType with ResourceTypeId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbResourceType]
(
	[ResourceTypeId] Uniqueidentifier NOT NULL,
	[LicenseId] Smallint NOT NULL,
	[ResourceTypeCode] Varchar(10) NULL,
	[ResourceTypeName] Nvarchar(50) NOT NULL,
Primary Key ([ResourceTypeId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ResourceType_Code] ON [tbResourceType] ([LicenseId] ,[ResourceTypeCode] ) 
where ResourceTypeCode is not null


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResource
drop column ResourceType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbResource
add ResourceTypeId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbResource] add  foreign key([ResourceTypeId]) references [tbResourceType] ([ResourceTypeId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.188</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.TaxCalcType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add TaxCalcType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set TaxCalcType=3 -- Exempt
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column TaxCalcType smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.187</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create:
- UQ_Tax_Code
- IX_Product2Tax_TaxId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Tax_Code] ON [tbTax] ([TaxCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product2Tax_TaxId] ON [tbProduct2Tax] ([TaxId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.186</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTicketUsage.IncProductId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add IncProductId uniqueidentifier
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketUsage] add  foreign key([IncProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.185</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tables:
- tbTax
- tbTaxBracket
- tbProduct2Tax</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTax]
(
	[TaxId] Uniqueidentifier NOT NULL,
	[TaxCode] Varchar(10) NOT NULL,
	[TaxName] Nvarchar(50) NOT NULL,
	[TaxType] Smallint NOT NULL,
	[TaxValue] Money NOT NULL,
	[RoundingType] Smallint NOT NULL,
	[Remboursable] Bit NOT NULL,
	[Exemptable] Bit NOT NULL,
Primary Key ([TaxId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTaxBracket]
(
	[TaxBracketId] Uniqueidentifier NOT NULL,
	[TaxId] Uniqueidentifier NOT NULL,
	[PriorityOrder] Integer NOT NULL,
	[TaxableAmountFrom] Money NULL,
	[TaxableAmountTo] Money NULL,
	[TaxAmount] Money NOT NULL,
Primary Key ([TaxBracketId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TaxBracket_TaxId] ON [tbTaxBracket] ([TaxId] ,[PriorityOrder] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTaxBracket] add  foreign key([TaxId]) references [tbTax] ([TaxId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbProduct2Tax]
(
	[Product2TaxId] Uniqueidentifier NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
	[TaxId] Uniqueidentifier NOT NULL,
Primary Key ([Product2TaxId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Product2Tax] ON [tbProduct2Tax] ([ProductId] ,[TaxId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product2Tax_ProductId] ON [tbProduct2Tax] ([ProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct2Tax] add  foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct2Tax] add  foreign key([TaxId]) references [tbTax] ([TaxId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.184</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>rename tbPlugin field DeviceId into PaymentMethodId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename
    @objname = 'tbPlugin.DeviceId',
    @newname = 'PaymentMethodId',
    @objtype = 'COLUMN'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.183</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbPlugin.DeviceId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPlugin
add DeviceId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPlugin] add  foreign key([DeviceId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.182</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields CatalogNameExt and ShowNameExt to table tbCatalog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCatalog
add
  CatalogNameExt nvarchar(50) null,
  ShowNameExt bit null  

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbCatalog
set ShowNameExt=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCatalog
alter column ShowNameExt bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.181</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor table tbCatalog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbCatalog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbCatalog]
(
	[CatalogId] Uniqueidentifier NOT NULL,
	[CatalogType] Smallint NOT NULL,
	[CatalogEnabled] Bit NOT NULL,
	[PriorityOrder] Integer NOT NULL,
	[ParentCatalogId] Uniqueidentifier NULL,
	[CatalogName] Nvarchar(50) NULL,
	[BackgroundColor] Varchar(6) NULL,
	[EntityType] Smallint NULL,
	[EntityId] Uniqueidentifier NULL,
Primary Key ([CatalogId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Catalog_ParentId] ON [tbCatalog] ([ParentCatalogId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Catalog_EntityId] ON [tbCatalog] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCatalog] add  foreign key([ParentCatalogId]) references [tbCatalog] ([CatalogId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.180</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbCatalog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbCatalog]
(
	[CatalogId] Uniqueidentifier NOT NULL,
	[CatalogType] Smallint NOT NULL,
	[PriorityOrder] Integer NOT NULL,
	[ParentCatalogId] Uniqueidentifier NOT NULL,
	[CatalogName] Nvarchar(50) NULL,
	[BackgroundColor] Varchar(6) NULL,
	[EntityType] Smallint NULL,
	[EntityId] Uniqueidentifier NULL,
Primary Key ([CatalogId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Catalog_ParentAndType] ON [tbCatalog] ([ParentCatalogId] ,[CatalogType] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Catalog_EntityId] ON [tbCatalog] ([EntityId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.179</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTicketUsage.ValueProQuota</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add ValueProQuota money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketUsage
set ValueProQuota=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
alter column ValueProQuota money not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.178</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbConsAccess</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbConsAccess
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbConsAccess
drop column ValueFirstUsage, ValueProQuota
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbConsAccess
add
  QtyOffEntry int not null,
  QtyOffReentry int not null,
  QtyOffCrossover int not null,
  ValFirstUsage money not null,  
  ValEntry money not null,  
  ValReentry money not null,  
  ValExit money not null,  
  ValCrossover money not null,  
  ValOverride money not null,  
  ValTransit money not null,  
  FirstUsageRevenue money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketUsage
set Consolidated=0
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.177</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbMetaField.FullTextIndex</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMetaField
add FullTextIndex bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbMetaField
set FullTextIndex=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMetaField
alter column FullTextIndex bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.176</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor IX_Account_EntityType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Account_EntityType on tbAccount
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Account_EntityType] ON [tbAccount] ([EntityType] ) 
 INCLUDE (AccountId,AccountCode,AccountCodeExt,DisplayName)

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.175</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbFullText</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbFullText]
(
	[EntityId] Uniqueidentifier NOT NULL,
	[Word] Nvarchar(50) NOT NULL,
	[EntityType] Smallint NOT NULL,
Primary Key ([EntityId],[Word])
) 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_FullText_EntitType_Word] ON [tbFullText] ([EntityType] ,[Word] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.174</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>alter index UQ_AccountTree</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP INDEX UQ_AccountTree ON tbAccountTree
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_AccountTree] ON [tbAccountTree] ([LicenseId] ,[AccountId] ) 
 INCLUDE (CategoryId)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.173</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index IX_Category_ParentCategoryId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Category_ParentCategoryId] ON [tbCategory] ([ParentCategoryId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.172</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields QtyOverride, QtyTransit on table tbConsAccess</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbConsAccess
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbConsAccess
add QtyOverride int not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbConsAccess
add QtyTransit int not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketUsage
set Consolidated=0
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.171</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change tbSerial "Locked" into "LockId"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSerial
drop column Locked
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSerial
add LockId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSerial
set LockId=newid()
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSerial
alter column LockId uniqueidentifier not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.170</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_AccountTree_ParentId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_AccountTree_ParentId] ON [tbAccountTree] ([LicenseId] ,[ParentAccountId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.169</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index IX_Ticket_TDSSN</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_TDSSN] ON [tbTicket] ([LicenseId] ,[StationSerial] ,[EncodeFiscalDate] ,[TicketSerial] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.168</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_Media_TDSSN</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Media_TDSSN] ON [tbMedia] ([LicenseId] ,[StationSerial] ,[EncodeFiscalDate] ,[MediaSerial] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.167</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor index IX_TicketUsage_Consolidated</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_TicketUsage_Consolidated on tbTicketUsage
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsage_Consolidated] ON [tbTicketUsage] ([Consolidated] ,[ValidateResult] ,[UsageDateTime] ) 
where Consolidated&lt;&gt;0

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.166</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index IX_SeatHold_WorkstationStatus</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_SeatHold_WorkstationStatus] ON [tbSeatHold] ([WorkstationId] ,[HoldStatus] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.165</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- change tbUpload.Priority from "tinyint" to "smallint"
- rename tbUpload "Priority" in "QueuePriority"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Upload_StatusPriorityType on tbUpload
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbUpload
alter column Priority smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbUpload.Priority' , 'QueuePriority', 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Upload_StatusPriorityType] ON [tbUpload] ([UploadStatus] ,[QueuePriority] ,[UploadType] ,[RequestDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.164</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index IX_ProductLink_ProductId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_ProductLink_ProductId] ON [tbProductLink] ([ProductId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.163</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbUpload.Priority</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Upload_StatusAndTime on tbUpload
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbUpload
add Priority tinyint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbUpload
set Priority=10

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbUpload
alter column Priority tinyint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Upload_StatusPriorityType] ON [tbUpload] ([UploadStatus] ,[Priority] ,[UploadType] ,[RequestDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.162</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>insert "NULL" OptionSetId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbOptionSet (OptionSetId, OptionsDesc)
values ('00000000-0000-0000-0000-000000000000', '')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.161</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0..2] Add field tbTransaction.Consolidated
[3] Add index IX_Transaction_Consolidated
[4..6] Add field tbTicketUsage.Consolidated
[7] Add index IX_TicketUsage_Consolidated
[8] Add table tbConsSale
[9] Add table tbConsAccess</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTransaction
add Consolidated bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTransaction
set Consolidated=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column Consolidated bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Transaction_Consolidated] ON [tbTransaction] ([Consolidated] ,[TransactionDateTime] ) 
where Consolidated&lt;&gt;0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add Consolidated bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketUsage
set Consolidated=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
alter column Consolidated bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsage_Consolidated] ON [tbTicketUsage] ([Consolidated] ,[UsageDateTime] ) 
where Consolidated&lt;&gt;0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbConsSale]
(
	[ConsSaleType] Smallint NOT NULL,
	[ConsolidateType] Smallint NOT NULL,
	[FiscalDate] date NOT NULL,
	[DateTime] Smalldatetime NOT NULL,
	[LocationAccountId] Uniqueidentifier NOT NULL,
	[OpAreaAccountId] Uniqueidentifier NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
	[OptionSetId] Uniqueidentifier NOT NULL,
	[UnitAmount] Money NOT NULL,
	[Quantity] Integer NOT NULL,
Constraint PK_ConsSale Primary Key ([ConsSaleType],[ConsolidateType],[FiscalDate],[DateTime],[LocationAccountId],[OpAreaAccountId],[ProductId],[OptionSetId],[UnitAmount])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbConsAccess]
(
	[ConsAccessType] Smallint NOT NULL,
	[ConsolidateType] Smallint NOT NULL,
	[FiscalDate] date NOT NULL,
	[DateTime] Smalldatetime NOT NULL,
	[LocationAccountId] Uniqueidentifier NOT NULL,
	[EventId] Uniqueidentifier NOT NULL,
	[AccessAreaAccountId] Uniqueidentifier NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
	[OptionSetId] Uniqueidentifier NOT NULL,
	[QtyFirstUsage] Integer NOT NULL,
	[QtyEntry] Integer NOT NULL,
	[QtyReentry] Integer NOT NULL,
	[QtyExit] Integer NOT NULL,
	[QtyCrossover] Integer NOT NULL,
	[ValueFirstUsage] Money NOT NULL,
	[ValueProQuota] Money NOT NULL,
Constraint PK_ConsAccess Primary Key ([ConsAccessType],[ConsolidateType],[FiscalDate],[DateTime],[LocationAccountId],[EventId],[AccessAreaAccountId],[ProductId],[OptionSetId])
) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.160</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index IX_OptionSetDetail_AttributeItemId
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_OptionSetDetail_AttributeItemId] ON [tbOptionSetDetail] ([AttributeItemId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.159</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbSaleItem.OptionSetId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItem
add OptionSetId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItem] add  foreign key([OptionSetId]) references [tbOptionSet] ([OptionSetId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.158</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tables tbOptionSet and tbOptionSetDetail</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbOptionSet]
(
	[OptionSetId] Uniqueidentifier NOT NULL,
	[OptionsDesc] Nvarchar(4000) NOT NULL,
Constraint PK_OptionSet Primary Key ([OptionSetId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbOptionSetDetail]
(
	[OptionSetId] Uniqueidentifier NOT NULL,
	[AttributeItemId] Uniqueidentifier NOT NULL,
Constraint PK_OptionSetDetail Primary Key ([OptionSetId],[AttributeItemId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOptionSetDetail] add  foreign key([OptionSetId]) references [tbOptionSet] ([OptionSetId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOptionSetDetail] add  foreign key([AttributeItemId]) references [tbAttributeItem] ([AttributeItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.157</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Merge DocTemplateType [5,7]=[5]</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbDocTemplate
set DocTemplateType=5
where DocTemplateType=7
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.156</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbLog.LogDataType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLog
add LogDataType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLog
set LogDataType=1 -- Text
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLog
alter column LogDataType smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.155</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor table tbMetaData</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbMetaDataNew]
(
	[EntityId] Uniqueidentifier NOT NULL,
	[MetaFieldId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[ShortValue] Nvarchar(100) NULL,
	[LongValue] Ntext NULL,
Constraint PK_MetaData Primary Key ([EntityId],[MetaFieldId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbMetaDataNew (
  EntityId,
  MetaFieldId,
  EntityType,
  ShortValue,
  LongValue
)
select
  EntityId,
  MetaFieldId,
  EntityType,
  ShortValue,
  LongValue
from tbMetaData

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbMetaData

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbMetaDataNew', 'tbMetaData'

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMetaData] add  foreign key([MetaFieldId]) references [tbMetaField] ([MetaFieldId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_MetaData_MetaFieldId] ON [tbMetaData] ([MetaFieldId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.154</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add fields to tbUpload: EntityType, EntityId
- Rename index IDX_Upload_StatusAndTime into IX_Upload_StatusAndTime
- Add index IX_Upload_EntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbUpload
add EntityType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbUpload
add EntityId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IDX_Upload_StatusAndTime on tbUpload
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Upload_StatusAndTime] ON [tbUpload] ([UploadStatus] ,[RequestDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Upload_EntityId] ON [tbUpload] ([EntityId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.153</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>change tbLog.LogRecap from nvarchar to varchar(100)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLog
alter column LogRecap varchar(100)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.152</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON></REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLog
add LogPurgeDate date null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLog
set LogPurgeDate=DateAdd(day, 999, Cast(LogDateTime as date))
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLog
alter column LogPurgeDate date not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Log_PurgeDate] ON [tbLog] ([LogPurgeDate] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.151</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbPayment.Change</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPayment
add Change bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPayment
set Change=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPayment
alter column Change bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.150</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop table tbLoginLog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbLoginLog
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.149</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop index IX_Log_EntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Log_EntityId on tbLog
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.148</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop field tbLog.LogText</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLog
drop column LogText
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.147</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor table tbLog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Log_LogHash on tbLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLog
drop column LogHash
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLog
add LogHash uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Log_LogHash] ON [tbLog] ([LogHash] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLog
add LogRecap nvarchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLog
set LogRecap=Coalesce(Cast(LogText as nvarchar(100)), '')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLog
alter column LogRecap nvarchar(100) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLog
add LogData image null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.146</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add indexes:
- IX_Ticket_TransactionId
- IX_Media_TransactionId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_TransactionId] ON [tbTicket] ([TransactionId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Media_TransactionId] ON [tbMedia] ([TransactionId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.145</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbMedia.TransactionId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMedia
add TransactionId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMedia] add  foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbMedia
set TransactionId = X_TransactionId
from (
  select
    M.MediaId as X_MediaId,
    (
      select top 1 T.TransactionId
      from
        tbTransactionLink TL inner join  
        tbTransaction T on T.TransactionId=TL.TransactionId    
      where TL.EntityId=M.MediaId
      order by T.TransactionDateTime
    ) as X_TransactionId  
  from tbMedia M 
) X
where MediaId=X_MediaId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbTransactionLink
where TransactionId in (select TransactionId from tbMedia)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.144</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTicket.TransactionId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add TransactionId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicket] add  foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicket
set TransactionId = X_TransactionId
from (
  select
    Tck.TicketId as X_TicketId,
    (
      select top 1 T.TransactionId
      from
        tbTransactionLink TL inner join  
        tbTransaction T on T.TransactionId=TL.TransactionId    
      where TL.EntityId=Tck.TicketId
      order by T.TransactionDateTime
    ) as X_TransactionId  
  from tbTicket Tck 
) X
where TicketId=X_TicketId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbTransactionLink
where TransactionId in (select TransactionId from tbTicket)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.143</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change tbMedia.EncodeFiscalDate from "datetime" to "date"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_Media on tbMedia
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMedia
alter column EncodeFiscalDate date not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Media_TDSSN] ON [tbMedia] ([LicenseId] ,[EncodeFiscalDate] ,[StationSerial] ,[MediaSerial] ) 
where MediaSerial &gt; 0

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.142</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change tbTicket.EncodeFiscalDate from "datetime" to "date"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
alter column EncodeFiscalDate date not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.141</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change tbEvent and tbPerformance fields: OnSaleFrom and OnSaleTo from "datetime" to "date"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEvent
alter column OnSaleFrom date null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
alter column OnSaleTo date null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
alter column OnSaleFrom date null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
alter column OnSaleTo date null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.140</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change tbBox.FBoxDate from "datetime" to "date"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Box_DateLocationUser on tbBox
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBox
alter column FBoxDate date not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Box_DateLocationUser] ON [tbBox] ([FBoxDate] ,[LocationAccountId] ,[UserAccountId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.139</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change tbVoucher (CreateDate, StartDate, EndDate) from "datetime" to "date"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbVoucher
alter column CreateDate date not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbVoucher
alter column StartDate date null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbVoucher
alter column EndDate date null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.138</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change tbPaymentCredit.DueDate from "datetime" to "date"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentCredit
alter column DueDate date null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.137</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change tbSale.SaleFiscalDate from "datetime" to "date"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSale
alter column SaleFiscalDate date not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.136</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change tbTransaction.TransactionFiscalDate from "datetime" to "date"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_TransactionSerial on tbTransaction

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_Transaction_TDSSN on tbTransaction

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction 
alter column TransactionFiscalDate date not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_TransactionSerial] ON [tbTransaction] ([WorkstationId] ,[TransactionFiscalDate] ,[TransactionSerial] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Transaction_TDSSN] ON [tbTransaction] ([LicenseId] ,[StationSerial] ,[TransactionFiscalDate] ,[TransactionSerial] ) where stationserial&gt;=0 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.135</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_Log_EntityId_Level_DT</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Log_EntityId_Level_DT] ON [tbLog] ([EntityId] ,[LogLevel] ,[LogDateTime] Desc) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.134</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON></REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>/*
delete from tbUploadLog 
where UploadId in (
  select UploadId  
  from tbUpload  
  where
    RequestDateTime&lt;Convert(datetime, '2013-10-25', 120) and 
    UploadStatus=3
)
*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>/*
  delete from tbUpload  
  where
    RequestDateTime&lt;Convert(datetime, '2013-10-25', 120) and 
    UploadStatus=3
*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>/*
insert into tbLog (
  LogId,
  LogDateTime,
  LogLevel,
  WorkstationId,
  SourceWorkstationId,
  DurationMS,
  LogHash,
  LogText,
  EntityType,
  EntityId
)
select
  newid(),  
  UL.LogDateTime,  
  4, -- Info     
  U.WorkstationId,  
  U.WorkstationId,  
  0,  
  '',  
  LogMessage,  
  44, -- Upload  
  U.UploadId
from 
  tbUpload U inner join  
  tbUploadLog UL on UL.UploadId=U.UploadId        
*/
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>--drop table tbUploadLog
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.133</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>change tbLog.SourceWorkstationId to NULLABLE</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLog
alter column SourceWorkstationId uniqueidentifier null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.132</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Drop index IX_Log_LogDate
- Drop field tbLog.LogDate
- Drop field tbLog.Success
- Add index IX_Log_LogDateTime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP INDEX [IX_Log_LogDate] ON [dbo].[tbLog] WITH ( ONLINE = OFF )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLog
drop column LogDate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLog
drop column Success
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Log_LogDateTime] ON [tbLog] ([LogDateTime] Desc) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.131</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Regenerate table tbLog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbLog]
(
	[LogId] Uniqueidentifier NOT NULL,
	[LogDate] Datetime NOT NULL,
	[LogDateTime] Datetime NOT NULL,
	[LogLevel] Smallint NOT NULL,
	[WorkstationId] Uniqueidentifier NOT NULL,
	[SourceWorkstationId] Uniqueidentifier NOT NULL,
	[DurationMS] Integer NOT NULL,
	[Success] Bit NOT NULL,
	[LogHash] Varchar(32) NOT NULL,
	[LogText] Ntext NOT NULL,
	[EntityType] Smallint NULL,
	[EntityId] Uniqueidentifier NULL,
Primary Key ([LogId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Log_LogDate] ON [tbLog] ([LogDate] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Log_LogLevel] ON [tbLog] ([LogLevel] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Log_EntityId] ON [tbLog] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Log_LogHash] ON [tbLog] ([LogHash] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLog] add  foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLog] add  foreign key([SourceWorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.129</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbLog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbLog]
(
	[LogId] Uniqueidentifier NOT NULL,
	[LogDateTime] Datetime NOT NULL,
	[LogLevel] Smallint NOT NULL,
	[WorkstationId] Uniqueidentifier NOT NULL,
	[SourceWorkstationId] Uniqueidentifier NOT NULL,
	[DurationMS] Integer NOT NULL,
	[Success] Bit NOT NULL,
	[LogText] Ntext NOT NULL,
	[EntityType] Smallint NULL,
	[EntityId] Uniqueidentifier NULL,
Primary Key ([LogId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLog] add  foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLog] add  foreign key([SourceWorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.128</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_SaleItem_ProductId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItem_ProductId] ON [tbSaleItem] ([ProductId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.127</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbWorkstation.LoggedUserAccountId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbWorkstation
add LoggedUserAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbWorkstation] add  foreign key([LoggedUserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Workstation_LoggedUserAccountId] ON [tbWorkstation] ([LoggedUserAccountId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.126</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbLock.StrongLock</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLock
add StrongLock bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLock
set StrongLock=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLock
alter column StrongLock bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.125</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- [0..3] Add field tbTransaction.LicenseId
- [4..6] Add field tbTransaction.StationSerial
- [7] Add index UQ_Transaction_TDSSN
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTransaction
add LicenseId smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTransaction
set LicenseId=X_LicenseId
from (
  select   
    T.TransactionId as X_TransactionId,    
    S.LicenseId as X_LicenseId    
  from   
    tbTransaction T inner join    
    tbSale S on S.SaleId=T.SaleId    
) X
where
  TransactionId=X_TransactionId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransaction] add  foreign key([LicenseId]) references [tbLicense] ([LicenseId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column LicenseId smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
add StationSerial int null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTransaction
set StationSerial=X_StationSerial
from (
  select  
    T.TransactionId as X_TransactionId,    
    W.StationSerial as X_StationSerial    
  from  
    tbTransaction T inner join    
    tbWorkstation W on W.WorkstationId=T.WorkstationId    
) X
where TransactionId=X_TransactionId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column StationSerial int not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Transaction_TDSSN] ON [tbTransaction] ([LicenseId] ,[StationSerial] ,[TransactionFiscalDate] ,[TransactionSerial] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.124</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTransaction.Interrupted</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTransaction
add Interrupted bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTransaction
set Interrupted=0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTransaction
set Interrupted=1
where TransactionType=45 -- Interrupted
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column Interrupted bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.123</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_Tag_EntityTypeAndName</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Tag_EntityTypeAndName] ON [tbTag] ([EntityType] ,[TagName] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.122</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop file tbSale.SaleAmount</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSale
drop column SaleAmount
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.121</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Updates all validated and free (zero value) transactions as Paid</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbTransaction
set Paid=1
where
  TransactionId in (
    select T.TransactionId 
    from
      tbTransaction T inner join
      tbSale S on S.SaleId=T.SaleId
    where
      T.Validated&lt;&gt;0 and
      T.Paid=0 and
      S.TotalAmount=0 and
      S.PaidAmount=0 and
      S.Paid&lt;&gt;0
  )

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.120</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Regenerate table tbSerial on new logic</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>sp_rename 'tbSerial', 'tbSerial_OLD'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSerial]
(
	[IdentifierAK] Varchar(50) NOT NULL,
	[Serial] Integer NOT NULL,
	[Locked] bit NOT NULL,
Primary Key ([IdentifierAK])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbSerial (
  IdentifierAK,  
  Serial,  
  Locked
)
-- BOX
select 'BOX:' + REPLACE(IdentifierAK, '/', '-'), Serial, 0
from tbSerial_OLD
where EntityType=34

union
-- ORG
select REPLACE(REPLACE(IdentifierAK, 'L', 'ORG:'), '.WKS', '-') + '-' + REPLACE(ReferenceTime, '-', ''), Serial, 0
from tbSerial_OLD
where EntityType=1

union
-- TRN
select REPLACE(REPLACE(IdentifierAK, 'L', 'TRN:'), '.WKS', '-') + '-' + REPLACE(ReferenceTime, '-', ''), Serial, 0
from tbSerial_OLD
where EntityType=20

union
-- TCK
select REPLACE(REPLACE(IdentifierAK, 'DB', 'TCK:'), '.WKS', '-') + '-' + REPLACE(ReferenceTime, '-', ''), Serial, 0
from tbSerial_OLD
where EntityType=22

union
-- MED
select REPLACE(REPLACE(IdentifierAK, 'L', 'MED:'), '.WKS', '-') + '-' + REPLACE(ReferenceTime, '-', ''), Serial, 0
from tbSerial_OLD
where EntityType=23

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbSerial_OLD
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.119</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbLock</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbLock]
(
	[LockId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
	[WorkstationId] Uniqueidentifier NOT NULL,
	[UserAccountId] Uniqueidentifier NOT NULL,
	[LockDateTime] Datetime NOT NULL,
Primary Key ([LockId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Lock_EntityId] ON [tbLock] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLock] add  foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLock] add  foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.118</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_Portfolio_AccountId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Portfolio_AccountId] ON [tbTicketMediaMatch] ([AccountId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.117</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create indexes:
- IX_Transaction_WorkstationId
- IX_Transaction_UserAccountId
- IX_Transaction_SupAccountId
- IX_Transaction_BoxId
- IX_Sale_WorkstationId
- IX_Sale_UserAccountId

</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Transaction_WorkstationId] ON [tbTransaction] ([WorkstationId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Transaction_UserAccountId] ON [tbTransaction] ([UserAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Transaction_SupAccountId] ON [tbTransaction] ([SupAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Transaction_BoxId] ON [tbTransaction] ([BoxId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_WorkstationId] ON [tbSale] ([WorkstationId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_UserAccountId] ON [tbSale] ([UserAccountId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.116</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Drop index IX_Entity
- Drop index IX_EntityId
- Create index IX_ActionLink_EntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP INDEX [IX_Entity] ON [dbo].[tbActionLink] WITH ( ONLINE = OFF )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX [IX_EntityId] ON [dbo].[tbActionLink] WITH ( ONLINE = OFF )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ActionLink_EntityId] ON [tbActionLink] ([EntityId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.115</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_MetaData_EntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_MetaData_EntityId] ON [tbMetaData] ([EntityId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.114</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Removes fields PaymentFiscalDate and PaymentDateTime from tbPayment</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPayment
drop column PaymentFiscalDate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPayment
drop column PaymentDateTime
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.113</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_HistoryLog_EntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_HistoryLog_EntityId] ON [tbHistoryLog] ([EntityId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.112</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbEntityChange and drop tbCache</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbEntityChange]
(
	[EntityChangeId] Bigint Identity(1,1) NOT NULL,
	[EntityType] Smallint NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
	[InsertUpdate] Bit NOT NULL,
Primary Key ([EntityChangeId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [UQ_EntityChange_Entity] ON [tbEntityChange] ([EntityType] ,[EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (
  EntityType,  
  EntityId,  
  InsertUpdate
)
select
  EntityType,  
  EntityId,  
  InsertUpdate
from 
  tbCache
where
  EntityId is not null  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @foreign_key_name nvarchar(max);
DECLARE @dropstmt nvarchar(max);

SELECT @foreign_key_name = f.name
  FROM sys.foreign_keys AS f
 INNER JOIN sys.foreign_key_columns AS fc 
    ON f.object_id = fc.constraint_object_id 
 WHERE f.parent_object_id = object_id(N'[dbo].[tbCache]')
   AND f.referenced_object_id = object_id(N'[dbo].[tbLicense]')
   AND COL_NAME(fc.referenced_object_id, fc.referenced_column_id) = 'LicenseId';

if (len(@foreign_key_name) &gt; 0) 
begin
  select @dropstmt = 'ALTER TABLE [dbo].[tbCache] DROP CONSTRAINT [' + @foreign_key_name + ']';
  execute sp_executesql @dropstmt
end;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX [UQ_Cache_Entity] ON [dbo].[tbCache] WITH ( ONLINE = OFF )

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX [IX_Cache_LastUpdate] ON [dbo].[tbCache] WITH ( ONLINE = OFF )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbCache
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.111</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index IX_TagLink_TagEntityType
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_TagLink_TagEntityType] ON [tbTagLink] ([TagId] ,[EntityType] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.110</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbWorkstation.LastLoginRights</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbWorkstation
add LastLoginRights ntext null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.109</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTransaction.SupAccountId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTransaction
add SupAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransaction] add  foreign key([SupAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.108</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbDocTemplate.MediaGroupTagId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
add MediaGroupTagId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDocTemplate] add  foreign key([MediaGroupTagId]) references [tbTag] ([TagId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.107</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add indexes:
- IX_Workstation_CategoryId
- IX_Workstation_LocationId
- IX_Workstation_OpAreaId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Workstation_CategoryId] ON [tbWorkstation] ([CategoryId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Workstation_LocationId] ON [tbWorkstation] ([LocationAccountId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Workstation_OpAreaId] ON [tbWorkstation] ([OpAreaAccountId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.106</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add indexes:
- IX_Ticket_SeatHoldId
- IX_Ticket_ProductId
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_SeatHoldId] ON [tbTicket] ([SeatHoldId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_ProductId] ON [tbTicket] ([ProductId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.105</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_Media_PortfolioId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Media_PortfolioId] ON [tbMedia] ([TicketMediaMatchId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.104</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop indexes:
- IDX_TicketUsage_TicketDateTime 
- IDX_TicketUsage_MediaDateTime

Add indexes:
- IX_TicketUsage_TicketId
- IX_TicketUsage_MediaCodeId
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP INDEX [IDX_TicketUsage_TicketDateTime] ON [dbo].[tbTicketUsage] WITH ( ONLINE = OFF )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX [IDX_TicketUsage_MediaDateTime] ON [dbo].[tbTicketUsage] WITH ( ONLINE = OFF )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsage_TicketId] ON [tbTicketUsage] ([TicketId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsage_MediaCodeId] ON [tbTicketUsage] ([MediaCodeId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.103</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_TicketUsage_AptWorkstationId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsage_AptWorkstationId] ON [tbTicketUsage] ([AptWorkstationId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.102</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_Sale_AccountId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_AccountId] ON [tbSale] ([AccountId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.101</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_Product2AttributeItem_ProductId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Product2AttributeItem_ProductId] ON [tbProduct2AttributeItem] ([ProductId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.100</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index IX_UploadLog_UploadId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[tbUploadLog]') AND name = N'IX_UploadLog_UploadId')
DROP INDEX [IX_UploadLog_UploadId] ON [dbo].[tbUploadLog] WITH ( ONLINE = OFF )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_UploadLog_UploadId] ON [tbUploadLog] ([UploadId] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.99</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add indexes

- IX_MediaCode_MediaId
- IX_SeatLink_SeatId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_MediaCode_MediaId] ON [tbMediaCode] ([MediaId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SeatLink_SeatId] ON [tbSeatLink] ([SeatId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.98</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index IX_Ticket_PortfolioId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[tbTicket]') AND name = N'IX_Ticket_PortfolioId')
DROP INDEX [IX_Ticket_PortfolioId] ON [dbo].[tbTicket] WITH ( ONLINE = OFF )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_PortfolioId] ON [tbTicket] ([TicketMediaMatchId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.97</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add indexes:
- IX_Payment_TransactionId
- IX_Performance_DateTimeFromTo</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[tbPayment]') AND name = N'IX_Payment_TransactionId')
DROP INDEX [IX_Payment_TransactionId] ON [dbo].[tbPayment] WITH ( ONLINE = OFF )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Payment_TransactionId] ON [tbPayment] ([TransactionId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Performance_DateTimeFromTo] ON [tbPerformance] ([DateTimeFrom] ,[DateTimeTo] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.96</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index IX_SaleItemDetail_SeatHoldId
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemDetail_SeatHoldId] ON [tbSaleItemDetail] ([SeatHoldId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.95</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Removes field EntityType from index UQ_MetaData</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_MetaData on tbMetaData
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_MetaData] ON [tbMetaData] ([EntityId] ,[MetaFieldId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.94</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Converts all the UpSell/Promo URLs from metafields to rights

0: copies data from tbMetaData to tbRight
1: delete data from tbMetaData
2: delete data from tbMaskItem
3: delete data from tbMetaField</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbRight (
  RightId,
  EntityType,
  EntityId,
  RightType,
  RightValue
)
select
  newid(),
  MD.EntityType,
  MD.EntityId,
  MF.FieldType-1949,
  MD.ShortValue
from
  tbMetaData MD inner join
  tbMetaField MF on MF.MetaFieldId=MD.MetaFieldId
where
  MF.FieldType&gt;=2001 and MF.FieldType&lt;=2005
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbMetaData
where MetaFieldId in (select MetaFieldId from tbMetaField where FieldType&gt;=2001 and FieldType&lt;=2005)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbMaskItem
where MetaFieldId in (select MetaFieldId from tbMetaField where FieldType&gt;=2001 and FieldType&lt;=2005)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbMetaField
where FieldType&gt;=2001 and FieldType&lt;=2005
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.93</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>change all currency fields from "float" to "money"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductPrice
alter column PriceValue money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleChannel
alter column PriceValue money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformanceType
alter column PriceValue money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPortfolioLedger
alter column Amount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBoxDeposit
alter column DepositAmount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCurrencyDetail
alter column Amount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketMediaMatch
alter column WalletBalance money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPayment
alter column PaymentAmount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPayment
alter column CurrencyAmount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBoxDepositDetail
alter column UnitAmount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBoxDepositDetail
alter column TotalAmount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBox
alter column OverShort money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
alter column TotalCredit money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
alter column CreditPerTransaction money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
alter column TotalOpen money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
alter column TotalPaid money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
alter column AdvancedPayment money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale
alter column TotalAmount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale
alter column PaidAmount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale
alter column SaleAmount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAttributeItem
alter column OptionalPrice money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItem
alter column UnitRawPrice money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItem
alter column UnitAmount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItem
alter column UnitTax money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItem
alter column TotalAmount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItem
alter column TotalTax money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItem2AttributeItem
alter column OptionalPrice money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column TotalAmount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column TotalTax money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column PaidAmount money not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column PaidTax money not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.92</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index IX_Seat_PerformanceId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[tbSeat]') AND name = N'IX_Seat_PerformanceId')
DROP INDEX [IX_Seat_PerformanceId] ON [dbo].[tbSeat] WITH ( ONLINE = OFF )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Seat_PerformanceId] ON [tbSeat] ([PerformanceId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.91</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add index IX_Account_EntityType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Account_EntityType] ON [tbAccount] ([EntityType] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.90</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop index IX_TransactionItem_SaleItemId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_TransactionItem_SaleItemId on tbTransactionItem

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.89</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbTransactionLink

[0..2] drop indexes
[3] drop FK TrasanctionId
[4] rename tbTransactionLink to tbOLD
[5] create new tbTransactionLink
[6] create new index
[7] create new FK TransactionId
[8] copy all from tbOLD
[9] drop tbOLD</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_TransactionLink_TransactionId on tbTransactionLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IDX_TransactionLink_EntityId on tbTransactionLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IDX_TransactionLink_Entity on tbTransactionLink
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @foreign_key_name nvarchar(max);
DECLARE @dropstmt nvarchar(max);

SELECT @foreign_key_name = f.name
  FROM sys.foreign_keys AS f
 INNER JOIN sys.foreign_key_columns AS fc 
    ON f.object_id = fc.constraint_object_id 
 WHERE f.parent_object_id = object_id(N'[dbo].[tbTransactionLink]')
   AND f.referenced_object_id = object_id(N'[dbo].[tbTransaction]')
   AND COL_NAME(fc.referenced_object_id, fc.referenced_column_id) = 'TransactionId';

if (len(@foreign_key_name) &gt; 0) 
begin
  select @dropstmt = 'ALTER TABLE [dbo].[tbTransactionLink] DROP CONSTRAINT [' + @foreign_key_name + ']';
  execute sp_executesql @dropstmt
end;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbTransactionLink', 'tbOLD'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTransactionLink]
(
	[TransactionId] Uniqueidentifier NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
Primary Key ([TransactionId],[EntityId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionLink_EntityId] ON [tbTransactionLink] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionLink] add  foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbTransactionLink (TransactionId, EntityId, EntityType)
select TransactionId, EntityId, EntityType
from tbOLD
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbOLD
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.88</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0] alter tbTicket.TicketSerial from smallint to int
[1] drop index UQ_Media
[2] set to 0 all duplicated MediaSerial
[3..4] alter tbMedia.MediaSerial, tbMedia.TransactionSerial  from smallint to int
[5] recreate UQ_MediaSerial</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
alter column TicketSerial int not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_Media on tbMedia

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbMedia
set MediaSerial=0
from (
  select
    LicenseId as X_LicenseId,
    EncodeFiscalDate as X_EncodeFiscalDate,
    StationSerial as X_StationSerial,
    MediaSerial as X_MediaSerial,
    Count(MediaId) as Count
  from tbMedia
  group by
    LicenseId,
    EncodeFiscalDate,
    StationSerial,
    MediaSerial
  having Count(MediaId)&gt;1
) X
where 
  LicenseId=X_LicenseId and
  EncodeFiscalDate=X_EncodeFiscalDate and
  StationSerial=X_StationSerial and
  MediaSerial=X_MediaSerial
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMedia
alter column MediaSerial int not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMedia
alter column TransactionSerial int not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Media] ON [tbMedia] ([LicenseId] ,[EncodeFiscalDate] ,[StationSerial] ,[MediaSerial] ) 
where MediaSerial &gt; 0
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.87</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add indexes:
- IX_SaleItem_SaleId
- IX_SaleItemDetail_SaleItemId
- IX_SaleItem2AttributeItem_SaleItemId
- UQ_Serial_IdentAndEntity
- IX_TransactionItem_SaleItemId
- IX_TransactionItem_TransactionId
- IX_TransactionLink_TransactionId
- IX_Transaction_SaleId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItem_SaleId] ON [tbSaleItem] ([SaleId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemDetail_SaleItemId] ON [tbSaleItemDetail] ([SaleItemId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItem2AttributeItem_SaleItemId] ON [tbSaleItem2AttributeItem] ([SaleItemId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Serial_IdentAndEntity] ON [tbSerial] ([IdentifierAK] ,[EntityType] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionItem_SaleItemId] ON [tbTransactionItem] ([SaleItemId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionItem_TransactionId] ON [tbTransactionItem] ([TransactionId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionLink_TransactionId] ON [tbTransactionLink] ([TransactionId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Transaction_SaleId] ON [tbTransaction] ([SaleId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.86</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index IX_Ticket_SaleItemDetailId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_SaleItemDetailId] ON [tbTicket] ([SaleItemDetailId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.85</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index UQ_Login_UserName</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Login_UserName] ON [tbLogin] ([UserName] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.84</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbProductLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProductLink]
(
	[ProductLinkId] Uniqueidentifier NOT NULL,
	[ProductId] Uniqueidentifier NOT NULL,
	[ChildProductId] Uniqueidentifier NOT NULL,
Primary Key ([ProductLinkId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductLink] add  foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductLink] add  foreign key([ChildProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.83</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Drop field tbDocTemplate.SystemTemplate
- Add field tbDocTemplate.SystemCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
drop column SystemTemplate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
add SystemCode varchar(15) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_DocTemplate_SystemCode] ON [tbDocTemplate] ([LicenseId] ,[SystemCode] ) 
WHERE SystemCode IS NOT NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.82</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbDocTemplate.SystemTemplate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
add SystemTemplate bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbDocTemplate
set SystemTemplate=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
alter column SystemTemplate bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.81</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbAttributeItem.Active</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAttributeItem
add Active bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAttributeItem
set Active=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAttributeItem
alter column Active bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.80</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbEntity2Operator</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbEntity2Operator]
(
	[Entity2OperatorId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
	[OperatorType] Smallint NOT NULL,
	[OperatorId] Uniqueidentifier NOT NULL,
	[RightLevel] Smallint NOT NULL,
Primary Key ([Entity2OperatorId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Entity2Op_EntityId] ON [tbEntity2Operator] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Entity2Op_OperatorId] ON [tbEntity2Operator] ([OperatorId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.79</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct2AttributeItem.PriorityOrder</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct2AttributeItem
add PriorityOrder smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.78</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbAttributeItem:
- AttributeItemNameExt
- ShowNameExt</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAttributeItem
add AttributeItemNameExt nvarchar(50) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAttributeItem
add ShowNameExt bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAttributeItem
set ShowNameExt=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAttributeItem
alter column ShowNameExt bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.77</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbCategory:
- CategoryNameExt
- ShowNameExt</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCategory
add CategoryNameExt nvarchar(50) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCategory
add ShowNameExt bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbCategory
set ShowNameExt=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCategory
alter column ShowNameExt bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.76</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbEvent:
- EventNameExt
- ShowNameExt</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEvent
add EventNameExt nvarchar(50) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
add ShowNameExt bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbEvent
set ShowNameExt=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
alter column ShowNameExt bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.75</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbProduct:
- ProductNameExt
- ShowNameExt</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add ProductNameExt nvarchar(50) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add ShowNameExt bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set ShowNameExt=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column ShowNameExt bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.74</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Removes Locale meta fields</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbMetaData
where MetaFieldId in (select MetaFieldId from tbMetaField where FieldType&gt;1000 and FieldType&lt;2000)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbMetaFieldItem
where MetaFieldId in (select MetaFieldId from tbMetaField where FieldType&gt;1000 and FieldType&lt;2000)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbMaskItem
where MetaFieldId in (select MetaFieldId from tbMetaField where FieldType&gt;1000 and FieldType&lt;2000)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbMetaField
where FieldType&gt;1000 and FieldType&lt;2000
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.73</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbSale2Location</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSale2Location]
(
	[Sale2LocationId] Uniqueidentifier NOT NULL,
	[SaleId] Uniqueidentifier NOT NULL,
	[LocationAccountId] Uniqueidentifier NOT NULL,
Primary Key ([Sale2LocationId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSale2Location] add  foreign key([SaleId]) references [tbSale] ([SaleId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSale2Location] add  foreign key([LocationAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.72</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0..2] Add field tbMaskItem.MaskDefaultType
[3] Add field tbMaskItem.DefaultValue
[4..5] Add field tbSale.LocationAccountId
[6..8] Add field tbSale.MultiLocation</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMaskItem
add MaskDefaultType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbMaskItem
set MaskDefaultType=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMaskItem
alter column MaskDefaultType smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMaskItem
add DefaultValue nvarchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale
add LocationAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSale] add  foreign key([LocationAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale
add MultiLocation bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSale
set MultiLocation=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale
alter column MultiLocation bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.71</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields:
- tbSale.AutoPurge
- tbAccountFinance.ResPurgeLock</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSale
add AutoPurge bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSale
set AutoPurge=1

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale
alter column AutoPurge bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
add ResPurgeLock bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAccountFinance
set ResPurgeLock=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
alter column ResPurgeLock bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.70</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbPayment.AccountId </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPayment
add AccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPayment] add  foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.69</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Change tbSeatTemplate.GraphicId to varchar(32)
- Chage tbRight.RightValue to ntext </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSeatTemplate
alter column GraphicId varchar(32) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbRight
alter column RightValue ntext not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.68</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add field tbJob.Checked</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbJob
add Checked bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbJob
set Checked=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbJob
alter column Checked bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Job_TaskIdChecked] ON [tbJob] ([TaskId] ,[Checked] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.67</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field TriggerEntityType and TriggerEntitytId to table tbJob</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbJob
add
  TriggerEntityType smallint null,  
  TriggerEntityId uniqueidentifier null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.66</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tables:
- tbTask
- tbTaskTrigger
- tbJob</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTask]
(
	[TaskId] Uniqueidentifier NOT NULL,
	[LicenseId] Smallint NOT NULL,
	[TaskName] Nvarchar(50) NOT NULL,
	[TaskType] Smallint NOT NULL,
	[Enabled] Bit NOT NULL,
	[NextTaskId] Uniqueidentifier NULL,
	[TaskConfig] Ntext NULL,
	[TaskFrequency] Smallint NOT NULL,
	[TimeFrom] Datetime NULL,
	[TimeTo] Datetime NULL,
	[Interval] Integer NULL,
	[ActiveMon] Bit NOT NULL,
	[ActiveTue] Bit NOT NULL,
	[ActiveWed] Bit NOT NULL,
	[ActiveThu] Bit NOT NULL,
	[ActiveFri] Bit NOT NULL,
	[ActiveSat] Bit NOT NULL,
	[ActiveSun] Bit NOT NULL,
	[LastFire] Datetime NULL,
	[LastReference] Ntext NULL,
Primary Key ([TaskId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTask] add  foreign key([NextTaskId]) references [tbTask] ([TaskId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTaskTrigger]
(
	[TaskTriggerId] Uniqueidentifier NOT NULL,
	[TaskId] Uniqueidentifier NOT NULL,
	[TriggerType] Smallint NOT NULL,
	[Enabled] Bit NOT NULL,
	[TriggerConfig] Ntext NULL,
Primary Key ([TaskTriggerId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTaskTrigger] add  foreign key([TaskId]) references [tbTask] ([TaskId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbJob]
(
	[JobId] Uniqueidentifier NOT NULL,
	[TaskId] Uniqueidentifier NOT NULL,
	[JobStatus] Smallint NOT NULL,
	[StartEntityType] Smallint NOT NULL,
	[StartEntityId] Uniqueidentifier NOT NULL,
	[StartDateTime] Datetime NOT NULL,
	[FinishDateTime] Datetime NULL,
	[WarningCount] Integer NOT NULL,
	[FailedCount] Integer NOT NULL,
	[SucceededCount] Integer NOT NULL,
	[JobLog] Ntext NULL,
Primary Key ([JobId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbJob] add  foreign key([TaskId]) references [tbTask] ([TaskId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTask] add  foreign key([LicenseId]) references [tbLicense] ([LicenseId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.65</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add fields GroupQuantity/GroupTicketOption on table tbTicket</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicket
add GroupQuantity smallint null, GroupTicketOption smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicket
set 
  GroupQuantity=1,  
  GroupTicketOption=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
alter column GroupQuantity smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
alter column GroupTicketOption smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.64</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbProduct

0: Drop column SellableOnline
1: Drop column SellableOffline
2: Set GroupTicketOption=NoGroup
3: Set GroupTicketOption non nullable
4: Change ProductStatus from 3 to 10
5: Drop column GroupPrint</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
drop column SellableOnline
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
drop column SellableOffline
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set GroupTicketOption=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column GroupTicketOption smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set ProductStatus=10
where ProductStatus=3
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
drop column GroupPrint
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.63</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.GroupTicketOption</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add GroupTicketOption smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.62</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields SellableOnline / SellableOffline to table tbProduct</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add SellableOnline bit null, SellableOffline bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set SellableOnline=1, SellableOffline=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column SellableOnline bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column SellableOffline bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbCache where EntityType=12 and InsertUpdate &lt;&gt; 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbCache (
  CacheId,
  LicenseId,
  EntityType,
  EntityId,
  LastUpdate,
  InsertUpdate
)
select
  NEWID(),
  LicenseId,
  12,
  ProductId,
  GETDATE(),
  1
from
  tbProduct
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.61</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTicketUsage.ValidateDateTime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add ValidateDateTime datetime null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.60</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add super user right to licensee</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbRight (
  RightId,  
  EntityType,  
  EntityId,  
  RightType,  
  RightValue
)
select
  newid(),  
  17, /* Licensee */  
  AccountId,  
  1, /* SuperUser */  
  'true'    
from
  tbLicense
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.59</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Removes field tbAccount.LangISO</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbRight
where RightType=5 /* language */
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbRight (
  RightId,  
  EntityType,  
  EntityId,  
  RightType,  
  RightValue
)
select
  newid(),  
  EntityType,  
  AccountId,  
  5, /* language */  
  LangISO  
from
  tbAccount    
where
  LangISO is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccount
drop column LangISO
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.58</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON></REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSale
alter column ReceiptEmailAddress nvarchar(50)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column EmailAddress nvarchar(50)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.57</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index UQ_Right_EntityId_RightType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbRight
alter column RightValue nvarchar(100) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Right_EntityId_RightType] ON [tbRight] ([EntityId] ,[RightType] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.56</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTransaction.PrintedCount</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTransaction
add PrintedCount int null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTransaction
set PrintedCount=(case when TransactionType in (11,12) then -X_PrintedCount else X_PrintedCount end)
from (
  select  
    TransactionId as X_TransactionId,
    Count(distinct EntityId) as X_PrintedCount
  from tbTransactionLink  
  where EntityType=22 -- Ticket
  group by TransactionId
) X
where
  TransactionId=X_TransactionId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTransaction
set PrintedCount=0
where PrintedCount is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column PrintedCount int not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.55</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbProduct:
- AccountCategoryId
- ForceMediaGeneration
- MediaExclusiveUse

Add field tbMedia.ExclusiveUse</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add
  AccountCategoryId uniqueidentifier null,  
  ForceMediaGeneration bit null,  
  MediaExclusiveUse bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add  foreign key([AccountCategoryId]) references [tbCategory] ([CategoryId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set
  ForceMediaGeneration=0,  
  MediaExclusiveUse=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column ForceMediaGeneration bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column MediaExclusiveUse bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMedia
add ExclusiveUse bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbMedia
set ExclusiveUse=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMedia
alter column ExclusiveUse bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.54</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop field tbSeatHold.NumSeats</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSeatHold
drop column NumSeats
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.53</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index UQ_TransactionSerial</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[tbTransaction]') AND name = N'UQ_TransactionSerial')
DROP INDEX [UQ_TransactionSerial] ON [dbo].[tbTransaction] WITH ( ONLINE = OFF )

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_TransactionSerial] ON [tbTransaction] ([WorkstationId] ,[TransactionFiscalDate] ,[TransactionSerial] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.52</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbSeatLink.Quantity</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSeatLink
add Quantity integer null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSeatLink
set Quantity=1
where EntityType in (22,33) -- Ticket,SaleItemDetail
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSeatLink
set Quantity=X_Quantity
from (
  select                                                          
    SL.SeatLinkId as X_SeatLinkId,    
    SH.NumSeats as X_Quantity
  from  
    tbSeatLink SL inner join    
    tbSeatHold SH on SH.SeatHoldId=SL.EntityId    
) X
where SeatLinkId=X_SeatLinkId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSeatLink
set Quantity=0
where Quantity is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatLink
alter column Quantity integer not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.51</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add table tbSeatMap and add field tbSeatSector.MapId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSeatMap]
(
	[SeatMapId] Uniqueidentifier NOT NULL,
	[AccountId] Uniqueidentifier NOT NULL,
	[SeatMapName] Nvarchar(30) NOT NULL,
	[NumSeats] Integer NOT NULL,
	[MapData] Ntext NOT NULL,
Primary Key ([SeatMapId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatMap] add  foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatSector
add SeatMapId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSeatSector] add  foreign key([SeatMapId]) references [tbSeatMap] ([SeatMapId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.50</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbRight</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbRight]
(
	[RightId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
	[RightType] Smallint NOT NULL,
	[RightValue] Nvarchar(100) NULL,
Primary Key ([RightId])
) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.49</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.PrintGroupTagId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct 
add PrintGroupTagId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add  foreign key([PrintGroupTagId]) references [tbTag] ([TagId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.48</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbLoginLog.IPAddress from 15 to 50 chars</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLoginLog
alter column IPAddress varchar(50) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.47</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tables tbTag and tbTagLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTag]
(
	[TagId] Uniqueidentifier NOT NULL,
	[LicenseId] Smallint NOT NULL,
	[EntityType] Smallint NOT NULL,
	[TagCode] Varchar(15) NULL,
	[TagName] Nvarchar(100) NOT NULL,
Primary Key ([TagId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Tag_EntityType] ON [tbTag] ([LicenseId] ,[EntityType] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTag] add  foreign key([LicenseId]) references [tbLicense] ([LicenseId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTagLink]
(
	[TagLinkId] Uniqueidentifier NOT NULL,
	[TagId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
Primary Key ([TagLinkId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [UQ_TagLink] ON [tbTagLink] ([TagId] ,[EntityType] ,[EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTagLink] add  foreign key([TagId]) references [tbTag] ([TagId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.46</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbAccountDetail.CompanyName enlarged to 100 chars</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column CompanyName nvarchar(100)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.45</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbDocParam</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbDocParam]
(
	[DocParamId] Uniqueidentifier NOT NULL,
	[DocTemplateId] Uniqueidentifier NOT NULL,
	[DocParamType] Smallint NOT NULL,
	[DocParamName] Nvarchar(50) NOT NULL,
	[DocParamCaption] Nvarchar(50) NULL,
	[DocParamDefault] Nvarchar(50) NULL,
Primary Key ([DocParamId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDocParam] add  foreign key([DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.44</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0..1: Add field tbDocTemplate.ParentTemplateId
2: Add index IX_Cache_LastUpdate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
add ParentTemplateId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDocTemplate] add  foreign key([ParentTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Cache_LastUpdate] ON [tbCache] ([LastUpdate] Desc) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.43</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields PerformanceId and MultiPerformance to tables tbSale/tbSaleItem</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSale
add PerformanceId uniqueidentifier null, MultiPerformance bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSale
set MultiPerformance=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSale
alter column MultiPerformance bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSale] add  foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItem
add PerformanceId uniqueidentifier null, MultiPerformance bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSaleItem
set MultiPerformance=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItem
alter column MultiPerformance bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItem] add  foreign key([PerformanceId]) references [tbPerformance] ([PerformanceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.42</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Upsize tbAccountDetail.EmailAddress from 30 to 50 chars</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountDetail
alter column EmailAddress nvarchar(50) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.41</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields "CreateDateTime" and "CloseDateTime" to table tbAction</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAction
add CreateDateTime datetime null, CloseDateTime datetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAction
set CreateDateTime=getdate()
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAction
alter column CreateDateTime datetime not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.40</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tables tbAction and tbActionLink</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbAction]
(
	[ActionId] Uniqueidentifier NOT NULL,
	[EntityType] Smallint NOT NULL,
	[ActionStatus] Smallint NOT NULL,
	[ActionName] Nvarchar(50) NOT NULL,
	[ActionData] Ntext NULL,
Primary Key ([ActionId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbActionLink]
(
	[ActionLinkId] Uniqueidentifier NOT NULL,
	[ActionId] Uniqueidentifier NOT NULL,
	[ActionLinkType] Smallint NOT NULL,
	[EntityType] Smallint NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
Primary Key ([ActionLinkId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Entity] ON [tbActionLink] ([EntityType] ,[EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_EntityId] ON [tbActionLink] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbActionLink] add  foreign key([ActionId]) references [tbAction] ([ActionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.39</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add field tbSale.ReceiptEmailAddress
- Add field tbUpload.UploadType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSale
add ReceiptEmailAddress varchar(30) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbUpload
add UploadType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbUpload
set UploadType=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbUpload
alter column UploadType smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.38</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON></REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPerformance
add CustomSeat bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPerformance
set CustomSeat=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
alter column CustomSeat bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.37</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbRepository.RepositoryCode</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbRepository
add RepositoryCode varchar(10) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.36</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Set EventStatus=OnSale</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbEvent
set EventStatus=2 --OnSale
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.35</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0: Drop FK tbSaleItemDetail -&gt; tbSaleItemAttribute.SaleItemId
1: Drop FK tbAttributeItem -&gt; tbSaleItemAttribute.AttributeItemId
2: Drop table tbSaleItemAttribute</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DECLARE @foreign_key_name nvarchar(max);
DECLARE @dropstmt nvarchar(max);

SELECT @foreign_key_name = f.name
  FROM sys.foreign_keys AS f
 INNER JOIN sys.foreign_key_columns AS fc 
    ON f.object_id = fc.constraint_object_id 
 WHERE f.parent_object_id = object_id(N'[dbo].[tbSaleItemAttribute]')
   AND f.referenced_object_id = object_id(N'[dbo].[tbSaleItemDetail]')
   AND COL_NAME(fc.referenced_object_id, fc.referenced_column_id) = 'SaleItemDetailId';

if (len(@foreign_key_name) &gt; 0) 
begin
  select @dropstmt = 'ALTER TABLE [dbo].[tbSaleItemAttribute] DROP CONSTRAINT [' + @foreign_key_name + ']';
  execute sp_executesql @dropstmt
end;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DECLARE @foreign_key_name nvarchar(max);
DECLARE @dropstmt nvarchar(max);

SELECT @foreign_key_name = f.name
  FROM sys.foreign_keys AS f
 INNER JOIN sys.foreign_key_columns AS fc 
    ON f.object_id = fc.constraint_object_id 
 WHERE f.parent_object_id = object_id(N'[dbo].[tbSaleItemAttribute]')
   AND f.referenced_object_id = object_id(N'[dbo].[tbAttributeItem]')
   AND COL_NAME(fc.referenced_object_id, fc.referenced_column_id) = 'AttributeItemId';

if (len(@foreign_key_name) &gt; 0) 
begin
  select @dropstmt = 'ALTER TABLE [dbo].[tbSaleItemAttribute] DROP CONSTRAINT [' + @foreign_key_name + ']';
  execute sp_executesql @dropstmt
end;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbSaleItemAttribute
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.34</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbSaleItem.OptionsHash</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItem
add OptionsHash varchar(32) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSaleItem
set OptionsHash=''
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSaleItem
alter column OptionsHash varchar(32) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.33</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbSaleItem2AttributeItem</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleItem2AttributeItem]
(
	[SaleItem2AttributeItemId] Uniqueidentifier NOT NULL,
	[AttributeItemId] Uniqueidentifier NOT NULL,
	[SaleItemId] Uniqueidentifier NOT NULL,
	[OptionalPrice] Float NOT NULL,
	[Optional] Bit NOT NULL,
Primary Key ([SaleItem2AttributeItemId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItem2AttributeItem] add  foreign key([SaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItem2AttributeItem] add  foreign key([AttributeItemId]) references [tbAttributeItem] ([AttributeItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.32</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add last activity fields to tbWorkstation</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbWorkstation
add
  LastUserAccountId uniqueidentifier null,
  LastClientActivity datetime null,
  LastClientVersion varchar(15),
  LastClientIPAddress varchar(30)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbWorkstation] add  foreign key([LastUserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.31</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0..3: Add field tbBox.LicenseId
4..6: Add field tbBox.BoxCode
7: Add index UQ_Box_Code</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbBox
add LicenseId smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbBox
set LicenseId=X_LicenseId
from (
  select                                            
    B.BoxId as X_BoxId,    
    L.LicenseId as X_LicenseId
  from 
    tbBox B inner join    
    tbAccount L on L.AccountId=B.LocationAccountId
) X
where
  BoxId=X_BoxId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBox
alter column LicenseId smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBox] add  foreign key([LicenseId]) references [tbLicense] ([LicenseId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBox
add BoxCode varchar(15) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbBox
set BoxCode=X_BoxCode
from (
  select 
    '110901-' + cast((ROW_NUMBER() OVER(ORDER BY FBoxDate)) as varchar(max)) as X_BoxCode,
    BoxId as X_BoxId
  from tbBox
) X
where BoxId=X_BoxId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBox
alter column BoxCode varchar(15) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Box_Code] ON [tbBox] ([LicenseId] ,[BoxCode] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.30</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbCategory.CategoryName from 30 to 50 length</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCategory
alter column CategoryName nvarchar(50) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.29</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTransaction.BoxId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTransaction
add BoxId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if (select COUNT(*) from tbTransaction) &gt; 0
begin
  insert into tbBox(
    BoxId,
    FBoxDate,
    LocationAccountId,
    UserAccountId,
    BoxStatus,
    OverShort,
    OverShortFlag
  ) values (        
    newid(),    
    Convert(datetime, '2011-09-01', 120),    
    (select top 1 AccountId from tbAccount where EntityType=17), --Licensee
    (select top 1 AccountId from tbAccount where EntityType=15), --Person    
    1, --Closed      
    0,    
    0
  )
end

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>if (select COUNT(*) from tbTransaction) &gt; 0
begin
  update tbTransaction  
  set BoxId=(select top 1 BoxId from tbBox order by FBoxDate)
end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column BoxId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransaction] add  foreign key([BoxId]) references [tbBox] ([BoxId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.28</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbBox.OverShortFlag</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbBox
add OverShortFlag bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbBox
set OverShortFlag=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBox
alter column OverShortFlag bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.27</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbDocTemplate.LicenseId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
add LicenseId smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDocTemplate] add  foreign key([LicenseId]) references [tbLicense] ([LicenseId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.26</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbWorkstation.SaleChannelId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbWorkstation
add SaleChannelId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbWorkstation] add  foreign key([SaleChannelId]) references [tbSaleChannel] ([SaleChannelId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.25</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0: Create table tbDocTemplate
1..2: Add field tbProduct.DocTemplateId
3..4: Create table tbDocTemplate2Driver</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbDocTemplate]
(
	[DocTemplateId] Uniqueidentifier NOT NULL,
	[DocTemplateType] Smallint NOT NULL,
	[DocEditorType] Smallint NOT NULL,
	[DocTemplateName] Nvarchar(50) NOT NULL,
	[DocEnabled] Bit NOT NULL,
	[DocData] Ntext NULL,
Primary Key ([DocTemplateId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add DocTemplateId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add  foreign key([DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbDocTemplate2Driver]
(
	[DocTemplate2DriverId] Uniqueidentifier NOT NULL,
	[DocTemplateId] Uniqueidentifier NOT NULL,
	[DriverId] Uniqueidentifier NOT NULL,
	[PriorityOrder] Integer NOT NULL,
Primary Key ([DocTemplate2DriverId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDocTemplate2Driver] add  foreign key([DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDocTemplate2Driver] add  foreign key([DriverId]) references [tbDriver] ([DriverId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.24</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop field tbBoxDepositDetail.PaymentType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbBoxDepositDetail
drop column PaymentType
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.23</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0..3: Add column tbPlugin.PluginDefault
4..7: Add column tbPayment.PluginId
8..9: Add column tbBoxDepositDetail.PluginId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPlugin
add PluginDefault bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPlugin
set PluginDefault=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPlugin
set PluginDefault=1
where DriverId in (
  select DriverId  
  from tbDriver  
  where DriverType=1001
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPlugin
alter column PluginDefault bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPayment
add PluginId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbDriver
set DriverType=(
  case DriverType
    when 1003 then 1005
    when 1004 then 1015
    when 1005 then 1006    
    when 1006 then 1008
  else DriverType
end)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPayment
set PluginId=X_PluginId
from (
  select  
    Pl.PluginId as X_PluginId,
    (Dr.DriverType-1000) as X_PaymentType    
  from  
    tbPlugin Pl inner join    
    tbDriver Dr on Dr.DriverId=Pl.DriverId
) X
where
  PaymentType=X_PaymentType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPayment
alter column PluginId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPayment] add  foreign key([PluginId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbBoxDepositDetail
add PluginId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBoxDepositDetail] add  foreign key([PluginId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.22</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Drop field tbCurrency.DisplayFormat
- Add field tbCurrency.CurrencyFormat</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCurrency
drop column DisplayFormat
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCurrency
add CurrencyFormat smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbCurrency
set CurrencyFormat=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCurrency
alter column CurrencyFormat smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.21</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.MembershipPoints
Add field tbTicketMediaMatch.PointsBalance</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add MembershipPoints integer null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketMediaMatch
add PointsBalance integer null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketMediaMatch
set PointsBalance=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketMediaMatch
alter column PointsBalance integer not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.20</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add columns QuantityMin, QuantityStep, GroupPrint, PricePoints to table tbProduct</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add
  QuantityMin smallint null,
  QuantityStep smallint null,
  GroupPrint bit null,
  PricePoints integer null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set
  QuantityMin=1,  
  QuantityStep=1,  
  GroupPrint=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column QuantityMin smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column QuantityStep smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column GroupPrint bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.19</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbCurrencyDetail</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbCurrencyDetail]
(
	[CurrencyDetailId] Uniqueidentifier NOT NULL,
	[CurrencyId] Uniqueidentifier NOT NULL,
	[FundCategory] Smallint NOT NULL,
	[Amount] Float NOT NULL,
Primary Key ([CurrencyDetailId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCurrencyDetail] add  foreign key([CurrencyId]) references [tbCurrency] ([CurrencyId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.18</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSaleItemAttribute</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleItemAttribute]
(
	[SaleItemAttributeId] Uniqueidentifier NOT NULL,
	[SaleItemDetailId] Uniqueidentifier NOT NULL,
	[AttributeItemId] Uniqueidentifier NOT NULL,
	[Optional] Bit NOT NULL,
	[OptionalPrice] Float NOT NULL,
Primary Key ([SaleItemAttributeId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemAttribute] add  foreign key([SaleItemDetailId]) references [tbSaleItemDetail] ([SaleItemDetailId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemAttribute] add  foreign key([AttributeItemId]) references [tbAttributeItem] ([AttributeItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.17</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Adjust tbSurvey.SurveyType... using now LkEntityType instead of LkSurveyType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbSurvey
set SurveyType=21 -- Sale
where SurveyType=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSurvey
set SurveyType=20 -- Transaction
where SurveyType=2
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.16</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbMetaFieldItem.PriorityOrder</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMetaFieldItem
add PriorityOrder int not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.15</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add index UQ_MetaFieldItem_Code</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_MetaFieldItem_Code] ON [tbMetaFieldItem] ([MetaFieldId] ,[MetaFieldItemCode] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.14</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbMetaFieldItem</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbMetaFieldItem]
(
	[MetaFieldItemId] Uniqueidentifier NOT NULL,
	[MetaFieldId] Uniqueidentifier NOT NULL,
	[MetaFieldItemCode] Varchar(15) NOT NULL,
	[MetaFieldItemName] Nvarchar(100) NOT NULL,
Primary Key ([MetaFieldItemId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbMetaFieldItem] add  foreign key([MetaFieldId]) references [tbMetaField] ([MetaFieldId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.13</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbMetaField.FieldDataType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMetaField
add FieldDataType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbMetaField
set FieldDataType=1 --Text
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMetaField
alter column FieldDataType smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.12</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbProduct.ProductCode from 10 to 15 chars</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column ProductCode varchar(15) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.11</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create Survey tables

0: Create table tbSurvey
1: Create table tbSurvey2Mask
2: Create FK tbSurvey2Mask-tbMask
2: Create FK tbSurvey2Mask-tbSurvey</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSurvey]
(
	[SurveyId] Uniqueidentifier NOT NULL,
	[SurveyType] Smallint NOT NULL,
	[EntityType] Smallint NOT NULL,
	[EntityId] Uniqueidentifier NOT NULL,
	[Inherit] Bit NOT NULL,
Primary Key ([SurveyId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSurvey2Mask]
(
	[Survey2MaskId] Uniqueidentifier NOT NULL,
	[SurveyId] Uniqueidentifier NOT NULL,
	[MaskId] Uniqueidentifier NOT NULL,
	[PriorityOrder] Integer NOT NULL,
	[Rules] Ntext NULL,
Primary Key ([Survey2MaskId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSurvey2Mask] add  foreign key([MaskId]) references [tbMask] ([MaskId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSurvey2Mask] add  foreign key([SurveyId]) references [tbSurvey] ([SurveyId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.10</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbRepository.Shared</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbRepository
add Shared bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbRepository
set Shared=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbRepository
alter column Shared bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.9</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Updates tbCache references for Category Roots</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbCache
where EntityType=28 --Category
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbCache (
  CacheId,  
  LicenseId,  
  EntityType,  
  EntityId,  
  LastUpdate,  
  InsertUpdate
)
select distinct
  newid(),  
  LicenseId,  
  1002, --CategoryTree  
  CategoryId,  
  getdate(),  
  1    
from
  tbCategory         
where
  ParentCategoryId is null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.8</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbProduct.ProductStatus</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add ProductStatus smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set ProductStatus=2
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column ProductStatus smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.7</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON></REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPerformance
alter column PerformanceTypeId uniqueidentifier null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.6</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add box maintenance tables

0: Create table tbBox
1: FK tbBox-LocationAccountId
2: FK tbBox-UserAccountId
3: Create table tbBoxDeposit
4: FK tbBoxDeposit-tbBox
5: FK tbBoxDeposit-tbWorkstation
6: FK tbBoxDeposit-tbAccount
7: Create table tbBoxDepositDetail
8: FK tbBoxDepositDetail-tbBoxDeposit
9: Create index IX_Box_DateLocationUser</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbBox]
(
	[BoxId] Uniqueidentifier NOT NULL,
	[LocationAccountId] Uniqueidentifier NOT NULL,
	[UserAccountId] Uniqueidentifier NOT NULL,
	[FBoxDate] Datetime NOT NULL,
	[BoxStatus] Smallint NOT NULL,
	[OverShort] Float NOT NULL,
Primary Key ([BoxId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBox] add  foreign key([LocationAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBox] add  foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbBoxDeposit]
(
	[BoxDepositId] Uniqueidentifier NOT NULL,
	[BoxId] Uniqueidentifier NOT NULL,
	[WorkstationId] Uniqueidentifier NOT NULL,
	[UserAccountId] Uniqueidentifier NOT NULL,
	[BoxDepositType] Smallint NOT NULL,
	[DepositDateTime] Datetime NOT NULL,
	[DepositAmount] Float NOT NULL,
	[BagNumber] Integer NULL,
Primary Key ([BoxDepositId])
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBoxDeposit] add  foreign key([BoxId]) references [tbBox] ([BoxId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBoxDeposit] add  foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBoxDeposit] add  foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbBoxDepositDetail]
(
	[BoxDepositDetailId] Uniqueidentifier NOT NULL,
	[BoxDepositId] Uniqueidentifier NOT NULL,
	[PaymentType] Smallint NOT NULL,
	[CurrencyISO] Varchar(3) NOT NULL,
	[Quantity] Integer NOT NULL,
	[UnitAmount] Float NOT NULL,
	[TotalAmount] Float NOT NULL,
Primary Key ([BoxDepositDetailId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBoxDepositDetail] add  foreign key([BoxDepositId]) references [tbBoxDeposit] ([BoxDepositId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Box_DateLocationUser] ON [tbBox] ([FBoxDate] ,[LocationAccountId] ,[UserAccountId] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.5</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_Sale_SaleCodeExt</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_SaleCodeExt] ON [tbSale] ([SaleCodeExt] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.4</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop index UQ_Sale_SaleCodeExt</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP INDEX UQ_Sale_SaleCodeExt
    ON tbSale
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.3</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0 - Rename IDX_Sale_HoldId in IX_Sale_HoldId
1 - Create index UQ_Sale_SaleCode
2 - Create index UQ_Sale_SaleCodeExt</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IDX_Sale_HoldId') 
EXEC sp_rename 'tbSale.IDX_Sale_HoldId', N'IX_Sale_HoldId', N'INDEX'; 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Sale_SaleCode] ON [tbSale] ([SaleCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Sale_SaleCodeExt] ON [tbSale] ([LicenseId] ,[SaleCodeExt] ) 
WHERE SaleCodeExt IS NOT NULL

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.2</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Adds field tbAccount.AccountCodeExt and some indexes</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccount
add AccountCodeExt varchar(15)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Account_AccountCodeExt] ON [tbAccount] ([LicenseId] ,[AccountCodeExt] ) 
WHERE AccountCodeExt IS NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Account_DisplayName] ON [tbAccount] ([DisplayName] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>1.1</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Test</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbDBInfo
set ParamName=ParamName
where ParamName is null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><LATESTDBVERSION>1.2</LATESTDBVERSION></SQLUPDATELIST><LATESTDBVERSION>1.996</LATESTDBVERSION></ROOT>