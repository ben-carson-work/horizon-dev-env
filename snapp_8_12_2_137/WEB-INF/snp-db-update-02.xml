<ROOT><SQLUPDATELIST><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.300</SQLVERSION><RMTRACKLINK>SIT-5992</RMTRACKLINK><REASON>Removed  "Edit" right in InstallmentContractRight and added the new ReschedulePayments right</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbRight
(
   RightId,
   EntityType,
   EntityId,
   RightType,
   RightValue
)
(
   select
     NEWID(),
     EntityType,
     EntityId,
     515 /*ReschedulePayments*/,
     1 /*true*/
   from tbRight
   where 
     RightType=144 /*InstallmentContractRight*/ and
     RightValue in (3,5,9) /*Edit,Cancel,Void*/
  )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbRight
set RightValue=2/*Read*/
where
  RightType=144 /*InstallmentContractRight*/ and 
  RightValue=3/*Edit*/
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>2.299</SQLVERSION><RMTRACKLINK>5996</RMTRACKLINK><REASON>Add TicketStatus to tbTicketUsage</REASON><TABLENAMES>tbTicketUsage</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add TicketStatus smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.298</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Removed field tbProductUpgrade.UpgradeMaxTimes</REASON><TABLENAMES>tbProductUpgrade</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductUpgrade
drop column UpgradeMaxTimes 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.297</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTicketUsage.ForcedGate</REASON><TABLENAMES>tbTicketUsage</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add ForcedGate bit null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.296</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added new field tbProductUpgrade.UpgradeMaxTimes</REASON><TABLENAMES>tbProductUpgrade</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductUpgrade
add UpgradeMaxTimes smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.295</SQLVERSION><RMTRACKLINK>SIT-5717</RMTRACKLINK><REASON>New column tbOutboundOffline.ServerId</REASON><TABLENAMES>tbOutboundOffline</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbOutboundOffline
add ServerId smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundOffline_ServerId] ON [tbOutboundOffline] ([ServerId] ) 
where ServerId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundOffline] add constraint FK_OutboundOffline_Server foreign key([ServerId]) references [tbServer] ([ServerId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.294</SQLVERSION><RMTRACKLINK>SIT-5717</RMTRACKLINK><REASON>New column tbOutboundQueueHistory.UserAccountName
Drop column tbOutboundQueueHistory.UserAccountId</REASON><TABLENAMES>tbOutboundQueueHistory</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbOutboundQueueHistory
add UserAccountName nvarchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbOutboundQueueHistory
set 
  UserAccountName = (
    select DisplayName from tbAccount where AccountId=UserAccountId
  )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbOutboundQueueHistory
DROP CONSTRAINT FK_OutboundQueueHistory_UserAccount
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX tbOutboundQueueHistory.IX_OutboundQueueHistory_UserAccountId;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbOutboundQueueHistory
drop column UserAccountId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.293</SQLVERSION><RMTRACKLINK>SIT-5717</RMTRACKLINK><REASON>New tbOutboundOffline</REASON><TABLENAMES>tbOutboundOffline</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbOutboundOffline]
(
  [OutboundOfflineId] Uniqueidentifier NOT NULL,
  [CreateDateTime] Datetime NOT NULL,
  [OutboundOfflineStatus] Smallint NOT NULL,
  [EntityId] Uniqueidentifier NOT NULL,
  [EntityType] Smallint NOT NULL,
  [DocRef] Nvarchar(MAX) NULL,
  [DocRefClassName] Varchar(255) NULL,
  [OutboundEventType] Smallint NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundOffline] ADD CONSTRAINT PK_OutboundOffline PRIMARY KEY ([OutboundOfflineId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundOffline_OutboundOfflineStatus] ON [tbOutboundOffline] ([OutboundOfflineStatus] ,[CreateDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>2.292</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbRepository: we need to make the field RepositoryCode mandatory and unique.

0: RepositoryCode from VGS_Code10 to VGS_Code15
1: uptade RepositoryCode  with R+Row_Number where RepositoryCode is null
2: look for duplicate repository codes and add a numeric suffix to them so they become unique
3: make RepositoryCode not nullable
4: create a unique index on RepositoryCode</REASON><TABLENAMES>tbRepository</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbRepository 
alter column RepositoryCode varchar(15) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>;with tmpRepository as
(
  select
    RepositoryId, 
    RepositoryCode,
    Rn = ROW_NUMBER() over (partition by RepositoryCode order by RepositoryCode ASC)
  from tbRepository
)

update tmpRepository set RepositoryCode = 'R'+ cast(Rn as varchar(max)) where RepositoryCode is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare repositoryCodes cursor for 
  select 
    RepositoryCode,
    Count(*) as Cnt
  from 
    tbRepository
  group by RepositoryCode
  having Count(*)&gt;1

declare @repositoryCode varchar(max), @count int
open repositoryCodes

fetch next from repositoryCodes into @repositoryCode, @count

while @@FETCH_STATUS = 0
begin
  declare repositoryIDs cursor for
  select
    RepositoryId
  from 
    tbRepository
  where
    RepositoryCode = @repositoryCode

  open repositoryIDs
  declare @repositoryId uniqueIdentifier
  fetch next from repositoryIDs into @repositoryId 

  declare @autoInc int
  set @autoInc = 1

  while @@FETCH_STATUS = 0
  begin  
    declare @wishedCode varchar(15);    
    set @wishedCode = @repositoryCode + cast(@autoInc as varchar(max))
	
    declare @codeAlreadyExists varchar(15);    
    select @codeAlreadyExists = RepositoryCode from tbRepository where RepositoryCode = @wishedCode

    while @codeAlreadyExists = @wishedCode
    begin
      set @autoInc = @autoInc + 1
      set @wishedCode = @repositoryCode + cast(@autoInc as varchar(max))
      select @codeAlreadyExists = RepositoryCode from tbRepository where RepositoryCode = @wishedCode
    end
	
    update 
      tbRepository
    set
      RepositoryCode = @wishedCode
    where
      RepositoryId = @repositoryId
	  
    fetch next from repositoryIDs into @repositoryId 
    set @autoInc = @autoInc + 1
  end

  close repositoryIDs
  deallocate repositoryIDs
  
  fetch next from repositoryCodes into @repositoryCode, @count
end

close repositoryCodes
deallocate repositoryCodes

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbRepository alter column RepositoryCode varchar(15) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Repository_RepositoryCode] ON [tbRepository] ([RepositoryCode] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.291</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add InputType field to tbPaymentCard</REASON><TABLENAMES>tbPaymentCard</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentCard
add InputType smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>saverio</ADDEDBY><SQLVERSION>2.290</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbDriverFramework table</REASON><TABLENAMES>tbDriverFramework</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbDriverFramework]
(
  [DriverId] Uniqueidentifier NOT NULL,
  [FrameworkFileName] Varchar(100) NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDriverFramework] ADD CONSTRAINT PK_DriverFramework PRIMARY KEY ([DriverId], [FrameworkFileName])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDriverFramework] add constraint FK_DriverFramework_Driver foreign key([DriverId]) references [tbDriver] ([DriverId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.289</SQLVERSION><RMTRACKLINK>SIT-5721</RMTRACKLINK><REASON>Create table tbSaleItemGiftCard table</REASON><TABLENAMES>tbSaleItemGiftCard</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleItemGiftCard]
(
  [SaleItemId] Uniqueidentifier NOT NULL,
  [CardNumber] Varchar(20) NOT NULL,
  [Balance] money NOT NULL,
  [AuthorizationCode] Varchar(20) NOT NULL,
  [ReferenceCode] Varchar(50) NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemGiftCard] ADD CONSTRAINT PK_SaleItemGiftCard PRIMARY KEY ([SaleItemId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemGiftCard_AuthorizationCode] ON [tbSaleItemGiftCard] ([AuthorizationCode] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemGiftCard_ReferenceCode] ON [tbSaleItemGiftCard] ([ReferenceCode] ) 
where ReferenceCode is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemGiftCard] add constraint FK_SaleItemGiftCard_SaleItem foreign key([SaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.288</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbInstallmentContractItemDetail</REASON><TABLENAMES>tbInstallmentContractItemDetail</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbInstallmentContractItemDetail]
(
  [InstallmentContractItemDetailId] Uniqueidentifier NOT NULL,
  [InstallmentContractItemId] Uniqueidentifier NOT NULL,
  [AccountId] Uniqueidentifier NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentContractItemDetail] ADD CONSTRAINT PK_InstallmentContractItemDetail PRIMARY KEY ([InstallmentContractItemDetailId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContractItemDetail_InstallmentContractItemId] ON [tbInstallmentContractItemDetail] ([InstallmentContractItemId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContractItemDetail_AccountId] ON [tbInstallmentContractItemDetail] ([AccountId] ) where AccountId is not null 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentContractItemDetail] add constraint FK_InstallmentContractItemDetail_InstallmentContractItem foreign key([InstallmentContractItemId]) references [tbInstallmentContractItem] ([InstallmentContractItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentContractItemDetail] add constraint FK_InstallmentContractItemDetail_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.287</SQLVERSION><RMTRACKLINK>SIT-5841</RMTRACKLINK><REASON>Created Access point root category and updated all accespoint with the new root category</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @nextCatCodeNumber int;
declare @nextCatCode varchar(30);
declare @CategoryId uniqueidentifier;

set @CategoryId = NEWID();

set @nextCatCodeNumber = 
 (
   SELECT (MAX(case when isNumeric(SUBSTRING(CategoryCode, 4, LEN(CategoryCode)))=1 then CAST(SUBSTRING(CategoryCode, 4, LEN(CategoryCode)) AS INT) else 0 end)) + 1
   FROM tbCategory
   WHERE CategoryCode LIKE 'CAT%'
 )

set @nextCatCode = CONCAT('CAT', @nextCatCodeNumber);

insert into tbCategory (
  CategoryId,
  EntityType,
  CategoryCode,
  CategoryName,
  ShowNameExt,
  InheritMask,
  InheritLocation
)
values (
  @CategoryId,
  108,
  @nextCatCode,
  '@Lookup.EntityType.AccessPoint',
  0,
  0,
  0
)

update tbWorkstation
set CategoryId=@CategoryId
where WorkstationType=4
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.286</SQLVERSION><RMTRACKLINK>SIT-5865</RMTRACKLINK><REASON>Reapply query 2.164 (recursive query to fill tbCatalog.RootCatalogId) and make not nullable  RootCatalogId</REASON><TABLENAMES>tbCatalog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>with Catalogs (X_RootCatalogId, X_CatalogId) as
(
-- Anchor member definition
    select
    c.CatalogId as RootCatalogId, c.CatalogId
    from
    tbCatalog as c
    where
    ParentCatalogId is null
    union ALL
-- Recursive member definition
    select 
    d.X_RootCatalogId, e.CatalogId
    from
    tbCatalog as e INNER JOIN 
    Catalogs as d ON e.ParentCatalogId = d.X_CatalogId
)
-- Statement that executes the CTE
update tbCatalog
set RootCatalogId=X_RootCatalogId
from Catalogs  
where CatalogId=X_CatalogId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Catalog_RootCatalogId on tbCatalog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCatalog
alter column RootCatalogId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>create Index [IX_Catalog_RootCatalogId] on [tbCatalog] ([RootCatalogId] ,[EntityType] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.285</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Added "Every organization" right to all products and invalidated the cache</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbEntityRight
where 
  UsrEntityId='A0000131-0000-0000-0000-000000000001' and 
  DocEntityId in
 ( 
   select
     P.ProductId
   from tbProduct P
   where P.ProductType=1
 )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityRight (
  DocEntityId, 
  UsrEntityId, 
  DocEntityType, 
  UsrEntityType, 
  RightLevel
)
(
  select
    P.ProductId,
    'A0000131-0000-0000-0000-000000000001',
    12 /*ProductType*/,
    1 /*Organization*/,
    1 /*None*/
  from tbProduct P
  where P.ProductType=1
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete
from tbEntityChange
where EntityId in (
  select ProductId
  from tbProduct P
  where P.ProductType=1
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (
  EntityType, 
  EntityId, 
  InsertUpdate
)
(
  select
    12 /*ProductType*/,
    ProductId,
    1 /*true*/
  from tbProduct P
  where P.ProductType=1
)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.284</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create index IX_Catalog_CatalogType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Catalog_CatalogType] ON [tbCatalog] ([CatalogType] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.283</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbCatalogCache</REASON><TABLENAMES>tbCatalogCache</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbCatalogCache]
(
  [CatalogCacheId] Uniqueidentifier NOT NULL,
  [CatalogId] Uniqueidentifier NOT NULL,
  [ZipFile] varbinary(max) NOT NULL,
  [InvalidCache] Bit NOT NULL,
  [LastUpdate] Datetime NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCatalogCache] ADD CONSTRAINT PK_CatalogCache PRIMARY KEY ([CatalogCacheId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_CatalogCache_CatalogId] ON [tbCatalogCache] ([CatalogId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCatalogCache] add constraint FK_CatalogCache_Catalog foreign key([CatalogId]) references [tbCatalog] ([CatalogId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.282</SQLVERSION><RMTRACKLINK>SIT-5766</RMTRACKLINK><REASON>New tbSaleItem.PriceQuoteToken</REASON><TABLENAMES>tbSaleItem</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItem
add PriceQuoteToken Varchar(100) NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.281</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add OnSaleDateTo field to tbProduct</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add OnSaleDateTo date null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.280</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New field tbLedger.WriteDateTime</REASON><TABLENAMES>tbLedger</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedger
add WriteDateTime datetime null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ledger_WriteDateTime] ON [tbLedger] ([WriteDateTime] ) where WriteDateTime is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.279</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSessionTokenBlackList</REASON><TABLENAMES>tbSessionTokenBlackList</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSessionTokenBlackList]
(
  [WorkstationId] Uniqueidentifier NOT NULL,
  [TokenExpiration] Datetime NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSessionTokenBlackList] ADD CONSTRAINT PK_SessionTokenBlackList PRIMARY KEY ([WorkstationId],[TokenExpiration])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SessionTokenBlackList_Expiration] ON [tbSessionTokenBlackList] ([TokenExpiration] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSessionTokenBlackList] add constraint FK_SessionTokenBlackList_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.278</SQLVERSION><RMTRACKLINK>SIT-5785</RMTRACKLINK><REASON>tbAsyncProcessLog.LogText from mandatory to nullable</REASON><TABLENAMES>tbAsyncProcessLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAsyncProcessLog
alter column [LogText] Nvarchar(max) NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>ugog</ADDEDBY><SQLVERSION>2.277</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Reset license for all POSs</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbWorkstation
set LicenseParams=null
where WorkstationType=2
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbDBInfo where ParamName='WorkstationLastUpdate'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>there</ADDEDBY><SQLVERSION>2.276</SQLVERSION><RMTRACKLINK>SIT-5718</RMTRACKLINK><REASON>add columns ExtUserName, ExtPlugintId and ExtSessionReference to tbUserActivity </REASON><TABLENAMES>tbUserActivity</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbUserActivity
add
  ExtLoginName Nvarchar(50) NULL,
  ExtSessionReference Varchar(100) NULL,
  ExtPluginId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbUserActivity] 
add foreign key([ExtPluginId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>create Index IX_UserActivity_PluginId ON tbUserActivity (ExtPluginId, LoginDateTime)
where ExtPluginId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.275</SQLVERSION><RMTRACKLINK>SIT-5785</RMTRACKLINK><REASON>New tbAsyncProcessLog table</REASON><TABLENAMES>tbAsyncProcessLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbAsyncProcessLog]
(
  [AsyncProcessLogId] Uniqueidentifier NOT NULL,
  [AsyncProcessId] Uniqueidentifier NOT NULL,
  [LogDateTime] Datetime NOT NULL,
  [LogType] Smallint NOT NULL,
  [LogRecap] Varchar(100) NOT NULL,
  [LogText] Nvarchar(max) NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAsyncProcessLog] ADD CONSTRAINT PK_AsyncProcessLog PRIMARY KEY ([AsyncProcessLogId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AsyncProcessLog_AsyncProcessId] ON [tbAsyncProcessLog] ([AsyncProcessId] ,[LogDateTime] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAsyncProcessLog] add constraint FK_AsyncProcessLog_AsyncProcess foreign key([AsyncProcessId]) references [tbAsyncProcess] ([AsyncProcessId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.274</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Create table tbSessionToken
- Rename tbSession.SessionToken into SecureFingerprint</REASON><TABLENAMES>tbSession
tbSessionToken</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSessionToken]
(
  [SessionTokenId] Uniqueidentifier NOT NULL,
  [SecureFingerprint] Varchar(100) NOT NULL,
  [TokenExpiration] Datetime NOT NULL,
  [SessionId] Varchar(40) NOT NULL,
  [TokenStatus] Smallint NOT NULL,
  [PreviousSessionTokenId] Uniqueidentifier NULL,
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSessionToken]
ADD CONSTRAINT PK_SessionToken PRIMARY KEY ([SessionTokenId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SessionToken_TokenExpiration] ON [tbSessionToken] ([TokenExpiration] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SessionToken_SessionId] ON [tbSessionToken] ([SessionId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SessionToken_Previous] ON [tbSessionToken] ([PreviousSessionTokenId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [UQ_SessionToken_SecureFingerprintExpiration] ON [tbSessionToken] ([SecureFingerprint] ,[TokenExpiration] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSessionToken] add constraint FK_SessionToken_PreviousSessionToken foreign key([PreviousSessionTokenId]) references [tbSessionToken] ([SessionTokenId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbSession
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSession
drop column SessionToken
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSession
add SecureFingerprint varchar(100)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.273</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add column TicketId to tbLedgerManual </REASON><TABLENAMES>tbLedgerManual </TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerManual
add TicketId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerManual
add constraint FK_LedgerManual_Ticket foreign key (TicketId) references tbTicket (TicketId)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>create Index IX_LedgerManual_TicketId ON tbLedgerManual (TicketId, LedgerManualDateTime)
where TicketId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.272</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add table tbTransactionTicketTransfer</REASON><TABLENAMES>tbTransactionTicketTransfer</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTransactionTicketTransfer]
(
  [TransactionId] Uniqueidentifier NOT NULL,
  [TicketId] Uniqueidentifier NOT NULL,
  [SourcePortfolioId] Uniqueidentifier NOT NULL,
  [TargetPortfolioId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionTicketTransfer]
ADD CONSTRAINT PK_TransactionTicketTransfer PRIMARY KEY ([TransactionId],[TicketId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionTicketTransfer_TicketId] ON [tbTransactionTicketTransfer] ([TicketId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionTicketTransfer_SourcePortfolioId] ON [tbTransactionTicketTransfer] ([SourcePortfolioId] ,[TicketId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionTicketTransfer_TargetPortfolioId] ON [tbTransactionTicketTransfer] ([TargetPortfolioId] ,[TicketId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionTicketTransfer] add constraint FK_TransactionTicketTransfer_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 
 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionTicketTransfer] add constraint FK_TransactionTicketTransfer_SourcePortfolio foreign key([SourcePortfolioId]) references [tbTicketMediaMatch] ([TicketMediaMatchId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionTicketTransfer] add constraint FK_TransactionTicketTransfer_TargetPortfolio foreign key([TargetPortfolioId]) references [tbTicketMediaMatch] ([TicketMediaMatchId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionTicketTransfer] add constraint FK_TransactionTicketTransfer_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.271</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Alter column tbBoxDeposit.BagNumber from int to varchar(15)</REASON><TABLENAMES>tbBoxDeposit</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP INDEX IX_BoxDeposit_BagNumber ON tbBoxDeposit



</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbBoxDeposit
ALTER COLUMN BagNumber varchar(15)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_BoxDeposit_BagNumber ON tbBoxDeposit(BagNumber)
where BagNumber is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.270</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Removed  tbProduct.EnforceSecondaryGroup field (managed by tbProductFlag)</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbProductFlag (ProductId,ProductFlag)
( 
 select
    ProductId, 
    25 /*EnforceSecondaryGroup*/
 from tbProduct
 where EnforceSecondaryGroup=1
)


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
drop column EnforceSecondaryGroup

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.269</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add column ChannelGroupTagId related to tbTag.Tagid</REASON><TABLENAMES>tbWorkstation</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbWorkstation
add ChannelGroupTagId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbWorkstation
add constraint FK_Workstation_Tag foreign key (ChannelGroupTagId) references tbTag (TagId)

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.268</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>create new table tbCodeAliasType and move all 
code alias type from tbTag to tbCodeAliasType </REASON><TABLENAMES>tbCodeAliasType</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>create table [tbCodeAliasType]
(
  [CodeAliasTypeId] Uniqueidentifier NOT NULL,
  [CodeAliasTypeCode] Varchar(15) NOT NULL,
  [CodeAliasTypeName] Nvarchar(50) NULL,
  [CodeAliasTypeStatus] Smallint NOT NULL,
  [UniquePerObject] bit Default 0 NOT NULL,
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCodeAliasType] ADD CONSTRAINT PK_tbCodeAliasType Primary Key ([CodeAliasTypeId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbCodeAliasType 
select TagId, TagCode, TagName, 1, 0 from tbTag
where EntityType = 1803

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT> alter table tbCodeAlias
drop constraint FK_CodeAlias_Tag
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from tbTag
where entityType = 1803
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT> alter table tbCodeAlias
add constraint FK_CodeAlias_CodeAliasType foreign key (CodeAliasTypeId) references tbCodeAliasType (CodeAliasTypeId)

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.267</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Patches invalid lookup values (0)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbDocTemplate
set DocEditorType=1
where DocEditorType=0
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.266</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add API security fields to tbWorkstation</REASON><TABLENAMES>tbWorkstation</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbWorkstation
add
   ApiSecurityType smallint null,   
   ApiEncryptionKey varchar(max) null,   
   ApiRotationKey varchar(max) null,   
   ApiLastKeyRotation datetime null,   
   ApiDebugMode bit null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.265</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0..0] New tbSaleItemDetail fields
[1..x] New tbSaleItemDetailRevenue table</REASON><TABLENAMES>tbSaleItemDetail
tbSaleItemDetailRevenue</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table 
  tbSaleItemDetail
add 
  ClearingLimit money null,  
  ClearingAllocated money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbSaleItemDetailRevenue]
(
  [SaleItemDetailId] Uniqueidentifier NOT NULL,
  [GateCategoryId] Uniqueidentifier NOT NULL,
  [ClearingLimit] Money NOT NULL,
  [ClearingAllocated] Money NOT NULL)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemDetailRevenue] ADD CONSTRAINT PK_SaleItemDetailRevenue PRIMARY KEY ([SaleItemDetailId],[GateCategoryId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemDetailRevenue_GateCategoryId] ON [tbSaleItemDetailRevenue] ([GateCategoryId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemDetailRevenue] add constraint FK_SaleItemDetailRevenue_SaleItemDetail foreign key([SaleItemDetailId]) references [tbSaleItemDetail] ([SaleItemDetailId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemDetailRevenue] add constraint FK_SaleItemDetailRevenue_GateCategory foreign key([GateCategoryId]) references [tbGateCategory] ([GateCategoryId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.264</SQLVERSION><RMTRACKLINK>SIT-5621</RMTRACKLINK><REASON>[0..5] New table tbTicketLedgerTrigger
[6..10] Refactor tbTicket
</REASON><TABLENAMES>tbTicketLedgerTrigger
tbTicket</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTicketLedgerTrigger]
(
  [TicketLedgerTriggerId] Uniqueidentifier NOT NULL,
  [TicketId] Uniqueidentifier NOT NULL,
  [TriggerLedgerType] Smallint NOT NULL,
  [TriggerDateTime] Datetime NOT NULL)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketLedgerTrigger] ADD CONSTRAINT PK_TicketLedgerTrigger PRIMARY KEY ([TicketLedgerTriggerId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketLedgerTrigger_TicketId] ON [tbTicketLedgerTrigger] ([TicketId] ,[TriggerLedgerType] ,[TriggerDateTime]) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketLedgerTrigger] add constraint FK_TicketLedgerTrigger_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert tbTicketLedgerTrigger (TicketLedgerTriggerId, TicketId, TriggerLedgerType, TriggerDateTime)
(select
   NEWID(),
   TicketId,
   301, /*Expiration*/
   ExpiredOnDateTime
 from
   tbTicket
  where
    ExpiredOnDateTime is not null)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert tbTicketLedgerTrigger (TicketLedgerTriggerId, TicketId, TriggerLedgerType, TriggerDateTime)
(select
   NEWID(),
   TicketId,
   302, /*breakage*/
   BreakageOnDateTime
 from
   tbTicket
  where
    BreakageOnDateTime is not null)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX IX_Ticket_ExpiredOnDateTime ON [tbTicket]
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_ValidDateTo] ON [tbTicket] ([ValidDateTo] ) where ValidDateTo is not null
WITH (DROP_EXISTING = ON);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_BreakageDate] ON [tbTicket] ([BreakageDate] ) 
where (BreakageDate is not null)
WITH (DROP_EXISTING = ON);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
drop column BreakageOnDateTime
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
drop column ExpiredOnDateTime
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.263</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Remove field ExchangeRateDecimals from tbCurrency
Alter tbCurrency.ExchangeRate from float to decimal(38,19)
Alter tbPaymentCurrency.ExchangeRate from float to decimal(38,19)
Alter tbMembershipPoint.ExchangeRate from float to decimal(38,19)
Alter tbPaymentWallet.ExchangeRate from float to decimal(38,19)</REASON><TABLENAMES>tbCurrency
tbPaymentCurrency
tbMembershipPoint
tbPaymentWallet</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCurrency
drop column ExchangeRateDecimals

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCurrency
alter column ExchangeRate decimal(38,19) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentCurrency
alter column ExchangeRate decimal(38,19)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMembershipPoint
alter column ExchangeRate decimal(38,19)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentWallet
alter column ExchangeRate decimal(38,19)  
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.262</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>modified tbEntityChange to invalidae cache for all the products, this is needed due to new CodeAliasList field </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbEntityChange where EntityId in (select ProductId from tbProduct)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (EntityType, EntityId, InsertUpdate) 
select (case when ProductType in (5,10) then 55 else 12 end), ProductId, 1 
from tbProduct
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.261</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- insert new coloumn CodeAliasTypeId
- create DEFAULT tag
- fill CodeAliasTypeId with default tag value
- generate PK and FK</REASON><TABLENAMES>tbCodeAlias</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCodeAlias
add CodeAliasTypeId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Insert into tbTag values (newid(), 1803, '#DEFAULT', 'Default')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbCodeAlias set CodeAliasTypeId=(select TagId from tbTag where TagCode='#DEFAULT' and EntityType = 1803)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCodeAlias 
alter column  CodeAliasTypeId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCodeAlias
add constraint FK_CodeAlias_Tag foreign key (CodeAliasTypeId) references tbTag (TagId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCodeAlias 
drop constraint  PK_CodeAlias
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCodeAlias
add constraint PK_CodeAlias PRIMARY KEY (EntityType, CodeAlias, CodeAliasTypeId)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.260</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create Index IX_Right_RightType
</REASON><TABLENAMES>tbRight</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Right_RightType] ON [tbRight] ([RightType] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>2.259</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0..2  Add ProductRevenueDateStatus LK[355] to tbProductRevenueDate</REASON><TABLENAMES>tbProductRevenueDate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
add ProductRevenueDateStatus Smallint null 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductRevenueDate
set ProductRevenueDateStatus=10

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
alter column ProductRevenueDateStatus Smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>2.258</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0..3: tbLedgerRule: add ledgerRuleStatus LK[353]
4:  tbLedgerRule: drop column Active
5..7: tbLedgerRuleDetail: add ledgerRuleDetailStatus LK[354] </REASON><TABLENAMES>tbLedgerRule
tbLedgerRuleDetail</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table TbLedgerRule
add LedgerRuleStatus Smallint null 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update TbLedgerRule
set LedgerRuleStatus=10
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table TbLedgerRule
alter column LedgerRuleStatus Smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbLedgerRule 
set 
  LedgerRuleStatus =
    case
      when Active = 1 then 10
      else 20
    end 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table TbLedgerRule
drop column Active
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table TbLedgerRuleDetail
add LedgerRuleDetailStatus Smallint null 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update TbLedgerRuleDetail
set LedgerRuleDetailStatus=10
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table TbLedgerRuleDetail
alter column LedgerRuleDetailStatus Smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>2.257</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Remove field SerialNumber from tbLedgerAccount</REASON><TABLENAMES>tbLedgerAccount</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerAccount
drop column SerialNumber

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.256</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbShopCart:
- UserAccountId
- SessionId</REASON><TABLENAMES>tbShopCart</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbShopCart
add
  UserAccountId uniqueidentifier null,  
  SessionId varchar(40) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ShopCart_UserAccount] ON [tbShopCart] ([UserAccountId] ) 
where UserAccountId is not null


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ShopCart_Session] ON [tbShopCart] ([SessionId] ) 
where SessionId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbShopCart] add constraint FK_ShopCart_UserAccount foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.255</SQLVERSION><RMTRACKLINK>SIT-5534</RMTRACKLINK><REASON>removed AccountCodeExt field from tbAccount. Recreted indexes related to that field</REASON><TABLENAMES>tbAccount</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbAccount set AccountCode=AccountCodeExt where AccountCodeExt is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_Account_AccountCodeExt on tbAccount
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Account_EntityType on tbAccount
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccount drop column AccountCodeExt
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccount alter column AccountCode varchar(20) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Account_EntityType] ON [tbAccount] ([EntityType], [DisplayName])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.254</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Alter tbLookupItem.ItemNameRaw from nvarchar 100 to 500</REASON><TABLENAMES>tbLookupItem</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLookupItem
alter column ItemNameRaw nvarchar(500) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.253</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Alter tbLookupItem.ItemName from nvarchar 100 to 500</REASON><TABLENAMES>tbLookupItem</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLookupItem
alter column ItemName nvarchar(500) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.252</SQLVERSION><RMTRACKLINK>SIT-5514</RMTRACKLINK><REASON>[0..3] Drop tbTicketAmortization.NeedUpdateOnFirstUsage
[4..7] New tbTicketRevenue.ProductAmortizationPeriods, ProductAmortizationPeriodType, ProductAmortizationCalendarId Uniqueidentifier</REASON><TABLENAMES>tbTicketAmortization
tbTicketRevenue</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbTicketAmortization
where NeedUpdateOnFirstUsage=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX IX_TicketAmortization_StatusAndDate ON tbTicketAmortization
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketAmortization
drop column NeedUpdateOnFirstUsage
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index IX_TicketAmortization_Date ON [tbTicketAmortization] ([AmortizationDate] ,[LedgerDateTime])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketRevenue
add
  ProductAmortizationPeriods integer null,
  ProductAmortizationPeriodType Smallint NULL,
  ProductAmortizationCalendarId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketRevenue
alter column ProductVPT money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketRevenue
alter column ProductAmountVPT money null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbTicketRevenue add constraint FK_TicketRevenue_Calendar foreign key([ProductAmortizationCalendarId]) references [tbCalendar] ([CalendarId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketRevenue_ProductAmortizationCalendarId] ON [tbTicketRevenue] ([ProductAmortizationCalendarId] ) 
where ProductAmortizationCalendarId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.251</SQLVERSION><RMTRACKLINK>SIT-5514</RMTRACKLINK><REASON>Add tbTicketAmortization.NeedUpdateOnFirstUsage</REASON><TABLENAMES>tbTicketAmortization</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketAmortization
add NeedUpdateOnFirstUsage bit null 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketAmortization
set NeedUpdateOnFirstUsage=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketAmortization
alter column NeedUpdateOnFirstUsage bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_TicketAmortization_Date on tbTicketAmortization
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>create Index [IX_TicketAmortization_StatusAndDate] ON [tbTicketAmortization] ([NeedUpdateOnFirstUsage], [AmortizationDate] ,[LedgerDateTime])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.250</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop index tbSale.IX_Sale_SaleDateTime and
Create index tbSale.IX_Sale_SaleFiscalDate (SaleFiscalDate, SaleDateTime)</REASON><TABLENAMES>tbSale</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index tbSale.IX_Sale_SaleDateTime
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>create Index IX_Sale_SaleFiscalDate ON tbSale (SaleFiscalDate, SaleDateTime)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>2.249</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0..2: add serial number to tbLedgerAccount
3: update tbSerial with the max SerialNumber from tbLedegerAccount
</REASON><TABLENAMES>tbLedgerAccount
tbSerial</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerAccount  
add SerialNumber integer null;

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerAccount
set 
  SerialNumber=X_SerialNumber
from (
  select
    LedgerAccountId as X_LedgerAccountId,
  Row_Number() OVER (order by LedgerAccountCode) AS X_SerialNumber
from 
  tbLedgerAccount
) X
where 
  LedgerAccountId=X_LedgerAccountId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerAccount
alter column SerialNumber integer not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbSerial 
(
 IdentifierAK, 
 Serial, 
 LockId
)
values
(
'CHART-OF-ACCOUNT',
coalesce((select max(SerialNumber) from tbLedgerAccount), 0),
 NEWID()
)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.248</SQLVERSION><RMTRACKLINK>SIT-5485</RMTRACKLINK><REASON>Revert 
TrnReceiptFailureHideAbort
BoxReceiptFailureHideAbort
flags into:
TrnReceiptFailureShowAbort
BoxReceiptFailureShowAbort</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRight
set RightValue = (case 
                    when RightValue = 'true' then 'false'
                    when RightValue = 'false' then 'true'
                  end
                 )
where 
  RightType in (440, 441)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.247</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add column tbPluginPaymentMethod.Refundable</REASON><TABLENAMES>tbPluginPaymentMethod</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPluginPaymentMethod
add Refundable bit default 1 not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>2.246</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>History details on complex objects in Snapp: Product RevenueRecognition, Product LedgerRules, Chart of account

0: remove previously added seriqlnumber column for tbProductPriceDate

1: remove product price entries in tbSerial
 
2: tbProductRevenueGateCategory drop  constraint FK_ProductRevenueGateCategory_ProductRevenueDate. tbProductVPT drop constraint FK_ProductVPT_ProductRevenueGateCategory

3: add ProductRevenueDateId column to tbProductRevenueDate, tbProductVPT, tbProductRevenueGatecategory

4: tbProductRevenueDate add values to ProductRevenueDateId. Set ProductRevenueDateId not null

5: copy ProductRevenueDateId from tbProductRevenueDate to tbProductRevenueGateCategory. Set ProductRevenueDateId not null for tbtbProductRevenueGateCategory 

6: copy ProductRevenueDateId from tbProductRevenueDate to tbProductVPT. Set ProductRevenueDateId not null for tbtbProductRevenueGateCategory 

7: drop PK and add PK to tbProductRevenueDate 

8: drop PK and add PK to tbProductRevenueGateCategory 

9: ProductRevenueDateId uniqueidentifier not null unique identifier not null on tbProductRevenueGateCategory and tbProductVPT

10: tbProductRevenueGateCategory add constraint FK_ProductRevenueGateCategory_ProductRevenueDat

11: tbProductVPT add constraint FK_ProductVPT_ProductRevenueGateCategory

12: drop column ProductId, PriorityOrder on tbProductRevenueGateCategory

13: modify indexes on tbProductVPT

14: drop column ProductId, PriorityOrder on tbProductVPT

15: create uunique index for tbProductRevenueDate

16: enlarge HistorySubField from 30 to 100 in tbHistory detail

17: populate tbSerial with ledger details info</REASON><TABLENAMES>tbProductPriceDate
tbSerial
tbProductRevenueGateCategory
tbProductVPT
tbProductRevenueDate
tbHistoryDetail
</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductPriceDate
drop column SerialNumber
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from 
  tbSerial 
where 
  IdentifierAK like 'PRDPRICE%'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory drop constraint FK_ProductRevenueGateCategory_ProductRevenueDate

alter table tbProductVPT drop constraint FK_ProductVPT_ProductRevenueGateCategory
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate 
add  ProductRevenueDateId uniqueidentifier null

alter table tbProductRevenueGatecategory 
add  ProductRevenueDateId uniqueidentifier null


alter table tbProductVPT
add  ProductRevenueDateId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductRevenueDate set ProductRevenueDateId = newId()

alter table tbProductRevenueDate 
alter column ProductRevenueDateId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductRevenueGateCategory
set ProductRevenueDateId = PRD.ProductRevenueDateId
from
tbProductRevenueDate PRD inner join  
  tbProductRevenueGateCategory PRGC on PRD.ProductId = PRGC.ProductId and PRD.PriorityOrder = PRGC.PriorityOrder
where PRD.ProductId = PRGC.ProductId and PRD.PriorityOrder = PRGC.PriorityOrder

alter table tbProductRevenueGateCategory 
alter column ProductRevenueDateId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductVPT
set ProductRevenueDateId = PRD.ProductRevenueDateId
from
tbProductRevenueDate PRD inner join  
  tbProductVPT PVPT on PRD.ProductId = PVPT.ProductId and PRD.PriorityOrder = PVPT.PriorityOrder
where PRD.ProductId = PVPT.ProductId and PRD.PriorityOrder = PVPT.PriorityOrder

alter table tbProductVPT 
alter column ProductRevenueDateId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbProductRevenueDate
DROP CONSTRAINT PK_ProductRevenueDate 

ALTER TABLE tbProductRevenueDate
ADD CONSTRAINT PK_ProductRevenueDate PRIMARY KEY (ProductRevenueDateId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbProductRevenueGateCategory
DROP CONSTRAINT PK_ProductRevenueGateCategory 

ALTER TABLE tbProductRevenueGateCategory
ADD CONSTRAINT PK_ProductRevenueGateCategory PRIMARY KEY (ProductRevenueDateId, GateCategoryId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory 
alter column ProductRevenueDateId uniqueidentifier not null

alter table tbProductVPT
alter column ProductRevenueDateId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory
add constraint FK_ProductRevenueGateCategory_ProductRevenueDate foreign key(ProductRevenueDateId) references tbProductRevenueDate (ProductRevenueDateId)  on update no action on delete no action

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductVPT
add constraint FK_ProductVPT_ProductRevenueGateCategory  foreign key(ProductRevenueDateId, GateCategoryId) references tbProductRevenueGateCategory (ProductRevenueDateId, GateCategoryId)  on update no action on delete no action

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory
drop column ProductId, PriorityOrder
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index UQ_ProductVPT_ProductRevenue on tbProductVPT
Create Unique Index UQ_ProductVPT_ProductRevenue on tbProductVPT ([ProductRevenueDateId] ,[GateCategoryId] ,[SaleChannelId] ,[PerformanceTypeId] )

drop index UQ_ProductVPT_ProductGateCategory on tbProductVPT
Create Index IX_ProductVPT_ProductGateCategory on tbProductVPT ([ProductRevenueDateId] ,[GateCategoryId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductVPT
drop column ProductId, PriorityOrder
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Unique Index UQ_ProductRevenueDate_SerialNumber on tbProductRevenueDate ([ProductId] ,[SerialNumber])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbHistoryDetail
drop constraint PK_HistoryDetail

alter table tbHistoryDetail
alter column HistorySubField Nvarchar(100) not null

alter table tbHistoryDetail
add constraint PK_HistoryDetail primary key ([EntityId],[LogDateTime],[PriorityOrder],[HistoryField],[HistorySubField])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert tbSerial (IdentifierAK, Serial, LockId)
(select 
  'LEDGERDET:' + convert(varchar(max), LedgerRuleId),
  count(*) as MaxSerial,
  NEWID()
from 
  tbLedgerRuleDetail
group by LedgerRuleId)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.245</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add column tbApiLog.UserAccountId</REASON><TABLENAMES>tbApiLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF COL_LENGTH('dbo.tbApiLog', 'UserAccountId') IS NULL
BEGIN
  alter table tbApiLog
  add UserAccountId uniqueidentifier null;  
END

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = object_id('tbApiLog') AND NAME ='IX_ApiLog_UserAccountId')
BEGIN
  Create Index [IX_ApiLog_UserAccountId] ON [tbApiLog] ([UserAccountId] ,[EndDateTime] ) 
  where UserAccountId is not null
END
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'dbo.FK_ApiLog_UserAccount'))
BEGIN
  Alter table [tbApiLog] add constraint FK_ApiLog_UserAccount foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action
END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.244</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add field tbApiLog.ClientIPAddress</REASON><TABLENAMES>tbApiLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>IF COL_LENGTH('dbo.tbApiLog', 'ClientIPAddress') IS NULL
BEGIN
  alter table tbApiLog
  add ClientIPAddress varchar(25) null
END
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.243</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Patches invalid lookup values (0)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbEntityRight 
set rightLevel=1
where RightLevel=0
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.242</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Adding default rights to metafields and invalidate cache</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbEntityRight (
  DocEntityId, 
  UsrEntityId, 
  DocEntityType, 
  UsrEntityType, 
  RightLevel
)
(
  select
    MF.MetaFieldId,
    'A0000131-0000-0000-0000-000000000003',
    16 /*metaField*/,
    3 /*workstation*/,
  3 /*edit*/
  from tbMetaField MF
  where MF.MetaFieldId not in (select DocEntityId from tbEntityRight)
)
UNION ALL
(
  select 
    MF.MetaFieldId,
    'A0000131-0000-0000-0000-000000000015',
    16 /*metaField*/,
    15 /*person*/,
    3 /*edit*/
  from tbMetaField MF
  where MF.MetaFieldId not in (select DocEntityId from tbEntityRight)
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete
from tbEntityChange
where EntityId in (
  select MetaFieldId
  from tbMetaField
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbEntityChange (
  EntityType, 
  EntityId, 
  InsertUpdate
)
(
  select
    16 /*metaField*/,
    MetaFieldId,
    1 /*true*/
  from tbMetaField
)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.241</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Modifiy index IX_Catalog_RootCatalogId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Catalog_RootCatalogId on tbCatalog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Catalog_RootCatalogId] ON [tbCatalog] ([RootCatalogId] ,[EntityType] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.240</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbApiLogLink</REASON><TABLENAMES>tbApiLogLink
tbApiLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbApiLogLink]
(
  [ApiLogId] Uniqueidentifier NOT NULL,
  [EntityId] Uniqueidentifier NOT NULL,
  [EntityType] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbApiLogLink]
ADD CONSTRAINT PK_ApiLogLink PRIMARY KEY ([ApiLogId],[EntityId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ApiLogLink_EntityId] ON [tbApiLogLink] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbApiLogLink] add constraint FK_ApiLogLink_ApiLog foreign key([ApiLogId]) references [tbApiLog] ([ApiLogId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbApiLogLink (ApiLogId, EntityId, EntityType)
select ApiLogId, EntityId, EntityType
from tbApiLog
where EntityId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbApiLog
drop column EntityId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbApiLog
drop column EntityType
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.239</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbOutboundQueue:
- CorrelationId
- SuppressEvent</REASON><TABLENAMES>tbOutboundQueue</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbOutboundQueue
add CorrelationId varchar(50) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbOutboundQueue
add SuppressEvent bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_CorrelationId] ON [tbOutboundQueue] ([CorrelationId] ,[CreateDateTime] ) 
where CorrelationId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.238</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbCorrelation</REASON><TABLENAMES>tbCorrelation</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbCorrelation]
(
  [CorrelationId] Uniqueidentifier NOT NULL,
  [CorrelationCode] Varchar(50) NOT NULL,
  [SuppressEvent] Bit NOT NULL,
  [RequestDate] date NOT NULL,
  [RequestDateTime] Datetime NOT NULL,
  [RequestCode] Varchar(50) NOT NULL,
  [RequestCommand] Varchar(50) NULL,
  [WorkstationId] Uniqueidentifier NOT NULL,
  [UserAccountId] Uniqueidentifier NULL,
  [ServerId] Integer NULL,
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCorrelation]
ADD CONSTRAINT PK_Correlation PRIMARY KEY ([CorrelationId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_Correlation_CorrelationCode] ON [tbCorrelation] ([CorrelationCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Correlation_DateTime] ON [tbCorrelation] ([RequestDate] ,[RequestDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Correlation_RequestCode] ON [tbCorrelation] ([RequestCode] ,[RequestCommand] ,[RequestDate] ,[RequestDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Correlation_WorkstationId] ON [tbCorrelation] ([WorkstationId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Correlation_UserAccountId] ON [tbCorrelation] ([UserAccountId] ) 
where UserAccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCorrelation] add constraint FK_Correlation_UserAccount foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCorrelation] add constraint FK_Correlation_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>2.237</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Adding serial numbers to tbLedgerRule in order to log modifications in tbHistoryLog/Detail
0:..2 Add SerialNumber to tbLedgerRule
3: calc last serial number for already created  LedgerRules records and insert it in tbSerial</REASON><TABLENAMES>tbLedgerRule</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
add SerialNumber integer null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>;with tmptbLedgerRule as
(
  select
    TriggerEntityId, 
    SerialNumber,
    Rn = ROW_NUMBER() over (partition by TriggerEntityId order by TriggerEntityId)
  from tbLedgerRule
)

update tmptbLedgerRule set SerialNumber = Rn
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
alter column SerialNumber integer not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert tbSerial (IdentifierAK, Serial, LockId)
(select 
  'LEDGERRULE:' + convert(varchar(max), TriggerEntityId),
  count(*) as MaxSerial,
  NEWID()
from 
  tbLedgerRule
group by TriggerEntityId)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>spangallo</ADDEDBY><SQLVERSION>2.236</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tbDocTemplate.MediaEncoderPluginId</REASON><TABLENAMES>tbDocTemplate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
add
  [MediaEncoderPluginId] uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_DocTemplate_MediaEncoderPluginId] ON [tbDocTemplate] ([MediaEncoderPluginId] ) 
where MediaEncoderPluginId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDocTemplate] add constraint FK_DocTemplate_MediaEncoderPluginId foreign key([MediaEncoderPluginId]) references [tbPlugin] ([PluginId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>2.235</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Adding serial numbers to tbProductRevenueDate in order to log modifications in tbHistoryLog/Detail
0:..2 Add SerialNumber to TbProductRevenueDate 
3: calc last serial number for already created ProductrevenueDate records and insert it in tbSerial</REASON><TABLENAMES>tbProductRevenueDate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
add SerialNumber integer null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>;with tmpProductRevenueDate as
(
  select
    ProductId, 
    PriorityOrder,
    SerialNumber,
    Rn = ROW_NUMBER() over (partition by ProductId order by PriorityOrder)
  from tbProductRevenueDate
)

update tmpProductRevenueDate set SerialNumber = Rn
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
alter column SerialNumber integer not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert tbSerial (IdentifierAK, Serial, LockId)
(select 
  'PRDREVREC:' + convert(varchar(max), ProductId),
  count(*) as MaxSerial,
  NEWID()
from 
  tbProductRevenueDate
group by ProductId)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.234</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Update tbProductFamily ParentEntityType lookup</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbProductFamily 
set ParentEntityType=null
where ParentEntityType=0
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.233</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field DatabaseProcess to tbJob</REASON><TABLENAMES>tbJob</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbJob
add DatabaseProcess smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>2.232</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Adding serial numbers to ProductPriceDate in order to log modifications in tbHistoryLog/Detail
0:..2 Add SerialNumber to TbProductPriceDate 
3: calc last serial number for already created ProductPriceDate records and insert it in tbSerial</REASON><TABLENAMES>tbProductPriceDate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductPriceDate
add SerialNumber integer null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>;with tmpProductPriceDate as
(
  select
    ProductId, 
    PriorityOrder,
    SerialNumber,
    Rn = ROW_NUMBER() over (partition by ProductId order by PriorityOrder)
  from tbProductPriceDate
)

update tmpProductPriceDate set SerialNumber = Rn

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceDate
alter column SerialNumber integer not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert tbSerial (IdentifierAK, Serial, LockId)
(select 
  'PRDPRICE:' + convert(varchar(max), ProductId),
  count(*) as MaxSerial,
  NEWID()
from 
  tbProductPriceDate
group by ProductId)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.231</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTransactionTicketPriority</REASON><TABLENAMES>tbTransactionTicketPriority</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTransactionTicketPriority]
(
  [TransactionId] Uniqueidentifier NOT NULL,
  [TicketId] Uniqueidentifier NOT NULL,
  [OldPriorityOrder] Integer NOT NULL,
  [NewPriorityOrder] Integer NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionTicketPriority]
ADD CONSTRAINT PK_TransactionTicketPriority PRIMARY KEY ([TransactionId],[TicketId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionTicketPriority_TicketId] ON [tbTransactionTicketPriority] ([TicketId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionTicketPriority] add constraint FK_TransactionTicketPriority_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionTicketPriority] add constraint FK_TransactionTicketPriority_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.230</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbHistoryLog.Notes</REASON><TABLENAMES>tbHistoryLog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbHistoryLog
add Notes nvarchar(max) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.229</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTransactionMediaTransfer</REASON><TABLENAMES>tbTransactionMediaTransfer</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTransactionMediaTransfer]
(
  [TransactionId] Uniqueidentifier NOT NULL,
  [MediaId] Uniqueidentifier NOT NULL,
  [SourcePortfolioId] Uniqueidentifier NOT NULL,
  [TargetPortfolioId] Uniqueidentifier NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionMediaTransfer]
ADD CONSTRAINT PK_TransactionMediaTransfer PRIMARY KEY ([TransactionId],[MediaId])

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionMediaTransfer_MediaId] ON [tbTransactionMediaTransfer] ([MediaId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionMediaTransfer_SourcePortfolioId] ON [tbTransactionMediaTransfer] ([SourcePortfolioId] ,[MediaId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TransactionMediaTransfer_TargetPortfolioId] ON [tbTransactionMediaTransfer] ([TargetPortfolioId] ,[MediaId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionMediaTransfer] add constraint FK_TransactionMediaTransfer_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionMediaTransfer] add constraint FK_TransactionMediaTransfer_Media foreign key([MediaId]) references [tbMedia] ([MediaId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionMediaTransfer] add constraint FK_TransactionMediaTransfer_SourcePortfolio foreign key([SourcePortfolioId]) references [tbTicketMediaMatch] ([TicketMediaMatchId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionMediaTransfer] add constraint FK_TransactionMediaTransfer_TargetPortfolio foreign key([TargetPortfolioId]) references [tbTicketMediaMatch] ([TicketMediaMatchId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>2.228</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Temporarily removing SerialNumber column from tbProductPriceDate and PRDPRICE entries in tbSerial. They will be added again later</REASON><TABLENAMES>tbProductPriceDate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductPriceDate
drop column SerialNumber
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete from 
  tbSerial 
where 
  IdentifierAK like 'PRDPRICE%'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>2.227</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Adding serial numbers to ProductPriceDate in order to log modifications in tbHistoryLog/Detail
0:..2 Add SerialNumber to TbProductPriceDate 
3: calc last serial number for already created ProductPriceDate records and insert it in tbSerial</REASON><TABLENAMES>tbProductPriceDate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductPriceDate
add SerialNumber integer null



</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>;with tmpProductPriceDate as
(
  select
    ProductId, 
    PriorityOrder,
    SerialNumber,
    Rn = ROW_NUMBER() over (partition by ProductId order by PriorityOrder)
  from tbProductPriceDate
)

update tmpProductPriceDate set SerialNumber = Rn


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductPriceDate
alter column SerialNumber integer not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert tbSerial (IdentifierAK, Serial, LockId)
(select 
  'PRDPRICE:' + convert(varchar(max), ProductId),
  count(*) as MaxSerial,
  NEWID()
from 
  tbProductPriceDate
group by ProductId)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.226</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Patches invalid lookup values (0)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbAccount
set AccountStatus=1
where AccountStatus=0 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.225</SQLVERSION><RMTRACKLINK>SIT-5221</RMTRACKLINK><REASON>Add tbProductRevenueDate.BreakageDaysType</REASON><TABLENAMES>tbProductRevenueDate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
add BreakageDaysType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductRevenueDate
set BreakageDaysType = case  
                         when BreakageDays is not null then 2 
                         else 1
                       end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
alter column BreakageDaysType smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.224</SQLVERSION><RMTRACKLINK>SIT-5225</RMTRACKLINK><REASON>Add tbLedgerRule.TriggerTaxExempt</REASON><TABLENAMES>tbLedgerRule</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
add TriggerTaxExempt smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>ugog</ADDEDBY><SQLVERSION>2.223</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop tbAccount.CategoryId</REASON><TABLENAMES>tbAccount</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbCategory2Entity


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbCategory2Entity (CategoryId, EntityId, EntityType)
select CategoryId, AccountId, EntityType
from tbAccount
where CategoryId is not null



</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccount drop constraint FK_Account_Category; 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_Account_CategoryId on tbAccount
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAccount drop column CategoryId;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.222</SQLVERSION><RMTRACKLINK>SIT-5205</RMTRACKLINK><REASON>[0..17] Refactoring tbProductRevenueDate and tbProductRevenueGateCategory
[18..24] Refactoring tbTicketAmortization
[25..30] Renaming tbTicketVPT into tbTicketRevenue</REASON><TABLENAMES>tbProductRevenueDate
tbProductRevenueGateCategory
tbTicketAmortization
tbTicketRevenue</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete 
  tbProductVPT 
where ProductId in 
  (select 
     ProductId 
   from 
     tbProductRevenueDate 
   where 
     RevenueRecognitionType=2)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete  
  tbProductRevenueGateCategory
where ProductId in 
  (select 
     ProductId 
   from 
     tbProductRevenueDate 
   where 
     RevenueRecognitionType=2)     
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory
add
  RevenueRecognitionType Smallint NULL,
  AmortizationPeriods Integer NULL,
  AmortizationPeriodType Smallint NULL,
  AmortizationTrigger Smallint NULL,
  AmortizationCalendarId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductRevenueGateCategory_AmortizationCalendarId] ON [tbProductRevenueGateCategory] ([AmortizationCalendarId] ) 
where AmortizationCalendarId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbProductRevenueGateCategory add constraint FK_ProductRevenueGateCategory_AmortizationCalendar foreign key([AmortizationCalendarId]) references [tbCalendar] ([CalendarId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory drop constraint FK_ProductRevenueGateCategory_PerformanceType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbProductRevenueGateCategory add constraint FK_ProductRevenueGateCategory_Calendar foreign key([CalendarId]) references [tbCalendar] ([CalendarId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductRevenueGateCategory
set RevenueRecognitionType=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory
alter column  [RevenueRecognitionType] Smallint not NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbGateCategory (GateCategoryId, GateCategoryCode, GateCategoryName)
  select
    NEWID(),
  'AUTOGEN',
  'Autogenerated'
  where 
    NOT EXISTS (select * from tbGateCategory)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProductRevenueGateCategory (ProductId, PriorityOrder, GateCategoryId, CalendarId, ClearingLimit, ClearingLimitType, RevenueRecognitionType, AmortizationPeriods, AmortizationPeriodType, AmortizationTrigger, AmortizationCalendarId)
  select
    ProductId,
    PriorityOrder,
    (select top(1) GateCategoryId from tbGateCategory order by GateCategoryName desc),
    null,
    null,
    2,
    2,
    AmortizationPeriods,
    AmortizationPeriodType,
    AmortizationTrigger,
    AmortizationCalendarId
  from 
    tbProductRevenueDate
  where
    RevenueRecognitionType=2
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate drop constraint FK_ProductRevenueDate_Calendar
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX tbProductRevenueDate.IX_ProductRevenueDate_AmortizationCalendarId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
drop column RevenueRecognitionType



</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
drop column AmortizationPeriods

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
drop column AmortizationPeriodType

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
drop column AmortizationTrigger

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
drop column AmortizationCalendarId

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketAmortization
add GateCategoryId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketAmortization
set GateCategoryId=(select top(1) GateCategoryId from tbGateCategory order by GateCategoryName desc)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketAmortization
alter column GateCategoryId Uniqueidentifier not NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX tbTicketAmortization.UQ_TicketAmortization_TicketId; 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_TicketAmortization_TicketId] ON [tbTicketAmortization] ([TicketId] ,[GateCategoryId] ,[AmortizationDate] )
 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_TicketAmortization_GateCategoryId] ON [tbTicketAmortization] ([GateCategoryId] ,[TicketId] ,[AmortizationDate] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketAmortization] add constraint FK_TicketAmortization_GateCategory foreign key([GateCategoryId]) references [tbGateCategory] ([GateCategoryId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbTicketVPT', 'tbTicketRevenue'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>exec sp_rename 
@objname = 'PK_TicketVPT',
@newname = 'PK_TicketRevenue',
@objtype = 'object'


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>exec sp_rename 
@objname = 'FK_TicketVPT_GateCategory',
@newname = 'FK_TicketRevenue_GateCategory',
@objtype = 'object'
 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>exec sp_rename 
@objname = 'FK_TicketVPT_Ticket',
@newname = 'FK_TicketRevenue_Ticket',
@objtype = 'object'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX tbTicketRevenue.IX_TicketVPT_GateCategory

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketRevenue_GateCategory] ON [tbTicketRevenue] ([GateCategoryId])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.221</SQLVERSION><RMTRACKLINK>SIT-5158</RMTRACKLINK><REASON>Increase size of field tbPaymentCard.CardHolderName</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentCard
alter column CardHolderName varchar(30) null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Marco</ADDEDBY><SQLVERSION>2.220</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>ADD [IX_Biometric_EnrollmentDateTime] 
ADD [IX_Biometric_ExpirationDate] 
</REASON><TABLENAMES>tbBiometric</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_Biometric_EnrollmentDateTime] ON [tbBiometric] ([EnrollmentDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Biometric_ExpirationDate] ON [tbBiometric] ([ExpirationDate] ) 
where ExpirationDate is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.219</SQLVERSION><RMTRACKLINK>SIT-5191</RMTRACKLINK><REASON>Drop tbTicketAmortization.NeedUpdateOnFirstUsage</REASON><TABLENAMES>tbTicketAmortization</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete tbTicketAmortization
where NeedUpdateOnFirstUsage=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX IX_TicketAmortization_StatusAndDate ON tbTicketAmortization
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketAmortization
drop column NeedUpdateOnFirstUsage
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketAmortization_Date] ON [tbTicketAmortization] ([AmortizationDate] ,[LedgerDateTime] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>mcireni</ADDEDBY><SQLVERSION>2.218</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add  field to tbBiometric:
  - ExpirationDate
  
Add  fields to tbProduct:
  - BioValidityType
  - BioValidityQuantity
  - PriorityOrderCheckType
  - EnforceSecondaryGroup </REASON><TABLENAMES>tbBiometric
tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbBiometric
add 
  ExpirationDate Date NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add 
  BioValidityType Smallint NULL,
  BioValidityQuantity Smallint NULL,
  PriorityOrderCheckType Smallint NULL,
  EnforceSecondaryGroup Bit NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.217</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add  fields to tbProduct:
  - RenewWindowStartDays
  - RenewWindowEndDays

Add table tbProductRenewFromProduct</REASON><TABLENAMES>tbProduct
tbProductRenewFromProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add 
  RenewWindowStartDays smallint null,
  RenewWindowEndDays smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbProductRenewFromProduct]
(
  [ProductId] Uniqueidentifier NOT NULL,
  [PriorityOrder] Smallint NOT NULL,
  [SourceProductId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductRenewFromProduct]                                         
ADD CONSTRAINT PK_ProductRenewFromProduct PRIMARY KEY ([ProductId], [PriorityOrder])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>ugog</ADDEDBY><SQLVERSION>2.216</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>rename tbOutboundQueueItem.DocDateTime' into EndDateTime</REASON><TABLENAMES>tbOutboundQueueItem</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbOutboundQueueItem.DocDateTime', 'EndDateTime';
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>ugog</ADDEDBY><SQLVERSION>2.215</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbOutboundQueueItem
- StartDateTime
- DocDateTime
- SendDateTime</REASON><TABLENAMES>tbOutboundQueueItem</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbOutboundQueueItem
add
  StartDateTime datetime null,  
  DocDateTime datetime null,  
  SendDateTime datetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbOutboundQueueItem
set StartDateTime=GetDate()
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbOutboundQueueItem
alter column StartDateTime datetime not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.214</SQLVERSION><RMTRACKLINK>SIT-5092</RMTRACKLINK><REASON>Added rights:
"Require bag number on deposit"
"Require bag number on withdraw"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbRight (RightId, EntityType, EntityId, RightType, RightValue)
  select 
    NEWID(),
    EntityType,
    EntityId,
    455,
    RightValue
  from 
    tbRight
  where 
    RightType=423
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbRight (RightId, EntityType, EntityId, RightType, RightValue)
  select 
    NEWID(),
    EntityType,
    EntityId,
    456,
    RightValue
  from 
    tbRight
  where 
    RightType=423
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.213</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbPluginPaymentMethod.LastUpdate</REASON><TABLENAMES>tbPluginPaymentMethod</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPluginPaymentMethod
add LastUpdate datetime null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.212</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Remove tbProduct.PerformanceSelectionFlow</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
drop column PerformanceSelectionFlow

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>ugog</ADDEDBY><SQLVERSION>2.211</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbOutboundMessage.Itemized</REASON><TABLENAMES>tbOutboundMessage</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbOutboundMessage
add Itemized bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbOutboundMessage
set Itemized=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbOutboundMessage
alter column Itemized bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>ugog</ADDEDBY><SQLVERSION>2.210</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbOutboundQueueItem</REASON><TABLENAMES>tbOutboundQueueItem</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbOutboundQueueItem]
(
  [OutboundQueueItemId] Uniqueidentifier NOT NULL,
  [OutboundQueueId] Uniqueidentifier NOT NULL,
  [OutboundQueueItemStatus] Smallint NOT NULL,
  [ItemEntityId] Uniqueidentifier NOT NULL,
  [ItemEntityType] Smallint NOT NULL,
  [DocData] Nvarchar(max) NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundQueueItem]
ADD CONSTRAINT PK_OutboundQueueItem PRIMARY KEY ([OutboundQueueItemId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueueItem_OutboundQueueId] ON [tbOutboundQueueItem] ([OutboundQueueId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundQueueItem] add constraint FK_OutboundQueueItem_OutboundQueue foreign key([OutboundQueueId]) references [tbOutboundQueue] ([OutboundQueueId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.209</SQLVERSION><RMTRACKLINK>SIT-5091</RMTRACKLINK><REASON>Add tbProductRevenueDate.AmortizationCalendarId</REASON><TABLENAMES>tbProductRevenueDate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
add AmortizationCalendarId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductRevenueDate] add constraint FK_ProductRevenueDate_Calendar foreign key([AmortizationCalendarId]) references [tbCalendar] ([CalendarId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductRevenueDate_AmortizationCalendarId] ON [tbProductRevenueDate] ([AmortizationCalendarId] ) 
where AmortizationCalendarId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>ugog</ADDEDBY><SQLVERSION>2.208</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.DatedCalendarId</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add DatedCalendarId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_DatedCalendarId] ON [tbProduct] ([DatedCalendarId] ) 
where DatedCalendarId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_Calendar_DatedCalendarId foreign key([CalendarId]) references [tbCalendar] ([CalendarId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.207</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Remove field tbLedgerRuleDetail.LastUpdate
Add field tbLedgerRuleTemplate.LastUpdate</REASON><TABLENAMES>tbLedgerRuleDetail
tbLedgerRuleTemplate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerRuleDetail
drop column LastUpdate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRuleTemplate
add LastUpdate datetime null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>ugog</ADDEDBY><SQLVERSION>2.206</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbCalendar:
- DatedCalendar
- DatedEventId
- DatedLocationId
- DatedAccessAreaId</REASON><TABLENAMES>tbCalendar</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCalendar
add
  DatedCalendar bit null,  
  DatedEventId uniqueidentifier null,  
  DatedLocationId uniqueidentifier null,  
  DatedAccessAreaId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbCalendar
set DatedCalendar=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCalendar
alter column DatedCalendar bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Calendar_DatedEventId] ON [tbCalendar] ([DatedEventId] ) 
where DatedEventId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Calendar_DatedLocationId] ON [tbCalendar] ([DatedLocationId] ) 
where DatedLocationId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Calendar_DatedAccessAreaId] ON [tbCalendar] ([DatedAccessAreaId] ) 
where DatedAccessAreaId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCalendar] add constraint FK_Calendar_Account_DatedLocationId foreign key([DatedLocationId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCalendar] add constraint FK_Calendar_Account_DatedAccessAreaId foreign key([DatedAccessAreaId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCalendar] add constraint FK_Calendar_Event_DatedEventId foreign key([DatedEventId]) references [tbEvent] ([EventId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.205</SQLVERSION><RMTRACKLINK>SIT-5036</RMTRACKLINK><REASON>New table tbLedgerClearing</REASON><TABLENAMES>tbLedgerClearing</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbLedgerClearing]
(
  [LedgerClearingId] Uniqueidentifier NOT NULL,
  [GroupEntityId] Uniqueidentifier NOT NULL,
  [TicketId] Uniqueidentifier NOT NULL,
  [GateCategoryId] Uniqueidentifier NULL,
  [LedgerTriggerType] Smallint NOT NULL,
  [LedgerTriggerEntityId] Uniqueidentifier NOT NULL,
  [LedgerTriggerEntityType] Smallint NOT NULL,
  [LedgerFiscalDate] Date NOT NULL,
  [LedgerDateTime] Datetime NOT NULL,
  [DeltaAmount] Money NOT NULL
 ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerClearing]
ADD CONSTRAINT PK_LedgerClearing PRIMARY KEY ([LedgerClearingId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerClearing_GroupEntityId] ON [tbLedgerClearing] ([GroupEntityId] ,[LedgerDateTime] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerClearing_TicketId] ON [tbLedgerClearing] ([TicketId] ,[LedgerDateTime] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerClearing_GateCategoryId] ON [tbLedgerClearing] ([GateCategoryId] ,[LedgerDateTime] ) 
where GateCategoryId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerClearing_LedgerFiscalDate] ON [tbLedgerClearing] ([LedgerFiscalDate] ,[LedgerDateTime] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerClearing] add constraint FK_LedgerClearing_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerClearing] add constraint FK_LedgerClearing_GateCategory foreign key([GateCategoryId]) references [tbGateCategory] ([GateCategoryId])  on update no action on delete no action  
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.204</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New tbTicketVPT.ProductAmountVPT</REASON><TABLENAMES>tbTicketVPT</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketVPT
add ProductAmountVPT money null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketVPT
set ProductAmountVPT = ROUND(ClearingLimit/ProductVPT, 2)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketVPT
alter column ProductAmountVPT money not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.203</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields
  tbAccount.LastUpdate
  tbProduct.LastUpdate
  tbLedgerRule.LastUpdate
  tbLedgerRuleDetail.LastUpdate
  tbTax.LastUpdate
  tbTaxProfile.LastUpdate</REASON><TABLENAMES>tbAccount
tbProduct
tbLedgerRule
tbLedgerRuleDetail
tbTax
tbTaxProfile</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccount
add LastUpdate datetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add LastUpdate datetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
add LastUpdate datetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerRuleDetail
add LastUpdate datetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTax
add LastUpdate datetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTaxProfile
add LastUpdate datetime null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>ugog</ADDEDBY><SQLVERSION>2.202</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Patches invalid lookup values (0)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbAttribute
set ParentEntityType=null
where ParentEntityType=0
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>ugog</ADDEDBY><SQLVERSION>2.201</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Patches invalid lookup values (0)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbProduct
set PresaleValueType=1
where PresaleValueType=0 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set ProductPriceAdvanceType=1
where ProductPriceAdvanceType=0 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set ParentEntityType=null
where ParentEntityType=0 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbCurrency
set RoundingType=1
where RoundingType=0 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbCatalog
set FlowType=1
where FlowType=0 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbMaskItem
set MaskDefaultType=1
where MaskDefaultType=0 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>ugog</ADDEDBY><SQLVERSION>2.200</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbSaleChannel.LastUpdate</REASON><TABLENAMES>tbSaleChannel</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleChannel
add LastUpdate datetime null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>ugog</ADDEDBY><SQLVERSION>2.199</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbOutboundQueue.OutboundEventType</REASON><TABLENAMES>tbOutboundQueue</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbOutboundQueue
add OutboundEventType smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>there</ADDEDBY><SQLVERSION>2.198</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add
- ValidityType
- ExpirationDays
Remove 
 - ValidForPayment </REASON><TABLENAMES>tbMembershipPoint</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMembershipPoint
add
  ValidityType Smallint NULL,
  ExpirationDays Smallint NULL

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbMembershipPoint
set ValidityType = 1
from
  tbMembershipPoint
where 
  ValidForPayment = 1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMembershipPoint
drop column ValidForPayment
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.197</SQLVERSION><RMTRACKLINK>SIT-5048</RMTRACKLINK><REASON>Rollback changes made in 2.186</REASON><TABLENAMES>tbProductRevenueDate
tbProductRevenueGateCategory</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
add
  RevenueRecognitionType Smallint NULL,
  AmortizationPeriods Integer NULL,
  AmortizationPeriodType Smallint NULL,
  AmortizationTrigger Smallint NULL,  
  ProductVPT money NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductRevenueDate
set tbProductRevenueDate.RevenueRecognitionType = 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update PRD
set PRD.RevenueRecognitionType = PRGC.RevenueRecognitionType
from
  tbProductRevenueDate as PRD left join
  tbProductRevenueGateCategory as PRGC on PRD.ProductId = PRGC.ProductId
where 
  PRGC.RevenueRecognitionType=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update PRD
set 
  PRD.AmortizationPeriods = PRGC.AmortizationPeriods,
  PRD.AmortizationPeriodType = PRGC.AmortizationPeriodType,
  PRD.AmortizationTrigger = PRGC.AmortizationTrigger,
  PRD.RevenueRecognitionType = PRGC.RevenueRecognitionType
from
  tbProductRevenueDate as PRD left join
  tbProductRevenueGateCategory as PRGC on PRD.ProductId = PRGC.ProductId
where 
  PRGC.RevenueRecognitionType=2
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory
drop column RevenueRecognitionType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory
drop column AmortizationPeriods
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory
drop column AmortizationPeriodType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory
drop column AmortizationTrigger
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
alter column RevenueRecognitionType smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>sdangelo</ADDEDBY><SQLVERSION>2.196</SQLVERSION><RMTRACKLINK>SIT-5046</RMTRACKLINK><REASON>Add field MinAge and MaxAge</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add MinAge smallint null,
    MaxAge smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.195</SQLVERSION><RMTRACKLINK>SIT-5036</RMTRACKLINK><REASON>Add tbLedgerRuleDetail.GateCategoryId</REASON><TABLENAMES>tbLedgerRuleDetail</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerRuleDetail
add GateCategoryId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerRuleDetail_GateCategoryId] ON [tbLedgerRuleDetail] ([GateCategoryId] ) 
where GateCategoryId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRuleDetail] add constraint FK_LedgerRuleDetail_GateCategory foreign key([GateCategoryId]) references [tbGateCategory] ([GateCategoryId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>ugog</ADDEDBY><SQLVERSION>2.194</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbInstallmentContract.InstallmentContractCode from varchar 10 to 15 </REASON><TABLENAMES>tbInstallmentContract</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_InstallmentContract_InstallmentContractCode on tbInstallmentContract
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
alter column InstallmentContractCode varchar(15) not null 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_InstallmentContract_InstallmentContractCode] ON [tbInstallmentContract] ([InstallmentContractCode] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>sdangelo</ADDEDBY><SQLVERSION>2.193</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add ExchangeRateDecimals</REASON><TABLENAMES>tbCurrency</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbCurrency
ADD ExchangeRateDecimals SMALLINT NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>there</ADDEDBY><SQLVERSION>2.192</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tbProduct.PosPricingPlugin and tbProduct.WebPricingPlugin</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add
  [PosPricingPluginId] uniqueidentifier null,
  [WebPricingPluginId] uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_PosPricingPluginId] ON [tbProduct] ([PosPricingPluginId] ) 
where PosPricingPluginId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_WebPricingPluginId] ON [tbProduct] ([WebPricingPluginId] ) 
where WebPricingPluginId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_PosPricingPlugin foreign key([PosPricingPluginId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_WebPricingPlugin foreign key([WebPricingPluginId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>sdangelo</ADDEDBY><SQLVERSION>2.191</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add IX_BoxDeposit_BagNumber index</REASON><TABLENAMES>tbBoxDeposit</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_BoxDeposit_BagNumber] ON [tbBoxDeposit] ([BagNumber] ) 
where BagNumber is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.190</SQLVERSION><RMTRACKLINK>SIT-5036</RMTRACKLINK><REASON>Add tbLedgerRule.TriggerGateCategoryId and tbLedgerRule.TriggerEventId</REASON><TABLENAMES>tbLedgerRule</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
add
  [TriggerGateCategoryId] uniqueidentifier null,
  [TriggerEventId] uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerRule_TriggerGateCategoryId] ON [tbLedgerRule] ([TriggerGateCategoryId] ) 
where TriggerGateCategoryId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerRule_TriggerEventId] ON [tbLedgerRule] ([TriggerEventId] ) 
where TriggerEventId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRule] add constraint FK_LedgerRule_GateCategory foreign key([TriggerGateCategoryId]) references [tbGateCategory] ([GateCategoryId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRule] add constraint FK_LedgerRule_EventId foreign key([TriggerEventId]) references [tbEvent] ([EventId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.189</SQLVERSION><RMTRACKLINK>SIT-4989</RMTRACKLINK><REASON>Small refactor of tbProductRevenueGateCategory</REASON><TABLENAMES>tbProductRevenueGateCategory</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_RENAME 'tbProductRevenueGateCategory.ClearingLimitPerc', 'ClearingLimit', 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory
add ClearingLimitType Tinyint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductRevenueGateCategory
set ClearingLimitType=2
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory
alter column ClearingLimitType TinyInt not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>ugog</ADDEDBY><SQLVERSION>2.188</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbProduct.PerformanceSelectionFlow</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add PerformanceSelectionFlow smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct
set PerformanceSelectionFlow=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column PerformanceSelectionFlow smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.187</SQLVERSION><RMTRACKLINK>SIT-4950</RMTRACKLINK><REASON>Add field tbTicketAmortization.TicketAmortizationStatus</REASON><TABLENAMES>tbTicketAmortization</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketAmortization
add TicketAmortizationStatus smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketAmortization 
set TicketAmortizationStatus = 
  case
    when LedgerDateTime is not null then 2  
    else 
    case when 
    (select 
          T.TicketStatus
    from 
      tbTicket T
    where
      T.TicketId=tbTicketAmortization.TicketId) = 0 then 1 else 4 
    end
  end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketAmortization
alter column TicketAmortizationStatus smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.186</SQLVERSION><RMTRACKLINK>SIT-4948</RMTRACKLINK><REASON>Refactor tbProductRevenueDate and tbProductRevenueGateCategory</REASON><TABLENAMES>tbProductRevenueDate
tbProductRevenueGateCategory</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory
add
  RevenueRecognitionType Smallint NULL,
  AmortizationPeriods Integer NULL,
  AmortizationPeriodType Smallint NULL,
  AmortizationTrigger Smallint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductRevenueGateCategory
set RevenueRecognitionType=1
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbProductRevenueGateCategory (ProductId, PriorityOrder, GateCategoryId, CalendarId, ClearingLimitPerc, RevenueRecognitionType, AmortizationPeriods, AmortizationPeriodType, AmortizationTrigger)
  select
    ProductId,
  PriorityOrder,
  (select top(1) GateCategoryId from tbGateCategory order by GateCategoryName desc),
  null,
  null,
  2,
  AmortizationPeriods,
  AmortizationPeriodType,
  AmortizationTrigger
  from tbProductRevenueDate
  where
    RevenueRecognitionType=2 and    
    (select top(1) GateCategoryId from tbGateCategory order by GateCategoryName desc) is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
drop column RevenueRecognitionType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
drop column AmortizationPeriods
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
drop column AmortizationPeriodType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
drop column AmortizationTrigger
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueGateCategory
alter column  [RevenueRecognitionType] Smallint not NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.185</SQLVERSION><RMTRACKLINK>SIT-4783</RMTRACKLINK><REASON>New right Downgradable for security roles</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>/* 307 was marked as available in source code
the "delete" makes sure of not having dirty values */
delete tbRight where RightType=307
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbRight (RightId, EntityType, EntityId, RightType, RightValue)
  select 
    NEWID(), EntityType, EntityId, 307, RightValue
  from 
    tbRight
  where 
    RightType=306
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.184</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbCategory2Entity</REASON><TABLENAMES>tbCategory
tbCategory2Entity</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbCategory2Entity]
(
  [CategoryId] Uniqueidentifier NOT NULL,
  [EntityId] Uniqueidentifier NOT NULL,
  [EntityType] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCategory2Entity]
ADD CONSTRAINT PK_Category2Entity PRIMARY KEY ([CategoryId],[EntityId])

 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Category2Entity_EntityId] ON [tbCategory2Entity] ([EntityId] )




</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCategory2Entity] add constraint FK_Category2Entity_Category foreign key([CategoryId]) references [tbCategory] ([CategoryId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbCategory
add PriorityOrder int null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.183</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTicketUsageMediaCode</REASON><TABLENAMES>tbTicketUsageMediaCode</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTicketUsageMediaCode]
(
  [TicketUsageId] Uniqueidentifier NOT NULL,
  [MediaCode] Varchar(50) NOT NULL,
  [UnknownMediaCode] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketUsageMediaCode]
ADD CONSTRAINT PK_TicketUsageMediaCode PRIMARY KEY ([TicketUsageId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketUsageMediaCode_MediaCode] ON [tbTicketUsageMediaCode] ([MediaCode] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketUsageMediaCode] add constraint FK_TicketUsageMediaCode_TicketUsage foreign key([TicketUsageId]) references [tbTicketUsage] ([TicketUsageId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.182</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add new tbInstallmentContractItem table</REASON><TABLENAMES>tbInstallmentContractItem</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbInstallmentContractItem]
(
  [InstallmentContractItemId] Uniqueidentifier NOT NULL,
  [InstallmentContractId] Uniqueidentifier NOT NULL,
  [ProductId] Uniqueidentifier NOT NULL,
  [PerformanceSetId] Uniqueidentifier NULL,
  [OptionSetId] Uniqueidentifier NULL,
  [Quantity] Smallint NOT NULL,
  [UnitAmount] Money NOT NULL,
  [UnitTax] Money NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentContractItem]
ADD CONSTRAINT PK_InstallmentContractItem PRIMARY KEY ([InstallmentContractItemId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContractItem_InstallmentContractId] ON [tbInstallmentContractItem] ([InstallmentContractId]) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContractItem_ProductId] ON [tbInstallmentContractItem] ([ProductId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContractItem_PerformanceSetId] ON [tbInstallmentContractItem] ([PerformanceSetId] ) 
where PerformanceSetId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContractItem_OptionSetId] ON [tbInstallmentContractItem] ([OptionSetId] ) 
where OptionSetId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentContractItem] add constraint FK_InstallmentContractItem_InstallmentContract foreign key([InstallmentContractId]) references [tbInstallmentContract] ([InstallmentContractId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentContractItem] add constraint FK_InstallmentContractItem_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentContractItem] add constraint FK_InstallmentContractId_OptionSet foreign key([OptionSetId]) references [tbOptionSet] ([OptionSetId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentContractItem] add constraint FK_InstallmentContractItem_PerformanceSet foreign key([PerformanceSetId]) references [tbPerformanceSet] ([PerformanceSetId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.181</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tbInstallmentPlan.ContractPreviewDocTemplateId</REASON><TABLENAMES>tbInstallmentPlan</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbInstallmentPlan
add ContractPreviewDocTemplateId uniqueidentifier null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentPlan_ContractPreviewDocTemplateId] ON [tbInstallmentPlan] ([ContractPreviewDocTemplateId] ) 
where ContractPreviewDocTemplateId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentPlan] add constraint FK_InstallmentPlan_ContractPreviewDocTemplate foreign key([ContractPreviewDocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.180</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>inserted uniq index for CatalogType 1 on field CatalogCode and created default value</REASON><TABLENAMES>tbCatalog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>begin

  declare @catalogId uniqueIdentifier,@counter int;

  set @counter=0

  declare catalogIDs cursor for select CatalogId from tbCatalog where CatalogType = 1
  
  open catalogIDs 
  fetch next from catalogIDs 
  into @catalogId
  
  WHILE @@FETCH_STATUS = 0
  begin
    update
      tbCatalog
    set 
      CatalogCode = 'CAT-' + cast(@counter as varchar)
    where 
      CatalogId=@catalogId

    set @counter = @counter + 1

    fetch next from catalogIDs 
    into @catalogId
  end
  
  close catalogIDs
  deallocate catalogIDs

end
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>CREATE UNIQUE NONCLUSTERED INDEX UQ_Catalog_CatalogCode ON TbCatalog(CatalogCode) WHERE CatalogType=1
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.179</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTicketUsage.Imported</REASON><TABLENAMES>tbTicketUsage</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add Imported bit null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.178</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTransaction.CommitDateTime</REASON><TABLENAMES>tbTransaction</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTransaction
add CommitDateTime datetime null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.177</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbTicketUsage.MediaId -&gt; nullable</REASON><TABLENAMES>tbTicketUsage</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
alter column MediaId uniqueidentifier null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.176</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Alter index IX_MetaData_MetaFieldId</REASON><TABLENAMES>tbMetaData</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index [IX_MetaData_MetaFieldId] on tbMetaData
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_MetaData_MetaFieldId] ON [tbMetaData] ([MetaFieldId] ,[ShortValue] ,[EntityType] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.175</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbWorkstation.DeviceCode</REASON><TABLENAMES>tbWorkstation</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbWorkstation
add DeviceCode varchar(50) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Workstation_DeviceCode] ON [tbWorkstation] ([DeviceCode] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.174</SQLVERSION><RMTRACKLINK>SIT-4752</RMTRACKLINK><REASON>Patch to revert "Allow duplicate bag number" into "Unique bag number" flag</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRight
set RightValue =
  case RightValue
    when 'true' then 'false'
  else 'true'
  end
where RightType=444
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.173</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.IconAlias</REASON><TABLENAMES>tbProduct</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add IconAlias varchar(50) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.172</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbConsServer</REASON><TABLENAMES>tbConsServer</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbConsServer
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbConsServer]
(
  [ConsolidateType] Smallint NOT NULL,
  [FiscalDate] date NOT NULL,
  [DateTime] Smalldatetime NOT NULL,
  [ServerId] Smallint NOT NULL,
  [ServerParamKey] Smallint NOT NULL,
  [ServerParamSubKey] varchar(32) NOT NULL,
  [ValueType] Smallint NOT NULL,
  [MinValue] Bigint NOT NULL,
  [AvgValue] Bigint NOT NULL,
  [MaxValue] Bigint NOT NULL,
  [CntValue] Bigint NOT NULL,
  [TotValue] Bigint NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsServer]
ADD CONSTRAINT PK_ConsServer PRIMARY KEY ([ConsolidateType],[FiscalDate],[DateTime],[ServerId],[ServerParamKey],[ServerParamSubKey])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsServer_ServerId] ON [tbConsServer] ([ServerId] ,[ConsolidateType] ,[FiscalDate] ,[DateTime] ,[ServerParamKey] ,[ServerParamSubKey] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsServer] add constraint FK_ConsServer_Server foreign key([ServerId]) references [tbServer] ([ServerId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.171</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbConsAPI</REASON><TABLENAMES>tbConsAPI</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbConsAPI
drop column MaxDateTime
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbConsAPI
add TotMS bigint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.170</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbLedgerQueue</REASON><TABLENAMES>tbLedgerQueue</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerQueue
drop constraint PK_LedgerQueue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerQueue
add LedgerQueueId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbLedgerQueue
set LedgerQueueId=newid()
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLedgerQueue
alter column LedgerQueueId uniqueidentifier not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerQueue]
ADD CONSTRAINT PK_LedgerQueue PRIMARY KEY ([LedgerQueueId])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>2.169</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Update 
system membership point discount and
system Wallet membership point</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update 
  tbPromoRule 
set 
  Combinable=1 
where 
  ProductId=(select ProductId from tbProduct where ProductCode='#MEMPOINTDISC')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbMembershipPoint 
set 
  ExchangeRate=1,
  ValidForPayment=1
where 
  MembershipPointCode='#WALLET'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>sdangelo</ADDEDBY><SQLVERSION>2.168</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Reverse envelope "swap hours" behaviour</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbSeatEnvelope
set SwapHours = -SwapHours
where SwapHours is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.167</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbExtensionPackage.ConfigDoc</REASON><TABLENAMES>tbExtensionPackage</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbExtensionPackage
add ConfigDoc varchar(max) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.166</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Remove tbPaymentCard.CardLength
Add tbPaymentCard.CardExpDate</REASON><TABLENAMES>tbPaymentCard</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentCard
drop column CardLength
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentCard
add CardExpDate Varchar(4) NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>2.165</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>remove tbMembershiPointRule</REASON><TABLENAMES>tbMembershiPointRule</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbPPURule(PPURuleId, PriorityOrder, Active, StopRule, MembershipPointId, MembershipPointValue, LocationId, OpAreaId, AccessPointId)
select 
  MembershipPointRuleId, 1, 1, 0, MembershipPointId, RewardingPoints, LocationAccountId, OpAreaAccountId, AptWorkstationId 
from 
  tbMembershipPointRule MPR left join
  tbWorkstation W on w.WorkstationId=MPR.AptWorkstationId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbPPURuleLink(PPURuleId, EntityId, EntityType)
select MembershipPointRuleId, EventId, 5 from tbMembershipPointRule where not EventId is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbMembershipPointRule
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.164</SQLVERSION><RMTRACKLINK>SIT-4364</RMTRACKLINK><REASON>Recursive query to fill tbCatalog.RootCatalogId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>with Catalogs (X_RootCatalogId, X_CatalogId) as
(
-- Anchor member definition
    select
    c.CatalogId as RootCatalogId, c.CatalogId
    from
    tbCatalog as c
    where
    ParentCatalogId is null
    union ALL
-- Recursive member definition
    select 
    d.X_RootCatalogId, e.CatalogId
    from
    tbCatalog as e INNER JOIN 
    Catalogs as d ON e.ParentCatalogId = d.X_CatalogId
)
-- Statement that executes the CTE
update tbCatalog
set RootCatalogId=X_RootCatalogId
from Catalogs  
where CatalogId=X_CatalogId

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.163</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor IX_ConsQueue_ServerId</REASON><TABLENAMES>tbConsQueue</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_ConsQueue_ServerId on tbConsQueue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsQueue_ServerId] ON [tbConsQueue] ([ServerId] ,[ConsQueueStatus] ,[ConsQueueType] ) 
where ServerId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.162</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbCaptcha</REASON><TABLENAMES>tbCaptcha</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbCaptcha]
(
  [CaptchaId] Uniqueidentifier NOT NULL,
  [CaptchaCode] Varchar(15) NOT NULL,
  [CreateDateTime] Datetime NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCaptcha]
ADD CONSTRAINT PK_Captcha PRIMARY KEY ([CaptchaId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Captcha_CreateDateTime] ON [tbCaptcha] ([CreateDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.161</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change DateTime datatype in Time</REASON><TABLENAMES>tbStatTime</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbStatTime
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbStatTime]
(
  [ReferenceTime] time NOT NULL,
  [ClockTime] time NULL,
  [ClockTimeSuffixName] Nvarchar(8) NULL,
  [ClockTimeSuffixAbbreviationName] Nvarchar(2) NULL,
  [CalendarDayMinuteCount] float NULL,
  [FiscalClockOffsetNumber] Smallint NULL,
  [Reference5MinuteSegmentStartTime] time NULL,
  [Reference5MinuteSegmentEndTime] time NULL,
  [Reference15MinuteSegmentStartTime] time NULL,
  [Reference15MinuteSegmentEndTime] time NULL,
  [Reference20MinuteSegmentStartTime] time NULL,
  [Reference20MinuteSegmentEndTime] time NULL,
  [Reference30MinuteSegmentStartTime] time NULL,
  [Reference30MinuteSegmentEndTime] time NULL,
  [Reference60MinuteSegmentStartTime] time NULL,
  [Reference60MinuteSegmentEndTime] time NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbStatTime]
ADD CONSTRAINT PK_StatTime PRIMARY KEY ([ReferenceTime])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_StateTime_ReferenceTime] ON [tbStatTime] ([ReferenceTime] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.160</SQLVERSION><RMTRACKLINK>SIT-4364</RMTRACKLINK><REASON>New tbCatalog.RootCatalogId</REASON><TABLENAMES>tbCatalog</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCatalog
add RootCatalogId uniqueidentifier null 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Catalog_RootCatalogId] ON [tbCatalog] ([RootCatalogId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbCatalog] add constraint FK_Catalog_RootCatalog foreign key([RootCatalogId]) references [tbCatalog] ([CatalogId]) on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.159</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tables tbPPURule and tbPPURuleLink</REASON><TABLENAMES>tbPPURule
tbPPURuleLink</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbPPURule]
(
  [PPURuleId] Uniqueidentifier NOT NULL,
  [PriorityOrder] Integer NOT NULL,
  [Active] Bit NOT NULL,
  [StopRule] Bit NOT NULL,
  [MembershipPointId] Uniqueidentifier NOT NULL,
  [MembershipPointValue] Money NOT NULL,
  [CalendarId] Uniqueidentifier NULL,
  [ValidDateFrom] date NULL,
  [ValidDateTo] date NULL,
  [ValidTimeFrom] Smalldatetime NULL,
  [ValidTimeTo] Datetime NULL,
  [LocationId] Uniqueidentifier NULL,
  [OpAreaId] Uniqueidentifier NULL,
  [AccessPointId] Uniqueidentifier NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPPURule]
ADD CONSTRAINT PK_PPURule PRIMARY KEY ([PPURuleId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PPURule_PriorityOrder] ON [tbPPURule] ([PriorityOrder] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PPURule_MembershipPointId] ON [tbPPURule] ([MembershipPointId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PPURule_CalendarId] ON [tbPPURule] ([CalendarId] ) 
where CalendarId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PPURule_LocationId] ON [tbPPURule] ([LocationId] ,[OpAreaId] ,[AccessPointId] ) 
where LocationId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PPURule_AccessPointId] ON [tbPPURule] ([AccessPointId] ) 
where AccessPointId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPPURule] add constraint FK_PPURule_Calendar foreign key([CalendarId]) references [tbCalendar] ([CalendarId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPPURule] add constraint FK_PPURule_LocationAccount foreign key([LocationId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPPURule] add constraint FK_PPURule_OpAreaAccount foreign key([OpAreaId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPPURule] add constraint FK_PPURule_MembershipPoint foreign key([MembershipPointId]) references [tbMembershipPoint] ([MembershipPointId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPPURule] add constraint FK_PPURule_Workstation foreign key([AccessPointId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPPURuleLink]
(
  [PPURuleId] Uniqueidentifier NOT NULL,
  [EntityId] Uniqueidentifier NOT NULL,
  [EntityType] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPPURuleLink]
ADD CONSTRAINT PK_PPURuleLink PRIMARY KEY ([PPURuleId],[EntityId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PPURuleLink_EntityId] ON [tbPPURuleLink] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPPURuleLink] add constraint FK_PPURuleLink_PPURule foreign key([PPURuleId]) references [tbPPURule] ([PPURuleId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>2.158</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add columns to tbTransaction:
- SerialLocalDateTime

Add columns to tbTicketUsage:
- UsageLocalDateTime
- InvalidOfflineValidateResult</REASON><TABLENAMES>tbTransaction
tbTicketUsage</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTransaction
add SerialLocalDateTime Datetime NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add
  UsageLocalDateTime Datetime NULL,
  InvalidOfflineValidateResult Smallint NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.157</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Revert "Disable 'enter' on payment screen" to "Enable 'enter' on payment screen" add assigning default TRUE</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRight
set RightValue = (case RightValue 
          when 'true' then 'false'
        when 'false' then 'true'
      end)
where RightType=420
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.156</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Makes tbAsyncFinalize.ServerId NULLABLE</REASON><TABLENAMES>tbAsyncFinalize</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_AsyncFinalize_ServerAndStatus on tbAsyncFinalize
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_AsyncFinalize_StatusAndCreateDT on tbAsyncFinalize
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAsyncFinalize drop constraint FK_AsyncFinalize_Server
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAsyncFinalize
alter column ServerId smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AsyncFinalize_ServerAndStatus] ON [tbAsyncFinalize] ([ServerId] ,[AsyncFinalizeStatus] ) 
where ServerId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AsyncFinalize_StatusAndCreateDT] ON [tbAsyncFinalize] ([AsyncFinalizeStatus] ,[CreateDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAsyncFinalize] add constraint FK_AsyncFinalize_Server foreign key([ServerId]) references [tbServer] ([ServerId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>sdangelo</ADDEDBY><SQLVERSION>2.155</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbStatTime, tbStatDate</REASON><TABLENAMES>tbStatTime
tbStatDate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbStatDate
drop table tbStatTime
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbStatDate]
(
  [CalendarDate] Date NOT NULL,
  [CalendarDayNumber] Smallint NULL,
  [CalendarWeekNumber] Smallint NULL,
  [CalendarMonthNumber] Smallint NULL,
  [CalendarMonthName] Nvarchar(20) NULL,
  [CalendarQuarterNumber] Smallint NULL,
  [CalendarSeasonName] Nvarchar(40) NULL,
  [CalendarYearNumber] Smallint NULL,
  [CalendarWeekDayNumber] Smallint NULL,
  [CalendarWeekDayName] Nvarchar(20) NULL,
  [CalendarWeekDayIndicator] Bit NULL,
  [CalendarWeekEndIndicator] Bit NULL,
  [CalendarWeekEndDate] Date NULL,
  [CalendarMonthDayNumber] Smallint NULL,
  [CalendarMonthWeekNumber] Smallint NULL,
  [CalendarMonthEndIndicator] Bit NULL,
  [FiscalDayNumber] Smallint NULL,
  [FiscalWeekNumber] Smallint NULL,
  [FiscalWeekStartDate] Date NULL,
  [FiscalWeekEndDate] Date NULL,
  [FiscalWeekDayNumber] Smallint NULL,
  [FiscalWeekDayIndicator] Bit NULL,
  [FiscalWeekEndIndicator] Bit NULL,
  [FiscalMonthNumber] Smallint NULL,
  [FiscalMonthName] Nvarchar(20) NULL,
  [FiscalMonthStartDate] Date NULL,
  [FiscalMonthEndDate] Date NULL,
  [FiscalQuarterNumber] Smallint NULL,
  [FiscalQuarterStartDate] Date NULL,
  [FiscalHalfNumber] Smallint NULL,
  [FiscalYearNumber] Smallint NULL,
  [FiscalYearStartDate] Date NULL,
  [FiscalMonthDayNumber] Smallint NULL,
  [FiscalMonthWeekNumber] Smallint NULL,
  [FiscalMonthEndIndicator] Bit NULL,
  [PriorCalendarYearNumber] Smallint NULL,
  [PriorFiscalMonthEndDate] Date NULL,
  [PriorFiscalYearFiscalYearEndDate] Date NULL,
  [PriorFiscalYearFiscalQuarterEndDate] Date NULL,
  [PriorFiscalYearFiscalMonthEndDate] Date NULL,
  [SpecialEventName] Nvarchar(40) NULL,
  [BusinessSeasonName] Nvarchar(40) NULL,
  [HolidayName] Nvarchar(40) NULL,
  [HolidayObserveName] Nvarchar(40) NULL,
  [HolidaySeasonName] Nvarchar(40) NULL,
  [PriorFiscalYearFiscalYearNumber] Smallint NULL,
  [CurrentDayIndicator] Bit NULL,
  [PreviousDayIndicator] Bit NULL,
  [PriorFiscalWeekIndicator] Bit NULL,
  [PriorFiscalMonthIndicator] Bit NULL,
  [PriorFiscalQuarterIndicator] Bit NULL,
  [PriorFiscalYearIndicator] Bit NULL,
  [Previous14DaysIndicator] Bit NULL,
  [Previous5DaysIndicator] Bit NULL,
  [Previous7DaysIndicator] Bit NULL,
  [Previous90DaysIndicator] Bit NULL,
  [CurrentFiscalMonthLastWeekEndDateIndicator] Bit NULL,
  [CurrentFiscalYearWeekEndDateIndicator] Bit NULL,
  [CurrentFiscalYearToWeekIndicator] Bit NULL,
  [CurrentFiscalYearToDateIndicator] Bit NULL,
  [CurrentFiscalQuarterToWeekIndicator] Bit NULL,
  [CurrentFiscalYearMonthToWeekIndicator] Bit NULL,
  [PriorFiscalYearPriorWeekIndicator] Bit NULL,
  [PriorFiscalMonthToWeekIndicator] Bit NULL,
  [PriorFiscalQuarterToWeekIndicator] Bit NULL,
  [PriorFiscalYearToWeekIndicator] Bit NULL,
  [CurrentFiscalYearPrevious12MonthEndDateIndicator] Bit NULL,
  [PriorFiscalYearPrevious12MonthEndDateIndicator] Bit NULL,
  [PriorFiscalWeekEndDateIndicator] Bit NULL,
  [PriorYearLastFiscalWeekEndDateIndicator] Bit NULL,
  [Previous2DaysIndicator] Bit NULL,
  [PriorFiscalMonthEndDateIndicator] Bit NULL,
  [PriorFiscalYearEndDateIndicator] Bit NULL,
  [PriorFiscalMonthWeekEndDateIndicator] Bit NULL,
  [CurrentFiscalYearFiscalWeekStartDate] Date NULL,
  [CurrentFiscalYearFiscalMonthStartDate] Date NULL,
  [CurrentFiscalYearFiscalQuarterStartDate] Date NULL,
  [CurrentFiscalYearFiscalYearStartDate] Date NULL,
  [PriorFiscalYearFiscalWeekEndDate] Date NULL,
  [PriorFiscalYearFiscalWeekStartDate] Date NULL,
  [PriorFiscalYearFiscalMonthStartDate] Date NULL,
  [PriorFiscalYearFiscalQuarterStartDate] Date NULL,
  [PriorFiscalYearFiscalYearStartDate] Date NULL,
  [PriorYearCalendarDate] Date NULL,
  [CurrentFiscalYearEndDateIndicator] Bit NULL,
  [PreviousCalendarMonthDaysIndicator] Bit NULL,
  [FiscalQuarterEndDateIndicator] Bit NULL,
  [CurrentFiscalYearPrevious8FiscalWeekIndicator] Bit NULL,
  [PriorFiscalYearPrevious8FiscalWeekIndicator] Bit NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbStatDate]
ADD CONSTRAINT PK_StatDate PRIMARY KEY ([CalendarDate])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_StatDate_CalendarDate] ON [tbStatDate] ([CalendarDate] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbStatTime]
(
  [ReferenceTime] Datetime NOT NULL,
  [ClockTime] Datetime NULL,
  [ClockTimeSuffixName] Nvarchar(8) NULL,
  [ClockTimeSuffixAbbreviationName] Nvarchar(2) NULL,
  [CalendarDayMinuteCount] float NULL,
  [FiscalClockOffsetNumber] Smallint NULL,
  [Reference5MinuteSegmentStartTime] Datetime NULL,
  [Reference5MinuteSegmentEndTime] Datetime NULL,
  [Reference15MinuteSegmentStartTime] Datetime NULL,
  [Reference15MinuteSegmentEndTime] Datetime NULL,
  [Reference20MinuteSegmentStartTime] Datetime NULL,
  [Reference20MinuteSegmentEndTime] Datetime NULL,
  [Reference30MinuteSegmentStartTime] Datetime NULL,
  [Reference30MinuteSegmentEndTime] Datetime NULL,
  [Reference60MinuteSegmentStartTime] Datetime NULL,
  [Reference60MinuteSegmentEndTime] Datetime NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbStatTime]
ADD CONSTRAINT PK_StatTime PRIMARY KEY ([ReferenceTime])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_StateTime_ReferenceTime] ON [tbStatTime] ([ReferenceTime] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.154</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add columns to tbOutboundQueue:
- EntityLastUpdate
- DocRef</REASON><TABLENAMES>tbOutboundQueue</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbOutboundQueue
add
  EntityLastUpdate datetime null,  
  DocRef varchar(max) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.153</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field to tbDataSource</REASON><TABLENAMES>tbDataSource
tbOutboundQueueHistory</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDataSource
add
  PoolMin int null,  
  PoolMax int null,  
  WaitTimeoutMS int null,  
  IdleTimeoutMS int null 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.152</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field:
- tbOutboundMessage.DataSourceId
- tbOutboundQueueHistory.DataSourceId</REASON><TABLENAMES>tbOutboundMessage
tbOutboundQueueHistory</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbOutboundMessage
add DataSourceId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundMessage_DataSourceId] ON [tbOutboundMessage] ([DataSourceId] ) 
where DataSourceId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundMessage] add constraint FK_OutboundMessage_DataSource foreign key([DataSourceId]) references [tbDataSource] ([DataSourceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbOutboundQueueHistory
add DataSourceId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueueHistory_DataSourceId] ON [tbOutboundQueueHistory] ([DataSourceId] ,[CreateDateTime] ) 
where DataSourceId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundQueueHistory] add constraint FK_OutboundQueueHistory_DataSource foreign key([DataSourceId]) references [tbDataSource] ([DataSourceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>sdangelo</ADDEDBY><SQLVERSION>2.151</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>refactor tbStatDate</REASON><TABLENAMES>tbStatDate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbstatdate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbStatDate]
(
  [CalendarDate] Date NOT NULL,
  [CalendarDayNumber] Smallint NOT NULL,
  [CalendarWeekNumber] Smallint NOT NULL,
  [CalendarMonthNumber] Smallint NOT NULL,
  [CalendarMonthName] Nvarchar(20) NOT NULL,
  [CalendarQuarterNumber] Smallint NOT NULL,
  [CalendarSeasonName] Nvarchar(40) NOT NULL,
  [CalendarYearNumber] Smallint NOT NULL,
  [CalendarWeekDayNumber] Smallint NOT NULL,
  [CalendarWeekDayName] Nvarchar(20) NOT NULL,
  [CalendarWeekDayIndicator] Bit NOT NULL,
  [CalendarWeekEndIndicator] Bit NOT NULL,
  [CalendarWeekEndDate] Date NOT NULL,
  [CalendarMonthDayNumber] Smallint NOT NULL,
  [CalendarMonthWeekNumber] Smallint NOT NULL,
  [CalendarMonthEndIndicator] Bit NOT NULL,
  [FiscalDayNumber] Smallint NOT NULL,
  [FiscalWeekNumber] Smallint NOT NULL,
  [FiscalWeekStartDate] Date NOT NULL,
  [FiscalWeekEndDate] Date NOT NULL,
  [FiscalWeekDayNumber] Smallint NOT NULL,
  [FiscalWeekDayIndicator] Bit NOT NULL,
  [FiscalWeekEndIndicator] Bit NOT NULL,
  [FiscalMonthNumber] Smallint NOT NULL,
  [FiscalMonthName] Nvarchar(20) NOT NULL,
  [FiscalMonthStartDate] Date NOT NULL,
  [FiscalMonthEndDate] Date NOT NULL,
  [FiscalQuarterNumber] Smallint NOT NULL,
  [FiscalQuarterStartDate] Date NOT NULL,
  [FiscalHalfNumber] Smallint NOT NULL,
  [FiscalYearNumber] Smallint NOT NULL,
  [FiscalYearStartDate] Date NOT NULL,
  [FiscalMonthDayNumber] Smallint NOT NULL,
  [FiscalMonthWeekNumber] Smallint NOT NULL,
  [FiscalMonthEndIndicator] Bit NOT NULL,
  [PriorCalendarYearNumber] Smallint NOT NULL,
  [PriorFiscalMonthEndDate] Date NOT NULL,
  [PriorFiscalYearFiscalYearEndDate] Date NOT NULL,
  [PriorFiscalYearFiscalQuarterEndDate] Date NOT NULL,
  [PriorFiscalYearFiscalMonthEndDate] Date NOT NULL,
  [SpecialEventName] Nvarchar(40) NOT NULL,
  [BusinessSeasonName] Nvarchar(40) NOT NULL,
  [HolidayName] Nvarchar(40) NOT NULL,
  [HolidayObserveName] Nvarchar(40) NOT NULL,
  [HolidaySeasonName] Nvarchar(40) NOT NULL,
  [PriorFiscalYearFiscalYearNumber] Smallint NOT NULL,
  [CurrentDayIndicator] Bit NOT NULL,
  [PreviousDayIndicator] Bit NOT NULL,
  [PriorFiscalWeekIndicator] Bit NOT NULL,
  [PriorFiscalMonthIndicator] Bit NOT NULL,
  [PriorFiscalQuarterIndicator] Bit NOT NULL,
  [PriorFiscalYearIndicator] Bit NOT NULL,
  [Previous14DaysIndicator] Bit NOT NULL,
  [Previous5DaysIndicator] Bit NOT NULL,
  [Previous7DaysIndicator] Bit NOT NULL,
  [Previous90DaysIndicator] Bit NOT NULL,
  [CurrentFiscalMonthLastWeekEndDateIndicator] Bit NOT NULL,
  [CurrentFiscalYearWeekEndDateIndicator] Bit NOT NULL,
  [CurrentFiscalYearToWeekIndicator] Bit NOT NULL,
  [CurrentFiscalYearToDateIndicator] Bit NOT NULL,
  [CurrentFiscalQuarterToWeekIndicator] Bit NOT NULL,
  [CurrentFiscalYearMonthToWeekIndicator] Bit NOT NULL,
  [PriorFiscalYearPriorWeekIndicator] Bit NOT NULL,
  [PriorFiscalMonthToWeekIndicator] Bit NOT NULL,
  [PriorFiscalQuarterToWeekIndicator] Bit NOT NULL,
  [PriorFiscalYearToWeekIndicator] Bit NOT NULL,
  [CurrentFiscalYearPrevious12MonthEndDateIndicator] Bit NOT NULL,
  [PriorFiscalYearPrevious12MonthEndDateIndicator] Bit NOT NULL,
  [PriorFiscalWeekEndDateIndicator] Bit NOT NULL,
  [PriorYearLastFiscalWeekEndDateIndicator] Bit NOT NULL,
  [Previous2DaysIndicator] Bit NOT NULL,
  [PriorFiscalMonthEndDateIndicator] Bit NOT NULL,
  [PriorFiscalYearEndDateIndicator] Bit NOT NULL,
  [PriorFiscalMonthWeekEndDateIndicator] Bit NOT NULL,
  [CurrentFiscalYearFiscalWeekStartDate] Date NOT NULL,
  [CurrentFiscalYearFiscalMonthStartDate] Date NOT NULL,
  [CurrentFiscalYearFiscalQuarterStartDate] Date NOT NULL,
  [CurrentFiscalYearFiscalYearStartDate] Date NOT NULL,
  [PriorFiscalYearFiscalWeekEndDate] Date NOT NULL,
  [PriorFiscalYearFiscalWeekStartDate] Date NOT NULL,
  [PriorFiscalYearFiscalMonthStartDate] Date NOT NULL,
  [PriorFiscalYearFiscalQuarterStartDate] Date NOT NULL,
  [PriorFiscalYearFiscalYearStartDate] Date NOT NULL,
  [PriorYearCalendarDate] Date NOT NULL,
  [CurrentFiscalYearEndDateIndicator] Bit NOT NULL,
  [PreviousCalendarMonthDaysIndicator] Bit NOT NULL,
  [FiscalQuarterEndDateIndicator] Bit NOT NULL,
  [CurrentFiscalYearPrevious8FiscalWeekIndicator] Bit NOT NULL,
  [PriorFiscalYearPrevious8FiscalWeekIndicator] Bit NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbStatDate]
ADD CONSTRAINT PK_StatDate PRIMARY KEY ([CalendarDate])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_StatDate_CalendarDate] ON [tbStatDate] ([CalendarDate] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.150</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New tbBoxDepositBreakdown table</REASON><TABLENAMES>tbBoxDepositBreakdown</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbBoxDepositBreakdown]
(
  [BoxDepositId] Uniqueidentifier NOT NULL,
  [PluginId] Uniqueidentifier NOT NULL,
  [CurrencyISO] Varchar(3) NOT NULL,
  [Amount] Money NOT NULL,
  [FundCategory] Smallint NOT NULL,
  [Quantity] Integer NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbBoxDepositBreakdown]
ADD CONSTRAINT PK_BoxDepositBreakdown PRIMARY KEY ([BoxDepositId],[PluginId],[CurrencyISO],[Amount],[FundCategory])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.149</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>refactor tbStatDate</REASON><TABLENAMES>tbStatDate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbstatdate
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbStatDate]
(
  [CalendarDate] Date NOT NULL,
  [CalendarDayNumber] Smallint NOT NULL,
  [CalendarWeekNumber] Smallint NOT NULL,
  [CalendarMonthNumber] Smallint NOT NULL,
  [CalendarMonthName] Nvarchar(20) NOT NULL,
  [CalendarQuarterNumber] Smallint NOT NULL,
  [CalendarSeasonName] Nvarchar(40) NOT NULL,
  [CalendarYearNumber] Smallint NOT NULL,
  [CalendarWeekDayNumber] Smallint NOT NULL,
  [CalendarWeekDayName] Nvarchar(20) NOT NULL,
  [CalendarWeekDayIndicator] Bit NOT NULL,
  [CalendarWeekEndIndicator] Bit NOT NULL,
  [CalendarWeekEndDate] Date NOT NULL,
  [CalendarMonthDayNumber] Smallint NOT NULL,
  [CalendarMonthWeekNumber] Smallint NOT NULL,
  [CalendarMonthEndIndicator] Bit NOT NULL,
  [FiscalDayNumber] Smallint NOT NULL,
  [FiscalWeekNumber] Smallint NOT NULL,
  [FiscalWeekStartDate] Date NOT NULL,
  [FiscalWeekEndDate] Date NOT NULL,
  [FiscalWeekDayNumber] Smallint NOT NULL,
  [FiscalWeekDayIndicator] Bit NOT NULL,
  [FiscalWeekEndIndicator] Bit NOT NULL,
  [FiscalMonthNumber] Smallint NOT NULL,
  [FiscalMonthName] Nvarchar(20) NOT NULL,
  [FiscalMonthStartDate] Date NOT NULL,
  [FiscalMonthEndDate] Date NOT NULL,
  [FiscalQuarterNumber] Smallint NOT NULL,
  [FiscalQuarterStartDate] Date NOT NULL,
  [FiscalHalfNumber] Smallint NOT NULL,
  [FiscalYearNumber] Smallint NOT NULL,
  [FiscalYearStartDate] Date NOT NULL,
  [FiscalMonthDayNumber] Smallint NOT NULL,
  [FiscalMonthWeekNumber] Smallint NOT NULL,
  [FiscalMonthEndIndicator] Bit NOT NULL,
  [PriorCalendarYearNumber] Smallint NOT NULL,
  [PriorFiscalMonthEndDate] Date NOT NULL,
  [PriorFiscalYearFiscalYearEndDate] Date NOT NULL,
  [PriorFiscalYearFiscalQuarterEndDate] Date NOT NULL,
  [PriorFiscalYearFiscalMonthEndDate] Date NOT NULL,
  [PriorFiscalYearFiscalYearNumber] Smallint NOT NULL,
  [PriorYearCalendarDate] Date NOT NULL,
  [SpecialEventName] Nvarchar(40) NOT NULL,
  [BusinessSeasonName] Nvarchar(40) NOT NULL,
  [HolidayName] Nvarchar(40) NOT NULL,
  [HolidayObserveName] Nvarchar(40) NOT NULL,
  [HolidaySeasonName] Nvarchar(40) NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbStatDate]
ADD CONSTRAINT PK_StatDate PRIMARY KEY ([CalendarDate])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_StatDate_CalendarDate] ON [tbStatDate] ([CalendarDate] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.148</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbTaxProfile2Tax.TaxablePerc</REASON><TABLENAMES>tbTaxProfile2Tax</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTaxProfile2Tax
add TaxablePerc money null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>sdangelo</ADDEDBY><SQLVERSION>2.147</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tables tbStatDate and tbStatTime</REASON><TABLENAMES>tbStatDate
tbStatTime</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbStatDate]
(
  [CalendarDate] Uniqueidentifier NOT NULL,
  [CalendarDayNumber] Smallint NOT NULL,
  [CalendarWeekNumber] Smallint NOT NULL,
  [CalendarMonthNumber] Smallint NOT NULL,
  [CalendarMonthName] Nvarchar(20) NOT NULL,
  [CalendarQuarterNumber] Smallint NOT NULL,
  [CalendarSeasonName] Nvarchar(40) NOT NULL,
  [CalendarYearNumber] Smallint NOT NULL,
  [CalendarWeekDayNumber] Smallint NOT NULL,
  [CalendarWeekDayName] Nvarchar(20) NOT NULL,
  [CalendarWeekDayIndicator] Bit NOT NULL,
  [CalendarWeekEndIndicator] Bit NOT NULL,
  [CalendarWeekEndDate] Date NOT NULL,
  [CalendarMonthDayNumber] Smallint NOT NULL,
  [CalendarMonthWeekNumber] Smallint NOT NULL,
  [CalendarMonthEndIndicator] Bit NOT NULL,
  [FiscalDayNumber] Smallint NOT NULL,
  [FiscalWeekNumber] Smallint NOT NULL,
  [FiscalWeekStartDate] Date NOT NULL,
  [FiscalWeekEndDate] Date NOT NULL,
  [FiscalWeekDayNumber] Smallint NOT NULL,
  [FiscalWeekDayIndicator] Bit NOT NULL,
  [FiscalWeekEndIndicator] Bit NOT NULL,
  [FiscalMonthNumber] Smallint NOT NULL,
  [FiscalMonthName] Nvarchar(20) NOT NULL,
  [FiscalMonthStartDate] Date NOT NULL,
  [FiscalMonthEndDate] Date NOT NULL,
  [FiscalQuarterNumber] Smallint NOT NULL,
  [FiscalQuarterStartDate] Date NOT NULL,
  [FiscalHalfNumber] Smallint NOT NULL,
  [FiscalYearNumber] Smallint NOT NULL,
  [FiscalYearStartDate] Date NOT NULL,
  [FiscalMonthDayNumber] Smallint NOT NULL,
  [FiscalMonthWeekNumber] Smallint NOT NULL,
  [FiscalMonthEndIndicator] Bit NOT NULL,
  [PriorCalendarYearNumber] Smallint NOT NULL,
  [PriorFiscalMonthEndDate] Date NOT NULL,
  [PriorFiscalYearFiscalYearEndDate] Date NOT NULL,
  [PriorFiscalYearFiscalQuarterEndDate] Date NOT NULL,
  [PriorFiscalYearFiscalMonthEndDate] Date NOT NULL,
  [PriorFiscalYearFiscalYearNumber] Smallint NOT NULL,
  [PriorYearCalendarDate] Date NOT NULL,
  [SpecialEventName] Nvarchar(40) NOT NULL,
  [BusinessSeasonName] Nvarchar(40) NOT NULL,
  [HolidayName] Nvarchar(40) NOT NULL,
  [HolidayObserveName] Nvarchar(40) NOT NULL,
  [HolidaySeasonName] Nvarchar(40) NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbStatDate]
ADD CONSTRAINT PK_StatDate PRIMARY KEY ([CalendarDate])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_StatDate_CalendarDate] ON [tbStatDate] ([CalendarDate] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbStatTime]
(
  [ReferenceTime] Datetime NOT NULL,
  [ClockTime] Datetime NOT NULL,
  [ClockTimeSuffixName] Nvarchar(8) NOT NULL,
  [ClockTimeSuffixAbbreviationName] Nvarchar(2) NOT NULL,
  [CalendarDayMinuteCount] Smallint NOT NULL,
  [FiscalClockOffsetNumber] Smallint NOT NULL,
  [Reference5MinuteSegmentStartTime] Datetime NOT NULL,
  [Reference5MinuteSegmentEndTime] Datetime NOT NULL,
  [Reference15MinuteSegmentStartTime] Datetime NOT NULL,
  [Reference15MinuteSegmentEndTime] Datetime NOT NULL,
  [Reference20MinuteSegmentStartTime] Datetime NOT NULL,
  [Reference20MinuteSegmentEndTime] Datetime NOT NULL,
  [Reference30MinuteSegmentStartTime] Datetime NOT NULL,
  [Reference30MinuteSegmentEndTime] Datetime NOT NULL,
  [Reference60MinuteSegmentStartTime] Datetime NOT NULL,
  [Reference60MinuteSegmentEndTime] Datetime NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbStatTime]
ADD CONSTRAINT PK_StatTime PRIMARY KEY ([ReferenceTime])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_StateTime_ReferenceTime] ON [tbStatTime] ([ReferenceTime] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.146</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields OutboundQueueAction to tbOutboundQueueHistory</REASON><TABLENAMES>tbOutboundQueueHistory</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbOutboundQueueHistory
add OutboundQueueAction Smallint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>UPDATE tbOutboundQueueHistory
SET OutboundQueueAction=10
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbOutboundQueueHistory
alter column OutboundQueueAction Smallint NOT NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>sdangelo</ADDEDBY><SQLVERSION>2.145</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>remove field "PriorityOrder" from tbOutboundQueueHistory
add field "OutboundQueueHistoryId" from tbOutboundQueueHistory</REASON><TABLENAMES>tbOutboundQueueHistory</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbOutboundQueueHistory
drop constraint PK_OutboundQueueHistory
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbOutboundQueueHistory
drop column PriorityOrder
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbOutboundQueueHistory
add OutboundQueueHistoryId Uniqueidentifier NOT NULL

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundQueueHistory]
ADD CONSTRAINT PK_OutboundQueueHistory PRIMARY KEY ([OutboundQueueHistoryId])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>sdangelo</ADDEDBY><SQLVERSION>2.144</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor(remove and create) table tbOutboundQueue
create table tbOutboundQueueHistory </REASON><TABLENAMES>tbOutboundQueue
tbOutboundQueueHistory </TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbOutboundQueue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbOutboundQueue]
(
  [OutboundQueueId] Uniqueidentifier NOT NULL,
  [OutboundMessageId] Uniqueidentifier NOT NULL,
  [OutboundQueueStatus] Smallint NOT NULL,
  [CreateDateTime] Datetime NOT NULL,
  [EntityId] Uniqueidentifier NOT NULL,
  [EntityType] Smallint NOT NULL,
  [FailedAttemptCount] Smallint NOT NULL,
  [DocData] Nvarchar(max) NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundQueue]
ADD CONSTRAINT PK_OutboundQueue PRIMARY KEY ([OutboundQueueId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_CreateDateTime] ON [tbOutboundQueue] ([CreateDateTime] )

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_OutboundMessageId] ON [tbOutboundQueue] ([OutboundMessageId] ,[CreateDateTime] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_Status] ON [tbOutboundQueue] ([OutboundQueueStatus] ,[CreateDateTime] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbOutboundQueueHistory]
(
  [OutboundQueueId] Uniqueidentifier NOT NULL,
  [PriorityOrder] Smallint NOT NULL,
  [OutboundQueueHistoryStatus] Smallint NOT NULL,
  [OutboundMessagePriority] Smallint NOT NULL,
  [CreateDateTime] Datetime NOT NULL,
  [ScheduleDateTime] Datetime NULL,
  [StartDateTime] Datetime NULL,
  [EndDateTime] Datetime NULL,
  [ServerId] Smallint NULL,
  [UserAccountId] Uniqueidentifier NULL,
  [RequestData] Nvarchar(max) NULL,
  [ResponseData] Nvarchar(max) NULL,
  [Notes] Nvarchar(max) NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundQueueHistory]
ADD CONSTRAINT PK_OutboundQueueHistory PRIMARY KEY ([OutboundQueueId],[PriorityOrder])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueueHistory_Waiting] ON [tbOutboundQueueHistory] ([OutboundQueueHistoryStatus] ,[ScheduleDateTime] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueueHistory_WaitingByPriority] ON [tbOutboundQueueHistory] ([OutboundQueueHistoryStatus] ,[OutboundMessagePriority] ,[ScheduleDateTime] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueueHistory_ServerId] ON [tbOutboundQueueHistory] ([ServerId] ,[OutboundQueueHistoryStatus] ,[CreateDateTime] ) 
where ServerId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueueHistory_UserAccountId] ON [tbOutboundQueueHistory] ([UserAccountId] ,[CreateDateTime] ) 
where UserAccountId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundQueueHistory] add constraint FK_OutboundQueueHistory_Server foreign key([ServerId]) references [tbServer] ([ServerId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundQueueHistory] add constraint FK_OutboundQueueHistory_UserAccount foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundQueueHistory] add constraint FK_OutboundQueueHistory_OutboundQueue foreign key([OutboundQueueId]) references [tbOutboundQueue] ([OutboundQueueId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundQueue] add constraint FK_OutboundQueue_OutboundMessage foreign key([OutboundMessageId]) references [tbOutboundMessage] ([OutboundMessageId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>2.143</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field GroupQuantity to tbTicketUsage</REASON><TABLENAMES>tbTicketUsage</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTicketUsage
add GroupQuantity Smallint NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.142</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields PosPluginId/WebPluginId to tbTax</REASON><TABLENAMES>tbTax</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTax
add PosPluginId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTax
add WebPluginId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Tax_PosPluginId] ON [tbTax] ([PosPluginId] ) 
where PosPluginId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Tax_WebPluginId] ON [tbTax] ([WebPluginId] ) 
where WebPluginId is not null


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTax] add constraint FK_Tax_PosPlugin foreign key([PosPluginId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTax] add constraint FK_Tax_WebPlugin foreign key([WebPluginId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.141</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Regenerate all stored procs</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.140</SQLVERSION><RMTRACKLINK>SIT-4239</RMTRACKLINK><REASON>rebuild tbRight stored procs</REASON><TABLENAMES>tbRight</TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.139</SQLVERSION><RMTRACKLINK>SIT-4231</RMTRACKLINK><REASON>Update of right "Automatic checkout"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRight
set RightValue=
  (case 
    when RightValue='true' then '3'
    else '1'
   end) 
where RightType=416
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.138</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Replace tbOutboundStat with tbQueueStat</REASON><TABLENAMES>tbQueueStat</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbQueueStat]
(
  [QueueStatType] Smallint NOT NULL,
  [TimeSlot] Datetime NOT NULL,
  [GroupCode] Varchar(100) NOT NULL,
  [ServerId] Smallint NOT NULL,
  [GroupName] Nvarchar(100) NOT NULL,
  [ProcMinMS] Integer NOT NULL,
  [ProcMaxMS] Integer NOT NULL,
  [ProcAvgMS] Integer NOT NULL,
  [ProcTotalMS] Bigint NOT NULL,
  [QueueMinMS] Integer NOT NULL,
  [QueueMaxMS] Integer NOT NULL,
  [QueueAvgMS] Integer NOT NULL,
  [QueueTotalMS] Bigint NOT NULL,
  [ItemCount] Integer NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbQueueStat]
ADD CONSTRAINT PK_QueueStat PRIMARY KEY ([QueueStatType],[TimeSlot],[GroupCode],[ServerId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundStat_ServerId] ON [tbQueueStat] ([ServerId] ,[QueueStatType] ,[TimeSlot] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbQueueStat] add constraint FK_QueueStat_Server foreign key([ServerId]) references [tbServer] ([ServerId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbOutboundStat
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.137</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbOutboundQueue</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_OutboundQueue_Waiting on tbOutboundQueue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_OutboundQueue_WaitingByMessage on tbOutboundQueue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_OutboundQueue_WaitingByPriority on tbOutboundQueue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbOutboundQueue
set ScheduleDateTime=CreateDateTime
where ScheduleDateTime is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbOutboundQueue
alter column ScheduleDateTime datetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_Waiting] ON [tbOutboundQueue] ([OutboundQueueStatus] ,[ScheduleDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_WaitingByPriority] ON [tbOutboundQueue] ([OutboundQueueStatus] ,[OutboundMessagePriority] ,[ScheduleDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.136</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbOutboundStat</REASON><TABLENAMES>tbOutboundStat</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbOutboundStat
drop column MaxConcurrentThreads
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbOutboundStat
drop column ProcItemCount
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbOutboundStat.QueueItemCount', 'ItemCount';  
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.135</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbOutboundQueue</REASON><TABLENAMES>tbOutboundQueue</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table [tbOutboundQueue]
add
  [UserAccountId] Uniqueidentifier NULL,
  [RootOutboundQueueId] Uniqueidentifier NULL,
  [ParentOutboundQueueId] Uniqueidentifier NULL,
  [OutboundQueueNotes] nvarchar(max) NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_UserAccount] ON [tbOutboundQueue] ([UserAccountId] ,[CreateDateTime] ) 
where UserAccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_Root] ON [tbOutboundQueue] ([RootOutboundQueueId] ,[CreateDateTime] ) 
where RootOutboundQueueId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_Parent] ON [tbOutboundQueue] ([ParentOutboundQueueId] ,[CreateDateTime] ) 
where ParentOutboundQueueId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundQueue] add constraint FK_OutboundQueue_UserAccount foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundQueue] add constraint FK_OutboundQueue_Parent foreign key([ParentOutboundQueueId]) references [tbOutboundQueue] ([OutboundQueueId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundQueue] add constraint FK_OutboundQueue_Root foreign key([RootOutboundQueueId]) references [tbOutboundQueue] ([OutboundQueueId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.134</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>rebuild tbApiLog stored procs</REASON><TABLENAMES>tbApiLog
tbOutboundStat</TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>sdangelo</ADDEDBY><SQLVERSION>2.133</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Dummy patch to trigger all insert/update stored procedure generation</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST/></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.132</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>deleted filed StatsColor in tbPluginPaymentMethod</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPluginPaymentMethod
drop column StatsColor
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.131</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>insert filed StatsColor in tbPluginPaymentMethod</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPluginPaymentMethod
add StatsColor Varchar(6) NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.130</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>-- create new field EventId in table ConsSale
-- create relative index and relation with table Event</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbConsSale
ADD EventId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsSale] add constraint FK_ConsSale_Event foreign key([EventId]) references [tbEvent] ([EventId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsSale_EventId] ON [tbConsSale] ([EventId] ,[ConsSaleType] ,[FiscalDate] ,[TimeSlot] )
where EventId is not null  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index [UQ_ConsSale] on tbConsSale 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ConsSale] ON [tbConsSale] ([ConsSaleType] ,[FiscalDate] ,[TimeSlot] ,[LocationId] ,[OpAreaId] ,[ProductId] ,[OptionSetId] ,[Amount] ,[EventId] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.129</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add column BrokerPluginId to tbOutboundMessage</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbOutboundMessage
add BrokerPluginId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundMessage] add constraint FK_OutboundMessage_Plugin foreign key([BrokerPluginId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.128</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Create index IX_AsyncFinalizeStat_ServerId
- Create table tbOutboundStat</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_AsyncFinalizeStat_ServerId] ON [tbAsyncFinalizeStat] ([ServerId] ,[TimeSlot] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbOutboundStat]
(
  [TimeSlot] Datetime NOT NULL,
  [OutboundMessageId] Uniqueidentifier NOT NULL,
  [ServerId] Smallint NOT NULL,
  [MaxConcurrentThreads] Integer NOT NULL,
  [ProcMinMS] Integer NOT NULL,
  [ProcMaxMS] Integer NOT NULL,
  [ProcAvgMS] Integer NOT NULL,
  [ProcTotalMS] Bigint NOT NULL,
  [ProcItemCount] Integer NOT NULL,
  [QueueMinMS] Integer NOT NULL,
  [QueueMaxMS] Integer NOT NULL,
  [QueueAvgMS] Integer NOT NULL,
  [QueueTotalMS] Bigint NOT NULL,
  [QueueItemCount] Integer NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundStat]
ADD CONSTRAINT PK_OutboundStat PRIMARY KEY ([TimeSlot],[OutboundMessageId],[ServerId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundStat_ServerId] ON [tbOutboundStat] ([ServerId] ,[TimeSlot] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundStat] add constraint FK_OutboundStat_Server foreign key([ServerId]) references [tbServer] ([ServerId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundStat] add constraint FK_OutboundStat_OutboundMessage foreign key([OutboundMessageId]) references [tbOutboundMessage] ([OutboundMessageId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.127</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbOutboundQueue</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbOutboundQueue
alter column ScheduleDateTime datetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_OutboundQueue_ScheduleDateTime on tbOutboundQueue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_CreateDateTime] ON [tbOutboundQueue] ([CreateDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_OutboundMessageId] ON [tbOutboundQueue] ([OutboundMessageId] ,[CreateDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_OutboundQueue_Waiting on tbOutboundQueue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_Waiting] ON [tbOutboundQueue] ([ScheduleDateTime] ) 
where ScheduleDateTime is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_OutboundQueue_WaitingByMessage on tbOutboundQueue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_WaitingByMessage] ON [tbOutboundQueue] ([OutboundMessageId] ,[ScheduleDateTime] ) 
where ScheduleDateTime is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_OutboundQueue_WaitingByPriority on tbOutboundQueue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_WaitingByPriority] ON [tbOutboundQueue] ([OutboundMessagePriority] ,[ScheduleDateTime] ) 
where ScheduleDateTime is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>andre</ADDEDBY><SQLVERSION>2.126</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New fields:
tbPaymentCard.VoidPaymentId
tbPaymentCard.Settled</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table 
  tbPaymentCard
add 
  VoidPaymentId Uniqueidentifier NULL,
  Settled Bit NULL

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentCard_VoidPaymentId] ON [tbPaymentCard] ([VoidPaymentId] ) 
where VoidPaymentId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentCard] add constraint FK_PaymentId_VoidPaymentId foreign key([VoidPaymentId]) references [tbPaymentCard] ([PaymentId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.125</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add ServerId to tbOutboundQueue</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbOutboundQueue
ADD ServerId Smallint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbOutboundQueue add constraint FK_OutboundQueue_Server foreign key(ServerId)
references tbServer (ServerId) on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_ServerId] ON [tbOutboundQueue] ([ServerId] ,[OutboundQueueStatus] ,[CreateDateTime] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.124</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbOutboundQueue indexes</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_OutboundQueue_OutboundMessage on tbOutboundQueue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_OutboundQueue_PriorityAndDateTime on tbOutboundQueue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_Waiting] ON [tbOutboundQueue] ([ScheduleDateTime] ) 
where OutboundQueueStatus=1

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_WaitingByMessage] ON [tbOutboundQueue] ([OutboundMessageId] ,[ScheduleDateTime] ) 
where OutboundQueueStatus=1


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_WaitingByPriority] ON [tbOutboundQueue] ([OutboundMessagePriority] ,[ScheduleDateTime] ) 
where OutboundQueueStatus=1

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>sdangelo</ADDEDBY><SQLVERSION>2.123</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>NvarChar(max)______________________________
tbNotifyLog.DocData</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbNotifyLog
ALTER COLUMN DocData NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPaymentData
ALTER COLUMN ParamValueLong NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSession
ALTER COLUMN SessionData NvarChar(max) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.122</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add column OutboundMessageName to tbOutboundMessage</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbOutboundMessage
ADD OutboundMessageName Nvarchar(100) NOT NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.121</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbRateCode.RateCodeSymbol from 20 to 50</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbRateCode
alter column RateCodeSymbol varchar(50) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.120</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbOutboundMessage.OutboundMessageStatus</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbOutboundMessage
add OutboundMessageStatus smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.119</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>NvarChar(max)______________________________
tbAccessPoint.Settings
tbAction.ActionData
tbApiLog.RequestBody
tbApiLog.RequestHeader
tbApiLog.AnswerBody
tbApiLog.AnswerHeader
tbAsyncProcess.ConfigData
tbAsyncFinalize.DocData
tbDatabaseUpdate.ErrorMsg
tbDBInfo.ParamValue
tbDocTemplate.DocData
tbEntitlement.EntitlementData
tbExtensionPackage.InfoDoc
tbHistoryDetail.OldValueLong
tbHistoryDetail.NewValueLong
tbJob.JobLog
tbLog.LogText
tbLicense.LicenseParams
tbMessage.Message
tbMetaData.LongValue
tbNote.Note
tbPaymentDoc.DocData
tbPlugin.PluginSettings
tbPortfolioSlotLog.LogNote
tbRichDesc.Description
tbRight.RightValue
tbNotifyRuleSale.NotifySaleConfig
tbShopCart.ShopCartData
tbSeatMap.MapData
tbServerParam.ParamValue
tbSiaeReport.Riepilogo
tbSurvey.Rules
tbTask.TaskConfig
tbTask.LastReference
tbTaskTrigger.TriggerConfig
tbTicket.EntitlementData
tbUpload.MsgRequest
tbUserFilter.FilterData
tbWorkstation.LastLoginRights
tbWorkstation.LicenseParams
tbUpload.MsgAnswer
tbBroadcast.BroadcastData
tbAccountCrossPlatformParam.ParamValue
tbTransactionCrossPlatform.Message
tbTransactionCrossPlatform.ErrorMsg

varBinary(max)__________________________
tbBiometric.Template
tbExtensionPackage.JarFile
tbLog.LogData
tbRepository.DocData
tbRepository.Large
tbRepository.Small
tbRepository.Thumb
tbSignature.DocData
tbFont.FontData

</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbAccessPoint
ALTER COLUMN Settings NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAction
ALTER COLUMN ActionData NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAsyncProcess
ALTER COLUMN ConfigData NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbBiometric
ALTER COLUMN Template varBinary(max) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbBroadcast
ALTER COLUMN BroadcastData NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbDatabaseUpdate
ALTER COLUMN ErrorMsg NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbDBInfo
ALTER COLUMN ParamValue NvarChar(max) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbDocTemplate
ALTER COLUMN DocData NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbEntitlement
ALTER COLUMN EntitlementData NvarChar(max) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbExtensionPackage
ALTER COLUMN InfoDoc NvarChar(max) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbExtensionPackage
ALTER COLUMN JarFile varBinary(max) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbJob
ALTER COLUMN JobLog NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLicense
ALTER COLUMN LicenseParams NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLog
ALTER COLUMN LogData varBinary(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbMessage
ALTER COLUMN Message NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbMetaData
ALTER COLUMN LongValue NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbNote
ALTER COLUMN Note NvarChar(max) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPaymentDoc
ALTER COLUMN DocData NvarChar(max) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPlugin
ALTER COLUMN PluginSettings NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPortfolioSlotLog
ALTER COLUMN LogNote NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbRepository
ALTER COLUMN DocData varBinary(max) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbRepository
ALTER COLUMN Large varBinary(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbRepository
ALTER COLUMN Small varBinary(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbRepository
ALTER COLUMN Thumb varBinary(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbRichDesc
ALTER COLUMN Description NvarChar(max) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbRight
ALTER COLUMN RightValue NvarChar(max) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSeatMap
ALTER COLUMN MapData NvarChar(max) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbServerParam
ALTER COLUMN ParamValue NvarChar(max) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSiaeReport
ALTER COLUMN Riepilogo NvarChar(max) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSignature
ALTER COLUMN DocData varBinary(max) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSurvey
ALTER COLUMN Rules NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTask
ALTER COLUMN LastReference NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTask
ALTER COLUMN TaskConfig NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTaskTrigger
ALTER COLUMN TriggerConfig NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @count int;
select @count=Count(*) from tbTicket;

if (@count &lt; 10000000) 
begin
  ALTER TABLE tbTicket ALTER COLUMN EntitlementData NvarChar(max) null
end;






</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbUpload
ALTER COLUMN MsgRequest NvarChar(max) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbUserFilter
ALTER COLUMN FilterData NvarChar(max) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbWorkstation
ALTER COLUMN LastLoginRights NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbWorkstation
ALTER COLUMN LicenseParams NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbUpload
ALTER COLUMN MsgAnswer NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAccountCrossPlatformParam
ALTER COLUMN ParamValue NvarChar(max) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbLog
ALTER COLUMN LogText NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionCrossPlatform
ALTER COLUMN Message NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbTransactionCrossPlatform
ALTER COLUMN ErrorMsg NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbShopCart
ALTER COLUMN ShopCartData NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbNotifyRuleSale
ALTER COLUMN NotifySaleConfig NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbApiLog
ALTER COLUMN RequestBody NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbApiLog
ALTER COLUMN RequestHeader NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbApiLog
ALTER COLUMN AnswerBody NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbApiLog
ALTER COLUMN AnswerHeader NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbHistoryDetail
ALTER COLUMN OldValueLong NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbHistoryDetail
ALTER COLUMN NewValueLong NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbAsyncFinalize
ALTER COLUMN DocData NvarChar(max) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbFont
ALTER COLUMN FontData varBinary(max) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.118</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add tables tbOutBoundMessage and tbOutboundQueue</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbOutboundMessage]
(
  [OutboundMessageId] Uniqueidentifier NOT NULL,
  [OutboundMessageCode] Varchar(100) NOT NULL,
  [OutboundMessagePriority] Smallint NOT NULL,
  [WorkerClassName] Varchar(100) NOT NULL,
  [OutboundMessageDesc] Nvarchar(100) NULL,
  [ExtensionPackageId] Uniqueidentifier NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundMessage]
ADD CONSTRAINT PK_OutboundMessage PRIMARY KEY ([OutboundMessageId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_OutboudMessage_Code] ON [tbOutboundMessage] ([OutboundMessageCode] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundMessage_ExtensionPackageId] ON [tbOutboundMessage] ([ExtensionPackageId] ) 
where ExtensionPackageId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbOutboundQueue]
(
  [OutboundQueueId] Uniqueidentifier NOT NULL,
  [OutboundMessageId] Uniqueidentifier NOT NULL,
  [OutboundQueueStatus] Smallint NOT NULL,
  [OutboundMessagePriority] Smallint NOT NULL,
  [ScheduleDateTime] Datetime NOT NULL,
  [CreateDateTime] Datetime NOT NULL,
  [StartDateTime] Datetime NULL,
  [EndDateTime] Datetime NULL,
  [EntityId] Uniqueidentifier NOT NULL,
  [EntityType] Smallint NOT NULL,
  [FailedAttemptCount] Smallint NOT NULL,
  [DocData] Nvarchar(max) NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundQueue]
ADD CONSTRAINT PK_OutboundQueue PRIMARY KEY ([OutboundQueueId])




</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_ScheduleDateTime] ON [tbOutboundQueue] ([ScheduleDateTime] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_PriorityAndDateTime] ON [tbOutboundQueue] ([OutboundMessagePriority] ,[ScheduleDateTime] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_OutboundQueue_OutboundMessage] ON [tbOutboundQueue] ([OutboundMessageId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundMessage] add constraint FK_OutboundMessage_ExtensionPackage foreign key([ExtensionPackageId]) references [tbExtensionPackage] ([ExtensionPackageId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbOutboundQueue] add constraint FK_OutboundQueue_OutboundMessage foreign key([OutboundMessageId]) references [tbOutboundMessage] ([OutboundMessageId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.117</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add fields CardType and CardNumber to tbPaymentToken
- Add field tbInstallmentContract.PaymentTokenId
- Add field tbInstallmentContractDetail.PaymentTokenId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentToken
add
  CardType varchar(15) null,  
  CardNumber varchar(20) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContract
add PaymentTokenId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContract_PaymentTokenId] ON [tbInstallmentContract] ([PaymentTokenId] ) 
where PaymentTokenId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentContract] add constraint FK_InstallmentContract_PaymentToken foreign key([PaymentTokenId]) references [tbPaymentToken] ([PaymentTokenId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbInstallmentContractDetail
add PaymentTokenId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_InstallmentContractDetail_PaymentTokenId] ON [tbInstallmentContractDetail] ([PaymentTokenId] ) 
where PaymentTokenId is not null


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbInstallmentContractDetail] add constraint FK_InstallmentContractDetail_PaymentToken foreign key([PaymentTokenId]) references [tbPaymentToken] ([PaymentTokenId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.116</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbConsPayment</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbConsPayment]
(
  [ConsPaymentId] Uniqueidentifier NOT NULL,
  [FiscalDate] date NOT NULL,
  [PaymentMethodId] Uniqueidentifier NOT NULL,
  [LocationId] Uniqueidentifier NOT NULL,
  [OpAreaId] Uniqueidentifier NOT NULL,
  [Amount] Money NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsPayment]
ADD CONSTRAINT PK_ConsPayment PRIMARY KEY ([ConsPaymentId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ConsPayment] ON [tbConsPayment] ([FiscalDate] ,[LocationId] ,[OpAreaId] ,[PaymentMethodId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsPayment_PaymentMethodId] ON [tbConsPayment] ([PaymentMethodId] ,[FiscalDate] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsPayment_LocationId] ON [tbConsPayment] ([LocationId] ,[FiscalDate] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsPayment_OpAreaId] ON [tbConsPayment] ([OpAreaId] ,[FiscalDate] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsPayment] add constraint IX_ConsPayment_LocationAccount foreign key([LocationId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsPayment] add constraint IX_ConsPayment_OpAreaAccount foreign key([OpAreaId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsPayment] add constraint FK_ConsPayment_PaymentMethod foreign key([PaymentMethodId]) references [tbPluginPaymentMethod] ([PluginId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.115</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbAccountFinance.VoidWindowDays</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccountFinance
add VoidWindowDays smallint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.114</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Update data table
Remove tbNotify and tbNotifyUser</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbNotifyRule(NotifyRuleId, NotifyRuleType, NotifyRuleName, Active, SendEmail, SendSMS)
select NotifyId, 0, 'imported', 1, 1, 0 from tbNotify
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbNotifyRuleUser
select * from tbNotifyUser
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbNotifyRuleEntityChange(NotifyRuleId, EntityType)
select * from tbNotify
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbNotifyUser
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbNotify
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.113</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbConsSale</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbConsSale
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbConsSale]
(
  [ConsSaleId] Uniqueidentifier NOT NULL,
  [ConsSaleType] Smallint NOT NULL,
  [FiscalDate] date NOT NULL,
  [TimeSlot] Smalldatetime NULL,
  [LocationId] Uniqueidentifier NULL,
  [OpAreaId] Uniqueidentifier NULL,
  [ProductId] Uniqueidentifier NULL,
  [OptionSetId] Uniqueidentifier NULL,
  [Amount] Money NOT NULL,
  [Quantity] Integer NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsSale]
ADD CONSTRAINT PK_ConsSale PRIMARY KEY ([ConsSaleId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsSale_LocationId] ON [tbConsSale] ([LocationId] ,[ConsSaleType] ,[FiscalDate] ,[TimeSlot] ) 
where LocationId is not null


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsSale_OpAreaId] ON [tbConsSale] ([OpAreaId] ,[ConsSaleType] ,[FiscalDate] ,[TimeSlot] ) 
where OpAreaId is not null


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsSale_ProductId] ON [tbConsSale] ([ProductId] ,[ConsSaleType] ,[FiscalDate] ,[TimeSlot] ) 
where ProductId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ConsSale_OptionSetId] ON [tbConsSale] ([OptionSetId] ,[ConsSaleType] ,[FiscalDate] ,[TimeSlot] ) 
where OptionSetId is not null


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ConsSale] ON [tbConsSale] ([ConsSaleType] ,[FiscalDate] ,[TimeSlot] ,[LocationId] ,[OpAreaId] ,[ProductId] ,[OptionSetId] ,[Amount] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsSale] add constraint FK_ConsSale_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsSale] add constraint FK_ConsSale_OptionSet foreign key([OptionSetId]) references [tbOptionSet] ([OptionSetId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsSale] add constraint FK_ConsSale_LocationAccount foreign key([LocationId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbConsSale] add constraint FK_OptionSet_OpAreaAccount foreign key([OpAreaId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.112</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbAsyncFinalizeStat.MaxConcurrentThreads</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAsyncFinalizeStat
add MaxConcurrentThreads int null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAsyncFinalizeStat
set MaxConcurrentThreads=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAsyncFinalizeStat
alter column MaxConcurrentThreads int not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.111</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New tbSaleRefund table</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleRefund]
(
  [SaleId] Uniqueidentifier NOT NULL,
  [PluginId] Uniqueidentifier NOT NULL,
  [RefundAmount] Money NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleRefund]
ADD CONSTRAINT PK_SaleRefund PRIMARY KEY ([SaleId],[PluginId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleRefund_PluginId] ON [tbSaleRefund] ([PluginId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleRefund] add constraint FK_SaleRefund_Sale foreign key([SaleId]) references [tbSale] ([SaleId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleRefund] add constraint FK_SaleRefund_PluginPaymentMethod foreign key([PluginId]) references [tbPluginPaymentMethod] ([PluginId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.110</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbTransaction.SerialDateTime from smalldatetime to datetime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Transaction_SerialFiscalDate on tbTransaction
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTransaction
alter column SerialDateTime datetime not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Transaction_SerialFiscalDate] ON [tbTransaction] ([SerialFiscalDate] ,[SerialDateTime] ,[TransactionSerial] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.109</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change Calendar from NOT NULL to NULL</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbProductRevenueGateCategory ALTER COLUMN CalendarId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.108</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tbNotifyLogRef</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_NotifyLog_RefEntityId on tbNotifyLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbNotifyLog
drop column RefEntityId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbNotifyLog
drop column RefEntityType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbNotifyLog
add DocData ntext null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbNotifyLogRef]
(
  [NotifyLogId] Uniqueidentifier NOT NULL,
  [EntityId] Uniqueidentifier NOT NULL,
  [EntityType] Smallint NOT NULL,
  [NotifyDateTime] Datetime NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNotifyLogRef]
ADD CONSTRAINT PK_NotifyLogRef PRIMARY KEY ([NotifyLogId],[EntityId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_NotifyLogRef_EntityId] ON [tbNotifyLogRef] ([EntityId] ,[NotifyDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNotifyLogRef] add constraint FK_NotifyLogRef_NotifyLog foreign key([NotifyLogId]) references [tbNotifyLog] ([NotifyLogId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.107</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbNotifyLog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbNotifyLog
add
  ServerDateTime datetime not null,  
  RefEntityId uniqueidentifier null,  
  RefEntityType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_NotifyLog_ServerDateTime] ON [tbNotifyLog] ([ServerDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_NotifyLog_RefEntityId] ON [tbNotifyLog] ([RefEntityId] ,[NotifyDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.106</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbNotifyLog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbNotifyLog]
(
  [NotifyLogId] Uniqueidentifier NOT NULL,
  [NotifyRuleId] Uniqueidentifier NOT NULL,
  [NotifyDateTime] Datetime NOT NULL,
  [WorkstationId] Uniqueidentifier NOT NULL,
  [UserAccountId] Uniqueidentifier NULL,
  [EmailSent] Bit NOT NULL,
  [SmsSent] Bit NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNotifyLog]
ADD CONSTRAINT PK_NotifyLog PRIMARY KEY ([NotifyLogId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_NotifyLog_NotifyDateTime] ON [tbNotifyLog] ([NotifyDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_NotifyLog_NotifyRuleId] ON [tbNotifyLog] ([NotifyRuleId] ,[NotifyDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_NotifyLog_WorkstationId] ON [tbNotifyLog] ([WorkstationId] ,[NotifyDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_NotifyLog_UserAccountId] ON [tbNotifyLog] ([UserAccountId] ,[NotifyDateTime] ) 
where UserAccountId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNotifyLog] add constraint FK_NotifyLog_NotifyRule foreign key([NotifyRuleId]) references [tbNotifyRule] ([NotifyRuleId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNotifyLog] add constraint FK_NotifyLog_UserAccount foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNotifyLog] add constraint FK_NotifyLog_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.105</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Refactore index IX_Ledger_FiscalDate
- Create table tbAsyncFinalize
- Create table tbAsyncFinalizeCalc</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_Ledger_FiscalDate on tbLedger
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ledger_FiscalDate] ON [tbLedger] ([LedgerFiscalDate] Desc,[LedgerDateTime] Desc,[GroupEntityId] ,[LedgerAmount] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbAsyncFinalize]
(
  [EntityId] Uniqueidentifier NOT NULL,
  [EntityType] Smallint NOT NULL,
  [AsyncFinalizeStatus] Smallint NOT NULL,
  [CreateDateTime] Datetime NOT NULL,
  [StartDateTime] Datetime NULL,
  [EndDateTime] Datetime NULL,
  [DocData] Ntext NULL,
  [ServerId] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAsyncFinalize]
ADD CONSTRAINT PK_AsyncFinalize PRIMARY KEY ([EntityId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AsyncFinalize_StatusAndCreateDT] ON [tbAsyncFinalize] ([AsyncFinalizeStatus] ,[CreateDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_AsyncFinalize_ServerAndStatus] ON [tbAsyncFinalize] ([ServerId] ,[AsyncFinalizeStatus] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAsyncFinalize] add constraint FK_AsyncFinalize_Server foreign key([ServerId]) references [tbServer] ([ServerId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbAsyncFinalizeStat]
(
  [TimeSlot] Datetime NOT NULL,
  [EntityType] Smallint NOT NULL,
  [ServerId] Smallint NOT NULL,
  [MinMS] Integer NOT NULL,
  [MaxMS] Integer NOT NULL,
  [AvgMS] Integer NOT NULL,
  [TotalMS] Bigint NOT NULL,
  [ItemCount] Integer NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAsyncFinalizeStat]
ADD CONSTRAINT PK_AsyncFinalizeStat PRIMARY KEY ([TimeSlot],[EntityType],[ServerId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAsyncFinalizeStat] add constraint FK_AsyncFinalizeStat_Server foreign key([ServerId]) references [tbServer] ([ServerId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.104</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field  "ClearingLimitPerc" to tbPtoductRevenueGateCategory
Add table tbTicketVPT</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbProductRevenueGateCategory
ADD ClearingLimitPerc Money NULL;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTicketVPT]
(
  [TicketId] Uniqueidentifier NOT NULL,
  [GateCategoryId] Uniqueidentifier NOT NULL,
  [ClearingLimit] Money NOT NULL,
  [ClearingAllocated] Money NOT NULL,
  [ProductVPT] Money NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketVPT]
ADD CONSTRAINT PK_TicketVPT PRIMARY KEY ([TicketId],[GateCategoryId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketVPT_GateCategory] ON [tbTicketVPT] ([GateCategoryId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketVPT] add constraint FK_TicketVPT_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketVPT] add constraint FK_TicketVPT_GateCategory foreign key([GateCategoryId]) references [tbGateCategory] ([GateCategoryId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.103</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tables tbNotifyRule, tbNotifyRuleEntityChange, tbNotifyRuleRedemption2Type, tbNotifyRuleSale, tbNotifyRuleUser</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbNotifyRule]
(
  [NotifyRuleId] Uniqueidentifier NOT NULL,
  [NotifyRuleType] Smallint NOT NULL,
  [NotifyRuleName] Nvarchar(100) NULL,
  [Active] Bit NOT NULL,
  [SendEmail] Bit NOT NULL,
  [SendSMS] Bit NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNotifyRule]
ADD CONSTRAINT PK_NotifyRule PRIMARY KEY ([NotifyRuleId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbNotifyRuleEntityChange]
(
  [NotifyRuleId] Uniqueidentifier NOT NULL,
  [EntityType] Smallint NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNotifyRuleEntityChange]
ADD CONSTRAINT PK_NotifyRuleEntityChange PRIMARY KEY ([NotifyRuleId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbNotifyRuleRedemption2Type]
(
  [NotifyRuleId] Uniqueidentifier NOT NULL,
  [NotifyRedemptionType] Smallint NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNotifyRuleRedemption2Type]
ADD CONSTRAINT PK_NotifyRuleRedemption2Type PRIMARY KEY ([NotifyRuleId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbNotifyRuleSale]
(
  [NotifyRuleId] Uniqueidentifier NOT NULL,
  [NotifySaleType] Smallint NOT NULL,
  [NotifySaleFrequency] Integer NOT NULL,
  [NotifySaleRange] Smallint NOT NULL,
  [NotifySaleConfig] Ntext NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNotifyRuleSale]
ADD CONSTRAINT PK_NotifyRuleSale PRIMARY KEY ([NotifyRuleId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbNotifyRuleUser]
(
  [NotifyRuleId] Uniqueidentifier NOT NULL,
  [EntityId] Uniqueidentifier NOT NULL,
  [EntityType] Smallint NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNotifyRuleUser]
ADD CONSTRAINT PK_NotifyRuleUser PRIMARY KEY ([NotifyRuleId], [EntityId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNotifyRuleEntityChange] add constraint FK_NotifyRuleEntityChange_NotifyRule foreign key([NotifyRuleId]) references [tbNotifyRule] ([NotifyRuleId]) on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNotifyRuleRedemption2Type] add constraint FK_NotifyRuleRedemption2Type_NotifyRule foreign key([NotifyRuleId]) references [tbNotifyRule] ([NotifyRuleId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNotifyRuleSale] add constraint FK_NotifyRuleSale_NotifyRule foreign key([NotifyRuleId]) references [tbNotifyRule] ([NotifyRuleId]) on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNotifyRuleUser] add constraint FK_NotifyRuleUser_NotifyRule foreign key([NotifyRuleId]) references [tbNotifyRule] ([NotifyRuleId]) on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.102</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>removed AmoritazionAmountType from tbProductRevenueDate</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbProductRevenueDate
DROP COLUMN AmortizationAmountType;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.101</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop and recreate table tbPluginPayment2IntercompanyCostCenter with new data structure</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbPluginPayment2IntercompanyCostCenter
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPluginPayment2IntercompanyCostCenter]
(
  [PluginId] Uniqueidentifier NOT NULL,
  [IntercompanyCostCenterId] Uniqueidentifier NOT NULL,
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbPluginPayment2IntercompanyCostCenter]
ADD CONSTRAINT PK_IntercompanyCostCenterPlugin PRIMARY KEY ([PluginId],[IntercompanyCostCenterId]);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPluginPayment2IntercompanyCostCenter] 
add constraint FK_PluginPayment2IntercompanyCostCenter_IntercompanyCostCenter
foreign key([IntercompanyCostCenterId]) 
references [tbIntercompanyCostCenter] ([IntercompanyCostCenterId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPluginPayment2IntercompanyCostCenter] 
add constraint FK_PluginPayment2IntercompanyCostCenter_PluginPaymentMethod
foreign key([PluginId]) 
references [tbPluginPaymentMethod] ([PluginId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PluginPayment2IntercompanyCostCenter_IntercompanyCostCenterId] ON [tbPluginPayment2IntercompanyCostCenter] ([IntercompanyCostCenterId] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.100</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Change PerformanceTypeId and  SaleChannelId from NOT NULL to NULL
Add  column ProductVPTId to tbProductVPT
Create Unique Index UQ_ProductVPT_ProductRevenue ([ProductId] ,[PriorityOrder] ,[GateCategoryId] ,[SaleChannelId] ,[PerformanceTypeId] )
Create Index UQ_ProductVPT_ProductGateCategory ([ProductId] ,[PriorityOrder] ,[GateCategoryId] ) 

</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbProductVPT ALTER COLUMN PerformanceTypeId Uniqueidentifier NULL
ALTER TABLE tbProductVPT ALTER COLUMN SaleChannelId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductVPT drop constraint PK_ProductVPT
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductVPT
add ProductVPTId Uniqueidentifier NOT NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbProductVPT
ADD CONSTRAINT PK_ProductVPT PRIMARY KEY ([ProductVPTId]);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ProductVPT_ProductRevenue] ON [tbProductVPT] ([ProductId] ,[PriorityOrder] ,[GateCategoryId] ,[SaleChannelId] ,[PerformanceTypeId] )

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [UQ_ProductVPT_ProductGateCategory] ON [tbProductVPT] ([ProductId] ,[PriorityOrder] ,[GateCategoryId] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.99</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbPluginPaymentToMask refactor</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>sp_rename 'tbPluginPaymentToMask','tbPluginPayment2Mask'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPluginPayment2Mask
drop constraint PK_PluginId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPluginPayment2Mask
ADD CONSTRAINT PK_PluginPayment2Mask PRIMARY KEY ([PluginId],[MaskId]);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPluginPayment2Mask
drop constraint FK_PluginPaymentToMask_PluginPaymentMethod
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPluginPayment2Mask] add constraint FK_PluginPayment2Mask_PluginPaymentMethod foreign key([PluginId]) references [tbPluginPaymentMethod] ([PluginId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPluginPayment2Mask
drop constraint FK_PluginPaymentToMask_Mask
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPluginPayment2Mask] add constraint FK_PluginPayment2Mask_Mask foreign key([MaskId]) references [tbMask] ([MaskId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_PluginPaymentToMask_MaskId on tbPluginPayment2Mask
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PluginPayment2Mask_MaskId] ON [tbPluginPayment2Mask] ([MaskId] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.98</SQLVERSION><RMTRACKLINK>4029</RMTRACKLINK><REASON>Drop old tables intercompany and create new structure </REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbPaymentIntercompany

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbIntercompanyCostCenter

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbIntercompanyCostCenter]
(
  [IntercompanyCostCenterId] Uniqueidentifier NOT NULL,
  [IntercompanyCostCenterCode] Varchar(15) NOT NULL,
  [IntercompanyCostCenterName] Nvarchar(100) NOT NULL,
  [Active] Bit NOT NULL,
) 



</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbIntercompanyCostCenter]
ADD CONSTRAINT PK_IntercompanyCostCenterId PRIMARY KEY ([IntercompanyCostCenterId]);

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPluginPayment2IntercompanyCostCenter]
(
  [IntercompanyCostCenterId] Uniqueidentifier NOT NULL,
  [PluginId] Uniqueidentifier NOT NULL,
) 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbPluginPayment2IntercompanyCostCenter]
ADD CONSTRAINT PK_IntercompanyCostCenterPlugin PRIMARY KEY ([IntercompanyCostCenterId],[PluginId]);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPluginPayment2IntercompanyCostCenter] 
add constraint FK_PluginPayment2IntercompanyCostCenter_IntercompanyCostCenter
foreign key([IntercompanyCostCenterId]) 
references [tbIntercompanyCostCenter] ([IntercompanyCostCenterId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPluginPayment2IntercompanyCostCenter] 
add constraint FK_PluginPayment2IntercompanyCostCenter_PluginPaymentMethod
foreign key([PluginId]) 
references [tbPluginPaymentMethod] ([PluginId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPaymentIntercompany]
(
  [PaymentId] Uniqueidentifier NOT NULL,
  [IntercompanyCostCenterId] Uniqueidentifier NOT NULL,
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbPaymentIntercompany]
ADD CONSTRAINT PK_PaymentId PRIMARY KEY ([PaymentId]);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentIntercompany] add constraint FK_PaymentIntercompany_IntercompanyCostCenter foreign key([IntercompanyCostCenterId]) references [tbIntercompanyCostCenter] ([IntercompanyCostCenterId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.97</SQLVERSION><RMTRACKLINK>SIT-4030</RMTRACKLINK><REASON>[0..4] New tbTicketAmortization.NeedUpdateOnFirstUsage
[5..6] New tbProductRevenueDate.AmortizationAmountType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP INDEX tbTicketAmortization.IX_TicketAmortization_AmortizationDate;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketAmortization
add NeedUpdateOnFirstUsage bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTicketAmortization
set NeedUpdateOnFirstUsage=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicketAmortization
alter column NeedUpdateOnFirstUsage bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketAmortization_StatusAndDate] ON [tbTicketAmortization] ([NeedUpdateOnFirstUsage] ,[AmortizationDate] ,[LedgerDateTime] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductRevenueDate
add AmortizationAmountType smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductRevenueDate
set AmortizationAmountType=0
where RevenueRecognitionType=2
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.96</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add column IntercompanyCostCenterActive</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbIntercompanyCostCenter
add IntercompanyCostCenterActive bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbIntercompanyCostCenter
set IntercompanyCostCenterActive = 1

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbIntercompanyCostCenter
alter column IntercompanyCostCenterActive bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.95</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New table tbLedgerQueue</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbLedgerQueue]
(
  [GroupEntityId] Uniqueidentifier NOT NULL,
  [LedgerQueueType] Smallint NOT NULL,
  [GroupEntityType] Smallint NOT NULL,
  [LedgerQueueStatus] Smallint NOT NULL,
  [LedgerDateTime] Datetime NOT NULL,
  [LockEntityId] Uniqueidentifier NULL,
  [LockEntityType] Smallint NULL,
  [AsyncProcessId] Uniqueidentifier NULL,
  [ServerId] Smallint NULL,
  [StartDateTime] Datetime NULL,
  [EndDateTime] Datetime NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerQueue]
ADD CONSTRAINT PK_LedgerQueue PRIMARY KEY ([GroupEntityId],[LedgerQueueType])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerQueue_StatusAndDateTime] ON [tbLedgerQueue] ([LedgerQueueStatus] ,[LedgerDateTime] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerQueue_LockEntityId] ON [tbLedgerQueue] ([LockEntityId] ,[LedgerQueueStatus] ,[LedgerDateTime] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerQueue_AsyncProcessId] ON [tbLedgerQueue] ([AsyncProcessId] ,[LedgerDateTime] ) 
where AsyncProcessId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerQueue_AsyncProcess] ON [tbLedgerQueue] ([AsyncProcessId] )  
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_LedgerQueue_ServerId] ON [tbLedgerQueue] ([ServerId] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerQueue] add constraint FK_LedgerQueue_AsyncProcess foreign key([AsyncProcessId]) references [tbAsyncProcess] ([AsyncProcessId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerQueue] add constraint FK_LedgerQueue_Server foreign key([ServerId]) references [tbServer] ([ServerId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.94</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0..0] Rename tbProductRevenueDate.RevRecType column</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbProductRevenueDate.RevenueRecognitiondate', 'RevenueRecognitionType', 'COLUMN'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.93</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>[0..0] Rename tbProductRevenueDate.RevRecType column
[1..2] New fields into tbTicket</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>EXEC sp_rename 'tbProductRevenueDate.RevRecType', 'RevenueRecognitiondate', 'COLUMN'
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTicket
add BreakageDate date null, BreakageOnDateTime datetime null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Ticket_BreakageDate] ON [tbTicket] ([BreakageDate] ) 
where (BreakageDate is not null) and (BreakageOnDateTime is null)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.92</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Removed table tbProductRevenue</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>DROP TABLE tbProductRevenue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbProductRevenueDate
ADD [RevRecType] Smallint NOT NULL,
  [BreakageDays] Integer NULL,
  [AmortizationPeriods] Integer NULL,
  [AmortizationPeriodType] Smallint NULL,
  [AmortizationTrigger] Smallint NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.91</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tables tbTicketAmortization, tbProductRevenue, tbProductRevenueDate, tbProductRevenueGateCategory, tbProductVPT</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProductRevenue]
(
  [ProductId] Uniqueidentifier NOT NULL,
  [PriorityOrder] Smallint NOT NULL,
  [RevRecType] Smallint NOT NULL,
  [BreakageDays] Integer NULL,
  [AmortizationPeriods] Integer NULL,
  [AmortizationPeriodType] Smallint NULL,
  [AmortizationTrigger] Smallint NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductRevenue]
ADD CONSTRAINT PK_ProductRevenue PRIMARY KEY ([ProductId],[PriorityOrder]);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbProductRevenueDate]
(
  [ProductId] Uniqueidentifier NOT NULL,
  [PriorityOrder] Smallint NOT NULL,
  [DateFrom] Date NULL,
  [DateTo] Date NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductRevenueDate]
ADD CONSTRAINT PK_ProductRevenueDate PRIMARY KEY ([ProductId],[PriorityOrder]);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbProductRevenueGateCategory]
(
  [ProductId] Uniqueidentifier NOT NULL,
  [PriorityOrder] Smallint NOT NULL,
  [GateCategoryId] Uniqueidentifier NOT NULL,
  [CalendarId] Uniqueidentifier NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductRevenueGateCategory]
ADD CONSTRAINT PK_ProductRevenueGateCategory PRIMARY KEY ([ProductId],[PriorityOrder],[GateCategoryId]);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductRevenueGateCategory_GateCategoryId] ON [tbProductRevenueGateCategory] ([GateCategoryId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductRevenueGateCategory_CalendarId] ON [tbProductRevenueGateCategory] ([CalendarId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbProductVPT]
(
  [ProductId] Uniqueidentifier NOT NULL,
  [PriorityOrder] Smallint NOT NULL,
  [GateCategoryId] Uniqueidentifier NOT NULL,
  [SaleChannelId] Uniqueidentifier NOT NULL,
  [PerformanceTypeId] Uniqueidentifier NOT NULL,
  [ProductVPT] Money NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductVPT]
ADD CONSTRAINT PK_ProductVPT PRIMARY KEY ([ProductId],[PriorityOrder],[GateCategoryId]);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductVPT_SaleChannelId] ON [tbProductVPT] ([SaleChannelId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductVPT_PerformanceTypeId] ON [tbProductVPT] ([PerformanceTypeId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbTicketAmortization]
(
  [TicketAmortizationId] Uniqueidentifier NOT NULL,
  [TicketId] Uniqueidentifier NOT NULL,
  [AmortizationDate] Date NOT NULL,
  [AmortizationAmount] Money NOT NULL,
  [LedgerDateTime] Datetime NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketAmortization]
ADD CONSTRAINT PK_TicketAmortization PRIMARY KEY ([TicketAmortizationId]);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketAmortization_AmortizationDate] ON [tbTicketAmortization] ([AmortizationDate] ,[LedgerDateTime])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_TicketAmortization_TicketId] ON [tbTicketAmortization] ([TicketId] ,[AmortizationDate])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketAmortization] 
add constraint FK_TicketAmortization_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductRevenue] 
add constraint FK_ProductRevenue_ProductRevenueDate foreign key([ProductId],[PriorityOrder]) references [tbProductRevenueDate] ([ProductId],[PriorityOrder])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductRevenueDate] 
add constraint FK_ProductRevenueDate_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductRevenueGateCategory]
add constraint FK_ProductRevenueGateCategory_ProductRevenueDate foreign key([ProductId],[PriorityOrder]) references [tbProductRevenueDate] ([ProductId],[PriorityOrder])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductRevenueGateCategory]
add constraint FK_ProductRevenueGateCategory_PerformanceType foreign key([CalendarId]) references [tbCalendar] ([CalendarId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductRevenueGateCategory]
add constraint FK_ProductRevenueGateCategory_GateCategory foreign key([GateCategoryId]) references [tbGateCategory] ([GateCategoryId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductVPT]
add constraint FK_ProductVPT_ProductRevenueGateCategory foreign key([ProductId],[PriorityOrder],[GateCategoryId]) references [tbProductRevenueGateCategory] ([ProductId],[PriorityOrder],[GateCategoryId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductVPT]
add constraint FK_ProductVPT_SaleChannel foreign key([SaleChannelId]) references [tbSaleChannel] ([SaleChannelId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductVPT]
add constraint FK_ProductVPT_PerformanceType foreign key([PerformanceTypeId]) references [tbPerformanceType] ([PerformanceTypeId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.90</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename foreign key - (FK_Event_GateCategory and FK_Event_Account)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbEvent' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='GateCategoryId'

exec ('sp_rename ''' + @oldname + ''',''FK_Event_GateCategory''')
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [dbo].[tbEvent] DROP CONSTRAINT [FK_Event_GateCategory]
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP TABLE tbGateCategory
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbGateCategory]
(
  [GateCategoryId] Uniqueidentifier NOT NULL,
  [GateCategoryCode] Varchar(15) NOT NULL,
  [GateCategoryName] Nvarchar(100) NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbGateCategory]
ADD CONSTRAINT PK_GateGategory PRIMARY KEY ([GateCategoryId]);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_GateCategory_Code] ON [tbGateCategory] ([GateCategoryCode] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbEvent
add constraint FK_Event_GateCategory foreign key([GateCategoryId]) references [tbGateCategory] ([GateCategoryId]) on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @oldname varchar(max)

select @oldname=f.name
from sys.foreign_keys f inner join sys.foreign_key_columns fc on f.OBJECT_ID=fc.constraint_object_id
where
  OBJECT_NAME(f.parent_object_id)='tbEvent' and
  COL_NAME(fc.parent_object_id, fc.parent_column_id)='AccountId'

if (@oldname is null)
  Alter table [tbEvent] add constraint FK_Event_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
else
  exec ('sp_rename ''' + @oldname + ''',''FK_Event_Account''')
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>salvo</ADDEDBY><SQLVERSION>2.89</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add GateCategoryId to tbEvent</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbEvent
add GateCategoryId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Event_GateCategoryId] ON [tbEvent] ([GateCategoryId] ) 
where GateCategoryId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbEvent] 
add  foreign key([GateCategoryId]) references [tbGateCategory] ([GateCategoryId]) on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Salvo</ADDEDBY><SQLVERSION>2.88</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbGateCategory</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbGateCategory]
(
  [GateCategoryId] Uniqueidentifier NOT NULL,
  [GateCategoryCode] Varchar(15) NOT NULL,
  [GateCategoryName] Nvarchar(100) NOT NULL,
Primary Key ([GateCategoryId])
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_GateCategory_Code] ON [tbGateCategory] ([GateCategoryCode] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.87</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbBoxDeposit.UserAccountId from required to nullable</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbBoxDeposit
alter column UserAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX tbBoxDeposit.IX_BoxDeposit_UserAccountId;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_BoxDeposit_UserAccountId] ON [tbBoxDeposit] ([UserAccountId] ) 
where UserAccountId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX tbBox.IX_Box_UserAccountId;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Box_UserAccountId] ON [tbBox] ([UserAccountId] ,[FBoxDate] ) 
where UserAccountId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.86</SQLVERSION><RMTRACKLINK>4029</RMTRACKLINK><REASON>Create tables tbIntercompanyCostCenter and tbPaymentIntercompany</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbIntercompanyCostCenter]
(
  [IntercompanyCostCenterId] Uniqueidentifier NOT NULL,
  [IntercompanyCostCenterCode] Varchar(15) NOT NULL,
  [IntercompanyCostCenterName] Nvarchar(100) NOT NULL,
  [PluginId] Uniqueidentifier NOT NULL,
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbIntercompanyCostCenter]
ADD CONSTRAINT PK_IntercompanyCostCenterId PRIMARY KEY ([IntercompanyCostCenterId]);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbIntercompanyCostCenter] add constraint FK_IntercompanyCostCenter_PluginPaymentMethod foreign key([PluginId]) references [tbPluginPaymentMethod] ([PluginId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_IntercompanyCostCenter_PluginId] ON [tbIntercompanyCostCenter] ([PluginId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_IntercompanyCostCenter_Code] ON [tbIntercompanyCostCenter] ([IntercompanyCostCenterCode] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPaymentIntercompany]
(
  [PaymentId] Uniqueidentifier NOT NULL,
  [IntercompanyCostCenterId] Uniqueidentifier NOT NULL,
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbPaymentIntercompany]
ADD CONSTRAINT PK_PaymentId PRIMARY KEY ([PaymentId]);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentIntercompany] add constraint FK_PaymentIntercompany_Payment foreign key([PaymentId]) references [tbPayment] ([PaymentId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentIntercompany] add constraint FK_PaymentIntercompany_IntercompanyCostCenter foreign key([IntercompanyCostCenterId]) references [tbIntercompanyCostCenter] ([IntercompanyCostCenterId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentIntercompany_IntercompanyCostCenterId] ON [tbPaymentIntercompany] ([IntercompanyCostCenterId] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.85</SQLVERSION><RMTRACKLINK>4092</RMTRACKLINK><REASON>create index on ServerId field </REASON><TABLENAMES>tbApiLog
tbJob
tbDatabaseUpdate</TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_ApiLog_ServerId] ON [tbApiLog] ([ServerId] ,[EndDateTime] ) 
where ServerId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Job_ServerId] ON [tbJob] ([ServerId] ,[StartDateTime] ) 
where ServerId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_DatabaseUpdate_ServerId] ON [tbDatabaseUpdate] ([ServerId] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.84</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbBox.UserAccountId from required to nullable</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbBox
alter column UserAccountId uniqueidentifier null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.83</SQLVERSION><RMTRACKLINK>SIT-74</RMTRACKLINK><REASON>Create table tbPluginPaymentToMask</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbPluginPaymentToMask]
(
  [PluginId] Uniqueidentifier NOT NULL,
  [MaskId] Uniqueidentifier NOT NULL,
  [PriorityOrder] Integer NOT NULL,
) 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPluginPaymentToMask
ADD CONSTRAINT PK_PluginId PRIMARY KEY ([PluginId],[MaskId]);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPluginPaymentToMask] add constraint FK_PluginPaymentToMask_PluginPaymentMethod foreign key([PluginId]) references [tbPluginPaymentMethod] ([PluginId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPluginPaymentToMask] add constraint FK_PluginPaymentToMask_Mask foreign key([MaskId]) references [tbMask] ([MaskId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PluginPaymentToMask_MaskId] ON [tbPluginPaymentToMask] ([MaskId] )

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.82</SQLVERSION><RMTRACKLINK>SIT-4022</RMTRACKLINK><REASON>New tbTask.ExtensionPackageId field</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTask
add ExtensionPackageId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Task_ExtensionPackageId] ON [tbTask] ([ExtensionPackageId] ) 
where ExtensionPackageId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTask] add constraint FK_Task_ExtensionPackage foreign key([ExtensionPackageId]) references [tbExtensionPackage] ([ExtensionPackageId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.81</SQLVERSION><RMTRACKLINK>4017</RMTRACKLINK><REASON>New fields into tbTaks</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table 
  tbTask
add 
  SendNotification bit null,           
  NotificationSubject Nvarchar(100) null,
  NotificationEmail Nvarchar(100) null,
  NotifyOnJobFailure bit null,  
  NotifyOnSuccessCount bit null,  
  NotifyOnWarnCount bit null,  
  NotifyOnFailCount bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTask
set 
  SendNotification=0,  
  NotifyOnJobFailure=0,  
  NotifyOnSuccessCount=0,  
  NotifyOnWarnCount=0,  
  NotifyOnFailCount=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table 
  tbTask
alter column 
  SendNotification bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table 
  tbTask
alter column 
  NotifyOnJobFailure bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table 
  tbTask
alter column 
  NotifyOnSuccessCount bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table 
  tbTask
alter column 
  NotifyOnWarnCount bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table 
  tbTask
alter column 
  NotifyOnFailCount bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.80</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Remove GiftCard payment method plugin</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @HasPayment smallint

set @HasPayment = 
   (select 
      count(*)
  from
    tbDriver D inner join
    tbPlugin P on P.DriverId=D.DriverId inner join
    tbPayment Pay on Pay.PluginId=p.PluginId
  where
    D.DriverType=1025)

if (@HasPayment = 0)
BEGIN
  delete tbBoxContent where PluginId in 
    (select 
       P.PluginId
   from
     tbDriver D inner join
     tbPlugin P on P.DriverId=D.DriverId
   where
     D.DriverType=1025)
  delete tbPluginPaymentMethod where PluginId in 
    (select 
       P.PluginId
   from
     tbDriver D inner join
     tbPlugin P on P.DriverId=D.DriverId
   where
     D.DriverType=1025)
  delete tbPlugin where PaymentMethodId in 
    (select 
       P.PluginId
   from
     tbDriver D inner join
     tbPlugin P on P.DriverId=D.DriverId
   where
     D.DriverType=1025)    
  delete tbPlugin where PluginId in 
    (select 
       P.PluginId
   from
     tbDriver D inner join
     tbPlugin P on P.DriverId=D.DriverId
   where
     D.DriverType=1025)

  delete tbDriver where DriverType=1025
END;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.79</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>fix field tbTransactionDocket.DocketStatus to smallint</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTransactionDocket
alter column DocketStatus smallint not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.78</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add background and foreground field to tbCategory table</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCategory 
     add 
       BackgroundColor Varchar(6) NULL ,
       ForegroundColor Varchar(6) NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.77</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSaleItemDetailMaterial</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleItemDetailMaterial]
(
  [SaleItemDetailId] Uniqueidentifier NOT NULL,
  [MaterialProductId] Uniqueidentifier NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbSaleItemDetailMaterial
ADD CONSTRAINT PK_SaleItemDetailMaterial PRIMARY KEY ([SaleItemDetailId],[MaterialProductId]);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemDetailMaterial_MaterialProductId] ON [tbSaleItemDetailMaterial] ([MaterialProductId] ) 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemDetailMaterial] add constraint FK_SaleItemDetailMaterial_SaleItemDetail foreign key([SaleItemDetailId]) references [tbSaleItemDetail] ([SaleItemDetailId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemDetailMaterial] add constraint FK_SaleItemDetailMaterial_Product foreign key([MaterialProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.76</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>PK update for table tbPluginPaymentCardType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbPluginPaymentCardType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPluginPaymentCardType]
(
  [PluginId] Uniqueidentifier NOT NULL,
  [PaymentCardType] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbPluginPaymentCardType
ADD CONSTRAINT PK_PluginPaymentCardType PRIMARY KEY (PluginId,PaymentCardType);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPluginPaymentCardType] add constraint FK_PluginPaymentCardType_PluginPaymentMethod foreign key([PluginId]) references [tbPluginPaymentMethod] ([PluginId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.75</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON></REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbPluginPaymentCardType]
(
  [PluginId] Uniqueidentifier NOT NULL,
  [PaymentCardType] Smallint NOT NULL,
Primary Key ([PluginId])
) 



</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPluginPaymentCardType] add constraint FK_PluginPaymentCardType_PluginPaymentMethod foreign key([PluginId]) references [tbPluginPaymentMethod] ([PluginId])  on update no action on delete no action

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andre</ADDEDBY><SQLVERSION>2.74</SQLVERSION><RMTRACKLINK>SIT-4050</RMTRACKLINK><REASON>Patch to fix "UQ_Ticket_TDSSN" index issue in patch 1.836 (1.836 has been fixed as well)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>if (select is_disabled from sys.indexes where name='UQ_Ticket_TDSSN') = 1
  ALTER INDEX UQ_Ticket_TDSSN ON tbTicket REBUILD;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.73</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New tbDocTemplate.DocTemplateCode field
New tbTimedTicketRule.RuleCode field
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
add DocTemplateCode varchar(15) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbDocTemplate
set DocTemplateCode=X_Code
from (select 
        'DOC' +  Cast(ROW_NUMBER() over (order by DocTemplateId) as varchar(max)) as X_Code, 
        DocTemplateId as X_Id
      from 
      tbDocTemplate) X
where 
  DocTemplateId=X_Id
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
alter column DocTemplateCode varchar(15) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_DocTemplate_DocTemplateCode] ON tbDocTemplate (DocTemplateCode ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTimedTicketRule
add RuleCode varchar(15) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTimedTicketRule
set RuleCode=X_Code
from (select 
        'DOC' +  Cast(ROW_NUMBER() over (order by TimedTicketRuleId) as varchar(max)) as X_Code, 
        TimedTicketRuleId as X_Id
      from 
      tbTimedTicketRule) X
where 
  TimedTicketRuleId=X_Id
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTimedTicketRule
alter column RuleCode varchar(15) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_TimedTicketRule_RuleCode] ON [tbTimedTicketRule] ([RuleCode] )
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.72</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor PK_DocketDevice2OpArea</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbDocketDevice2OpArea 
DROP CONSTRAINT PK_DocketDevice2OpArea   
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDocketDevice2OpArea] add constraint PK_DocketDevice2OpArea Primary Key ([DocketDeviceId],[OpAreaId])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.71</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTransaction2DocketDevice</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTransaction2DocketDevice]
(
  [TransactionId] Uniqueidentifier NOT NULL,
  [DocketDeviceId] Uniqueidentifier NOT NULL,
  [SerialDateTime] Smalldatetime NOT NULL,
  [SerialFiscalDate] date NOT NULL,
  [ReceiptSpoolStatus] Smallint NOT NULL,
  [PrintDateTime] Smalldatetime NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransaction2DocketDevice] add constraint PK_Transaction2DocketDevice Primary Key ([TransactionId],[DocketDeviceId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Transaction2DocketDevice_FiscalDate] ON [tbTransaction2DocketDevice] ([SerialFiscalDate] ,[SerialDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Transaction2DocketDevice_DocketDeviceId] ON [tbTransaction2DocketDevice] ([DocketDeviceId] ,[SerialFiscalDate] ,[SerialDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransaction2DocketDevice] add constraint FK_Transaction2DocketDevice_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransaction2DocketDevice] add constraint FK_Transaction2DocketDevice_DocketDevice foreign key([DocketDeviceId]) references [tbDocketDevice] ([DocketDeviceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.70</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTransactionDocket</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTransactionDocket]
(
  [TransactionId] Uniqueidentifier NOT NULL,
  [DocketStatus] Char(1) NOT NULL,
  [OrderPaid] Bit NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionDocket] add constraint PK_TransactionDocket Primary Key ([TransactionId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTransactionDocket] add constraint FK_TransactionDocket_Transaction foreign key([TransactionId]) references [tbTransaction] ([TransactionId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.69</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Create tables tbDocketDevice and tbDocketDevice2OpArea</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbDocketDevice]
(
  [DocketDeviceId] Uniqueidentifier NOT NULL,
  [DocketDeviceType] Smallint NOT NULL,
  [DocketDeviceName] NVarchar(100) NOT NULL,
  [WorkstationId] Uniqueidentifier NOT NULL,
  [DocTemplateId] Uniqueidentifier NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDocketDevice] add constraint PK_DocketDevice Primary Key ([DocketDeviceId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_DocketDevice_WorkstationId] ON [tbDocketDevice] ([WorkstationId]);
Create Index [IX_DocketDevice_DocTemplateId] ON [tbDocketDevice] ([DocTemplateId]) where DocTemplateId is not null;


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDocketDevice] add constraint FK_DocketDevice_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDocketDevice] add constraint FK_DocketDevice_DocTemplate foreign key([DocTemplateId]) references [tbDocTemplate] ([DocTemplateId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbDocketDevice2OpArea]
(
  [DocketDeviceId] Uniqueidentifier NOT NULL,
  [OpAreaId] Uniqueidentifier NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDocketDevice2OpArea] add constraint PK_DocketDevice2OpArea Primary Key ([DocketDeviceId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_DocketDevice2OpArea] ON [tbDocketDevice2OpArea] ([OpAreaId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDocketDevice2OpArea] add constraint FK_DocketDevice2OpArea_OpAreaAccount foreign key([OpAreaId]) references [tbAccount] ([AccountId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.68</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New tbDocTemplate.ExtensionPackageId field</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
add ExtensionPackageId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_DocTemplate_ExtensionPackageId] ON [tbDocTemplate] ([ExtensionPackageId] ) 
where ExtensionPackageId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT></SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDocTemplate] add constraint FK_DocTemplate_ExtensionPackage foreign key([ExtensionPackageId]) references [tbExtensionPackage] ([ExtensionPackageId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX [tbDocTemplate].UQ_DocTemplate_SystemCode;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_DocTemplate_SystemCode] ON [tbDocTemplate] ([SystemCode] ,[ExtensionPackageId] ) 
WHERE SystemCode IS NOT NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.67</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbPerformanceDetail.SaleItemDetailId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPerformanceDetail
add SaleItemDetailId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Performance_SaleItemDetailId] ON [tbPerformanceDetail] ([SaleItemDetailId] ) 
where SaleItemDetailId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPerformanceDetail] add constraint FK_PerformanceDetail_SaleItemDetail foreign key([SaleItemDetailId]) references [tbSaleItemDetail] ([SaleItemDetailId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.66</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.CreateEventId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add CreateEventId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Performance_CreateEventId] ON [tbProduct] ([CreateEventId] ) 
where CreateEventId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_CreateEvent foreign key([CreateEventId]) references [tbEvent] ([EventId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.65</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>New tbLedgerRule.PluginId field</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbLedgerRule
add PluginId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbLedgerRule] add constraint FK_LedgerRule_Plugin foreign key([PluginId]) references [tbPlugin] ([PluginId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>sdangelo</ADDEDBY><SQLVERSION>2.64</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add field tbMessage.CategoryId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMessage
add CategoryId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMessage add constraint FK_Message_Category foreign key(CategoryId) references tbCategory (CategoryId) on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>declare @catCode int
set @catCode = (select 
  Max(case
    when IsNumeric(SUBSTRING(CategoryCode, 4, 100))=1 then Cast(SUBSTRING(CategoryCode, 4, 100) as int)
  else 0
  end) + 1
   
from tbCategory
where CategoryCode like 'CAT%')

insert into tbCategory (CategoryId ,EntityType, CategoryCode, CategoryName, ShowNameExt, InheritMask, InheritLocation)
     VALUES(NEWID(), 72, concat('CAT',@catCode), '@Lookup.EntityType.Message', 0, 0, 0)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Dario Balzano</ADDEDBY><SQLVERSION>2.63</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add field tbDocParam.Mandatory
add field tbDocTemplate.MaxDateRangeDays</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDocParam
add Mandatory bit null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbDocParam
set Mandatory = 0

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocParam
alter column Mandatory bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocTemplate 
add MaxDateRangeDays int null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Marco</ADDEDBY><SQLVERSION>2.62</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>resize HistoryFieldSubField in tbHistoryDetail from NVarChar(15) to NVarChar(30)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbHistoryDetail
drop constraint PK_HistoryDetail
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbHistoryDetail
alter column HistorySubField varchar(30) not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbHistoryDetail add constraint PK_HistoryDetail Primary Key ([EntityId],[LogDateTime],[PriorityOrder],[HistoryField],[HistorySubField])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.61</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add fields tbSale.VisitDateMin and Max
- Create index IX_Sale_VisitDateMin and Max</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSale
add
  VisitDateMin date null,  
  VisitDateMax date null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_VisitDateMin] ON [tbSale] ([VisitDateMin] ,[SaleDateTime] ) 
where VisitDateMin is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_VisitDateMax] ON [tbSale] ([VisitDateMax] ,[SaleDateTime] ) 
where VisitDateMax is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Sale_VisitDateMaxNotEncoded] ON [tbSale] ([VisitDateMax] ) 
where 
  VisitDateMax is not null and
  Paid=1 and
  Encoded=0

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.60</SQLVERSION><RMTRACKLINK>SIT-3961</RMTRACKLINK><REASON>Refactor tbTask - Step 2</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbTask
set TaskType = (case 
                  when TaskType&lt;100 then 200
      when TaskType&gt;100 and TaskType&lt;1000 then 400
      else 300
    end)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.59</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbTask</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table 
  tbTask
add 
  TaskStatus smallint null,  
  ClassAlias varchar(30) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbTask
set 
  TaskStatus = (case
                    when Enabled=0 then 2
        when Enabled=1 then 1
    end),
  ClassAlias = (case
                    when TaskType=2 then 'task-res-maintenance' 
        when TaskType=3 then 'task-data-purge' 
        when TaskType=5 then 'task-finance-reconcile' 
        when TaskType=6 then 'task-crypto-maintenance' 
        when TaskType=7 then 'task-installment-charge' 
        when TaskType=91 then 'task-siae-generate-report' 
        when TaskType=92 then 'task-siae-send-recap' 
        when TaskType=93 then 'task-siae-read-email' 
        when TaskType=101 then 'task-data-export' 
              when TaskType=1001 then 'task-cron-job' 
        else 'task-unknown' 
    end)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTask
alter column TaskStatus smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTask
alter column ClassAlias varchar(30) not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbTask
drop column Enabled
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Marco</ADDEDBY><SQLVERSION>2.58</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add #PRESALE product ID to tbProductFlag as Presale</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>insert into tbProductFlag (ProductId, ProductFlag)
select 
  PRD.ProductId,
  11
from 
  tbProduct PRD left join  
  tbProductFlag PF on  
    PF.ProductId=PRD.ProductId and    
    PF.ProductFlag=11
where 
  ProductCode = '#PRESALE' and  
  PF.ProductId is null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.57</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.PreparationMins</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add PreparationMins int null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.56</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Drop index UQ_ProductBOM_Material</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index UQ_ProductBOM_Material on tbProductBOM
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.55</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbPaymentDoc.DocData changed from image to NText</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentDoc
add DocText ntext null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPaymentDoc
set DocText = cast(cast(cast(DocData as varbinary(max)) as varchar (max)) as ntext)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentDoc
alter column DocText ntext not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentDoc
drop column DocData
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbPaymentDoc.DocText', 'DocData', 'COLUMN';
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.54</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbApiLog.AnswerCommonStatus</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbApiLog
add AnswerCommonStatus smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbApiLog
set AnswerCommonStatus=
  (case 
    when AnswerHttpStatus&lt;&gt;200 then 60 /*fatal*/ 
    when AnswerStatusCode&lt;&gt;200 then 40 /*error*/
    else 20 /*active*/ 
  end)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbApiLog
alter column AnswerCommonStatus smallint not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ApiLog_AnswerCommonStatus] ON [tbApiLog] ([AnswerCommonStatus] ,[EndDateTime] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>2.53</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- change field type tbPaymentCurrency.ExchangeRate to Float
- change field type tbPaymentWallet.ExchangeRate to Float</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentCurrency
alter column ExchangeRate float not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPaymentCurrency
set ExchangeRate = ExchangeRate/10000
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentWallet
alter column ExchangeRate float not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbPaymentWallet
set ExchangeRate = ExchangeRate/10000
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.52</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Move licensee's mask configuration into rights</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>declare @value varchar(max);

select @value=Stuff((
  select ',' + Cast(MaskId as varchar(max)) 
  from 
    tbCategory C inner join
    tbCategory2Mask C2M on C2M.CategoryId=C.CategoryId
  where
    C.EntityType=17 and
    C.ParentCategoryId is null
  order by 
    C2M.PriorityOrder
  FOR XML PATH('')
), 1, 1, '');

if (@value is not null)
  insert into tbRight (
  RightId,
  EntityType,
  EntityId,
  RightType,
  RightValue
)
select
  newid(),  
  17,  
  (select AccountId from tbLicense where MainLicense=1),  
  411,  
  @value;
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.51</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Updates right "ledger - settings" from "bool" to "levels"</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRight
set RightValue=(case when Cast(RightValue as varchar(max))='true' then '5'/*delete*/ else '1'/*none*/ end)
where RightType=182
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.50</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProduct.PresaleProductId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
add PresaleProductId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Product_PresaleProductId] ON [tbProduct] ([PresaleProductId] ) 
where PresaleProductId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProduct] add constraint FK_Product_PresaleProductId foreign key([PresaleProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Marco</ADDEDBY><SQLVERSION>2.49</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>0 drop index IX_SiaeLog_SaleItemDetailId on tbSiaeLog
1 create index IX_SiaeLog_SaleItemDetailId adding PerformanceId e Posto</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop index IX_SiaeLog_SaleItemDetailId on tbSiaeLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SiaeLog_SaleItemDetailId] ON [tbSiaeLog] ([SaleItemDetailId] ,[PerformanceId] ,[Posto] ) 
where SaleItemDetailId is not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.48</SQLVERSION><RMTRACKLINK>SIT-3729</RMTRACKLINK><REASON>Resize tbPaymentData.ParamName</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPaymentData
alter column ParamName varchar(30) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.47</SQLVERSION><RMTRACKLINK>SIT-3729</RMTRACKLINK><REASON>[0..2] New tbPaymentData
[3..10] Refactor tbAuth
[11..13] Refactor tbPaymentCard</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbPaymentData]
(
  [PaymentId] Uniqueidentifier NOT NULL,
  [ParamName] Varchar(15) NOT NULL,
  [ParamValue] Nvarchar(100) NOT NULL,
  [ParamValueLong] Ntext NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentData] add constraint PK_PaymentData Primary Key ([PaymentId],[ParamName])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentData] add constraint FK_PaymentData_Payment foreign key([PaymentId]) references [tbPayment] ([PaymentId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAuth
drop constraint FK_Auth_License
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX tbAuth.IX_Auth_LicenseId;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAuth
drop column LicenseId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAuth
drop column StationSerial
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAuth
drop column CustomData
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbAuth
add PaymentId Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbAuth] add constraint FK_Auth_PaymentCard foreign key([PaymentId]) references [tbPaymentCard] ([PaymentId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbAuth
set PaymentId = (
  select 
    PaymentId 
  from 
    tbPaymentCard 
  where 
    AuthId = tbAuth.AuthId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentCard
drop constraint FK_PaymentCard_Auth
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>DROP INDEX tbPaymentCard.IX_PaymentCard_AuthId;
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentCard
drop column AuthId
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.46</SQLVERSION><RMTRACKLINK>SIT-3729</RMTRACKLINK><REASON>Refactor tbPaymentToken</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbPaymentCard                         
DROP CONSTRAINT FK_PaymentCard_PaymentToken;

drop table tbPaymentToken
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPaymentToken]
(
  [PaymentTokenId] Uniqueidentifier NOT NULL,
  [PaymentTokenCode] Varchar(32) NOT NULL,
  [PaymentTokenType] Smallint NOT NULL,
  [CreateDate] Date NOT NULL,
  [ExpirationDate] Date NULL,
  [AccountId] Uniqueidentifier NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentToken] add constraint PK_PaymentToken Primary Key ([PaymentTokenId]) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_PaymentToken_Code] ON [tbPaymentToken] ([PaymentTokenCode] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentToken_AccountId] ON [tbPaymentToken] ([AccountId] ,[CreateDate] ) 
where AccountId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentToken_ExpirationDate] ON [tbPaymentToken] ([ExpirationDate] ) 
where ExpirationDate is not null 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentToken_CreateDate] ON [tbPaymentToken] ([CreateDate] )
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentToken] add constraint FK_PaymentToken_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentCard] add constraint FK_PaymentCard_PaymentToken foreign key([PaymentTokenId]) references [tbPaymentToken] ([PaymentTokenId])  on update no action on delete no action
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.45</SQLVERSION><RMTRACKLINK>SIT-3729</RMTRACKLINK><REASON>[0..0] Drop tbPaymentMethodCardType
[1..8] Refactor tbPaymentToken
[9..11] New tbPaymentcard.PaymentTokenId field</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbPaymentMethodCardType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbPaymentToken
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPaymentToken]
(
  [PaymentTokenId] Uniqueidentifier NOT NULL,
  [PaymentTokenCode] Varchar(32) NOT NULL,
  [PaymentTokenType] Smallint NOT NULL,
  [CreateDate] Binary(3) NOT NULL,
  [ExpirationDate] Binary(3) NULL,
  [AccountId] Uniqueidentifier NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentToken] add constraint PK_PaymentToken Primary Key ([PaymentTokenId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_PaymentToken_Code] ON [tbPaymentToken] ([PaymentTokenCode] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentToken_AccountId] ON [tbPaymentToken] ([AccountId] ,[CreateDate] ) 
where AccountId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentToken_ExpirationDate] ON [tbPaymentToken] ([ExpirationDate] ) 
where ExpirationDate is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentToken_CreateDate] ON [tbPaymentToken] ([CreateDate] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentToken] add constraint FK_PaymentToken_Account foreign key([AccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPaymentCard
add [PaymentTokenId] Uniqueidentifier NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentCard_PaymentTokenId] ON [tbPaymentCard] ([PaymentTokenId] ) 
where PaymentTokenId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentCard] add constraint FK_PaymentCard_PaymentToken foreign key([PaymentTokenId]) references [tbPaymentToken] ([PaymentTokenId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>2.44</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbPortfolioSlotLog
- SubEntityType
- SubEntityId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPortfolioSlotLog
add
  SubEntityType Smallint NULL,
  SubEntityId Uniqueidentifier NULL

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop index IX_PortfolioSlotLog_EntityId on tbPortfolioSlotLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioSlotLog_EntityId] ON [tbPortfolioSlotLog] ([EntityId] ,[SubEntityId] ,[MembershipPointId] ,[PortfolioSlotType] ) 
where EntityId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PortfolioSlotLog_SubEntityId] ON [tbPortfolioSlotLog] ([SubEntityId] ,[MembershipPointId] ,[PortfolioSlotType] ) 
where SubEntityId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.43</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add fields to tbDocTemplate
- DataSourceSelection
- DataSourceId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
add
  DataSourceSelection bit null,  
  DataSourceId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbDocTemplate
set DataSourceSelection=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbDocTemplate
alter column DataSourceSelection bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_DocTemplate_DataSourceId] ON [tbDocTemplate] ([DataSourceId] ) 
where DataSourceId is not null


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbDocTemplate] add constraint FK_DocTemplate_DataSource foreign key([DataSourceId]) references [tbDataSource] ([DataSourceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>2.42</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbPromoRule.PromoMembershipPointTarget
Create table tbPromoActionMembershipPoint</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPromoRule
add PromoMembershipPointTarget Smallint NULL
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPromoActionMembershipPoint]
(
  [ProductId] Uniqueidentifier NOT NULL,
  [MembershipPointId] Uniqueidentifier NOT NULL,
  [Points] Money NOT NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbPromoActionMembershipPoint add constraint PK_PromoActionMembershipPoint Primary Key ([ProductId],[MembershipPointId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PromoActionMembershipPoint_MembershiPointId] ON [tbPromoActionMembershipPoint] ([MembershipPointId] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPromoActionMembershipPoint] add  foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPromoActionMembershipPoint] add  foreign key([MembershipPointId]) references [tbMembershipPoint] ([MembershipPointId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.41</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename tbApiLog.RequestQueryString into RequestURL</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>sp_rename 'tbApiLog.RequestQueryString', 'RequestURL';  

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>2.40</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbSaleItemDiscountPoint</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbSaleItemDiscountPoint]
(
  [SaleItemId] Uniqueidentifier NOT NULL,
  [PromoProductId] Uniqueidentifier NOT NULL,
  [MembershipPointId] Uniqueidentifier NOT NULL,
  [PortfolioId] Uniqueidentifier NOT NULL,
  [DiscountAmount] Money NOT NULL,
  [DiscountPoints] Money NOT NULL
 ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbSaleItemDiscountPoint add constraint PK_SaleItemDiscountPoint Primary Key ([SaleItemId],[PromoProductId],[MembershipPointId],[PortfolioId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemDiscountPoint_PromoProductId] ON [tbSaleItemDiscountPoint] ([PromoProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemDiscountPoint_MembershipPointId] ON [tbSaleItemDiscountPoint] ([MembershipPointId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_SaleItemDiscountPoint_PortfolioId] ON [tbSaleItemDiscountPoint] ([PortfolioId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemDiscountPoint] add constraint FK_SaleItemDiscountPoint_SaleItem foreign key([SaleItemId]) references [tbSaleItem] ([SaleItemId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemDiscountPoint] add constraint FK_SaleItemDiscountPoint_Product foreign key([PromoProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemDiscountPoint] add constraint FK_SaleItemDiscountPoint_MembershipPoint foreign key([MembershipPointId]) references [tbMembershipPoint] ([MembershipPointId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbSaleItemDiscountPoint] add constraint FK_SaleItemDiscountPoint_Portfolio foreign key([PortfolioId]) references [tbTicketMediaMatch] ([TicketMediaMatchId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.39</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbApiLog</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>
Create table [tbApiLog]
(
  [ApiLogId] Uniqueidentifier NOT NULL,
  [StartDateTime] Datetime NOT NULL,
  [EndDateTime] Datetime NOT NULL,
  [RequestCode] Varchar(50) NOT NULL,
  [RequestCommand] Varchar(50) NULL,
  [WorkstationId] Uniqueidentifier NULL,
  [RequestHttpMethod] Varchar(10) NULL,
  [RequestQueryString] Nvarchar(255) NULL,
  [RequestBody] Ntext NULL,
  [RequestHeader] Ntext NULL,
  [AnswerBody] Ntext NULL,
  [AnswerHeader] Ntext NULL,
  [AnswerHttpStatus] Smallint NULL,
  [AnswerStatusCode] Smallint NULL,
  [EntityType] Smallint NULL,
  [EntityId] Uniqueidentifier NULL,
  [ServerId] Smallint NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbApiLog add constraint PK_ApiLog Primary Key ([ApiLogId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ApiLog_EndDateTime] ON [tbApiLog] ([EndDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ApiLog_WorkstationId] ON [tbApiLog] ([WorkstationId] ,[EndDateTime] ) 
where WorkstationId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ApiLog_RequestCode] ON [tbApiLog] ([RequestCode] ,[EndDateTime] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbApiLog] add constraint FK_ApiLog_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.38</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbUpload.MsgAnswer</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbUpload
add MsgAnswer ntext null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.37</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add column tbDataSource.LogTableURI</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDataSource
add LogTableURI varchar(200) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.36</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add field tbDataSource.LogTableName
- Add field tbLog.LogText</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbDataSource
add LogTableName varchar(50) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbLog
add LogText ntext null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.35</SQLVERSION><RMTRACKLINK>SIT-3702</RMTRACKLINK><REASON>Increase tbAccount.DisplayName from 50 to 100</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbAccount
alter column DisplayName Nvarchar(100) not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.34</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create tables:
- tbNotify
- tbNotifyUser</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbNotify]
(
  [NotifyId] Uniqueidentifier NOT NULL,
  [EntityType] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbNotify add constraint PK_Notify Primary Key ([NotifyId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbNotifyUser]
(
  [NotifyId] Uniqueidentifier NOT NULL,
  [EntityId] Uniqueidentifier NOT NULL,
  [EntityType] Smallint NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbNotifyUser add constraint PK_NotifyUser Primary Key ([NotifyId],[EntityId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_NotifyUser_EntityId] ON [tbNotifyUser] ([EntityId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbNotifyUser] add constraint FK_NotifyUser_Notify foreign key([NotifyId]) references [tbNotify] ([NotifyId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.33</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create field tbTaskDataExport.DataSourceId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbTaskDataExport
add DataSourceId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TaskDataExport_DataSourceId] ON [tbTaskDataExport] ([DataSourceId] ) 
where DataSourceId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTaskDataExport] add constraint FK_TaskDataExport_DataSource foreign key([DataSourceId]) references [tbDataSource] ([DataSourceId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.32</SQLVERSION><RMTRACKLINK>SIT-3322</RMTRACKLINK><REASON>New tbPluginPaymentMethod.MaxChangeAmount</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPluginPaymentMethod
add MaxChangeAmount money null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.31</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbDataSource</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbDataSource]
(
  [DataSourceId] Uniqueidentifier NOT NULL,
  [DataSourceCode] Varchar(15) NOT NULL,
  [DataSourceName] Nvarchar(100) NOT NULL,
  [DataSourceType] Smallint NOT NULL,
  [DBHostName] Nvarchar(100) NOT NULL,
  [DBDatabaseName] Nvarchar(100) NOT NULL,
  [DBUserName] Nvarchar(100) NOT NULL,
  [DBPassword] Nvarchar(100) NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbDataSource add constraint PK_DataSource Primary Key ([DataSourceId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_DataSource_Code] ON [tbDataSource] ([DataSourceCode] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Marco</ADDEDBY><SQLVERSION>2.30</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>create new indexes on tbHistoryLog 

0: IX_HistoryLog_DateTime: LogDateTime
1: IX_HistoryLog_EntityType: EntityType, LogDateTime</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create Index [IX_HistoryLog_DateTime] ON [tbHistoryLog] ([LogDateTime] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_HistoryLog_EntityType] ON [tbHistoryLog] ([EntityType] ,[LogDateTime] ) 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>2.29</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>set default on tbProduct.BiometricEnrollment</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update 
  tbProduct
set 
  BiometricEnrollment = 2
where
  BiometricEnrollment is null and
  ProductType = 1
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.28</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbFont</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbFont]
(
  [FontId] Uniqueidentifier NOT NULL,
  [PriorityOrder] smallint NOT NULL,
  [FontName] Nvarchar(100) NOT NULL,
  [FileName] Nvarchar(100) NOT NULL,
  [FontStatus] Smallint NOT NULL,
  [FontEncoding] Smallint NOT NULL,
  [FontData] Image NOT NULL,
  [LastUpdate] Datetime NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbFont add constraint PK_Font Primary Key ([FontId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Font_Name] ON [tbFont] ([FontName] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Font_PriorityOrder] ON [tbFont] ([PriorityOrder] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>2.27</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON></REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProduct
alter column [BiometricCheckLevel] Smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update 
  tbProduct
set 
  BiometricCheckLevel = null
where
  BiometricCheckLevel = 0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProduct
add BiometricEnrollment Smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProduct 
set BiometricEnrollment = 1
where 
  ProductId in (select ProductId from tbProductFlag where ProductFlag=11)

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>delete tbProductFlag
where ProductFlag=11
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.26</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add tbPerformance.CalendarId</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPerformance
add CalendarId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Performance_CalendarId] ON [tbPerformance] ([CalendarId] ,[DBDateTimeFrom] ) 
where CalendarId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPerformance] add constraint FK_Performance_Calendar foreign key([CalendarId]) references [tbCalendar] ([CalendarId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.25</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbPerformance
- Add field RateCodeId
- Remove fields DeltaPriceType and DeltaPriceValue
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbPerformance
add RateCodeId uniqueidentifier null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
drop column DeltaPriceType
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformance
drop column DeltaPriceValue
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_Performance_RateCodeId] ON [tbPerformance] ([RateCodeId] ,[DBDateTimeFrom] ) 
where RateCodeId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPerformance] add constraint FK_Performance_RateCode foreign key([RateCodeId]) references [tbRateCode] ([RateCodeId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.24</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON></REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbSeatEnvelope
set SeatEnvelopeColor=SUBSTRING(SeatEnvelopeColor, 2, 6)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbSeatEnvelope
alter column SeatEnvelopeColor varchar(6) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.23</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbRateCode.RateCodeColor from varchar(7) to varchar(6)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbRateCode
set RateCodeColor=SUBSTRING(RateCodeColor, 2, 6)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbRateCode
alter column RateCodeColor varchar(6) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.22</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>tbPerformanceType.PerformanceTypeColor from varchar(7) to varchar(6)</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbPerformanceType
set PerformanceTypeColor=SUBSTRING(PerformanceTypeColor, 2, 6)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbPerformanceType
alter column PerformanceTypeColor varchar(6) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Marco</ADDEDBY><SQLVERSION>2.21</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>refactoring of tbHistoryLog and tbHistoryDetail, logs are now grouped within a minute

0 copy all records from tbHistoryLog to tmpHistoryLog adding the new field PriorityOrder 
1 drop both tbHistoryLog and tbHistoryDetail, copy from tmpHistoryLog to a new tbHistoryLog, drop tmpHistoryLog
2 set the not null fields in tbHistoryLog
3 add constraints to tbHistoryLog
4 create indexes to tbHistoryLog
5 create new tbHistoryDetail with field PriorityOrder
6 add constraints to tbHistoryDetail
</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>select 
  EntityId,
  Cast(LogDateTime as smalldatetime) as LogDateTime,
  Cast(ROW_NUMBER()OVER(Partition By EntityId, Cast(LogDateTime as smalldatetime) Order By Cast(LogDateTime as smalldatetime)) as smallint) As PriorityOrder,
  Min(EntityType) as EntityType,
  UserAccountId,
  Min(WorkstationId) as WorkstationId,
  Min(HistoryLogType) as HistoryLogType
into tmpHistoryLog
from tbHistoryLog
group by
  EntityId,
  Cast(LogDateTime as smalldatetime),
  UserAccountId
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>drop table tbHistoryDetail
drop table tbHistoryLog

Create table [tbHistoryLog]
(
  [EntityId] Uniqueidentifier NOT NULL,
  [LogDateTime] Datetime NOT NULL,
  [PriorityOrder] Smallint NOT NULL,
  [EntityType] Smallint NOT NULL,
  [UserAccountId] Uniqueidentifier NULL,
  [WorkstationId] Uniqueidentifier NOT NULL,
  [HistoryLogType] Tinyint NOT NULL
) 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbHistoryLog 
add constraint PK_HistoryLog Primary Key ([EntityId],[LogDateTime],[PriorityOrder])

alter table [tbHistoryLog] add constraint FK_HistoryLog_Workstation foreign key([WorkstationId]) references [tbWorkstation] ([WorkstationId])  on update no action on delete no action 
alter table [tbHistoryLog] add constraint FK_HistoryLog_UserAccount  foreign key([UserAccountId]) references [tbAccount] ([AccountId])  on update no action on delete no action 


</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_HistoryLog_EntityId_LogType] ON [tbHistoryLog] ([EntityId] ,[HistoryLogType] ) 
where HistoryLogType in (1,2) /*Create/LastUpdate*/

Create Index [IX_HistoryLog_WorkstationId] ON [tbHistoryLog] ([WorkstationId] ,[LogDateTime] ) 

Create Index [IX_HistoryLog_UserAccountId] ON [tbHistoryLog] ([UserAccountId] ,[LogDateTime] ) 
where UserAccountId is not null

Create Index [IX_HistoryLog_LogType_DateTime] ON [tbHistoryLog] ([HistoryLogType] ,[LogDateTime] ) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>insert into tbHistoryLog (
  EntityId,
  LogDateTime,
  PriorityOrder,
  EntityType,
  UserAccountId,
  WorkstationId,
  HistoryLogType
)
select
  EntityId,
  LogDateTime,
  PriorityOrder,
  EntityType,
  UserAccountId,
  WorkstationId,
  HistoryLogType
from tmpHistoryLog

drop table tmpHistoryLog
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbHistoryDetail]
(
  [EntityId] Uniqueidentifier NOT NULL,
  [LogDateTime] SmallDatetime NOT NULL,
  [PriorityOrder] smallint NOT NULL,
  [HistoryField] smallint NOT NULL,
  [HistorySubField] Nvarchar(15) NOT NULL,
  [HistorySubFieldType] smallint NULL,
  [OldValue] Nvarchar(100) NULL,
  [NewValue] Nvarchar(100) NULL,
  [OldValueLong] Ntext NULL,
  [NewValueLong] Ntext NULL
  
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE [tbHistoryDetail] 
ADD CONSTRAINT PK_HistoryDetail Primary Key ([EntityId],[LogDateTime],[HistoryField],[HistorySubField],[PriorityOrder])
alter table [tbHistoryDetail] add constraint FK_HistoryDetail_HistoryLog foreign key([EntityId],[LogDateTime],[PriorityOrder]) references [tbHistoryLog] ([EntityId],[LogDateTime],[PriorityOrder])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.20</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbCatalog.ButtonDisplayType</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCatalog
add ButtonDisplayType tinyint null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.19</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>- Add field tbCatalog.ForegroundColor
- Add tbEvent.ForegroundColor
- Add tbEvent.BackgroundColor
- Add tbProductFamily.ForegroundColor
- Add tbProductFamily.BackgroundColor</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbCatalog
add ForegroundColor varchar(6) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbEvent
add
  BackgroundColor varchar(6) null,
  ForegroundColor varchar(6) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductFamily
add
  BackgroundColor varchar(6) null,
  ForegroundColor varchar(6) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.18</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbProductPriceMembershipPoint primary key</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>ALTER TABLE tbProductPriceMembershipPoint
DROP CONSTRAINT PK_ProductPriceMembershipPoint
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbProductPriceMembershipPoint add constraint PK_ProductPriceMembershipPoint Primary Key ([ProductId],[PriorityOrder],[MembershipPointId])
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.17</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbTicketMembershipPoint</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbTicketMembershipPoint]
(
  [TicketId] Uniqueidentifier NOT NULL,
  [MembershipPointId] Uniqueidentifier NOT NULL,
  [PriceValue] Money NOT NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbTicketMembershipPoint add constraint PK_TicketMembershipPoint Primary Key ([TicketId],[MembershipPointId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_TicketMembershipPoint_MembershipPointId] ON [tbTicketMembershipPoint] ([MembershipPointId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketMembershipPoint] add constraint FK_TicketMembershipPoint_Ticket foreign key([TicketId]) references [tbTicket] ([TicketId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbTicketMembershipPoint] add constraint FK_TicketMembershipPoint_MembershipPoint foreign key([MembershipPointId]) references [tbMembershipPoint] ([MembershipPointId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.16</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Create table tbProductPriceMembershipPoint</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create table [tbProductPriceMembershipPoint]
(
  [ProductId] Uniqueidentifier NOT NULL,
  [PriorityOrder] Smallint NOT NULL,
  [MembershipPointId] Uniqueidentifier NOT NULL,
  [PriceValue] Money NOT NULL
)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbProductPriceMembershipPoint add constraint PK_ProductPriceMembershipPoint Primary Key ([ProductId],[PriorityOrder])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductPriceMembershipPoint_MembershipPointId] ON [tbProductPriceMembershipPoint] ([MembershipPointId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductPriceMembershipPoint] add constraint FK_ProductPriceMembershipPoint_ProductPriceDate foreign key([ProductId],[PriorityOrder]) references [tbProductPriceDate] ([ProductId],[PriorityOrder])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductPriceMembershipPoint] add constraint FK_ProductPriceMembershipPoint_MembershipPoint foreign key([MembershipPointId]) references [tbMembershipPoint] ([MembershipPointId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.15</SQLVERSION><RMTRACKLINK>SIT-3431</RMTRACKLINK><REASON>New tbSaleTab fields</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>delete from tbSaleTab where SaleId is null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table 
  tbSaleTab
add 
  SaleDateTime Smalldatetime Null,
  Owner varchar(100) null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbSaleTab
set SaleDateTime=(select SaleDateTime from tbSale where SaleId=tbSaleTab.SaleId)
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table 
  tbSaleTab
alter column 
  SaleDateTime Smalldatetime not NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Marco</ADDEDBY><SQLVERSION>2.14</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>drop tbProduct2InstallmentPlan and replace it with tbPaymentProfile2InstallmentPlan</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Drop table tbProduct2InstallmentPlan
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbPaymentProfile2InstallmentPlan]
(
  [PaymentProfileId] Uniqueidentifier NOT NULL,
  [InstallmentPlanId] Uniqueidentifier NOT NULL,
  [DownPaymentType] Smallint NULL,
  [DownPaymentValue] Money NULL,
  [ProductFeeType] Smallint NULL,
  [ProductFeeValue] Money NULL,
  [CalendarId] Uniqueidentifier NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table tbPaymentProfile2InstallmentPlan add constraint PK_PaymentProfile2InstallmentPlan Primary Key ([PaymentProfileId],[InstallmentPlanId])
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_PaymentProfile2InstallmentPlan_InstallmentPlanId] ON [tbPaymentProfile2InstallmentPlan] ([InstallmentPlanId] ) 
Create Index [IX_PraymentProfile2InstallmentPlan_CalendarId] ON [tbPaymentProfile2InstallmentPlan] ([CalendarId] ) where CalendarId is not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbPaymentProfile2InstallmentPlan] add  constraint FK_PaymentProfile2Installment_PaymentProfile foreign key([PaymentProfileId]) references [tbPaymentProfile] ([PaymentProfileId])  on update no action on delete no action 
Alter table [tbPaymentProfile2InstallmentPlan] add  constraint FK_PaymentProfile2InstallmentPlan_InstallmentPlan foreign key([InstallmentPlanId]) references [tbInstallmentPlan] ([InstallmentPlanId])  on update no action on delete no action 
Alter table [tbPaymentProfile2InstallmentPlan] add  constraint FK_PraymentProfilet2InstallmentPlan_Calendar foreign key([CalendarId]) references [tbCalendar] ([CalendarId])  on update no action on delete no action 
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Marco</ADDEDBY><SQLVERSION>2.13</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add tbHistoryDetal.HistorySubField type

set HistorySubField values
0 -&gt; none
1 -&gt; language
according to HistorySubField data

convert HistorySubField  value from  #default to #DEFAULT</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table 
  tbHistoryDetail
add
  HistorySubFieldType smallint null  

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update  
  tbHistoryDetail
set
  HistorySubFieldType = 0

update 
  tbHistoryDetail
set 
  HistorySubField = Upper(HistorySubField)  
where 
  HistorySubField = '#default'
 
update  
  tbHistoryDetail
set
  HistorySubFieldType = 1
 where
  HistorySubField != '#DEFAULT'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.12</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>CReade index UQ_LedgerRuleTemplate_Code</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_LedgerRuleTemplate_Code] ON [tbLedgerRuleTemplate] ([LedgerRuleTemplateCode] ) 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.11</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbProductBOM</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbProductBOM
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>
Create table [tbProductBOM]
(
  [ProductBOMId] Uniqueidentifier NOT NULL,
  [ProductId] Uniqueidentifier NOT NULL,
  [PriorityOrder] Smallint NOT NULL,
  [ParentBOMId] Uniqueidentifier NULL,
  [MaterialProductId] Uniqueidentifier NULL,
  [MeasureId] Uniqueidentifier NULL,
  [Quantity] Money NOT NULL,
  [Optional] Bit NOT NULL,
  [Included] Bit NOT NULL,
  [GroupItem] Bit NOT NULL,
  [GroupName] Nvarchar(50) NULL
) 
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbProductBOM
ADD CONSTRAINT PK_ProductBOM PRIMARY KEY ([ProductBOMId]);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductBOM_MaterialProductId] ON [tbProductBOM] ([MaterialProductId] ) 
where MaterialProductId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductBOM_MeasureId] ON [tbProductBOM] ([MeasureId] ) 
where MeasureId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductBOM_ProductId] ON [tbProductBOM] ([ProductId] ,[PriorityOrder] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductBOM_ParentBOMId] ON [tbProductBOM] ([ParentBOMId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ProductBOM_Material] ON [tbProductBOM] ([ProductId] ,[ParentBOMId] ,[MaterialProductId] ) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductBOM] add constraint FK_ProductBOM_Measure foreign key([MeasureId]) references [tbMeasure] ([MeasureId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductBOM] add constraint FK_ProductBOM_MaterialProduct foreign key([MaterialProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductBOM] add constraint FK_ProductBOM_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductBOM] add constraint FK_ProductBOM_ParentBOM foreign key([ParentBOMId]) references [tbProductBOM] ([ProductBOMId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.10</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Refactor tbProductBOM</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>drop table tbProductBOM
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create table [tbProductBOM]
(
  [ProductId] Uniqueidentifier NOT NULL,
  [PriorityOrder] Smallint NOT NULL,
  [MaterialProductId] Uniqueidentifier NULL,
  [MeasureId] Uniqueidentifier NULL,
  [Quantity] Money NOT NULL,
  [Optional] Bit NOT NULL,
  [Included] Bit NOT NULL,
  [GroupItem] Bit NOT NULL,
  [GroupName] Nvarchar(50) NULL,
  [GroupPriorityOrder] Smallint NULL
) 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>ALTER TABLE tbProductBOM
ADD CONSTRAINT PK_ProductBOM PRIMARY KEY ([ProductId],[PriorityOrder]);
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductBOM_MaterialProductId] ON [tbProductBOM] ([MaterialProductId] ) 
where MaterialProductId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create Index [IX_ProductBOM_MeasureId] ON [tbProductBOM] ([MeasureId] ) 
where MeasureId is not null

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductBOM] add constraint FK_ProductBOM_Measure foreign key([MeasureId]) references [tbMeasure] ([MeasureId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductBOM] add constraint FK_ProductBOM_Product foreign key([ProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Alter table [tbProductBOM] add constraint FK_ProductBOM_MaterialProduct foreign key([MaterialProductId]) references [tbProduct] ([ProductId])  on update no action on delete no action 

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>Create UNIQUE Index [UQ_ProductBOM_MaterialProductId] ON [tbProductBOM] ([ProductId] ,[GroupPriorityOrder] ,[MaterialProductId] ) 
where MaterialProductId is not null

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.9</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProductBOM.Group</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductBOM
add GroupItem bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductBOM
set GroupItem=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductBOM
alter column GroupItem bit not null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>sp_rename 'tbProductBOM.ItemGroup', 'GroupPriorityOrder', 'COLUMN'
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.8</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProductBOM.GroupName</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductBOM
add GroupName nvarchar(50) null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.7</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Rename tbProductBOM     DefaultChecked -&gt; Included</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>sp_rename 'tbProductBOM.DefaultChecked', 'Included', 'COLUMN';  
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.6</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field tbProductBOM.DefaultChecked</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductBOM
add DefaultChecked bit null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductBOM
set DefaultChecked=1

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductBOM
alter column DefaultChecked bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Saverio</ADDEDBY><SQLVERSION>2.5</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add tbSaleItemDiscount.VariableDiscountValue</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbSaleItemDiscount
add [VariableDiscountValue] Money NULL
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Marco Cireni</ADDEDBY><SQLVERSION>2.4</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>add tbMembershipPoint.ValidForPayment</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbMembershipPoint
add
  ValidForPayment bit null  

</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbMembershipPoint
set ValidForPayment=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbMembershipPoint
alter column ValidForPayment bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.3</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Add field to tbProductBOM
- Optional
- ItemGroup</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>alter table tbProductBOM
add
  Optional bit null,  
  ItemGroup smallint null
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbProductBOM
set Optional=0
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>alter table tbProductBOM
alter column Optional bit not null
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Marco Cireni</ADDEDBY><SQLVERSION>2.2</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON>Replace LkSNLangField  with LkSNHistoryField in tbConfigLang</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbConfigLang
set LangField = LangField + 10000
</SCRIPT></SQLSCRIPT><SQLSCRIPT><SCRIPT>update tbConfigLang
set LangField =
(case
  when (LangField = 10001) then 102 
  when (LangField = 10002) then 103 
  when (LangField = 10021) then 302 
  when (LangField = 10022) then 303 
  when (LangField = 10041) then 902 
  when (LangField = 10042) then 903 
  when (LangField = 10043) then 901 
  when (LangField = 10061) then 1001
  when (LangField = 10062) then 1002
  when (LangField = 10081) then 1101
  when (LangField = 10082) then 1102
  when (LangField = 10101) then 1201
  when (LangField = 10102) then 1202
  when (LangField = 10121) then 1203
  when (LangField = 10141) then 1301
  when (LangField = 10161) then 1401
end)    

</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Andrea</ADDEDBY><SQLVERSION>2.1</SQLVERSION><RMTRACKLINK>SIT-3489</RMTRACKLINK><REASON>Revert payment, hold, purge amount sign from portfolio slot logs</REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update 
  tbPortfolioSlotLog
set 
  LogAmount=-LogAmount
where 
  PortfolioSlotLogType in (1, 2, 6)
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE><SQLUPDATE><ADDEDBY>Ugo</ADDEDBY><SQLVERSION>2.0</SQLVERSION><RMTRACKLINK></RMTRACKLINK><REASON></REASON><TABLENAMES></TABLENAMES><SQLSCRIPTLIST><SQLSCRIPT><SCRIPT>update tbDBInfo
set ParamValue=ParamValue
where ParamName=''
</SCRIPT></SQLSCRIPT></SQLSCRIPTLIST></SQLUPDATE></SQLUPDATELIST><LATESTDBVERSION>2.300</LATESTDBVERSION></ROOT>