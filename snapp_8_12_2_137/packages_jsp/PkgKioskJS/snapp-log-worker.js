/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../../../common-script/snapp-log-worker.js":
/*!**************************************************!*\
  !*** ../../../common-script/snapp-log-worker.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LOG_WORKER_MESSAGE_TYPE: () => (/* binding */ LOG_WORKER_MESSAGE_TYPE),\n/* harmony export */   LogWorkerMessage: () => (/* binding */ LogWorkerMessage)\n/* harmony export */ });\n/* harmony import */ var _common_script_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @common-script/utils */ \"../../../common-script/utils.js\");\n/* harmony import */ var _timed_task__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./timed-task */ \"../../../common-script/timed-task.js\");\n\r\n\r\n\r\nlet oldLogRecoveryTask = new _timed_task__WEBPACK_IMPORTED_MODULE_1__.TimedTask(15000, () => recoveryOldLogs());\r\n\r\nconst requestQueue = [];\r\nconst logFileMaxSize = 50 * 1024 //Max size 50 kB\r\nlet processing = false;\r\nlet currentFileLog = null; \r\nlet logDirectoryHandle = null;\r\nlet snappAPIParams = null;\r\nconst uploadQueue = [];\r\n\r\nconst LOGSTART_LABEL = '{\\\"Logs\\\": ['\r\nconst LOGEND_LABEL = ']}'\r\n\r\n\r\nself.onmessage = async (e) => {\r\n\tif (navigator.storage && navigator.storage.estimate) {\r\n\t\t //Use this queue if you experiment some writing issues on file.\r\n\t\trequestQueue.push(e.data);\r\n\t\tif (!processing) {\r\n\t\t\tprocessing = true;\r\n\t\t\ttry {\r\n\t\t\t\tawait processQueue();\t\t\t\t\r\n\t\t\t} \r\n\t\t\tfinally {\r\n\t\t\t\tprocessing = false;\r\n\t\t\t}\r\n\t\t}\r\n\t} \r\n\telse {\r\n\t\tconsole.error('Local storage is full')\r\n\t}\r\n};\r\n\r\n\r\nasync function processQueue() {\r\n\twhile (requestQueue.length > 0) {\r\n\t\tconst request = requestQueue.shift();\r\n\t\tawait handleRequest(request);\r\n\t}\r\n}\r\n\r\nfunction createLogFileName(sequence) {\r\n\tlet currentDate = new Date();\r\n\tlet currentYear = currentDate.getFullYear();\r\n\tlet currentMonth = currentDate.getMonth() + 1;\r\n\tlet currentDay = currentDate.getDate();\r\n\tlet currentHour = currentDate.getHours();\r\n\tlet currentMin = currentDate.getMinutes();\r\n\t\r\n\treturn 'log_' + currentYear + currentMonth.toString().padStart(2, '0') + \r\n\t\t\t\t\t\t\t\t\tcurrentDay.toString().padStart(2, '0') +\r\n\t\t\t\t\t\t\t\t\tcurrentHour.toString().padStart(2, '0') +\r\n\t\t\t\t\t\t\t\t\tcurrentMin.toString().padStart(2, '0') +\r\n\t\t\t\t\t\t\t\t\t'_' +\r\n\t\t\t\t\t\t\t\t\tsequence + \r\n\t\t\t\t\t\t\t\t\t'_' +\r\n\t\t\t\t\t\t\t\t\t_common_script_utils__WEBPACK_IMPORTED_MODULE_0__.Utils.createUUID() +\r\n\t\t\t\t\t\t\t\t\t'_tmp.txt'\r\n}\r\n\r\n\r\n\r\nasync function createNewFileLogger(fileName) {\r\n\tlet logFileName = null;\r\n\tif (fileName == null)\t\r\n\t logFileName = createLogFileName(0);\r\n\telse\r\n\t\tlogFileName = fileName;\r\n\tlet logFileHandle =  await logDirectoryHandle.getFileHandle(logFileName, {create: true,});\r\n\tlet logFileAccessHandle = await logFileHandle.createSyncAccessHandle();\r\n\treturn new FileLogger(logFileName, logFileHandle, logFileAccessHandle)\r\n}\r\n\r\nasync function isOverSize(logFileHandle) {\r\n\treturn (await logFileHandle.getFile()).size >= logFileMaxSize;\r\n}\r\n\r\nasync function rollLogFileIfNeeded(logFileName, logFileHandle, logFileAccessHandle) {\t\r\n\tlet rolledLogFileName = null;\r\n\tlet rolledLogFileHandle = null;\r\n\tlet rolledLogFileAccessHandle = null;\r\n\t\t\t\r\n\tif (logFileName == null || !isInTheSameMinute(logFileName)) { //If is invalid\r\n\t\tif (logFileName != null && currentFileLog != null && currentFileLog.getLogFileName() == logFileName)\r\n\t\t\tawait closeFileLogger(currentFileLog.getLogFileName(), currentFileLog.getLogFileAccessHandle());\r\n\t\treturn await createNewFileLogger();\r\n\t} \r\n\telse {\r\n\t\tif (logFileHandle == null)\r\n\t\t\tlogFileHandle = await logDirectoryHandle.getFileHandle(logFileName, {create: true,});\r\n\t\t\r\n\t\tif (await isOverSize(logFileHandle)) { //If size exceed max\r\n\t\t\tlet sequenceNumber = logFileName.split('_')[2]; //extract sequence number\r\n\t\t \tlet newSequenceNumber = parseInt(sequenceNumber) + 1;\r\n\t\t \trolledLogFileName = createLogFileName(newSequenceNumber);\r\n\t\t} else {\r\n\t\t\trolledLogFileName = logFileName;\r\n\t\t}\t\r\n\t\t\r\n\t\tif (rolledLogFileName != logFileName) {\r\n\t\t\tif (logFileAccessHandle != null) {\r\n\t\t\t\tawait closeFileLogger(logFileName, logFileAccessHandle);\r\n\t\t\t}\r\n\t\t\treturn await createNewFileLogger(rolledLogFileName);\r\n\t\t}\telse {\r\n\t\t\trolledLogFileName = logFileName;\r\n\t\t\trolledLogFileHandle = logFileHandle;\r\n\t\t\t\r\n\t\t\tif (logFileAccessHandle == null)\r\n\t\t\t\trolledLogFileAccessHandle = await rolledLogFileHandle.createSyncAccessHandle();\r\n\t\t\telse\r\n\t\t\t\trolledLogFileAccessHandle = logFileAccessHandle;\r\n\t\t}\r\n\t}\r\n\treturn new FileLogger(rolledLogFileName, rolledLogFileHandle, rolledLogFileAccessHandle)\r\n}\r\n\r\nasync function tryToUseFileLogOnFileSystem() {\r\n\tlet logFileName = null;\r\n\tlet fileNameList = await getLogFileList(logDirectoryHandle); //list files in log directory\r\n\tfileNameList.sort();\r\n\tlogFileName = fileNameList[fileNameList.length - 1];\r\n\treturn  await rollLogFileIfNeeded(logFileName, null, null);\r\n}\r\n\r\nfunction parseDateFromLogFileName(logFileName) {\r\n\tlet logFileDate = logFileName.split('_')[1]\r\n\tlet logYear = logFileDate.substring(0, 4);\r\n\tlet logMonth = logFileDate.substring(4, 6);\r\n\tlet logDay = logFileDate.substring(6, 8);\r\n\tlet logHour = logFileDate.substring(8, 10);\r\n\tlet logMinute = logFileDate.substring(10, 12);\r\n\treturn new Date(logYear, logMonth -1, logDay, logHour, logMinute, 0, 0);\r\n}\r\n\r\nfunction parseUUIDFromLogFileName(logFileName) {\r\n\treturn logFileName.split('_')[3];\r\n}\r\n\r\nfunction isAnOldLog(logFileName) {\r\n\tlet dateNow = new Date();\r\n\tdateNow.setSeconds(0);\r\n\tdateNow.setMilliseconds(0);\r\n\tlet parsedDate = parseDateFromLogFileName(logFileName);\r\n\tlet diff = dateNow - parsedDate;\r\n\treturn diff > 60 * 1000 ;\r\n}\r\n\r\nasync function recoveryOldLogs() {\r\n\tconsole.log('--- recoveryOldLogs start');\r\n\tlet fileNameList = await getLogFileList(logDirectoryHandle); //list files in log directory\r\n\tfor (let logFileName of fileNameList) {\r\n\t\tif (!uploadQueue.includes(logFileName) && isAnOldLog(logFileName)) {\r\n\t\t\ttry {\r\n\t\t\t\tif (currentFileLog != null && currentFileLog.getLogFileName() == logFileName) //current log file is expired without logs\r\n\t\t\t\t\tawait closeFileLogger(currentFileLog.getLogFileName(), currentFileLog.getLogFileAccessHandle());\r\n\t\t\t\tawait writeLogEndIfNeeded(logFileName);\r\n\t\t\t\taddToUploadQueue(logFileName);\t\t\t\t\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(error)\r\n\t\t\t}\r\n\t\t\tconsole.log('--- recoverying' + logFileName);\r\n\t\t}\r\n\t}\r\n\tprocessUploadQueue();\r\n\tconsole.log('--- recoveryOldLogs end');\r\n}\r\n\r\nasync function tryToUseCurrentFileLogger() {\r\n\tlet logFileName = currentFileLog.getLogFileName();\r\n\tlet logFileHandle = currentFileLog.getLogFileHandle();\r\n\tlet logFileAccessHandle = currentFileLog.getLogFileAccessHandle();\r\n\treturn await rollLogFileIfNeeded(logFileName, logFileHandle, logFileAccessHandle);\r\n}\r\n\r\nasync function initFileLogger() {\r\n\tlet rootDirectory = await navigator.storage.getDirectory();\r\n\tlogDirectoryHandle = await rootDirectory.getDirectoryHandle('kioskJSLogs', {create: true,});\r\n\treturn await tryToUseFileLogOnFileSystem();\r\n}\r\n\r\nasync function closeFileLogger(fileName, fileAccessHandle) {\r\n\tif (fileAccessHandle != null) {\r\n\t\ttry {\r\n\t\t\tawait fileAccessHandle.flush();\r\n\t\t\tawait writeLogEnd(fileAccessHandle); \r\n\t\t\tawait fileAccessHandle.flush();\r\n\t\t\tawait fileAccessHandle.close();\r\n\t\t\taddToUploadQueue(fileName);\t\t\t\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('File is already closed. It may be recovery task has already closed it');\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nasync function configureFileLogger() {\t\r\n\tif (currentFileLog == null) {\r\n\t\tcurrentFileLog = await initFileLogger();\r\n\t\toldLogRecoveryTask.startWithImmediateExecution();\r\n\t}\r\n\telse  // Use last log\r\n\t\tcurrentFileLog = await tryToUseCurrentFileLogger();\r\n}\r\n\r\nasync function getLogFileList(logDirectoryHandle) {\r\n\tlet fileNames = [];\r\n\tfor await (const entry of logDirectoryHandle.values()) {\r\n\t\tif (entry.kind === 'file') {\r\n\t\t\tfileNames.push(entry.name);\r\n\t\t}\r\n\t}\r\n\treturn fileNames;\r\n}\r\n\r\nfunction isInTheSameMinute(logFileName) {\r\n\tlet result = false\r\n\tif (logFileName != null) {\r\n\t\tlet dateNow = new Date();\r\n\t\tdateNow.setSeconds(0);\r\n\t\tdateNow.setMilliseconds(0);\r\n\t\tlet parsedDate = parseDateFromLogFileName(logFileName);\r\n\t\tresult = (dateNow - parsedDate == 0);\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n\r\nasync function writeLogStart(logFileAccessHandle) {\r\n\tlet data = new TextEncoder().encode(LOGSTART_LABEL + '\\n');\r\n\tawait logFileAccessHandle.write(data);\r\n\treturn await logFileAccessHandle.flush();\r\n}\r\n\r\nasync function writeLogEnd(logFileAccessHandle) {\r\n\tlet fileSize = await logFileAccessHandle.getSize();\r\n\tlet data = new TextEncoder().encode('\\n' + LOGEND_LABEL);\r\n\tawait logFileAccessHandle.write(data, { at: fileSize - 2 });\r\n\treturn await logFileAccessHandle.flush();\r\n}\r\n\r\nasync function writeOnLogFile(logFileAccessHandle, request) {\r\n\tlet result = false;\r\n\tlet fileSize = await logFileAccessHandle.getSize();\r\n\tif (fileSize == 0) {\r\n\t\tawait writeLogStart(logFileAccessHandle);\r\n\t}\r\n\tfileSize = await logFileAccessHandle.getSize();\r\n\tlet rawText = request + ',' + '\\n';\r\n\tlet data = new TextEncoder().encode(rawText);\r\n\tresult = await logFileAccessHandle.write(data, { at: fileSize });\r\n\t//console.log(\"File size:\" + fileSize);\r\n\tresult = await logFileAccessHandle.flush();\r\n\treturn result;\r\n}\r\n\r\nasync function handleRequest(request) {\r\n\tlet result = false;\r\n\tswitch(request.type) {\r\n\t\tcase LOG_WORKER_MESSAGE_TYPE.LOG: {\r\n\t\t\tresult = await handleLog(request.payload);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase LOG_WORKER_MESSAGE_TYPE.CONFIG_PARAMS: {\r\n\t\t\tconfigureSnappAPI(request.payload);\r\n\t\t\tbreak;\t\t\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nasync function handleLog(request) {\r\n\tawait configureFileLogger();\r\n\tlet currentLogFileAccessHandle = currentFileLog.getLogFileAccessHandle();\r\n\treturn await writeOnLogFile(currentLogFileAccessHandle, JSON.stringify(request));\r\n}\r\n\r\nfunction configureSnappAPI(params) {\r\n\tsnappAPIParams = params;\r\n}\r\n\r\nasync function writeLogEndIfNeeded(fileName) {\r\n\tlet logFileHandle = await logDirectoryHandle.getFileHandle(fileName, {create: false,});\r\n\tlet file = await logFileHandle.getFile();\r\n\tlet start = file.size - 2 < 0 ? 0 : file.size - 2;\r\n\tconst blob = file.slice(start);\r\n\tconst text = await blob.text();\r\n\t\r\n\tif (text != LOGEND_LABEL) {\r\n\t\tlet logFileAccessHandle = await logFileHandle.createSyncAccessHandle();\r\n\t\tawait writeLogEnd(logFileAccessHandle);\r\n\t\tawait logFileAccessHandle.close();\r\n\t}\r\n}\r\n\r\nasync function addToUploadQueue(logFileName) {\r\n\tif (!uploadQueue.includes(logFileName))\r\n\t\tuploadQueue.push(logFileName);\r\n}\r\n\r\nfunction getUploadRequest(logFileName, base64Logs) {\r\n\tlet result = {\r\n\t\t'Header': {\r\n\t\t\t'WorkstationId': snappAPIParams.workstationId,\r\n\t\t\t'UserAccountId': snappAPIParams.userId,\r\n\t\t\t'Token': snappAPIParams.token\r\n\t\t},\r\n\t\t'Request': {\r\n\t\t\t'Command': 'ADD',\r\n\t\t\t'Add': {\r\n\t\t\t\t'UploadId':parseUUIDFromLogFileName(logFileName),\r\n\t\t\t\t'UploadType': 4,\r\n\t\t\t\t'MsgRequest': base64Logs\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn result;\r\n}\r\n\r\n//https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\r\nasync function uploadLogFile(logFileName) {\r\n\tlet logFileHandle = await logDirectoryHandle.getFileHandle(logFileName, {create: true,});\r\n\tlet file = await logFileHandle.getFile();\r\n\tlet logs = await file.text()\r\n\tlet base64Logs = await _common_script_utils__WEBPACK_IMPORTED_MODULE_0__.Utils.encodeBase64URLEncoded(logs);\r\n\t  \r\n\tconst urlEncodedBody = new URLSearchParams({\r\n\t\tmessage: JSON.stringify(getUploadRequest(logFileName, base64Logs))\r\n\t});\r\n\r\n\treturn new Promise((resolve, reject) => {\r\n\t    // Perform the API call using fetch or any other suitable method\r\n\t    fetch(snappAPIParams.apiUrl + '/service?cmd=UPLOAD&format=json', {\r\n\t      method: 'POST',\r\n\t      headers: {\r\n\t        'Content-Type': 'application/x-www-form-urlencoded'\r\n\t      },\r\n\t      body: urlEncodedBody\r\n\t    })\r\n\t    .then(response => {\r\n\t        if (response.ok) {\r\n\t          // Resolve the Promise with the response data\r\n\t          resolve(response.json());\r\n\t          \r\n\t          logFileHandle.remove(); //Remove if upload succeded\r\n\t        } else {\r\n\t\t\t\t\t\tconsole.error(error);\r\n\t          // Reject the Promise with an error message\r\n\t          reject('API call failed with status: ' + response.status);\r\n\t        }\r\n\t      })\r\n\t      .catch(error => {\r\n\t      \tconsole.error(error);\r\n\t        reject(error);\r\n\t      });\r\n  });\r\n}\r\n\r\nasync function processUploadQueue() {\r\n\twhile (uploadQueue.length > 0) {\r\n\t\ttry {\r\n\t\t\tlet uploadFile = uploadQueue.shift();\r\n\t\t\tawait uploadLogFile(uploadFile);\t\t\t\r\n\t\t} catch(e) {\r\n\t\t\tconsole.error(e);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nclass FileLogger {\r\n\t#logFileName;\r\n\t#logFileHandle;\r\n\t#logFileAccessHandle;\r\n\t\r\n\tconstructor(logFileName, logFileHandle, logFileAccessHandle) {\r\n\t   this.#logFileName = logFileName;\r\n\t   this.#logFileHandle = logFileHandle;\r\n\t   this.#logFileAccessHandle = logFileAccessHandle;\r\n\t}\r\n\t\r\n\tgetLogFileName() {\r\n\t\treturn this.#logFileName;\r\n\t}\r\n\t\r\n\tgetLogFileHandle() {\r\n\t\treturn this.#logFileHandle;\r\n\t}\r\n\t\r\n\tgetLogFileAccessHandle() {\r\n\t\treturn this.#logFileAccessHandle;\r\n\t}\r\n}\r\n\r\n\r\nclass LogWorkerMessage {\r\n\ttype;\r\n\tpayload;\r\n\t\r\n\tconstructor(type, payload) {\r\n\t\tthis.type = type;\r\n\t\tthis.payload = payload;\r\n\t}\r\n}\r\n\r\nconst LOG_WORKER_MESSAGE_TYPE = {\r\n\tLOG: 1,\r\n\tCONFIG_PARAMS: 2\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../common-script/snapp-log-worker.js\n");

/***/ }),

/***/ "../../../common-script/timed-task.js":
/*!********************************************!*\
  !*** ../../../common-script/timed-task.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TimedTask: () => (/* binding */ TimedTask)\n/* harmony export */ });\nclass TimedTask {\r\n\t#timer;\r\n\t#timeoutTime;\r\n\t#task;\r\n\t\r\n\tconstructor(timeoutTime, task) {\r\n\t\tthis.#timeoutTime = timeoutTime;\r\n\t\tthis.#task = task;\r\n\t}\r\n\t\r\n\tstartWithImmediateExecution() {\r\n\t\tthis.#executeTask();\r\n\t}\r\n\t\r\n\tstartTimer() {\r\n\t\tthis.reset();\r\n\t}\r\n\t\r\n\t#executeTask() {\r\n\t\tthis.#clearTimer();\r\n\t\ttry {\r\n\t\t\tthis.#task();\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tthis.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t#clearTimer() {\r\n\t\tif (this.#timer)\r\n\t\t\tclearTimeout(this.#timer);\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.#clearTimer();\r\n\t\tthis.#timer = setTimeout(() => this.#executeTask(), this.#timeoutTime);\r\n\t}\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vY29tbW9uLXNjcmlwdC90aW1lZC10YXNrLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8va2lvc2stY29udHJvbGxlci8uLi8uLi8uLi9jb21tb24tc2NyaXB0L3RpbWVkLXRhc2suanM/ZTVhOSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVGltZWRUYXNrIHtcclxuXHQjdGltZXI7XHJcblx0I3RpbWVvdXRUaW1lO1xyXG5cdCN0YXNrO1xyXG5cdFxyXG5cdGNvbnN0cnVjdG9yKHRpbWVvdXRUaW1lLCB0YXNrKSB7XHJcblx0XHR0aGlzLiN0aW1lb3V0VGltZSA9IHRpbWVvdXRUaW1lO1xyXG5cdFx0dGhpcy4jdGFzayA9IHRhc2s7XHJcblx0fVxyXG5cdFxyXG5cdHN0YXJ0V2l0aEltbWVkaWF0ZUV4ZWN1dGlvbigpIHtcclxuXHRcdHRoaXMuI2V4ZWN1dGVUYXNrKCk7XHJcblx0fVxyXG5cdFxyXG5cdHN0YXJ0VGltZXIoKSB7XHJcblx0XHR0aGlzLnJlc2V0KCk7XHJcblx0fVxyXG5cdFxyXG5cdCNleGVjdXRlVGFzaygpIHtcclxuXHRcdHRoaXMuI2NsZWFyVGltZXIoKTtcclxuXHRcdHRyeSB7XHJcblx0XHRcdHRoaXMuI3Rhc2soKTtcclxuXHRcdH1cclxuXHRcdGZpbmFsbHkge1xyXG5cdFx0XHR0aGlzLnJlc2V0KCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQjY2xlYXJUaW1lcigpIHtcclxuXHRcdGlmICh0aGlzLiN0aW1lcilcclxuXHRcdFx0Y2xlYXJUaW1lb3V0KHRoaXMuI3RpbWVyKTtcclxuXHR9XHJcblxyXG5cdHJlc2V0KCkge1xyXG5cdFx0dGhpcy4jY2xlYXJUaW1lcigpO1xyXG5cdFx0dGhpcy4jdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuI2V4ZWN1dGVUYXNrKCksIHRoaXMuI3RpbWVvdXRUaW1lKTtcclxuXHR9XHJcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../common-script/timed-task.js\n");

/***/ }),

/***/ "../../../common-script/utils.js":
/*!***************************************!*\
  !*** ../../../common-script/utils.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Utils: () => (/* binding */ Utils)\n/* harmony export */ });\nclass Utils {\r\n\tstatic beautifyJSONString(str) {\r\n\t\treturn JSON.stringify(str, null, 4)\r\n\t}\t\r\n\r\n\tstatic decodeBase64(str) {\r\n\t\tif (str[str.length-1] === \"=\")\r\n    \tstr = str.slice(0,-1);\r\n\t\treturn atob(str);\r\n\t}\r\n\r\n\tstatic encodeBase64(str) {\r\n\t\treturn btoa(str);\r\n\t}\r\n\t\r\n\tstatic createUUID() {\r\n    let dt = new Date().getTime();\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n      let r = (dt + Math.random() * 16) % 16 | 0;\r\n      dt = Math.floor(dt / 16);\r\n      return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n    });\r\n  }\r\n  \r\n\tstatic async encodeBase64URLEncoded(str) {\r\n\t\tlet blob = new Blob([str], { type: 'text/plain; charset=UTF-8' });\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\tlet reader = new FileReader();\r\n\t\t\t\treader.onloadend = () => {\r\n\t\t\t\t\tlet base64data = reader.result.split(',')[1];\r\n\t\t\t\t\tresolve(base64data);\r\n\t\t\t\t};\r\n\t\t\treader.onerror = reject;\r\n\t\t\treader.readAsDataURL(blob);\r\n\t\t});\r\n\t}\r\n\t\r\n\tstatic async streamToBase64(stream) {\r\n    // Convert the stream to blob\r\n    const blob = await new Response(stream).blob();\r\n\r\n    // Create a FileReader instance\r\n    const reader = new FileReader();\r\n\r\n    // Convert the blob to base64\r\n    return new Promise((resolve, reject) => {\r\n        reader.onloadend = () => resolve(reader.result.split(',')[1]); // Remove the Data URL prefix\r\n        reader.onerror = reject;\r\n        reader.readAsDataURL(blob);\r\n    });\r\n\t}\t\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vY29tbW9uLXNjcmlwdC91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixtQkFBbUIsZ0JBQWdCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RTtBQUN2RTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9raW9zay1jb250cm9sbGVyLy4uLy4uLy4uL2NvbW1vbi1zY3JpcHQvdXRpbHMuanM/NjE2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVXRpbHMge1xyXG5cdHN0YXRpYyBiZWF1dGlmeUpTT05TdHJpbmcoc3RyKSB7XHJcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3RyLCBudWxsLCA0KVxyXG5cdH1cdFxyXG5cclxuXHRzdGF0aWMgZGVjb2RlQmFzZTY0KHN0cikge1xyXG5cdFx0aWYgKHN0cltzdHIubGVuZ3RoLTFdID09PSBcIj1cIilcclxuICAgIFx0c3RyID0gc3RyLnNsaWNlKDAsLTEpO1xyXG5cdFx0cmV0dXJuIGF0b2Ioc3RyKTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBlbmNvZGVCYXNlNjQoc3RyKSB7XHJcblx0XHRyZXR1cm4gYnRvYShzdHIpO1xyXG5cdH1cclxuXHRcclxuXHRzdGF0aWMgY3JlYXRlVVVJRCgpIHtcclxuICAgIGxldCBkdCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24oYykge1xyXG4gICAgICBsZXQgciA9IChkdCArIE1hdGgucmFuZG9tKCkgKiAxNikgJSAxNiB8IDA7XHJcbiAgICAgIGR0ID0gTWF0aC5mbG9vcihkdCAvIDE2KTtcclxuICAgICAgcmV0dXJuIChjID09ICd4JyA/IHIgOiAociAmIDB4MyB8IDB4OCkpLnRvU3RyaW5nKDE2KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuXHRzdGF0aWMgYXN5bmMgZW5jb2RlQmFzZTY0VVJMRW5jb2RlZChzdHIpIHtcclxuXHRcdGxldCBibG9iID0gbmV3IEJsb2IoW3N0cl0sIHsgdHlwZTogJ3RleHQvcGxhaW47IGNoYXJzZXQ9VVRGLTgnIH0pO1xyXG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0XHRcdGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG5cdFx0XHRcdHJlYWRlci5vbmxvYWRlbmQgPSAoKSA9PiB7XHJcblx0XHRcdFx0XHRsZXQgYmFzZTY0ZGF0YSA9IHJlYWRlci5yZXN1bHQuc3BsaXQoJywnKVsxXTtcclxuXHRcdFx0XHRcdHJlc29sdmUoYmFzZTY0ZGF0YSk7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0cmVhZGVyLm9uZXJyb3IgPSByZWplY3Q7XHJcblx0XHRcdHJlYWRlci5yZWFkQXNEYXRhVVJMKGJsb2IpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdFxyXG5cdHN0YXRpYyBhc3luYyBzdHJlYW1Ub0Jhc2U2NChzdHJlYW0pIHtcclxuICAgIC8vIENvbnZlcnQgdGhlIHN0cmVhbSB0byBibG9iXHJcbiAgICBjb25zdCBibG9iID0gYXdhaXQgbmV3IFJlc3BvbnNlKHN0cmVhbSkuYmxvYigpO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhIEZpbGVSZWFkZXIgaW5zdGFuY2VcclxuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcblxyXG4gICAgLy8gQ29udmVydCB0aGUgYmxvYiB0byBiYXNlNjRcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgcmVhZGVyLm9ubG9hZGVuZCA9ICgpID0+IHJlc29sdmUocmVhZGVyLnJlc3VsdC5zcGxpdCgnLCcpWzFdKTsgLy8gUmVtb3ZlIHRoZSBEYXRhIFVSTCBwcmVmaXhcclxuICAgICAgICByZWFkZXIub25lcnJvciA9IHJlamVjdDtcclxuICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChibG9iKTtcclxuICAgIH0pO1xyXG5cdH1cdFxyXG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../common-script/utils.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("../../../common-script/snapp-log-worker.js");
/******/ 	globalThis["kiosk-controller"] = __webpack_exports__;
/******/ 	
/******/ })()
;